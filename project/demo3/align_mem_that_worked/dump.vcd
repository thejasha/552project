$date
	Sun Dec 15 13:25:24 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var reg 1 :! clk $end
$var reg 1 ;! rst $end
$var wire 1 8! err $end
$var integer 32 <! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =! err $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' branching_out_MEM_WB $end
$var wire 1 a' err1 $end
$var wire 1 b' branchNOP $end
$var wire 1 c' jumpNOP $end
$var wire 1 d' btake $end
$var wire 1 e' MUXFOUR [15] $end
$var wire 1 f' MUXFOUR [14] $end
$var wire 1 g' MUXFOUR [13] $end
$var wire 1 h' MUXFOUR [12] $end
$var wire 1 i' MUXFOUR [11] $end
$var wire 1 j' MUXFOUR [10] $end
$var wire 1 k' MUXFOUR [9] $end
$var wire 1 l' MUXFOUR [8] $end
$var wire 1 m' MUXFOUR [7] $end
$var wire 1 n' MUXFOUR [6] $end
$var wire 1 o' MUXFOUR [5] $end
$var wire 1 p' MUXFOUR [4] $end
$var wire 1 q' MUXFOUR [3] $end
$var wire 1 r' MUXFOUR [2] $end
$var wire 1 s' MUXFOUR [1] $end
$var wire 1 t' MUXFOUR [0] $end
$var wire 1 u' jmpthng $end
$var wire 1 v' jmpthng2 $end
$var wire 1 w' MUX_OUT_ONE [15] $end
$var wire 1 x' MUX_OUT_ONE [14] $end
$var wire 1 y' MUX_OUT_ONE [13] $end
$var wire 1 z' MUX_OUT_ONE [12] $end
$var wire 1 {' MUX_OUT_ONE [11] $end
$var wire 1 |' MUX_OUT_ONE [10] $end
$var wire 1 }' MUX_OUT_ONE [9] $end
$var wire 1 ~' MUX_OUT_ONE [8] $end
$var wire 1 !( MUX_OUT_ONE [7] $end
$var wire 1 "( MUX_OUT_ONE [6] $end
$var wire 1 #( MUX_OUT_ONE [5] $end
$var wire 1 $( MUX_OUT_ONE [4] $end
$var wire 1 %( MUX_OUT_ONE [3] $end
$var wire 1 &( MUX_OUT_ONE [2] $end
$var wire 1 '( MUX_OUT_ONE [1] $end
$var wire 1 (( MUX_OUT_ONE [0] $end
$var wire 1 )( MUX_OUT_TWO [15] $end
$var wire 1 *( MUX_OUT_TWO [14] $end
$var wire 1 +( MUX_OUT_TWO [13] $end
$var wire 1 ,( MUX_OUT_TWO [12] $end
$var wire 1 -( MUX_OUT_TWO [11] $end
$var wire 1 .( MUX_OUT_TWO [10] $end
$var wire 1 /( MUX_OUT_TWO [9] $end
$var wire 1 0( MUX_OUT_TWO [8] $end
$var wire 1 1( MUX_OUT_TWO [7] $end
$var wire 1 2( MUX_OUT_TWO [6] $end
$var wire 1 3( MUX_OUT_TWO [5] $end
$var wire 1 4( MUX_OUT_TWO [4] $end
$var wire 1 5( MUX_OUT_TWO [3] $end
$var wire 1 6( MUX_OUT_TWO [2] $end
$var wire 1 7( MUX_OUT_TWO [1] $end
$var wire 1 8( MUX_OUT_TWO [0] $end
$var wire 1 9( MUXTHREE [15] $end
$var wire 1 :( MUXTHREE [14] $end
$var wire 1 ;( MUXTHREE [13] $end
$var wire 1 <( MUXTHREE [12] $end
$var wire 1 =( MUXTHREE [11] $end
$var wire 1 >( MUXTHREE [10] $end
$var wire 1 ?( MUXTHREE [9] $end
$var wire 1 @( MUXTHREE [8] $end
$var wire 1 A( MUXTHREE [7] $end
$var wire 1 B( MUXTHREE [6] $end
$var wire 1 C( MUXTHREE [5] $end
$var wire 1 D( MUXTHREE [4] $end
$var wire 1 E( MUXTHREE [3] $end
$var wire 1 F( MUXTHREE [2] $end
$var wire 1 G( MUXTHREE [1] $end
$var wire 1 H( MUXTHREE [0] $end
$var wire 1 I( PC_NO_PLUS_TWO [15] $end
$var wire 1 J( PC_NO_PLUS_TWO [14] $end
$var wire 1 K( PC_NO_PLUS_TWO [13] $end
$var wire 1 L( PC_NO_PLUS_TWO [12] $end
$var wire 1 M( PC_NO_PLUS_TWO [11] $end
$var wire 1 N( PC_NO_PLUS_TWO [10] $end
$var wire 1 O( PC_NO_PLUS_TWO [9] $end
$var wire 1 P( PC_NO_PLUS_TWO [8] $end
$var wire 1 Q( PC_NO_PLUS_TWO [7] $end
$var wire 1 R( PC_NO_PLUS_TWO [6] $end
$var wire 1 S( PC_NO_PLUS_TWO [5] $end
$var wire 1 T( PC_NO_PLUS_TWO [4] $end
$var wire 1 U( PC_NO_PLUS_TWO [3] $end
$var wire 1 V( PC_NO_PLUS_TWO [2] $end
$var wire 1 W( PC_NO_PLUS_TWO [1] $end
$var wire 1 X( PC_NO_PLUS_TWO [0] $end
$var wire 1 Y( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 Z( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 [( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 \( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 ]( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 ^( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 _( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 `( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 a( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 b( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 c( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 d( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 e( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 f( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 g( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 h( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 i( SendNop $end
$var wire 1 j( muxonecond $end
$var wire 1 k( branchfail $end
$var wire 1 l( bthng2 $end
$var wire 1 m( muxtwcond $end
$var wire 1 n( inst_again [15] $end
$var wire 1 o( inst_again [14] $end
$var wire 1 p( inst_again [13] $end
$var wire 1 q( inst_again [12] $end
$var wire 1 r( inst_again [11] $end
$var wire 1 s( inst_again [10] $end
$var wire 1 t( inst_again [9] $end
$var wire 1 u( inst_again [8] $end
$var wire 1 v( inst_again [7] $end
$var wire 1 w( inst_again [6] $end
$var wire 1 x( inst_again [5] $end
$var wire 1 y( inst_again [4] $end
$var wire 1 z( inst_again [3] $end
$var wire 1 {( inst_again [2] $end
$var wire 1 |( inst_again [1] $end
$var wire 1 }( inst_again [0] $end
$var wire 1 ~( jalinf $end
$var wire 1 !) jalind $end
$var wire 1 ") jaline $end
$var wire 1 #) jalinm $end
$var wire 1 $) jalinw $end
$var wire 1 %) instagaincnd $end
$var wire 1 &) pcagaincnd $end
$var wire 1 ') pcagain [15] $end
$var wire 1 () pcagain [14] $end
$var wire 1 )) pcagain [13] $end
$var wire 1 *) pcagain [12] $end
$var wire 1 +) pcagain [11] $end
$var wire 1 ,) pcagain [10] $end
$var wire 1 -) pcagain [9] $end
$var wire 1 .) pcagain [8] $end
$var wire 1 /) pcagain [7] $end
$var wire 1 0) pcagain [6] $end
$var wire 1 1) pcagain [5] $end
$var wire 1 2) pcagain [4] $end
$var wire 1 3) pcagain [3] $end
$var wire 1 4) pcagain [2] $end
$var wire 1 5) pcagain [1] $end
$var wire 1 6) pcagain [0] $end
$var wire 1 7) fetch_stall $end
$var wire 1 8) fetch_stall_to_decode $end
$var wire 1 9) MemWrt_Decode_Out $end
$var wire 1 :) RegWrt_Decode_Out $end
$var wire 1 ;) NOP_Out_ID_EX $end
$var wire 1 <) NOP_Out_ID_MEM $end
$var wire 1 =) NOP_Out_ID_WB $end
$var wire 1 >) branching_Decode_Out $end
$var wire 1 ?) Nop_or_Branch $end
$var wire 1 @) bNOP_OUTIDEX $end
$var wire 1 A) nopmux [15] $end
$var wire 1 B) nopmux [14] $end
$var wire 1 C) nopmux [13] $end
$var wire 1 D) nopmux [12] $end
$var wire 1 E) nopmux [11] $end
$var wire 1 F) nopmux [10] $end
$var wire 1 G) nopmux [9] $end
$var wire 1 H) nopmux [8] $end
$var wire 1 I) nopmux [7] $end
$var wire 1 J) nopmux [6] $end
$var wire 1 K) nopmux [5] $end
$var wire 1 L) nopmux [4] $end
$var wire 1 M) nopmux [3] $end
$var wire 1 N) nopmux [2] $end
$var wire 1 O) nopmux [1] $end
$var wire 1 P) nopmux [0] $end
$var wire 1 Q) temp_mem_halt $end

$scope module my_clkrst $end
$var reg 1 R) clk $end
$var reg 1 S) rst $end
$var wire 1 T) err $end
$var integer 32 U) cycle_count $end
$upscope $end

$scope module btaken $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V) state $end
$upscope $end

$scope module jumper $end
$var wire 1 u' q $end
$var wire 1 m% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W) state $end
$upscope $end

$scope module jumper2 $end
$var wire 1 v' q $end
$var wire 1 l% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X) state $end
$upscope $end

$scope module bumper2 $end
$var wire 1 l( q $end
$var wire 1 k( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y) state $end
$upscope $end

$scope module jalthing $end
$var wire 1 !) q $end
$var wire 1 ~( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z) state $end
$upscope $end

$scope module jalthing2 $end
$var wire 1 ") q $end
$var wire 1 [) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \) state $end
$upscope $end

$scope module jalthing3 $end
$var wire 1 #) q $end
$var wire 1 ") d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]) state $end
$upscope $end

$scope module jalthing4 $end
$var wire 1 $) q $end
$var wire 1 #) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^) state $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 )( PC_in [15] $end
$var wire 1 *( PC_in [14] $end
$var wire 1 +( PC_in [13] $end
$var wire 1 ,( PC_in [12] $end
$var wire 1 -( PC_in [11] $end
$var wire 1 .( PC_in [10] $end
$var wire 1 /( PC_in [9] $end
$var wire 1 0( PC_in [8] $end
$var wire 1 1( PC_in [7] $end
$var wire 1 2( PC_in [6] $end
$var wire 1 3( PC_in [5] $end
$var wire 1 4( PC_in [4] $end
$var wire 1 5( PC_in [3] $end
$var wire 1 6( PC_in [2] $end
$var wire 1 7( PC_in [1] $end
$var wire 1 8( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 I( pc_temp [15] $end
$var wire 1 J( pc_temp [14] $end
$var wire 1 K( pc_temp [13] $end
$var wire 1 L( pc_temp [12] $end
$var wire 1 M( pc_temp [11] $end
$var wire 1 N( pc_temp [10] $end
$var wire 1 O( pc_temp [9] $end
$var wire 1 P( pc_temp [8] $end
$var wire 1 Q( pc_temp [7] $end
$var wire 1 R( pc_temp [6] $end
$var wire 1 S( pc_temp [5] $end
$var wire 1 T( pc_temp [4] $end
$var wire 1 U( pc_temp [3] $end
$var wire 1 V( pc_temp [2] $end
$var wire 1 W( pc_temp [1] $end
$var wire 1 X( pc_temp [0] $end
$var wire 1 7) fetch_stall $end

$scope module fa $end
$var wire 1 I( A [15] $end
$var wire 1 J( A [14] $end
$var wire 1 K( A [13] $end
$var wire 1 L( A [12] $end
$var wire 1 M( A [11] $end
$var wire 1 N( A [10] $end
$var wire 1 O( A [9] $end
$var wire 1 P( A [8] $end
$var wire 1 Q( A [7] $end
$var wire 1 R( A [6] $end
$var wire 1 S( A [5] $end
$var wire 1 T( A [4] $end
$var wire 1 U( A [3] $end
$var wire 1 V( A [2] $end
$var wire 1 W( A [1] $end
$var wire 1 X( A [0] $end
$var wire 1 _) B [15] $end
$var wire 1 `) B [14] $end
$var wire 1 a) B [13] $end
$var wire 1 b) B [12] $end
$var wire 1 c) B [11] $end
$var wire 1 d) B [10] $end
$var wire 1 e) B [9] $end
$var wire 1 f) B [8] $end
$var wire 1 g) B [7] $end
$var wire 1 h) B [6] $end
$var wire 1 i) B [5] $end
$var wire 1 j) B [4] $end
$var wire 1 k) B [3] $end
$var wire 1 l) B [2] $end
$var wire 1 m) B [1] $end
$var wire 1 n) B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 o) Cout $end
$var wire 1 p) Cout0 $end
$var wire 1 q) Cout1 $end
$var wire 1 r) Cout2 $end
$var wire 1 s) Cin $end

$scope module f1 $end
$var wire 1 U( A [3] $end
$var wire 1 V( A [2] $end
$var wire 1 W( A [1] $end
$var wire 1 X( A [0] $end
$var wire 1 k) B [3] $end
$var wire 1 l) B [2] $end
$var wire 1 m) B [1] $end
$var wire 1 n) B [0] $end
$var wire 1 s) Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 p) Cout $end
$var wire 1 t) Cout0 $end
$var wire 1 u) Cout1 $end
$var wire 1 v) Cout2 $end

$scope module f1 $end
$var wire 1 X( A $end
$var wire 1 n) B $end
$var wire 1 s) Cin $end
$var wire 1 0" S $end
$var wire 1 t) Cout $end
$var wire 1 w) xor_AB $end
$var wire 1 x) xor_ABCin $end
$var wire 1 y) NAND_AB $end
$var wire 1 z) not_NAND_AB $end
$var wire 1 {) NAND_Cin_xor_AB $end
$var wire 1 |) not_NAND_Cin_xor_AB $end
$var wire 1 }) NOR_2NAND $end
$var wire 1 ~) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 X( in1 $end
$var wire 1 n) in2 $end
$var wire 1 w) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w) in1 $end
$var wire 1 s) in2 $end
$var wire 1 x) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 X( in1 $end
$var wire 1 n) in2 $end
$var wire 1 y) out $end
$upscope $end

$scope module not1 $end
$var wire 1 y) in1 $end
$var wire 1 z) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s) in1 $end
$var wire 1 w) in2 $end
$var wire 1 {) out $end
$upscope $end

$scope module not2 $end
$var wire 1 {) in1 $end
$var wire 1 |) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z) in1 $end
$var wire 1 |) in2 $end
$var wire 1 }) out $end
$upscope $end

$scope module not3 $end
$var wire 1 }) in1 $end
$var wire 1 ~) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 W( A $end
$var wire 1 m) B $end
$var wire 1 t) Cin $end
$var wire 1 /" S $end
$var wire 1 u) Cout $end
$var wire 1 !* xor_AB $end
$var wire 1 "* xor_ABCin $end
$var wire 1 #* NAND_AB $end
$var wire 1 $* not_NAND_AB $end
$var wire 1 %* NAND_Cin_xor_AB $end
$var wire 1 &* not_NAND_Cin_xor_AB $end
$var wire 1 '* NOR_2NAND $end
$var wire 1 (* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 W( in1 $end
$var wire 1 m) in2 $end
$var wire 1 !* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 !* in1 $end
$var wire 1 t) in2 $end
$var wire 1 "* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 W( in1 $end
$var wire 1 m) in2 $end
$var wire 1 #* out $end
$upscope $end

$scope module not1 $end
$var wire 1 #* in1 $end
$var wire 1 $* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t) in1 $end
$var wire 1 !* in2 $end
$var wire 1 %* out $end
$upscope $end

$scope module not2 $end
$var wire 1 %* in1 $end
$var wire 1 &* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $* in1 $end
$var wire 1 &* in2 $end
$var wire 1 '* out $end
$upscope $end

$scope module not3 $end
$var wire 1 '* in1 $end
$var wire 1 (* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 V( A $end
$var wire 1 l) B $end
$var wire 1 u) Cin $end
$var wire 1 ." S $end
$var wire 1 v) Cout $end
$var wire 1 )* xor_AB $end
$var wire 1 ** xor_ABCin $end
$var wire 1 +* NAND_AB $end
$var wire 1 ,* not_NAND_AB $end
$var wire 1 -* NAND_Cin_xor_AB $end
$var wire 1 .* not_NAND_Cin_xor_AB $end
$var wire 1 /* NOR_2NAND $end
$var wire 1 0* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 V( in1 $end
$var wire 1 l) in2 $end
$var wire 1 )* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 )* in1 $end
$var wire 1 u) in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module nand1 $end
$var wire 1 V( in1 $end
$var wire 1 l) in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module not1 $end
$var wire 1 +* in1 $end
$var wire 1 ,* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 u) in1 $end
$var wire 1 )* in2 $end
$var wire 1 -* out $end
$upscope $end

$scope module not2 $end
$var wire 1 -* in1 $end
$var wire 1 .* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ,* in1 $end
$var wire 1 .* in2 $end
$var wire 1 /* out $end
$upscope $end

$scope module not3 $end
$var wire 1 /* in1 $end
$var wire 1 0* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 U( A $end
$var wire 1 k) B $end
$var wire 1 v) Cin $end
$var wire 1 -" S $end
$var wire 1 p) Cout $end
$var wire 1 1* xor_AB $end
$var wire 1 2* xor_ABCin $end
$var wire 1 3* NAND_AB $end
$var wire 1 4* not_NAND_AB $end
$var wire 1 5* NAND_Cin_xor_AB $end
$var wire 1 6* not_NAND_Cin_xor_AB $end
$var wire 1 7* NOR_2NAND $end
$var wire 1 8* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 U( in1 $end
$var wire 1 k) in2 $end
$var wire 1 1* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 1* in1 $end
$var wire 1 v) in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 U( in1 $end
$var wire 1 k) in2 $end
$var wire 1 3* out $end
$upscope $end

$scope module not1 $end
$var wire 1 3* in1 $end
$var wire 1 4* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v) in1 $end
$var wire 1 1* in2 $end
$var wire 1 5* out $end
$upscope $end

$scope module not2 $end
$var wire 1 5* in1 $end
$var wire 1 6* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 4* in1 $end
$var wire 1 6* in2 $end
$var wire 1 7* out $end
$upscope $end

$scope module not3 $end
$var wire 1 7* in1 $end
$var wire 1 8* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 Q( A [3] $end
$var wire 1 R( A [2] $end
$var wire 1 S( A [1] $end
$var wire 1 T( A [0] $end
$var wire 1 g) B [3] $end
$var wire 1 h) B [2] $end
$var wire 1 i) B [1] $end
$var wire 1 j) B [0] $end
$var wire 1 p) Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 q) Cout $end
$var wire 1 9* Cout0 $end
$var wire 1 :* Cout1 $end
$var wire 1 ;* Cout2 $end

$scope module f1 $end
$var wire 1 T( A $end
$var wire 1 j) B $end
$var wire 1 p) Cin $end
$var wire 1 ," S $end
$var wire 1 9* Cout $end
$var wire 1 <* xor_AB $end
$var wire 1 =* xor_ABCin $end
$var wire 1 >* NAND_AB $end
$var wire 1 ?* not_NAND_AB $end
$var wire 1 @* NAND_Cin_xor_AB $end
$var wire 1 A* not_NAND_Cin_xor_AB $end
$var wire 1 B* NOR_2NAND $end
$var wire 1 C* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 T( in1 $end
$var wire 1 j) in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <* in1 $end
$var wire 1 p) in2 $end
$var wire 1 =* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 T( in1 $end
$var wire 1 j) in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not1 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p) in1 $end
$var wire 1 <* in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not2 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?* in1 $end
$var wire 1 A* in2 $end
$var wire 1 B* out $end
$upscope $end

$scope module not3 $end
$var wire 1 B* in1 $end
$var wire 1 C* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 S( A $end
$var wire 1 i) B $end
$var wire 1 9* Cin $end
$var wire 1 +" S $end
$var wire 1 :* Cout $end
$var wire 1 D* xor_AB $end
$var wire 1 E* xor_ABCin $end
$var wire 1 F* NAND_AB $end
$var wire 1 G* not_NAND_AB $end
$var wire 1 H* NAND_Cin_xor_AB $end
$var wire 1 I* not_NAND_Cin_xor_AB $end
$var wire 1 J* NOR_2NAND $end
$var wire 1 K* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 S( in1 $end
$var wire 1 i) in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 D* in1 $end
$var wire 1 9* in2 $end
$var wire 1 E* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 S( in1 $end
$var wire 1 i) in2 $end
$var wire 1 F* out $end
$upscope $end

$scope module not1 $end
$var wire 1 F* in1 $end
$var wire 1 G* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9* in1 $end
$var wire 1 D* in2 $end
$var wire 1 H* out $end
$upscope $end

$scope module not2 $end
$var wire 1 H* in1 $end
$var wire 1 I* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 G* in1 $end
$var wire 1 I* in2 $end
$var wire 1 J* out $end
$upscope $end

$scope module not3 $end
$var wire 1 J* in1 $end
$var wire 1 K* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 R( A $end
$var wire 1 h) B $end
$var wire 1 :* Cin $end
$var wire 1 *" S $end
$var wire 1 ;* Cout $end
$var wire 1 L* xor_AB $end
$var wire 1 M* xor_ABCin $end
$var wire 1 N* NAND_AB $end
$var wire 1 O* not_NAND_AB $end
$var wire 1 P* NAND_Cin_xor_AB $end
$var wire 1 Q* not_NAND_Cin_xor_AB $end
$var wire 1 R* NOR_2NAND $end
$var wire 1 S* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 R( in1 $end
$var wire 1 h) in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 L* in1 $end
$var wire 1 :* in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 R( in1 $end
$var wire 1 h) in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module not1 $end
$var wire 1 N* in1 $end
$var wire 1 O* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :* in1 $end
$var wire 1 L* in2 $end
$var wire 1 P* out $end
$upscope $end

$scope module not2 $end
$var wire 1 P* in1 $end
$var wire 1 Q* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 O* in1 $end
$var wire 1 Q* in2 $end
$var wire 1 R* out $end
$upscope $end

$scope module not3 $end
$var wire 1 R* in1 $end
$var wire 1 S* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 Q( A $end
$var wire 1 g) B $end
$var wire 1 ;* Cin $end
$var wire 1 )" S $end
$var wire 1 q) Cout $end
$var wire 1 T* xor_AB $end
$var wire 1 U* xor_ABCin $end
$var wire 1 V* NAND_AB $end
$var wire 1 W* not_NAND_AB $end
$var wire 1 X* NAND_Cin_xor_AB $end
$var wire 1 Y* not_NAND_Cin_xor_AB $end
$var wire 1 Z* NOR_2NAND $end
$var wire 1 [* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 Q( in1 $end
$var wire 1 g) in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 T* in1 $end
$var wire 1 ;* in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Q( in1 $end
$var wire 1 g) in2 $end
$var wire 1 V* out $end
$upscope $end

$scope module not1 $end
$var wire 1 V* in1 $end
$var wire 1 W* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;* in1 $end
$var wire 1 T* in2 $end
$var wire 1 X* out $end
$upscope $end

$scope module not2 $end
$var wire 1 X* in1 $end
$var wire 1 Y* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 W* in1 $end
$var wire 1 Y* in2 $end
$var wire 1 Z* out $end
$upscope $end

$scope module not3 $end
$var wire 1 Z* in1 $end
$var wire 1 [* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 M( A [3] $end
$var wire 1 N( A [2] $end
$var wire 1 O( A [1] $end
$var wire 1 P( A [0] $end
$var wire 1 c) B [3] $end
$var wire 1 d) B [2] $end
$var wire 1 e) B [1] $end
$var wire 1 f) B [0] $end
$var wire 1 q) Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 r) Cout $end
$var wire 1 \* Cout0 $end
$var wire 1 ]* Cout1 $end
$var wire 1 ^* Cout2 $end

$scope module f1 $end
$var wire 1 P( A $end
$var wire 1 f) B $end
$var wire 1 q) Cin $end
$var wire 1 (" S $end
$var wire 1 \* Cout $end
$var wire 1 _* xor_AB $end
$var wire 1 `* xor_ABCin $end
$var wire 1 a* NAND_AB $end
$var wire 1 b* not_NAND_AB $end
$var wire 1 c* NAND_Cin_xor_AB $end
$var wire 1 d* not_NAND_Cin_xor_AB $end
$var wire 1 e* NOR_2NAND $end
$var wire 1 f* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 P( in1 $end
$var wire 1 f) in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 _* in1 $end
$var wire 1 q) in2 $end
$var wire 1 `* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 P( in1 $end
$var wire 1 f) in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module not1 $end
$var wire 1 a* in1 $end
$var wire 1 b* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q) in1 $end
$var wire 1 _* in2 $end
$var wire 1 c* out $end
$upscope $end

$scope module not2 $end
$var wire 1 c* in1 $end
$var wire 1 d* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 b* in1 $end
$var wire 1 d* in2 $end
$var wire 1 e* out $end
$upscope $end

$scope module not3 $end
$var wire 1 e* in1 $end
$var wire 1 f* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 O( A $end
$var wire 1 e) B $end
$var wire 1 \* Cin $end
$var wire 1 '" S $end
$var wire 1 ]* Cout $end
$var wire 1 g* xor_AB $end
$var wire 1 h* xor_ABCin $end
$var wire 1 i* NAND_AB $end
$var wire 1 j* not_NAND_AB $end
$var wire 1 k* NAND_Cin_xor_AB $end
$var wire 1 l* not_NAND_Cin_xor_AB $end
$var wire 1 m* NOR_2NAND $end
$var wire 1 n* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 O( in1 $end
$var wire 1 e) in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 g* in1 $end
$var wire 1 \* in2 $end
$var wire 1 h* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 O( in1 $end
$var wire 1 e) in2 $end
$var wire 1 i* out $end
$upscope $end

$scope module not1 $end
$var wire 1 i* in1 $end
$var wire 1 j* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \* in1 $end
$var wire 1 g* in2 $end
$var wire 1 k* out $end
$upscope $end

$scope module not2 $end
$var wire 1 k* in1 $end
$var wire 1 l* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 j* in1 $end
$var wire 1 l* in2 $end
$var wire 1 m* out $end
$upscope $end

$scope module not3 $end
$var wire 1 m* in1 $end
$var wire 1 n* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 N( A $end
$var wire 1 d) B $end
$var wire 1 ]* Cin $end
$var wire 1 &" S $end
$var wire 1 ^* Cout $end
$var wire 1 o* xor_AB $end
$var wire 1 p* xor_ABCin $end
$var wire 1 q* NAND_AB $end
$var wire 1 r* not_NAND_AB $end
$var wire 1 s* NAND_Cin_xor_AB $end
$var wire 1 t* not_NAND_Cin_xor_AB $end
$var wire 1 u* NOR_2NAND $end
$var wire 1 v* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 N( in1 $end
$var wire 1 d) in2 $end
$var wire 1 o* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 o* in1 $end
$var wire 1 ]* in2 $end
$var wire 1 p* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 N( in1 $end
$var wire 1 d) in2 $end
$var wire 1 q* out $end
$upscope $end

$scope module not1 $end
$var wire 1 q* in1 $end
$var wire 1 r* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]* in1 $end
$var wire 1 o* in2 $end
$var wire 1 s* out $end
$upscope $end

$scope module not2 $end
$var wire 1 s* in1 $end
$var wire 1 t* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 r* in1 $end
$var wire 1 t* in2 $end
$var wire 1 u* out $end
$upscope $end

$scope module not3 $end
$var wire 1 u* in1 $end
$var wire 1 v* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 M( A $end
$var wire 1 c) B $end
$var wire 1 ^* Cin $end
$var wire 1 %" S $end
$var wire 1 r) Cout $end
$var wire 1 w* xor_AB $end
$var wire 1 x* xor_ABCin $end
$var wire 1 y* NAND_AB $end
$var wire 1 z* not_NAND_AB $end
$var wire 1 {* NAND_Cin_xor_AB $end
$var wire 1 |* not_NAND_Cin_xor_AB $end
$var wire 1 }* NOR_2NAND $end
$var wire 1 ~* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 M( in1 $end
$var wire 1 c) in2 $end
$var wire 1 w* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w* in1 $end
$var wire 1 ^* in2 $end
$var wire 1 x* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 M( in1 $end
$var wire 1 c) in2 $end
$var wire 1 y* out $end
$upscope $end

$scope module not1 $end
$var wire 1 y* in1 $end
$var wire 1 z* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^* in1 $end
$var wire 1 w* in2 $end
$var wire 1 {* out $end
$upscope $end

$scope module not2 $end
$var wire 1 {* in1 $end
$var wire 1 |* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z* in1 $end
$var wire 1 |* in2 $end
$var wire 1 }* out $end
$upscope $end

$scope module not3 $end
$var wire 1 }* in1 $end
$var wire 1 ~* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 I( A [3] $end
$var wire 1 J( A [2] $end
$var wire 1 K( A [1] $end
$var wire 1 L( A [0] $end
$var wire 1 _) B [3] $end
$var wire 1 `) B [2] $end
$var wire 1 a) B [1] $end
$var wire 1 b) B [0] $end
$var wire 1 r) Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 o) Cout $end
$var wire 1 !+ Cout0 $end
$var wire 1 "+ Cout1 $end
$var wire 1 #+ Cout2 $end

$scope module f1 $end
$var wire 1 L( A $end
$var wire 1 b) B $end
$var wire 1 r) Cin $end
$var wire 1 $" S $end
$var wire 1 !+ Cout $end
$var wire 1 $+ xor_AB $end
$var wire 1 %+ xor_ABCin $end
$var wire 1 &+ NAND_AB $end
$var wire 1 '+ not_NAND_AB $end
$var wire 1 (+ NAND_Cin_xor_AB $end
$var wire 1 )+ not_NAND_Cin_xor_AB $end
$var wire 1 *+ NOR_2NAND $end
$var wire 1 ++ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 L( in1 $end
$var wire 1 b) in2 $end
$var wire 1 $+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $+ in1 $end
$var wire 1 r) in2 $end
$var wire 1 %+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 L( in1 $end
$var wire 1 b) in2 $end
$var wire 1 &+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 &+ in1 $end
$var wire 1 '+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r) in1 $end
$var wire 1 $+ in2 $end
$var wire 1 (+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 (+ in1 $end
$var wire 1 )+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '+ in1 $end
$var wire 1 )+ in2 $end
$var wire 1 *+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 *+ in1 $end
$var wire 1 ++ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 K( A $end
$var wire 1 a) B $end
$var wire 1 !+ Cin $end
$var wire 1 #" S $end
$var wire 1 "+ Cout $end
$var wire 1 ,+ xor_AB $end
$var wire 1 -+ xor_ABCin $end
$var wire 1 .+ NAND_AB $end
$var wire 1 /+ not_NAND_AB $end
$var wire 1 0+ NAND_Cin_xor_AB $end
$var wire 1 1+ not_NAND_Cin_xor_AB $end
$var wire 1 2+ NOR_2NAND $end
$var wire 1 3+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 K( in1 $end
$var wire 1 a) in2 $end
$var wire 1 ,+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ,+ in1 $end
$var wire 1 !+ in2 $end
$var wire 1 -+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 K( in1 $end
$var wire 1 a) in2 $end
$var wire 1 .+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 .+ in1 $end
$var wire 1 /+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !+ in1 $end
$var wire 1 ,+ in2 $end
$var wire 1 0+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 0+ in1 $end
$var wire 1 1+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 /+ in1 $end
$var wire 1 1+ in2 $end
$var wire 1 2+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 2+ in1 $end
$var wire 1 3+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 J( A $end
$var wire 1 `) B $end
$var wire 1 "+ Cin $end
$var wire 1 "" S $end
$var wire 1 #+ Cout $end
$var wire 1 4+ xor_AB $end
$var wire 1 5+ xor_ABCin $end
$var wire 1 6+ NAND_AB $end
$var wire 1 7+ not_NAND_AB $end
$var wire 1 8+ NAND_Cin_xor_AB $end
$var wire 1 9+ not_NAND_Cin_xor_AB $end
$var wire 1 :+ NOR_2NAND $end
$var wire 1 ;+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 J( in1 $end
$var wire 1 `) in2 $end
$var wire 1 4+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 4+ in1 $end
$var wire 1 "+ in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 J( in1 $end
$var wire 1 `) in2 $end
$var wire 1 6+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 6+ in1 $end
$var wire 1 7+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "+ in1 $end
$var wire 1 4+ in2 $end
$var wire 1 8+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 8+ in1 $end
$var wire 1 9+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 7+ in1 $end
$var wire 1 9+ in2 $end
$var wire 1 :+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 :+ in1 $end
$var wire 1 ;+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 I( A $end
$var wire 1 _) B $end
$var wire 1 #+ Cin $end
$var wire 1 !" S $end
$var wire 1 o) Cout $end
$var wire 1 <+ xor_AB $end
$var wire 1 =+ xor_ABCin $end
$var wire 1 >+ NAND_AB $end
$var wire 1 ?+ not_NAND_AB $end
$var wire 1 @+ NAND_Cin_xor_AB $end
$var wire 1 A+ not_NAND_Cin_xor_AB $end
$var wire 1 B+ NOR_2NAND $end
$var wire 1 C+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 I( in1 $end
$var wire 1 _) in2 $end
$var wire 1 <+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <+ in1 $end
$var wire 1 #+ in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 I( in1 $end
$var wire 1 _) in2 $end
$var wire 1 >+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 >+ in1 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #+ in1 $end
$var wire 1 <+ in2 $end
$var wire 1 @+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 @+ in1 $end
$var wire 1 A+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?+ in1 $end
$var wire 1 A+ in2 $end
$var wire 1 B+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 B+ in1 $end
$var wire 1 C+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 D+ data_in [15] $end
$var wire 1 E+ data_in [14] $end
$var wire 1 F+ data_in [13] $end
$var wire 1 G+ data_in [12] $end
$var wire 1 H+ data_in [11] $end
$var wire 1 I+ data_in [10] $end
$var wire 1 J+ data_in [9] $end
$var wire 1 K+ data_in [8] $end
$var wire 1 L+ data_in [7] $end
$var wire 1 M+ data_in [6] $end
$var wire 1 N+ data_in [5] $end
$var wire 1 O+ data_in [4] $end
$var wire 1 P+ data_in [3] $end
$var wire 1 Q+ data_in [2] $end
$var wire 1 R+ data_in [1] $end
$var wire 1 S+ data_in [0] $end
$var wire 1 I( addr [15] $end
$var wire 1 J( addr [14] $end
$var wire 1 K( addr [13] $end
$var wire 1 L( addr [12] $end
$var wire 1 M( addr [11] $end
$var wire 1 N( addr [10] $end
$var wire 1 O( addr [9] $end
$var wire 1 P( addr [8] $end
$var wire 1 Q( addr [7] $end
$var wire 1 R( addr [6] $end
$var wire 1 S( addr [5] $end
$var wire 1 T( addr [4] $end
$var wire 1 U( addr [3] $end
$var wire 1 V( addr [2] $end
$var wire 1 W( addr [1] $end
$var wire 1 X( addr [0] $end
$var wire 1 T+ enable $end
$var wire 1 U+ wr $end
$var wire 1 V+ createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 7) err $end
$var reg 1 W+ loaded $end
$var reg 17 X+ largest [16:0] $end
$var integer 32 Y+ mcd $end
$var integer 32 Z+ i $end
$upscope $end

$scope module pc[15] $end
$var wire 1 I( q $end
$var wire 1 )( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [+ state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 J( q $end
$var wire 1 *( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \+ state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 K( q $end
$var wire 1 +( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 L( q $end
$var wire 1 ,( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^+ state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 M( q $end
$var wire 1 -( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _+ state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 N( q $end
$var wire 1 .( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `+ state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 O( q $end
$var wire 1 /( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a+ state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 P( q $end
$var wire 1 0( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b+ state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 Q( q $end
$var wire 1 1( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c+ state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 R( q $end
$var wire 1 2( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d+ state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 S( q $end
$var wire 1 3( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e+ state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 T( q $end
$var wire 1 4( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f+ state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 U( q $end
$var wire 1 5( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g+ state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 V( q $end
$var wire 1 6( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h+ state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 W( q $end
$var wire 1 7( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i+ state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 X( q $end
$var wire 1 8( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j+ state $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 ') PC_next_in [15] $end
$var wire 1 () PC_next_in [14] $end
$var wire 1 )) PC_next_in [13] $end
$var wire 1 *) PC_next_in [12] $end
$var wire 1 +) PC_next_in [11] $end
$var wire 1 ,) PC_next_in [10] $end
$var wire 1 -) PC_next_in [9] $end
$var wire 1 .) PC_next_in [8] $end
$var wire 1 /) PC_next_in [7] $end
$var wire 1 0) PC_next_in [6] $end
$var wire 1 1) PC_next_in [5] $end
$var wire 1 2) PC_next_in [4] $end
$var wire 1 3) PC_next_in [3] $end
$var wire 1 4) PC_next_in [2] $end
$var wire 1 5) PC_next_in [1] $end
$var wire 1 6) PC_next_in [0] $end
$var wire 1 n( instruction_in [15] $end
$var wire 1 o( instruction_in [14] $end
$var wire 1 p( instruction_in [13] $end
$var wire 1 q( instruction_in [12] $end
$var wire 1 r( instruction_in [11] $end
$var wire 1 s( instruction_in [10] $end
$var wire 1 t( instruction_in [9] $end
$var wire 1 u( instruction_in [8] $end
$var wire 1 v( instruction_in [7] $end
$var wire 1 w( instruction_in [6] $end
$var wire 1 x( instruction_in [5] $end
$var wire 1 y( instruction_in [4] $end
$var wire 1 z( instruction_in [3] $end
$var wire 1 {( instruction_in [2] $end
$var wire 1 |( instruction_in [1] $end
$var wire 1 }( instruction_in [0] $end
$var wire 1 I( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 J( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 K( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 L( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 M( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 N( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 O( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 P( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 Q( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 R( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 S( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 T( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 U( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 V( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 W( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 X( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 Y( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 Z( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 [( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 \( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 ]( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 ^( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 _( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 `( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 a( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 b( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 c( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 d( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 e( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 f( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 g( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 h( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end
$var wire 1 7) HALT_IN $end
$var wire 1 8) HALT_OUT $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 ') d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k+ state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 () d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l+ state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 )) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 *) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n+ state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 +) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o+ state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 ,) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p+ state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 -) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q+ state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 .) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r+ state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 /) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s+ state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 0) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t+ state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 1) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u+ state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 2) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v+ state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 3) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w+ state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 4) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x+ state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 5) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y+ state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 6) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z+ state $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 {+ state [15:0] $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 |+ state [15:0] $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 }+ state [15:0] $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ~+ state [15:0] $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 !, state [15:0] $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ", state [15:0] $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 #, state [15:0] $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 $, state [15:0] $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 %, state [15:0] $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 &, state [15:0] $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ', state [15:0] $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 (, state [15:0] $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ), state [15:0] $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 *, state [15:0] $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 +, state [15:0] $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ,, state [15:0] $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 Y( q $end
$var wire 1 I( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -, state $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 Z( q $end
$var wire 1 J( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ., state $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 [( q $end
$var wire 1 K( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /, state $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 \( q $end
$var wire 1 L( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0, state $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 ]( q $end
$var wire 1 M( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1, state $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 ^( q $end
$var wire 1 N( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2, state $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 _( q $end
$var wire 1 O( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3, state $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 `( q $end
$var wire 1 P( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4, state $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 a( q $end
$var wire 1 Q( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5, state $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 b( q $end
$var wire 1 R( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6, state $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 c( q $end
$var wire 1 S( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7, state $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 d( q $end
$var wire 1 T( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8, state $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 e( q $end
$var wire 1 U( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9, state $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 f( q $end
$var wire 1 V( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :, state $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 g( q $end
$var wire 1 W( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;, state $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 h( q $end
$var wire 1 X( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <, state $end
$upscope $end

$scope module HALT[15] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =, state $end
$upscope $end

$scope module HALT[14] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >, state $end
$upscope $end

$scope module HALT[13] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?, state $end
$upscope $end

$scope module HALT[12] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @, state $end
$upscope $end

$scope module HALT[11] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A, state $end
$upscope $end

$scope module HALT[10] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B, state $end
$upscope $end

$scope module HALT[9] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C, state $end
$upscope $end

$scope module HALT[8] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D, state $end
$upscope $end

$scope module HALT[7] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E, state $end
$upscope $end

$scope module HALT[6] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F, state $end
$upscope $end

$scope module HALT[5] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G, state $end
$upscope $end

$scope module HALT[4] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H, state $end
$upscope $end

$scope module HALT[3] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I, state $end
$upscope $end

$scope module HALT[2] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J, state $end
$upscope $end

$scope module HALT[1] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K, state $end
$upscope $end

$scope module HALT[0] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L, state $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 a' err $end
$var wire 1 A) instruction [15] $end
$var wire 1 B) instruction [14] $end
$var wire 1 C) instruction [13] $end
$var wire 1 D) instruction [12] $end
$var wire 1 E) instruction [11] $end
$var wire 1 F) instruction [10] $end
$var wire 1 G) instruction [9] $end
$var wire 1 H) instruction [8] $end
$var wire 1 I) instruction [7] $end
$var wire 1 J) instruction [6] $end
$var wire 1 K) instruction [5] $end
$var wire 1 L) instruction [4] $end
$var wire 1 M) instruction [3] $end
$var wire 1 N) instruction [2] $end
$var wire 1 O) instruction [1] $end
$var wire 1 P) instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 M, signed_i_1 [15] $end
$var wire 1 N, signed_i_1 [14] $end
$var wire 1 O, signed_i_1 [13] $end
$var wire 1 P, signed_i_1 [12] $end
$var wire 1 Q, signed_i_1 [11] $end
$var wire 1 R, signed_i_1 [10] $end
$var wire 1 S, signed_i_1 [9] $end
$var wire 1 T, signed_i_1 [8] $end
$var wire 1 U, signed_i_1 [7] $end
$var wire 1 V, signed_i_1 [6] $end
$var wire 1 W, signed_i_1 [5] $end
$var wire 1 X, signed_i_1 [4] $end
$var wire 1 Y, signed_i_1 [3] $end
$var wire 1 Z, signed_i_1 [2] $end
$var wire 1 [, signed_i_1 [1] $end
$var wire 1 \, signed_i_1 [0] $end
$var wire 1 ], zero_i_1 [15] $end
$var wire 1 ^, zero_i_1 [14] $end
$var wire 1 _, zero_i_1 [13] $end
$var wire 1 `, zero_i_1 [12] $end
$var wire 1 a, zero_i_1 [11] $end
$var wire 1 b, zero_i_1 [10] $end
$var wire 1 c, zero_i_1 [9] $end
$var wire 1 d, zero_i_1 [8] $end
$var wire 1 e, zero_i_1 [7] $end
$var wire 1 f, zero_i_1 [6] $end
$var wire 1 g, zero_i_1 [5] $end
$var wire 1 h, zero_i_1 [4] $end
$var wire 1 i, zero_i_1 [3] $end
$var wire 1 j, zero_i_1 [2] $end
$var wire 1 k, zero_i_1 [1] $end
$var wire 1 l, zero_i_1 [0] $end
$var wire 1 m, signed_i_2 [15] $end
$var wire 1 n, signed_i_2 [14] $end
$var wire 1 o, signed_i_2 [13] $end
$var wire 1 p, signed_i_2 [12] $end
$var wire 1 q, signed_i_2 [11] $end
$var wire 1 r, signed_i_2 [10] $end
$var wire 1 s, signed_i_2 [9] $end
$var wire 1 t, signed_i_2 [8] $end
$var wire 1 u, signed_i_2 [7] $end
$var wire 1 v, signed_i_2 [6] $end
$var wire 1 w, signed_i_2 [5] $end
$var wire 1 x, signed_i_2 [4] $end
$var wire 1 y, signed_i_2 [3] $end
$var wire 1 z, signed_i_2 [2] $end
$var wire 1 {, signed_i_2 [1] $end
$var wire 1 |, signed_i_2 [0] $end
$var wire 1 }, zero_i_2 [15] $end
$var wire 1 ~, zero_i_2 [14] $end
$var wire 1 !- zero_i_2 [13] $end
$var wire 1 "- zero_i_2 [12] $end
$var wire 1 #- zero_i_2 [11] $end
$var wire 1 $- zero_i_2 [10] $end
$var wire 1 %- zero_i_2 [9] $end
$var wire 1 &- zero_i_2 [8] $end
$var wire 1 '- zero_i_2 [7] $end
$var wire 1 (- zero_i_2 [6] $end
$var wire 1 )- zero_i_2 [5] $end
$var wire 1 *- zero_i_2 [4] $end
$var wire 1 +- zero_i_2 [3] $end
$var wire 1 ,- zero_i_2 [2] $end
$var wire 1 -- zero_i_2 [1] $end
$var wire 1 .- zero_i_2 [0] $end
$var reg 1 /- OExt $end
$var reg 1 0- RegWrt $end
$var reg 2 1- RegDst [1:0] $end
$var reg 1 2- halt $end
$var reg 1 3- BTR $end
$var reg 3 4- ALUOpr [2:0] $end
$var reg 2 5- Bsrc [1:0] $end
$var reg 1 6- InvB $end
$var reg 1 7- InvA $end
$var reg 1 8- ImmSrc $end
$var reg 1 9- MemWrt $end
$var reg 1 :- ALUJMP $end
$var reg 1 ;- PC_or_add $end
$var reg 2 <- RegSrc [1:0] $end
$var reg 1 =- SLBI $end
$var reg 1 >- branching $end
$var reg 2 ?- branch_command [1:0] $end
$var reg 3 @- SetCtrl [2:0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end
$var wire 1 8) fetch_halt $end

$scope module registerfile $end
$var parameter 32 A- bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 F) read1RegSel [2] $end
$var wire 1 G) read1RegSel [1] $end
$var wire 1 H) read1RegSel [0] $end
$var wire 1 I) read2RegSel [2] $end
$var wire 1 J) read2RegSel [1] $end
$var wire 1 K) read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 a' err $end
$var wire 1 B- registers [0] $end
$var wire 1 C- registers [1] $end
$var wire 1 D- registers [2] $end
$var wire 1 E- registers [3] $end
$var wire 1 F- registers [4] $end
$var wire 1 G- registers [5] $end
$var wire 1 H- registers [6] $end
$var wire 1 I- registers [7] $end
$var wire 1 J- registers [8] $end
$var wire 1 K- registers [9] $end
$var wire 1 L- registers [10] $end
$var wire 1 M- registers [11] $end
$var wire 1 N- registers [12] $end
$var wire 1 O- registers [13] $end
$var wire 1 P- registers [14] $end
$var wire 1 Q- registers [15] $end
$var wire 1 R- registers [16] $end
$var wire 1 S- registers [17] $end
$var wire 1 T- registers [18] $end
$var wire 1 U- registers [19] $end
$var wire 1 V- registers [20] $end
$var wire 1 W- registers [21] $end
$var wire 1 X- registers [22] $end
$var wire 1 Y- registers [23] $end
$var wire 1 Z- registers [24] $end
$var wire 1 [- registers [25] $end
$var wire 1 \- registers [26] $end
$var wire 1 ]- registers [27] $end
$var wire 1 ^- registers [28] $end
$var wire 1 _- registers [29] $end
$var wire 1 `- registers [30] $end
$var wire 1 a- registers [31] $end
$var wire 1 b- registers [32] $end
$var wire 1 c- registers [33] $end
$var wire 1 d- registers [34] $end
$var wire 1 e- registers [35] $end
$var wire 1 f- registers [36] $end
$var wire 1 g- registers [37] $end
$var wire 1 h- registers [38] $end
$var wire 1 i- registers [39] $end
$var wire 1 j- registers [40] $end
$var wire 1 k- registers [41] $end
$var wire 1 l- registers [42] $end
$var wire 1 m- registers [43] $end
$var wire 1 n- registers [44] $end
$var wire 1 o- registers [45] $end
$var wire 1 p- registers [46] $end
$var wire 1 q- registers [47] $end
$var wire 1 r- registers [48] $end
$var wire 1 s- registers [49] $end
$var wire 1 t- registers [50] $end
$var wire 1 u- registers [51] $end
$var wire 1 v- registers [52] $end
$var wire 1 w- registers [53] $end
$var wire 1 x- registers [54] $end
$var wire 1 y- registers [55] $end
$var wire 1 z- registers [56] $end
$var wire 1 {- registers [57] $end
$var wire 1 |- registers [58] $end
$var wire 1 }- registers [59] $end
$var wire 1 ~- registers [60] $end
$var wire 1 !. registers [61] $end
$var wire 1 ". registers [62] $end
$var wire 1 #. registers [63] $end
$var wire 1 $. registers [64] $end
$var wire 1 %. registers [65] $end
$var wire 1 &. registers [66] $end
$var wire 1 '. registers [67] $end
$var wire 1 (. registers [68] $end
$var wire 1 ). registers [69] $end
$var wire 1 *. registers [70] $end
$var wire 1 +. registers [71] $end
$var wire 1 ,. registers [72] $end
$var wire 1 -. registers [73] $end
$var wire 1 .. registers [74] $end
$var wire 1 /. registers [75] $end
$var wire 1 0. registers [76] $end
$var wire 1 1. registers [77] $end
$var wire 1 2. registers [78] $end
$var wire 1 3. registers [79] $end
$var wire 1 4. registers [80] $end
$var wire 1 5. registers [81] $end
$var wire 1 6. registers [82] $end
$var wire 1 7. registers [83] $end
$var wire 1 8. registers [84] $end
$var wire 1 9. registers [85] $end
$var wire 1 :. registers [86] $end
$var wire 1 ;. registers [87] $end
$var wire 1 <. registers [88] $end
$var wire 1 =. registers [89] $end
$var wire 1 >. registers [90] $end
$var wire 1 ?. registers [91] $end
$var wire 1 @. registers [92] $end
$var wire 1 A. registers [93] $end
$var wire 1 B. registers [94] $end
$var wire 1 C. registers [95] $end
$var wire 1 D. registers [96] $end
$var wire 1 E. registers [97] $end
$var wire 1 F. registers [98] $end
$var wire 1 G. registers [99] $end
$var wire 1 H. registers [100] $end
$var wire 1 I. registers [101] $end
$var wire 1 J. registers [102] $end
$var wire 1 K. registers [103] $end
$var wire 1 L. registers [104] $end
$var wire 1 M. registers [105] $end
$var wire 1 N. registers [106] $end
$var wire 1 O. registers [107] $end
$var wire 1 P. registers [108] $end
$var wire 1 Q. registers [109] $end
$var wire 1 R. registers [110] $end
$var wire 1 S. registers [111] $end
$var wire 1 T. registers [112] $end
$var wire 1 U. registers [113] $end
$var wire 1 V. registers [114] $end
$var wire 1 W. registers [115] $end
$var wire 1 X. registers [116] $end
$var wire 1 Y. registers [117] $end
$var wire 1 Z. registers [118] $end
$var wire 1 [. registers [119] $end
$var wire 1 \. registers [120] $end
$var wire 1 ]. registers [121] $end
$var wire 1 ^. registers [122] $end
$var wire 1 _. registers [123] $end
$var wire 1 `. registers [124] $end
$var wire 1 a. registers [125] $end
$var wire 1 b. registers [126] $end
$var wire 1 c. registers [127] $end
$var wire 1 d. mask_1 [0] $end
$var wire 1 e. mask_1 [1] $end
$var wire 1 f. mask_1 [2] $end
$var wire 1 g. mask_1 [3] $end
$var wire 1 h. mask_1 [4] $end
$var wire 1 i. mask_1 [5] $end
$var wire 1 j. mask_1 [6] $end
$var wire 1 k. mask_1 [7] $end

$scope module ind_reg1 $end
$var parameter 32 l. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 k. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 c. read [15] $end
$var wire 1 b. read [14] $end
$var wire 1 a. read [13] $end
$var wire 1 `. read [12] $end
$var wire 1 _. read [11] $end
$var wire 1 ^. read [10] $end
$var wire 1 ]. read [9] $end
$var wire 1 \. read [8] $end
$var wire 1 [. read [7] $end
$var wire 1 Z. read [6] $end
$var wire 1 Y. read [5] $end
$var wire 1 X. read [4] $end
$var wire 1 W. read [3] $end
$var wire 1 V. read [2] $end
$var wire 1 U. read [1] $end
$var wire 1 T. read [0] $end

$scope module flop[15] $end
$var wire 1 c. q $end
$var wire 1 m. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 b. q $end
$var wire 1 o. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 a. q $end
$var wire 1 q. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 `. q $end
$var wire 1 s. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 _. q $end
$var wire 1 u. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ^. q $end
$var wire 1 w. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ]. q $end
$var wire 1 y. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z. state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 \. q $end
$var wire 1 {. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |. state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 [. q $end
$var wire 1 }. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~. state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 Z. q $end
$var wire 1 !/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 Y. q $end
$var wire 1 #/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 X. q $end
$var wire 1 %/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 W. q $end
$var wire 1 '/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 V. q $end
$var wire 1 )/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 */ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 U. q $end
$var wire 1 +/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 T. q $end
$var wire 1 -/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ./ state $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var parameter 32 // bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 j. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 S. read [15] $end
$var wire 1 R. read [14] $end
$var wire 1 Q. read [13] $end
$var wire 1 P. read [12] $end
$var wire 1 O. read [11] $end
$var wire 1 N. read [10] $end
$var wire 1 M. read [9] $end
$var wire 1 L. read [8] $end
$var wire 1 K. read [7] $end
$var wire 1 J. read [6] $end
$var wire 1 I. read [5] $end
$var wire 1 H. read [4] $end
$var wire 1 G. read [3] $end
$var wire 1 F. read [2] $end
$var wire 1 E. read [1] $end
$var wire 1 D. read [0] $end

$scope module flop[15] $end
$var wire 1 S. q $end
$var wire 1 0/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 R. q $end
$var wire 1 2/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 Q. q $end
$var wire 1 4/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 P. q $end
$var wire 1 6/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 O. q $end
$var wire 1 8/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 N. q $end
$var wire 1 :/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 M. q $end
$var wire 1 </ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 L. q $end
$var wire 1 >/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 K. q $end
$var wire 1 @/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 J. q $end
$var wire 1 B/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 I. q $end
$var wire 1 D/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 H. q $end
$var wire 1 F/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 G. q $end
$var wire 1 H/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 F. q $end
$var wire 1 J/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 E. q $end
$var wire 1 L/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 D. q $end
$var wire 1 N/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O/ state $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var parameter 32 P/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 i. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 C. read [15] $end
$var wire 1 B. read [14] $end
$var wire 1 A. read [13] $end
$var wire 1 @. read [12] $end
$var wire 1 ?. read [11] $end
$var wire 1 >. read [10] $end
$var wire 1 =. read [9] $end
$var wire 1 <. read [8] $end
$var wire 1 ;. read [7] $end
$var wire 1 :. read [6] $end
$var wire 1 9. read [5] $end
$var wire 1 8. read [4] $end
$var wire 1 7. read [3] $end
$var wire 1 6. read [2] $end
$var wire 1 5. read [1] $end
$var wire 1 4. read [0] $end

$scope module flop[15] $end
$var wire 1 C. q $end
$var wire 1 Q/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 B. q $end
$var wire 1 S/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 A. q $end
$var wire 1 U/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 @. q $end
$var wire 1 W/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ?. q $end
$var wire 1 Y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 >. q $end
$var wire 1 [/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 =. q $end
$var wire 1 ]/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 <. q $end
$var wire 1 _/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 ;. q $end
$var wire 1 a/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 :. q $end
$var wire 1 c/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 9. q $end
$var wire 1 e/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 8. q $end
$var wire 1 g/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 7. q $end
$var wire 1 i/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 6. q $end
$var wire 1 k/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 5. q $end
$var wire 1 m/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 4. q $end
$var wire 1 o/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p/ state $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var parameter 32 q/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 h. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 3. read [15] $end
$var wire 1 2. read [14] $end
$var wire 1 1. read [13] $end
$var wire 1 0. read [12] $end
$var wire 1 /. read [11] $end
$var wire 1 .. read [10] $end
$var wire 1 -. read [9] $end
$var wire 1 ,. read [8] $end
$var wire 1 +. read [7] $end
$var wire 1 *. read [6] $end
$var wire 1 ). read [5] $end
$var wire 1 (. read [4] $end
$var wire 1 '. read [3] $end
$var wire 1 &. read [2] $end
$var wire 1 %. read [1] $end
$var wire 1 $. read [0] $end

$scope module flop[15] $end
$var wire 1 3. q $end
$var wire 1 r/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 2. q $end
$var wire 1 t/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 1. q $end
$var wire 1 v/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 0. q $end
$var wire 1 x/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 /. q $end
$var wire 1 z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 .. q $end
$var wire 1 |/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 -. q $end
$var wire 1 ~/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ,. q $end
$var wire 1 "0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 +. q $end
$var wire 1 $0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 *. q $end
$var wire 1 &0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 ). q $end
$var wire 1 (0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 (. q $end
$var wire 1 *0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 '. q $end
$var wire 1 ,0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 &. q $end
$var wire 1 .0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 %. q $end
$var wire 1 00 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 10 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 $. q $end
$var wire 1 20 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 30 state $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var parameter 32 40 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 g. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 #. read [15] $end
$var wire 1 ". read [14] $end
$var wire 1 !. read [13] $end
$var wire 1 ~- read [12] $end
$var wire 1 }- read [11] $end
$var wire 1 |- read [10] $end
$var wire 1 {- read [9] $end
$var wire 1 z- read [8] $end
$var wire 1 y- read [7] $end
$var wire 1 x- read [6] $end
$var wire 1 w- read [5] $end
$var wire 1 v- read [4] $end
$var wire 1 u- read [3] $end
$var wire 1 t- read [2] $end
$var wire 1 s- read [1] $end
$var wire 1 r- read [0] $end

$scope module flop[15] $end
$var wire 1 #. q $end
$var wire 1 50 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 60 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 ". q $end
$var wire 1 70 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 80 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 !. q $end
$var wire 1 90 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ~- q $end
$var wire 1 ;0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 }- q $end
$var wire 1 =0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 |- q $end
$var wire 1 ?0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 {- q $end
$var wire 1 A0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 z- q $end
$var wire 1 C0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 y- q $end
$var wire 1 E0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 x- q $end
$var wire 1 G0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 w- q $end
$var wire 1 I0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 v- q $end
$var wire 1 K0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 u- q $end
$var wire 1 M0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 t- q $end
$var wire 1 O0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 s- q $end
$var wire 1 Q0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 r- q $end
$var wire 1 S0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T0 state $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var parameter 32 U0 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 f. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 q- read [15] $end
$var wire 1 p- read [14] $end
$var wire 1 o- read [13] $end
$var wire 1 n- read [12] $end
$var wire 1 m- read [11] $end
$var wire 1 l- read [10] $end
$var wire 1 k- read [9] $end
$var wire 1 j- read [8] $end
$var wire 1 i- read [7] $end
$var wire 1 h- read [6] $end
$var wire 1 g- read [5] $end
$var wire 1 f- read [4] $end
$var wire 1 e- read [3] $end
$var wire 1 d- read [2] $end
$var wire 1 c- read [1] $end
$var wire 1 b- read [0] $end

$scope module flop[15] $end
$var wire 1 q- q $end
$var wire 1 V0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 p- q $end
$var wire 1 X0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 o- q $end
$var wire 1 Z0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 n- q $end
$var wire 1 \0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 m- q $end
$var wire 1 ^0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 l- q $end
$var wire 1 `0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 k- q $end
$var wire 1 b0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 j- q $end
$var wire 1 d0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 i- q $end
$var wire 1 f0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 h- q $end
$var wire 1 h0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 g- q $end
$var wire 1 j0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 f- q $end
$var wire 1 l0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 e- q $end
$var wire 1 n0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 d- q $end
$var wire 1 p0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 c- q $end
$var wire 1 r0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 b- q $end
$var wire 1 t0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u0 state $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var parameter 32 v0 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 e. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 a- read [15] $end
$var wire 1 `- read [14] $end
$var wire 1 _- read [13] $end
$var wire 1 ^- read [12] $end
$var wire 1 ]- read [11] $end
$var wire 1 \- read [10] $end
$var wire 1 [- read [9] $end
$var wire 1 Z- read [8] $end
$var wire 1 Y- read [7] $end
$var wire 1 X- read [6] $end
$var wire 1 W- read [5] $end
$var wire 1 V- read [4] $end
$var wire 1 U- read [3] $end
$var wire 1 T- read [2] $end
$var wire 1 S- read [1] $end
$var wire 1 R- read [0] $end

$scope module flop[15] $end
$var wire 1 a- q $end
$var wire 1 w0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 `- q $end
$var wire 1 y0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 _- q $end
$var wire 1 {0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ^- q $end
$var wire 1 }0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ]- q $end
$var wire 1 !1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "1 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 \- q $end
$var wire 1 #1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $1 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 [- q $end
$var wire 1 %1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &1 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 Z- q $end
$var wire 1 '1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 Y- q $end
$var wire 1 )1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 X- q $end
$var wire 1 +1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 W- q $end
$var wire 1 -1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 V- q $end
$var wire 1 /1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 01 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 U- q $end
$var wire 1 11 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 21 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 T- q $end
$var wire 1 31 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 41 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 S- q $end
$var wire 1 51 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 61 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 R- q $end
$var wire 1 71 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 81 state $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var parameter 32 91 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 d. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 Q- read [15] $end
$var wire 1 P- read [14] $end
$var wire 1 O- read [13] $end
$var wire 1 N- read [12] $end
$var wire 1 M- read [11] $end
$var wire 1 L- read [10] $end
$var wire 1 K- read [9] $end
$var wire 1 J- read [8] $end
$var wire 1 I- read [7] $end
$var wire 1 H- read [6] $end
$var wire 1 G- read [5] $end
$var wire 1 F- read [4] $end
$var wire 1 E- read [3] $end
$var wire 1 D- read [2] $end
$var wire 1 C- read [1] $end
$var wire 1 B- read [0] $end

$scope module flop[15] $end
$var wire 1 Q- q $end
$var wire 1 :1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;1 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 P- q $end
$var wire 1 <1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =1 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 O- q $end
$var wire 1 >1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?1 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 N- q $end
$var wire 1 @1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A1 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 M- q $end
$var wire 1 B1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C1 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 L- q $end
$var wire 1 D1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E1 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 K- q $end
$var wire 1 F1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G1 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 J- q $end
$var wire 1 H1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 I- q $end
$var wire 1 J1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 H- q $end
$var wire 1 L1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 G- q $end
$var wire 1 N1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 F- q $end
$var wire 1 P1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q1 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 E- q $end
$var wire 1 R1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S1 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 D- q $end
$var wire 1 T1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U1 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 C- q $end
$var wire 1 V1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W1 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 B- q $end
$var wire 1 X1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y1 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 ?) NOPEx $end
$var wire 1 <) NOPMem $end
$var wire 1 =) NOPWB $end
$var wire 1 i( sendNOP $end
$var wire 1 Z1 regEqual $end
$var wire 1 [1 regEqual2 $end
$var wire 1 \1 sendNOP_not_st $end
$var wire 1 ]1 sendnopout $end
$var wire 1 ^1 stinstthing $end
$var wire 1 _1 oneops $end
$var wire 1 `1 RegS [2] $end
$var wire 1 a1 RegS [1] $end
$var wire 1 b1 RegS [0] $end
$var wire 1 c1 RegT [2] $end
$var wire 1 d1 RegT [1] $end
$var wire 1 e1 RegT [0] $end
$var wire 1 R& WRMEM $end
$var wire 1 L' WRWB $end
$var wire 1 f1 compEx $end
$var wire 1 g1 compMem $end
$var wire 1 h1 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 i1 halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 @) SendNOP_In $end
$var wire 1 ;) SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j1 state $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k1 state $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l1 state $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m1 state $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n1 state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o1 state $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p1 state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q1 state $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 i1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r1 state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s1 state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 ;) q $end
$var wire 1 @) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t1 state $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u1 state $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v1 state $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w1 state $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x1 state $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y1 state $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z1 state $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {1 state $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |1 state $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }1 state $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~1 state $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !2 state $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "2 state $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #2 state $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $2 state $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %2 state $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &2 state $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '2 state $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (2 state $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )2 state $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *2 state $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +2 state $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,2 state $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -2 state $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .2 state $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /2 state $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 02 state $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 12 state $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 22 state $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 32 state $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 42 state $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 52 state $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 62 state $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 72 state $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 82 state $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 92 state $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :2 state $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;2 state $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <2 state $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =2 state $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >2 state $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?2 state $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @2 state $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A2 state $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B2 state $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C2 state $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D2 state $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E2 state $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F2 state $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G2 state $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H2 state $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I2 state $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J2 state $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K2 state $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L2 state $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M2 state $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N2 state $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O2 state $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P2 state $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q2 state $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R2 state $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S2 state $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T2 state $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U2 state $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V2 state $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W2 state $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X2 state $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y2 state $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z2 state $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [2 state $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \2 state $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]2 state $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^2 state $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _2 state $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `2 state $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a2 state $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b2 state $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c2 state $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d2 state $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e2 state $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f2 state $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g2 state $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h2 state $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i2 state $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j2 state $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k2 state $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l2 state $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m2 state $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n2 state $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o2 state $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p2 state $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q2 state $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r2 state $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s2 state $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t2 state $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u2 state $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v2 state $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w2 state $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x2 state $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y2 state $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z2 state $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {2 state $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |2 state $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }2 state $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~2 state $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !3 state $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "3 state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #3 state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $3 state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %3 state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &3 state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '3 state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (3 state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )3 state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *3 state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +3 state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,3 state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -3 state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .3 state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /3 state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 03 state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 13 state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 23 state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 33 state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 43 state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 53 state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 63 state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 73 state $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 83 possibleslbi [15] $end
$var wire 1 93 possibleslbi [14] $end
$var wire 1 :3 possibleslbi [13] $end
$var wire 1 ;3 possibleslbi [12] $end
$var wire 1 <3 possibleslbi [11] $end
$var wire 1 =3 possibleslbi [10] $end
$var wire 1 >3 possibleslbi [9] $end
$var wire 1 ?3 possibleslbi [8] $end
$var wire 1 @3 possibleslbi [7] $end
$var wire 1 A3 possibleslbi [6] $end
$var wire 1 B3 possibleslbi [5] $end
$var wire 1 C3 possibleslbi [4] $end
$var wire 1 D3 possibleslbi [3] $end
$var wire 1 E3 possibleslbi [2] $end
$var wire 1 F3 possibleslbi [1] $end
$var wire 1 G3 possibleslbi [0] $end
$var wire 1 H3 shiftedA [15] $end
$var wire 1 I3 shiftedA [14] $end
$var wire 1 J3 shiftedA [13] $end
$var wire 1 K3 shiftedA [12] $end
$var wire 1 L3 shiftedA [11] $end
$var wire 1 M3 shiftedA [10] $end
$var wire 1 N3 shiftedA [9] $end
$var wire 1 O3 shiftedA [8] $end
$var wire 1 P3 shiftedA [7] $end
$var wire 1 Q3 shiftedA [6] $end
$var wire 1 R3 shiftedA [5] $end
$var wire 1 S3 shiftedA [4] $end
$var wire 1 T3 shiftedA [3] $end
$var wire 1 U3 shiftedA [2] $end
$var wire 1 V3 shiftedA [1] $end
$var wire 1 W3 shiftedA [0] $end
$var wire 1 X3 slbiOper $end
$var wire 1 Y3 aluout [15] $end
$var wire 1 Z3 aluout [14] $end
$var wire 1 [3 aluout [13] $end
$var wire 1 \3 aluout [12] $end
$var wire 1 ]3 aluout [11] $end
$var wire 1 ^3 aluout [10] $end
$var wire 1 _3 aluout [9] $end
$var wire 1 `3 aluout [8] $end
$var wire 1 a3 aluout [7] $end
$var wire 1 b3 aluout [6] $end
$var wire 1 c3 aluout [5] $end
$var wire 1 d3 aluout [4] $end
$var wire 1 e3 aluout [3] $end
$var wire 1 f3 aluout [2] $end
$var wire 1 g3 aluout [1] $end
$var wire 1 h3 aluout [0] $end
$var wire 1 i3 conditional $end
$var wire 1 j3 CF $end
$var wire 1 k3 Zero $end
$var wire 1 l3 Overflow $end
$var wire 1 m3 Brchcnd $end
$var wire 1 n3 Oper [1] $end
$var wire 1 o3 Oper [0] $end
$var wire 1 p3 altb $end
$var wire 1 q3 coout [15] $end
$var wire 1 r3 coout [14] $end
$var wire 1 s3 coout [13] $end
$var wire 1 t3 coout [12] $end
$var wire 1 u3 coout [11] $end
$var wire 1 v3 coout [10] $end
$var wire 1 w3 coout [9] $end
$var wire 1 x3 coout [8] $end
$var wire 1 y3 coout [7] $end
$var wire 1 z3 coout [6] $end
$var wire 1 {3 coout [5] $end
$var wire 1 |3 coout [4] $end
$var wire 1 }3 coout [3] $end
$var wire 1 ~3 coout [2] $end
$var wire 1 !4 coout [1] $end
$var wire 1 "4 coout [0] $end
$var wire 1 #4 sltoper [1] $end
$var wire 1 $4 sltoper [0] $end
$var wire 1 %4 ltout [15] $end
$var wire 1 &4 ltout [14] $end
$var wire 1 '4 ltout [13] $end
$var wire 1 (4 ltout [12] $end
$var wire 1 )4 ltout [11] $end
$var wire 1 *4 ltout [10] $end
$var wire 1 +4 ltout [9] $end
$var wire 1 ,4 ltout [8] $end
$var wire 1 -4 ltout [7] $end
$var wire 1 .4 ltout [6] $end
$var wire 1 /4 ltout [5] $end
$var wire 1 04 ltout [4] $end
$var wire 1 14 ltout [3] $end
$var wire 1 24 ltout [2] $end
$var wire 1 34 ltout [1] $end
$var wire 1 44 ltout [0] $end
$var wire 1 54 seqoper [1] $end
$var wire 1 64 seqoper [0] $end
$var wire 1 74 aeqb $end
$var wire 1 84 seqout [15] $end
$var wire 1 94 seqout [14] $end
$var wire 1 :4 seqout [13] $end
$var wire 1 ;4 seqout [12] $end
$var wire 1 <4 seqout [11] $end
$var wire 1 =4 seqout [10] $end
$var wire 1 >4 seqout [9] $end
$var wire 1 ?4 seqout [8] $end
$var wire 1 @4 seqout [7] $end
$var wire 1 A4 seqout [6] $end
$var wire 1 B4 seqout [5] $end
$var wire 1 C4 seqout [4] $end
$var wire 1 D4 seqout [3] $end
$var wire 1 E4 seqout [2] $end
$var wire 1 F4 seqout [1] $end
$var wire 1 G4 seqout [0] $end
$var wire 1 H4 alteb $end
$var wire 1 I4 sleoper [1] $end
$var wire 1 J4 sleoper [0] $end
$var wire 1 K4 sleout [15] $end
$var wire 1 L4 sleout [14] $end
$var wire 1 M4 sleout [13] $end
$var wire 1 N4 sleout [12] $end
$var wire 1 O4 sleout [11] $end
$var wire 1 P4 sleout [10] $end
$var wire 1 Q4 sleout [9] $end
$var wire 1 R4 sleout [8] $end
$var wire 1 S4 sleout [7] $end
$var wire 1 T4 sleout [6] $end
$var wire 1 U4 sleout [5] $end
$var wire 1 V4 sleout [4] $end
$var wire 1 W4 sleout [3] $end
$var wire 1 X4 sleout [2] $end
$var wire 1 Y4 sleout [1] $end
$var wire 1 Z4 sleout [0] $end
$var wire 1 [4 SetCtrl [1] $end
$var wire 1 \4 SetCtrl [0] $end
$var wire 1 ]4 carry $end
$var wire 1 ^4 SLT $end
$var wire 1 _4 SEQ $end
$var wire 1 `4 SLE $end
$var wire 1 a4 greater $end
$var wire 1 b4 ReverseOut [15] $end
$var wire 1 c4 ReverseOut [14] $end
$var wire 1 d4 ReverseOut [13] $end
$var wire 1 e4 ReverseOut [12] $end
$var wire 1 f4 ReverseOut [11] $end
$var wire 1 g4 ReverseOut [10] $end
$var wire 1 h4 ReverseOut [9] $end
$var wire 1 i4 ReverseOut [8] $end
$var wire 1 j4 ReverseOut [7] $end
$var wire 1 k4 ReverseOut [6] $end
$var wire 1 l4 ReverseOut [5] $end
$var wire 1 m4 ReverseOut [4] $end
$var wire 1 n4 ReverseOut [3] $end
$var wire 1 o4 ReverseOut [2] $end
$var wire 1 p4 ReverseOut [1] $end
$var wire 1 q4 ReverseOut [0] $end
$var wire 1 r4 reverse [15] $end
$var wire 1 s4 reverse [14] $end
$var wire 1 t4 reverse [13] $end
$var wire 1 u4 reverse [12] $end
$var wire 1 v4 reverse [11] $end
$var wire 1 w4 reverse [10] $end
$var wire 1 x4 reverse [9] $end
$var wire 1 y4 reverse [8] $end
$var wire 1 z4 reverse [7] $end
$var wire 1 {4 reverse [6] $end
$var wire 1 |4 reverse [5] $end
$var wire 1 }4 reverse [4] $end
$var wire 1 ~4 reverse [3] $end
$var wire 1 !5 reverse [2] $end
$var wire 1 "5 reverse [1] $end
$var wire 1 #5 reverse [0] $end

$scope module shift $end
$var parameter 32 $5 OPERAND_WIDTH $end
$var parameter 32 %5 SHAMT_WIDTH $end
$var parameter 32 &5 NUM_OPERATIONS $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 +5 Oper [1] $end
$var wire 1 ,5 Oper [0] $end
$var wire 1 H3 Out [15] $end
$var wire 1 I3 Out [14] $end
$var wire 1 J3 Out [13] $end
$var wire 1 K3 Out [12] $end
$var wire 1 L3 Out [11] $end
$var wire 1 M3 Out [10] $end
$var wire 1 N3 Out [9] $end
$var wire 1 O3 Out [8] $end
$var wire 1 P3 Out [7] $end
$var wire 1 Q3 Out [6] $end
$var wire 1 R3 Out [5] $end
$var wire 1 S3 Out [4] $end
$var wire 1 T3 Out [3] $end
$var wire 1 U3 Out [2] $end
$var wire 1 V3 Out [1] $end
$var wire 1 W3 Out [0] $end
$var wire 1 -5 shift_left_r [15] $end
$var wire 1 .5 shift_left_r [14] $end
$var wire 1 /5 shift_left_r [13] $end
$var wire 1 05 shift_left_r [12] $end
$var wire 1 15 shift_left_r [11] $end
$var wire 1 25 shift_left_r [10] $end
$var wire 1 35 shift_left_r [9] $end
$var wire 1 45 shift_left_r [8] $end
$var wire 1 55 shift_left_r [7] $end
$var wire 1 65 shift_left_r [6] $end
$var wire 1 75 shift_left_r [5] $end
$var wire 1 85 shift_left_r [4] $end
$var wire 1 95 shift_left_r [3] $end
$var wire 1 :5 shift_left_r [2] $end
$var wire 1 ;5 shift_left_r [1] $end
$var wire 1 <5 shift_left_r [0] $end
$var wire 1 =5 rotate_left_r [15] $end
$var wire 1 >5 rotate_left_r [14] $end
$var wire 1 ?5 rotate_left_r [13] $end
$var wire 1 @5 rotate_left_r [12] $end
$var wire 1 A5 rotate_left_r [11] $end
$var wire 1 B5 rotate_left_r [10] $end
$var wire 1 C5 rotate_left_r [9] $end
$var wire 1 D5 rotate_left_r [8] $end
$var wire 1 E5 rotate_left_r [7] $end
$var wire 1 F5 rotate_left_r [6] $end
$var wire 1 G5 rotate_left_r [5] $end
$var wire 1 H5 rotate_left_r [4] $end
$var wire 1 I5 rotate_left_r [3] $end
$var wire 1 J5 rotate_left_r [2] $end
$var wire 1 K5 rotate_left_r [1] $end
$var wire 1 L5 rotate_left_r [0] $end
$var wire 1 M5 shift_right_l_r [15] $end
$var wire 1 N5 shift_right_l_r [14] $end
$var wire 1 O5 shift_right_l_r [13] $end
$var wire 1 P5 shift_right_l_r [12] $end
$var wire 1 Q5 shift_right_l_r [11] $end
$var wire 1 R5 shift_right_l_r [10] $end
$var wire 1 S5 shift_right_l_r [9] $end
$var wire 1 T5 shift_right_l_r [8] $end
$var wire 1 U5 shift_right_l_r [7] $end
$var wire 1 V5 shift_right_l_r [6] $end
$var wire 1 W5 shift_right_l_r [5] $end
$var wire 1 X5 shift_right_l_r [4] $end
$var wire 1 Y5 shift_right_l_r [3] $end
$var wire 1 Z5 shift_right_l_r [2] $end
$var wire 1 [5 shift_right_l_r [1] $end
$var wire 1 \5 shift_right_l_r [0] $end
$var wire 1 ]5 rotate_right_r [15] $end
$var wire 1 ^5 rotate_right_r [14] $end
$var wire 1 _5 rotate_right_r [13] $end
$var wire 1 `5 rotate_right_r [12] $end
$var wire 1 a5 rotate_right_r [11] $end
$var wire 1 b5 rotate_right_r [10] $end
$var wire 1 c5 rotate_right_r [9] $end
$var wire 1 d5 rotate_right_r [8] $end
$var wire 1 e5 rotate_right_r [7] $end
$var wire 1 f5 rotate_right_r [6] $end
$var wire 1 g5 rotate_right_r [5] $end
$var wire 1 h5 rotate_right_r [4] $end
$var wire 1 i5 rotate_right_r [3] $end
$var wire 1 j5 rotate_right_r [2] $end
$var wire 1 k5 rotate_right_r [1] $end
$var wire 1 l5 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 m5 OPERAND_WIDTH $end
$var parameter 32 n5 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 -5 result [15] $end
$var wire 1 .5 result [14] $end
$var wire 1 /5 result [13] $end
$var wire 1 05 result [12] $end
$var wire 1 15 result [11] $end
$var wire 1 25 result [10] $end
$var wire 1 35 result [9] $end
$var wire 1 45 result [8] $end
$var wire 1 55 result [7] $end
$var wire 1 65 result [6] $end
$var wire 1 75 result [5] $end
$var wire 1 85 result [4] $end
$var wire 1 95 result [3] $end
$var wire 1 :5 result [2] $end
$var wire 1 ;5 result [1] $end
$var wire 1 <5 result [0] $end
$var wire 1 o5 temp1 [15] $end
$var wire 1 p5 temp1 [14] $end
$var wire 1 q5 temp1 [13] $end
$var wire 1 r5 temp1 [12] $end
$var wire 1 s5 temp1 [11] $end
$var wire 1 t5 temp1 [10] $end
$var wire 1 u5 temp1 [9] $end
$var wire 1 v5 temp1 [8] $end
$var wire 1 w5 temp1 [7] $end
$var wire 1 x5 temp1 [6] $end
$var wire 1 y5 temp1 [5] $end
$var wire 1 z5 temp1 [4] $end
$var wire 1 {5 temp1 [3] $end
$var wire 1 |5 temp1 [2] $end
$var wire 1 }5 temp1 [1] $end
$var wire 1 ~5 temp1 [0] $end
$var wire 1 !6 temp2 [15] $end
$var wire 1 "6 temp2 [14] $end
$var wire 1 #6 temp2 [13] $end
$var wire 1 $6 temp2 [12] $end
$var wire 1 %6 temp2 [11] $end
$var wire 1 &6 temp2 [10] $end
$var wire 1 '6 temp2 [9] $end
$var wire 1 (6 temp2 [8] $end
$var wire 1 )6 temp2 [7] $end
$var wire 1 *6 temp2 [6] $end
$var wire 1 +6 temp2 [5] $end
$var wire 1 ,6 temp2 [4] $end
$var wire 1 -6 temp2 [3] $end
$var wire 1 .6 temp2 [2] $end
$var wire 1 /6 temp2 [1] $end
$var wire 1 06 temp2 [0] $end
$var wire 1 16 temp3 [15] $end
$var wire 1 26 temp3 [14] $end
$var wire 1 36 temp3 [13] $end
$var wire 1 46 temp3 [12] $end
$var wire 1 56 temp3 [11] $end
$var wire 1 66 temp3 [10] $end
$var wire 1 76 temp3 [9] $end
$var wire 1 86 temp3 [8] $end
$var wire 1 96 temp3 [7] $end
$var wire 1 :6 temp3 [6] $end
$var wire 1 ;6 temp3 [5] $end
$var wire 1 <6 temp3 [4] $end
$var wire 1 =6 temp3 [3] $end
$var wire 1 >6 temp3 [2] $end
$var wire 1 ?6 temp3 [1] $end
$var wire 1 @6 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 A6 OPERAND_WIDTH $end
$var parameter 32 B6 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 =5 result [15] $end
$var wire 1 >5 result [14] $end
$var wire 1 ?5 result [13] $end
$var wire 1 @5 result [12] $end
$var wire 1 A5 result [11] $end
$var wire 1 B5 result [10] $end
$var wire 1 C5 result [9] $end
$var wire 1 D5 result [8] $end
$var wire 1 E5 result [7] $end
$var wire 1 F5 result [6] $end
$var wire 1 G5 result [5] $end
$var wire 1 H5 result [4] $end
$var wire 1 I5 result [3] $end
$var wire 1 J5 result [2] $end
$var wire 1 K5 result [1] $end
$var wire 1 L5 result [0] $end
$var wire 1 C6 temp1 [15] $end
$var wire 1 D6 temp1 [14] $end
$var wire 1 E6 temp1 [13] $end
$var wire 1 F6 temp1 [12] $end
$var wire 1 G6 temp1 [11] $end
$var wire 1 H6 temp1 [10] $end
$var wire 1 I6 temp1 [9] $end
$var wire 1 J6 temp1 [8] $end
$var wire 1 K6 temp1 [7] $end
$var wire 1 L6 temp1 [6] $end
$var wire 1 M6 temp1 [5] $end
$var wire 1 N6 temp1 [4] $end
$var wire 1 O6 temp1 [3] $end
$var wire 1 P6 temp1 [2] $end
$var wire 1 Q6 temp1 [1] $end
$var wire 1 R6 temp1 [0] $end
$var wire 1 S6 temp2 [15] $end
$var wire 1 T6 temp2 [14] $end
$var wire 1 U6 temp2 [13] $end
$var wire 1 V6 temp2 [12] $end
$var wire 1 W6 temp2 [11] $end
$var wire 1 X6 temp2 [10] $end
$var wire 1 Y6 temp2 [9] $end
$var wire 1 Z6 temp2 [8] $end
$var wire 1 [6 temp2 [7] $end
$var wire 1 \6 temp2 [6] $end
$var wire 1 ]6 temp2 [5] $end
$var wire 1 ^6 temp2 [4] $end
$var wire 1 _6 temp2 [3] $end
$var wire 1 `6 temp2 [2] $end
$var wire 1 a6 temp2 [1] $end
$var wire 1 b6 temp2 [0] $end
$var wire 1 c6 temp3 [15] $end
$var wire 1 d6 temp3 [14] $end
$var wire 1 e6 temp3 [13] $end
$var wire 1 f6 temp3 [12] $end
$var wire 1 g6 temp3 [11] $end
$var wire 1 h6 temp3 [10] $end
$var wire 1 i6 temp3 [9] $end
$var wire 1 j6 temp3 [8] $end
$var wire 1 k6 temp3 [7] $end
$var wire 1 l6 temp3 [6] $end
$var wire 1 m6 temp3 [5] $end
$var wire 1 n6 temp3 [4] $end
$var wire 1 o6 temp3 [3] $end
$var wire 1 p6 temp3 [2] $end
$var wire 1 q6 temp3 [1] $end
$var wire 1 r6 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 s6 OPERAND_WIDTH $end
$var parameter 32 t6 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 M5 result [15] $end
$var wire 1 N5 result [14] $end
$var wire 1 O5 result [13] $end
$var wire 1 P5 result [12] $end
$var wire 1 Q5 result [11] $end
$var wire 1 R5 result [10] $end
$var wire 1 S5 result [9] $end
$var wire 1 T5 result [8] $end
$var wire 1 U5 result [7] $end
$var wire 1 V5 result [6] $end
$var wire 1 W5 result [5] $end
$var wire 1 X5 result [4] $end
$var wire 1 Y5 result [3] $end
$var wire 1 Z5 result [2] $end
$var wire 1 [5 result [1] $end
$var wire 1 \5 result [0] $end
$var wire 1 u6 temp1 [15] $end
$var wire 1 v6 temp1 [14] $end
$var wire 1 w6 temp1 [13] $end
$var wire 1 x6 temp1 [12] $end
$var wire 1 y6 temp1 [11] $end
$var wire 1 z6 temp1 [10] $end
$var wire 1 {6 temp1 [9] $end
$var wire 1 |6 temp1 [8] $end
$var wire 1 }6 temp1 [7] $end
$var wire 1 ~6 temp1 [6] $end
$var wire 1 !7 temp1 [5] $end
$var wire 1 "7 temp1 [4] $end
$var wire 1 #7 temp1 [3] $end
$var wire 1 $7 temp1 [2] $end
$var wire 1 %7 temp1 [1] $end
$var wire 1 &7 temp1 [0] $end
$var wire 1 '7 temp2 [15] $end
$var wire 1 (7 temp2 [14] $end
$var wire 1 )7 temp2 [13] $end
$var wire 1 *7 temp2 [12] $end
$var wire 1 +7 temp2 [11] $end
$var wire 1 ,7 temp2 [10] $end
$var wire 1 -7 temp2 [9] $end
$var wire 1 .7 temp2 [8] $end
$var wire 1 /7 temp2 [7] $end
$var wire 1 07 temp2 [6] $end
$var wire 1 17 temp2 [5] $end
$var wire 1 27 temp2 [4] $end
$var wire 1 37 temp2 [3] $end
$var wire 1 47 temp2 [2] $end
$var wire 1 57 temp2 [1] $end
$var wire 1 67 temp2 [0] $end
$var wire 1 77 temp3 [15] $end
$var wire 1 87 temp3 [14] $end
$var wire 1 97 temp3 [13] $end
$var wire 1 :7 temp3 [12] $end
$var wire 1 ;7 temp3 [11] $end
$var wire 1 <7 temp3 [10] $end
$var wire 1 =7 temp3 [9] $end
$var wire 1 >7 temp3 [8] $end
$var wire 1 ?7 temp3 [7] $end
$var wire 1 @7 temp3 [6] $end
$var wire 1 A7 temp3 [5] $end
$var wire 1 B7 temp3 [4] $end
$var wire 1 C7 temp3 [3] $end
$var wire 1 D7 temp3 [2] $end
$var wire 1 E7 temp3 [1] $end
$var wire 1 F7 temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 G7 OPERAND_WIDTH $end
$var parameter 32 H7 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 ]5 result [15] $end
$var wire 1 ^5 result [14] $end
$var wire 1 _5 result [13] $end
$var wire 1 `5 result [12] $end
$var wire 1 a5 result [11] $end
$var wire 1 b5 result [10] $end
$var wire 1 c5 result [9] $end
$var wire 1 d5 result [8] $end
$var wire 1 e5 result [7] $end
$var wire 1 f5 result [6] $end
$var wire 1 g5 result [5] $end
$var wire 1 h5 result [4] $end
$var wire 1 i5 result [3] $end
$var wire 1 j5 result [2] $end
$var wire 1 k5 result [1] $end
$var wire 1 l5 result [0] $end
$var wire 1 I7 temp1 [15] $end
$var wire 1 J7 temp1 [14] $end
$var wire 1 K7 temp1 [13] $end
$var wire 1 L7 temp1 [12] $end
$var wire 1 M7 temp1 [11] $end
$var wire 1 N7 temp1 [10] $end
$var wire 1 O7 temp1 [9] $end
$var wire 1 P7 temp1 [8] $end
$var wire 1 Q7 temp1 [7] $end
$var wire 1 R7 temp1 [6] $end
$var wire 1 S7 temp1 [5] $end
$var wire 1 T7 temp1 [4] $end
$var wire 1 U7 temp1 [3] $end
$var wire 1 V7 temp1 [2] $end
$var wire 1 W7 temp1 [1] $end
$var wire 1 X7 temp1 [0] $end
$var wire 1 Y7 temp2 [15] $end
$var wire 1 Z7 temp2 [14] $end
$var wire 1 [7 temp2 [13] $end
$var wire 1 \7 temp2 [12] $end
$var wire 1 ]7 temp2 [11] $end
$var wire 1 ^7 temp2 [10] $end
$var wire 1 _7 temp2 [9] $end
$var wire 1 `7 temp2 [8] $end
$var wire 1 a7 temp2 [7] $end
$var wire 1 b7 temp2 [6] $end
$var wire 1 c7 temp2 [5] $end
$var wire 1 d7 temp2 [4] $end
$var wire 1 e7 temp2 [3] $end
$var wire 1 f7 temp2 [2] $end
$var wire 1 g7 temp2 [1] $end
$var wire 1 h7 temp2 [0] $end
$var wire 1 i7 temp3 [15] $end
$var wire 1 j7 temp3 [14] $end
$var wire 1 k7 temp3 [13] $end
$var wire 1 l7 temp3 [12] $end
$var wire 1 m7 temp3 [11] $end
$var wire 1 n7 temp3 [10] $end
$var wire 1 o7 temp3 [9] $end
$var wire 1 p7 temp3 [8] $end
$var wire 1 q7 temp3 [7] $end
$var wire 1 r7 temp3 [6] $end
$var wire 1 s7 temp3 [5] $end
$var wire 1 t7 temp3 [4] $end
$var wire 1 u7 temp3 [3] $end
$var wire 1 v7 temp3 [2] $end
$var wire 1 w7 temp3 [1] $end
$var wire 1 x7 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 y7 OPERAND_WIDTH $end
$var parameter 32 z7 NUM_OPERATIONS $end
$var wire 1 83 InA [15] $end
$var wire 1 93 InA [14] $end
$var wire 1 :3 InA [13] $end
$var wire 1 ;3 InA [12] $end
$var wire 1 <3 InA [11] $end
$var wire 1 =3 InA [10] $end
$var wire 1 >3 InA [9] $end
$var wire 1 ?3 InA [8] $end
$var wire 1 @3 InA [7] $end
$var wire 1 A3 InA [6] $end
$var wire 1 B3 InA [5] $end
$var wire 1 C3 InA [4] $end
$var wire 1 D3 InA [3] $end
$var wire 1 E3 InA [2] $end
$var wire 1 F3 InA [1] $end
$var wire 1 G3 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 {7 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 |7 sign $end
$var wire 1 Y3 Out [15] $end
$var wire 1 Z3 Out [14] $end
$var wire 1 [3 Out [13] $end
$var wire 1 \3 Out [12] $end
$var wire 1 ]3 Out [11] $end
$var wire 1 ^3 Out [10] $end
$var wire 1 _3 Out [9] $end
$var wire 1 `3 Out [8] $end
$var wire 1 a3 Out [7] $end
$var wire 1 b3 Out [6] $end
$var wire 1 c3 Out [5] $end
$var wire 1 d3 Out [4] $end
$var wire 1 e3 Out [3] $end
$var wire 1 f3 Out [2] $end
$var wire 1 g3 Out [1] $end
$var wire 1 h3 Out [0] $end
$var wire 1 i3 signOut $end
$var wire 1 l3 Ofl $end
$var wire 1 k3 Zero $end
$var wire 1 j3 carryFlag $end
$var wire 1 }7 InA_invA [15] $end
$var wire 1 ~7 InA_invA [14] $end
$var wire 1 !8 InA_invA [13] $end
$var wire 1 "8 InA_invA [12] $end
$var wire 1 #8 InA_invA [11] $end
$var wire 1 $8 InA_invA [10] $end
$var wire 1 %8 InA_invA [9] $end
$var wire 1 &8 InA_invA [8] $end
$var wire 1 '8 InA_invA [7] $end
$var wire 1 (8 InA_invA [6] $end
$var wire 1 )8 InA_invA [5] $end
$var wire 1 *8 InA_invA [4] $end
$var wire 1 +8 InA_invA [3] $end
$var wire 1 ,8 InA_invA [2] $end
$var wire 1 -8 InA_invA [1] $end
$var wire 1 .8 InA_invA [0] $end
$var wire 1 /8 InB_invB [15] $end
$var wire 1 08 InB_invB [14] $end
$var wire 1 18 InB_invB [13] $end
$var wire 1 28 InB_invB [12] $end
$var wire 1 38 InB_invB [11] $end
$var wire 1 48 InB_invB [10] $end
$var wire 1 58 InB_invB [9] $end
$var wire 1 68 InB_invB [8] $end
$var wire 1 78 InB_invB [7] $end
$var wire 1 88 InB_invB [6] $end
$var wire 1 98 InB_invB [5] $end
$var wire 1 :8 InB_invB [4] $end
$var wire 1 ;8 InB_invB [3] $end
$var wire 1 <8 InB_invB [2] $end
$var wire 1 =8 InB_invB [1] $end
$var wire 1 >8 InB_invB [0] $end
$var wire 1 ?8 barrel [15] $end
$var wire 1 @8 barrel [14] $end
$var wire 1 A8 barrel [13] $end
$var wire 1 B8 barrel [12] $end
$var wire 1 C8 barrel [11] $end
$var wire 1 D8 barrel [10] $end
$var wire 1 E8 barrel [9] $end
$var wire 1 F8 barrel [8] $end
$var wire 1 G8 barrel [7] $end
$var wire 1 H8 barrel [6] $end
$var wire 1 I8 barrel [5] $end
$var wire 1 J8 barrel [4] $end
$var wire 1 K8 barrel [3] $end
$var wire 1 L8 barrel [2] $end
$var wire 1 M8 barrel [1] $end
$var wire 1 N8 barrel [0] $end
$var wire 1 O8 logic_gates_r [15] $end
$var wire 1 P8 logic_gates_r [14] $end
$var wire 1 Q8 logic_gates_r [13] $end
$var wire 1 R8 logic_gates_r [12] $end
$var wire 1 S8 logic_gates_r [11] $end
$var wire 1 T8 logic_gates_r [10] $end
$var wire 1 U8 logic_gates_r [9] $end
$var wire 1 V8 logic_gates_r [8] $end
$var wire 1 W8 logic_gates_r [7] $end
$var wire 1 X8 logic_gates_r [6] $end
$var wire 1 Y8 logic_gates_r [5] $end
$var wire 1 Z8 logic_gates_r [4] $end
$var wire 1 [8 logic_gates_r [3] $end
$var wire 1 \8 logic_gates_r [2] $end
$var wire 1 ]8 logic_gates_r [1] $end
$var wire 1 ^8 logic_gates_r [0] $end
$var wire 1 _8 addition [15] $end
$var wire 1 `8 addition [14] $end
$var wire 1 a8 addition [13] $end
$var wire 1 b8 addition [12] $end
$var wire 1 c8 addition [11] $end
$var wire 1 d8 addition [10] $end
$var wire 1 e8 addition [9] $end
$var wire 1 f8 addition [8] $end
$var wire 1 g8 addition [7] $end
$var wire 1 h8 addition [6] $end
$var wire 1 i8 addition [5] $end
$var wire 1 j8 addition [4] $end
$var wire 1 k8 addition [3] $end
$var wire 1 l8 addition [2] $end
$var wire 1 m8 addition [1] $end
$var wire 1 n8 addition [0] $end
$var wire 1 o8 addition_logic [15] $end
$var wire 1 p8 addition_logic [14] $end
$var wire 1 q8 addition_logic [13] $end
$var wire 1 r8 addition_logic [12] $end
$var wire 1 s8 addition_logic [11] $end
$var wire 1 t8 addition_logic [10] $end
$var wire 1 u8 addition_logic [9] $end
$var wire 1 v8 addition_logic [8] $end
$var wire 1 w8 addition_logic [7] $end
$var wire 1 x8 addition_logic [6] $end
$var wire 1 y8 addition_logic [5] $end
$var wire 1 z8 addition_logic [4] $end
$var wire 1 {8 addition_logic [3] $end
$var wire 1 |8 addition_logic [2] $end
$var wire 1 }8 addition_logic [1] $end
$var wire 1 ~8 addition_logic [0] $end
$var wire 1 !9 carry $end
$var wire 1 "9 signed_over $end
$var wire 1 #9 less $end

$scope module shift $end
$var parameter 32 $9 OPERAND_WIDTH $end
$var parameter 32 %9 SHAMT_WIDTH $end
$var parameter 32 &9 NUM_OPERATIONS $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 ?8 Out [15] $end
$var wire 1 @8 Out [14] $end
$var wire 1 A8 Out [13] $end
$var wire 1 B8 Out [12] $end
$var wire 1 C8 Out [11] $end
$var wire 1 D8 Out [10] $end
$var wire 1 E8 Out [9] $end
$var wire 1 F8 Out [8] $end
$var wire 1 G8 Out [7] $end
$var wire 1 H8 Out [6] $end
$var wire 1 I8 Out [5] $end
$var wire 1 J8 Out [4] $end
$var wire 1 K8 Out [3] $end
$var wire 1 L8 Out [2] $end
$var wire 1 M8 Out [1] $end
$var wire 1 N8 Out [0] $end
$var wire 1 '9 shift_left_r [15] $end
$var wire 1 (9 shift_left_r [14] $end
$var wire 1 )9 shift_left_r [13] $end
$var wire 1 *9 shift_left_r [12] $end
$var wire 1 +9 shift_left_r [11] $end
$var wire 1 ,9 shift_left_r [10] $end
$var wire 1 -9 shift_left_r [9] $end
$var wire 1 .9 shift_left_r [8] $end
$var wire 1 /9 shift_left_r [7] $end
$var wire 1 09 shift_left_r [6] $end
$var wire 1 19 shift_left_r [5] $end
$var wire 1 29 shift_left_r [4] $end
$var wire 1 39 shift_left_r [3] $end
$var wire 1 49 shift_left_r [2] $end
$var wire 1 59 shift_left_r [1] $end
$var wire 1 69 shift_left_r [0] $end
$var wire 1 79 rotate_left_r [15] $end
$var wire 1 89 rotate_left_r [14] $end
$var wire 1 99 rotate_left_r [13] $end
$var wire 1 :9 rotate_left_r [12] $end
$var wire 1 ;9 rotate_left_r [11] $end
$var wire 1 <9 rotate_left_r [10] $end
$var wire 1 =9 rotate_left_r [9] $end
$var wire 1 >9 rotate_left_r [8] $end
$var wire 1 ?9 rotate_left_r [7] $end
$var wire 1 @9 rotate_left_r [6] $end
$var wire 1 A9 rotate_left_r [5] $end
$var wire 1 B9 rotate_left_r [4] $end
$var wire 1 C9 rotate_left_r [3] $end
$var wire 1 D9 rotate_left_r [2] $end
$var wire 1 E9 rotate_left_r [1] $end
$var wire 1 F9 rotate_left_r [0] $end
$var wire 1 G9 shift_right_l_r [15] $end
$var wire 1 H9 shift_right_l_r [14] $end
$var wire 1 I9 shift_right_l_r [13] $end
$var wire 1 J9 shift_right_l_r [12] $end
$var wire 1 K9 shift_right_l_r [11] $end
$var wire 1 L9 shift_right_l_r [10] $end
$var wire 1 M9 shift_right_l_r [9] $end
$var wire 1 N9 shift_right_l_r [8] $end
$var wire 1 O9 shift_right_l_r [7] $end
$var wire 1 P9 shift_right_l_r [6] $end
$var wire 1 Q9 shift_right_l_r [5] $end
$var wire 1 R9 shift_right_l_r [4] $end
$var wire 1 S9 shift_right_l_r [3] $end
$var wire 1 T9 shift_right_l_r [2] $end
$var wire 1 U9 shift_right_l_r [1] $end
$var wire 1 V9 shift_right_l_r [0] $end
$var wire 1 W9 rotate_right_r [15] $end
$var wire 1 X9 rotate_right_r [14] $end
$var wire 1 Y9 rotate_right_r [13] $end
$var wire 1 Z9 rotate_right_r [12] $end
$var wire 1 [9 rotate_right_r [11] $end
$var wire 1 \9 rotate_right_r [10] $end
$var wire 1 ]9 rotate_right_r [9] $end
$var wire 1 ^9 rotate_right_r [8] $end
$var wire 1 _9 rotate_right_r [7] $end
$var wire 1 `9 rotate_right_r [6] $end
$var wire 1 a9 rotate_right_r [5] $end
$var wire 1 b9 rotate_right_r [4] $end
$var wire 1 c9 rotate_right_r [3] $end
$var wire 1 d9 rotate_right_r [2] $end
$var wire 1 e9 rotate_right_r [1] $end
$var wire 1 f9 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 g9 OPERAND_WIDTH $end
$var parameter 32 h9 SHAMT_WIDTH $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 '9 result [15] $end
$var wire 1 (9 result [14] $end
$var wire 1 )9 result [13] $end
$var wire 1 *9 result [12] $end
$var wire 1 +9 result [11] $end
$var wire 1 ,9 result [10] $end
$var wire 1 -9 result [9] $end
$var wire 1 .9 result [8] $end
$var wire 1 /9 result [7] $end
$var wire 1 09 result [6] $end
$var wire 1 19 result [5] $end
$var wire 1 29 result [4] $end
$var wire 1 39 result [3] $end
$var wire 1 49 result [2] $end
$var wire 1 59 result [1] $end
$var wire 1 69 result [0] $end
$var wire 1 i9 temp1 [15] $end
$var wire 1 j9 temp1 [14] $end
$var wire 1 k9 temp1 [13] $end
$var wire 1 l9 temp1 [12] $end
$var wire 1 m9 temp1 [11] $end
$var wire 1 n9 temp1 [10] $end
$var wire 1 o9 temp1 [9] $end
$var wire 1 p9 temp1 [8] $end
$var wire 1 q9 temp1 [7] $end
$var wire 1 r9 temp1 [6] $end
$var wire 1 s9 temp1 [5] $end
$var wire 1 t9 temp1 [4] $end
$var wire 1 u9 temp1 [3] $end
$var wire 1 v9 temp1 [2] $end
$var wire 1 w9 temp1 [1] $end
$var wire 1 x9 temp1 [0] $end
$var wire 1 y9 temp2 [15] $end
$var wire 1 z9 temp2 [14] $end
$var wire 1 {9 temp2 [13] $end
$var wire 1 |9 temp2 [12] $end
$var wire 1 }9 temp2 [11] $end
$var wire 1 ~9 temp2 [10] $end
$var wire 1 !: temp2 [9] $end
$var wire 1 ": temp2 [8] $end
$var wire 1 #: temp2 [7] $end
$var wire 1 $: temp2 [6] $end
$var wire 1 %: temp2 [5] $end
$var wire 1 &: temp2 [4] $end
$var wire 1 ': temp2 [3] $end
$var wire 1 (: temp2 [2] $end
$var wire 1 ): temp2 [1] $end
$var wire 1 *: temp2 [0] $end
$var wire 1 +: temp3 [15] $end
$var wire 1 ,: temp3 [14] $end
$var wire 1 -: temp3 [13] $end
$var wire 1 .: temp3 [12] $end
$var wire 1 /: temp3 [11] $end
$var wire 1 0: temp3 [10] $end
$var wire 1 1: temp3 [9] $end
$var wire 1 2: temp3 [8] $end
$var wire 1 3: temp3 [7] $end
$var wire 1 4: temp3 [6] $end
$var wire 1 5: temp3 [5] $end
$var wire 1 6: temp3 [4] $end
$var wire 1 7: temp3 [3] $end
$var wire 1 8: temp3 [2] $end
$var wire 1 9: temp3 [1] $end
$var wire 1 :: temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 ;: OPERAND_WIDTH $end
$var parameter 32 <: SHAMT_WIDTH $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 79 result [15] $end
$var wire 1 89 result [14] $end
$var wire 1 99 result [13] $end
$var wire 1 :9 result [12] $end
$var wire 1 ;9 result [11] $end
$var wire 1 <9 result [10] $end
$var wire 1 =9 result [9] $end
$var wire 1 >9 result [8] $end
$var wire 1 ?9 result [7] $end
$var wire 1 @9 result [6] $end
$var wire 1 A9 result [5] $end
$var wire 1 B9 result [4] $end
$var wire 1 C9 result [3] $end
$var wire 1 D9 result [2] $end
$var wire 1 E9 result [1] $end
$var wire 1 F9 result [0] $end
$var wire 1 =: temp1 [15] $end
$var wire 1 >: temp1 [14] $end
$var wire 1 ?: temp1 [13] $end
$var wire 1 @: temp1 [12] $end
$var wire 1 A: temp1 [11] $end
$var wire 1 B: temp1 [10] $end
$var wire 1 C: temp1 [9] $end
$var wire 1 D: temp1 [8] $end
$var wire 1 E: temp1 [7] $end
$var wire 1 F: temp1 [6] $end
$var wire 1 G: temp1 [5] $end
$var wire 1 H: temp1 [4] $end
$var wire 1 I: temp1 [3] $end
$var wire 1 J: temp1 [2] $end
$var wire 1 K: temp1 [1] $end
$var wire 1 L: temp1 [0] $end
$var wire 1 M: temp2 [15] $end
$var wire 1 N: temp2 [14] $end
$var wire 1 O: temp2 [13] $end
$var wire 1 P: temp2 [12] $end
$var wire 1 Q: temp2 [11] $end
$var wire 1 R: temp2 [10] $end
$var wire 1 S: temp2 [9] $end
$var wire 1 T: temp2 [8] $end
$var wire 1 U: temp2 [7] $end
$var wire 1 V: temp2 [6] $end
$var wire 1 W: temp2 [5] $end
$var wire 1 X: temp2 [4] $end
$var wire 1 Y: temp2 [3] $end
$var wire 1 Z: temp2 [2] $end
$var wire 1 [: temp2 [1] $end
$var wire 1 \: temp2 [0] $end
$var wire 1 ]: temp3 [15] $end
$var wire 1 ^: temp3 [14] $end
$var wire 1 _: temp3 [13] $end
$var wire 1 `: temp3 [12] $end
$var wire 1 a: temp3 [11] $end
$var wire 1 b: temp3 [10] $end
$var wire 1 c: temp3 [9] $end
$var wire 1 d: temp3 [8] $end
$var wire 1 e: temp3 [7] $end
$var wire 1 f: temp3 [6] $end
$var wire 1 g: temp3 [5] $end
$var wire 1 h: temp3 [4] $end
$var wire 1 i: temp3 [3] $end
$var wire 1 j: temp3 [2] $end
$var wire 1 k: temp3 [1] $end
$var wire 1 l: temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 m: OPERAND_WIDTH $end
$var parameter 32 n: SHAMT_WIDTH $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 G9 result [15] $end
$var wire 1 H9 result [14] $end
$var wire 1 I9 result [13] $end
$var wire 1 J9 result [12] $end
$var wire 1 K9 result [11] $end
$var wire 1 L9 result [10] $end
$var wire 1 M9 result [9] $end
$var wire 1 N9 result [8] $end
$var wire 1 O9 result [7] $end
$var wire 1 P9 result [6] $end
$var wire 1 Q9 result [5] $end
$var wire 1 R9 result [4] $end
$var wire 1 S9 result [3] $end
$var wire 1 T9 result [2] $end
$var wire 1 U9 result [1] $end
$var wire 1 V9 result [0] $end
$var wire 1 o: temp1 [15] $end
$var wire 1 p: temp1 [14] $end
$var wire 1 q: temp1 [13] $end
$var wire 1 r: temp1 [12] $end
$var wire 1 s: temp1 [11] $end
$var wire 1 t: temp1 [10] $end
$var wire 1 u: temp1 [9] $end
$var wire 1 v: temp1 [8] $end
$var wire 1 w: temp1 [7] $end
$var wire 1 x: temp1 [6] $end
$var wire 1 y: temp1 [5] $end
$var wire 1 z: temp1 [4] $end
$var wire 1 {: temp1 [3] $end
$var wire 1 |: temp1 [2] $end
$var wire 1 }: temp1 [1] $end
$var wire 1 ~: temp1 [0] $end
$var wire 1 !; temp2 [15] $end
$var wire 1 "; temp2 [14] $end
$var wire 1 #; temp2 [13] $end
$var wire 1 $; temp2 [12] $end
$var wire 1 %; temp2 [11] $end
$var wire 1 &; temp2 [10] $end
$var wire 1 '; temp2 [9] $end
$var wire 1 (; temp2 [8] $end
$var wire 1 ); temp2 [7] $end
$var wire 1 *; temp2 [6] $end
$var wire 1 +; temp2 [5] $end
$var wire 1 ,; temp2 [4] $end
$var wire 1 -; temp2 [3] $end
$var wire 1 .; temp2 [2] $end
$var wire 1 /; temp2 [1] $end
$var wire 1 0; temp2 [0] $end
$var wire 1 1; temp3 [15] $end
$var wire 1 2; temp3 [14] $end
$var wire 1 3; temp3 [13] $end
$var wire 1 4; temp3 [12] $end
$var wire 1 5; temp3 [11] $end
$var wire 1 6; temp3 [10] $end
$var wire 1 7; temp3 [9] $end
$var wire 1 8; temp3 [8] $end
$var wire 1 9; temp3 [7] $end
$var wire 1 :; temp3 [6] $end
$var wire 1 ;; temp3 [5] $end
$var wire 1 <; temp3 [4] $end
$var wire 1 =; temp3 [3] $end
$var wire 1 >; temp3 [2] $end
$var wire 1 ?; temp3 [1] $end
$var wire 1 @; temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 A; OPERAND_WIDTH $end
$var parameter 32 B; SHAMT_WIDTH $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 W9 result [15] $end
$var wire 1 X9 result [14] $end
$var wire 1 Y9 result [13] $end
$var wire 1 Z9 result [12] $end
$var wire 1 [9 result [11] $end
$var wire 1 \9 result [10] $end
$var wire 1 ]9 result [9] $end
$var wire 1 ^9 result [8] $end
$var wire 1 _9 result [7] $end
$var wire 1 `9 result [6] $end
$var wire 1 a9 result [5] $end
$var wire 1 b9 result [4] $end
$var wire 1 c9 result [3] $end
$var wire 1 d9 result [2] $end
$var wire 1 e9 result [1] $end
$var wire 1 f9 result [0] $end
$var wire 1 C; temp1 [15] $end
$var wire 1 D; temp1 [14] $end
$var wire 1 E; temp1 [13] $end
$var wire 1 F; temp1 [12] $end
$var wire 1 G; temp1 [11] $end
$var wire 1 H; temp1 [10] $end
$var wire 1 I; temp1 [9] $end
$var wire 1 J; temp1 [8] $end
$var wire 1 K; temp1 [7] $end
$var wire 1 L; temp1 [6] $end
$var wire 1 M; temp1 [5] $end
$var wire 1 N; temp1 [4] $end
$var wire 1 O; temp1 [3] $end
$var wire 1 P; temp1 [2] $end
$var wire 1 Q; temp1 [1] $end
$var wire 1 R; temp1 [0] $end
$var wire 1 S; temp2 [15] $end
$var wire 1 T; temp2 [14] $end
$var wire 1 U; temp2 [13] $end
$var wire 1 V; temp2 [12] $end
$var wire 1 W; temp2 [11] $end
$var wire 1 X; temp2 [10] $end
$var wire 1 Y; temp2 [9] $end
$var wire 1 Z; temp2 [8] $end
$var wire 1 [; temp2 [7] $end
$var wire 1 \; temp2 [6] $end
$var wire 1 ]; temp2 [5] $end
$var wire 1 ^; temp2 [4] $end
$var wire 1 _; temp2 [3] $end
$var wire 1 `; temp2 [2] $end
$var wire 1 a; temp2 [1] $end
$var wire 1 b; temp2 [0] $end
$var wire 1 c; temp3 [15] $end
$var wire 1 d; temp3 [14] $end
$var wire 1 e; temp3 [13] $end
$var wire 1 f; temp3 [12] $end
$var wire 1 g; temp3 [11] $end
$var wire 1 h; temp3 [10] $end
$var wire 1 i; temp3 [9] $end
$var wire 1 j; temp3 [8] $end
$var wire 1 k; temp3 [7] $end
$var wire 1 l; temp3 [6] $end
$var wire 1 m; temp3 [5] $end
$var wire 1 n; temp3 [4] $end
$var wire 1 o; temp3 [3] $end
$var wire 1 p; temp3 [2] $end
$var wire 1 q; temp3 [1] $end
$var wire 1 r; temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var parameter 32 s; OPERAND_WIDTH $end
$var parameter 32 t; NUM_OPERATIONS $end
$var wire 1 }7 A [15] $end
$var wire 1 ~7 A [14] $end
$var wire 1 !8 A [13] $end
$var wire 1 "8 A [12] $end
$var wire 1 #8 A [11] $end
$var wire 1 $8 A [10] $end
$var wire 1 %8 A [9] $end
$var wire 1 &8 A [8] $end
$var wire 1 '8 A [7] $end
$var wire 1 (8 A [6] $end
$var wire 1 )8 A [5] $end
$var wire 1 *8 A [4] $end
$var wire 1 +8 A [3] $end
$var wire 1 ,8 A [2] $end
$var wire 1 -8 A [1] $end
$var wire 1 .8 A [0] $end
$var wire 1 /8 B [15] $end
$var wire 1 08 B [14] $end
$var wire 1 18 B [13] $end
$var wire 1 28 B [12] $end
$var wire 1 38 B [11] $end
$var wire 1 48 B [10] $end
$var wire 1 58 B [9] $end
$var wire 1 68 B [8] $end
$var wire 1 78 B [7] $end
$var wire 1 88 B [6] $end
$var wire 1 98 B [5] $end
$var wire 1 :8 B [4] $end
$var wire 1 ;8 B [3] $end
$var wire 1 <8 B [2] $end
$var wire 1 =8 B [1] $end
$var wire 1 >8 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 O8 Result [15] $end
$var wire 1 P8 Result [14] $end
$var wire 1 Q8 Result [13] $end
$var wire 1 R8 Result [12] $end
$var wire 1 S8 Result [11] $end
$var wire 1 T8 Result [10] $end
$var wire 1 U8 Result [9] $end
$var wire 1 V8 Result [8] $end
$var wire 1 W8 Result [7] $end
$var wire 1 X8 Result [6] $end
$var wire 1 Y8 Result [5] $end
$var wire 1 Z8 Result [4] $end
$var wire 1 [8 Result [3] $end
$var wire 1 \8 Result [2] $end
$var wire 1 ]8 Result [1] $end
$var wire 1 ^8 Result [0] $end
$upscope $end

$scope module adding $end
$var parameter 32 u; N $end
$var wire 1 _8 sum [15] $end
$var wire 1 `8 sum [14] $end
$var wire 1 a8 sum [13] $end
$var wire 1 b8 sum [12] $end
$var wire 1 c8 sum [11] $end
$var wire 1 d8 sum [10] $end
$var wire 1 e8 sum [9] $end
$var wire 1 f8 sum [8] $end
$var wire 1 g8 sum [7] $end
$var wire 1 h8 sum [6] $end
$var wire 1 i8 sum [5] $end
$var wire 1 j8 sum [4] $end
$var wire 1 k8 sum [3] $end
$var wire 1 l8 sum [2] $end
$var wire 1 m8 sum [1] $end
$var wire 1 n8 sum [0] $end
$var wire 1 !9 c_out $end
$var wire 1 }7 a [15] $end
$var wire 1 ~7 a [14] $end
$var wire 1 !8 a [13] $end
$var wire 1 "8 a [12] $end
$var wire 1 #8 a [11] $end
$var wire 1 $8 a [10] $end
$var wire 1 %8 a [9] $end
$var wire 1 &8 a [8] $end
$var wire 1 '8 a [7] $end
$var wire 1 (8 a [6] $end
$var wire 1 )8 a [5] $end
$var wire 1 *8 a [4] $end
$var wire 1 +8 a [3] $end
$var wire 1 ,8 a [2] $end
$var wire 1 -8 a [1] $end
$var wire 1 .8 a [0] $end
$var wire 1 /8 b [15] $end
$var wire 1 08 b [14] $end
$var wire 1 18 b [13] $end
$var wire 1 28 b [12] $end
$var wire 1 38 b [11] $end
$var wire 1 48 b [10] $end
$var wire 1 58 b [9] $end
$var wire 1 68 b [8] $end
$var wire 1 78 b [7] $end
$var wire 1 88 b [6] $end
$var wire 1 98 b [5] $end
$var wire 1 :8 b [4] $end
$var wire 1 ;8 b [3] $end
$var wire 1 <8 b [2] $end
$var wire 1 =8 b [1] $end
$var wire 1 >8 b [0] $end
$var wire 1 {7 c_in $end
$var wire 1 v; gen [15] $end
$var wire 1 w; gen [14] $end
$var wire 1 x; gen [13] $end
$var wire 1 y; gen [12] $end
$var wire 1 z; gen [11] $end
$var wire 1 {; gen [10] $end
$var wire 1 |; gen [9] $end
$var wire 1 }; gen [8] $end
$var wire 1 ~; gen [7] $end
$var wire 1 !< gen [6] $end
$var wire 1 "< gen [5] $end
$var wire 1 #< gen [4] $end
$var wire 1 $< gen [3] $end
$var wire 1 %< gen [2] $end
$var wire 1 &< gen [1] $end
$var wire 1 '< gen [0] $end
$var wire 1 (< four_gen [3] $end
$var wire 1 )< four_gen [2] $end
$var wire 1 *< four_gen [1] $end
$var wire 1 +< four_gen [0] $end
$var wire 1 ,< prop [15] $end
$var wire 1 -< prop [14] $end
$var wire 1 .< prop [13] $end
$var wire 1 /< prop [12] $end
$var wire 1 0< prop [11] $end
$var wire 1 1< prop [10] $end
$var wire 1 2< prop [9] $end
$var wire 1 3< prop [8] $end
$var wire 1 4< prop [7] $end
$var wire 1 5< prop [6] $end
$var wire 1 6< prop [5] $end
$var wire 1 7< prop [4] $end
$var wire 1 8< prop [3] $end
$var wire 1 9< prop [2] $end
$var wire 1 :< prop [1] $end
$var wire 1 ;< prop [0] $end
$var wire 1 << four_prop [3] $end
$var wire 1 =< four_prop [2] $end
$var wire 1 >< four_prop [1] $end
$var wire 1 ?< four_prop [0] $end
$var wire 1 @< carry [2] $end
$var wire 1 A< carry [1] $end
$var wire 1 B< carry [0] $end
$var wire 1 C< fa_sum [15] $end
$var wire 1 D< fa_sum [14] $end
$var wire 1 E< fa_sum [13] $end
$var wire 1 F< fa_sum [12] $end
$var wire 1 G< fa_sum [11] $end
$var wire 1 H< fa_sum [10] $end
$var wire 1 I< fa_sum [9] $end
$var wire 1 J< fa_sum [8] $end
$var wire 1 K< fa_sum [7] $end
$var wire 1 L< fa_sum [6] $end
$var wire 1 M< fa_sum [5] $end
$var wire 1 N< fa_sum [4] $end
$var wire 1 O< fa_sum [3] $end
$var wire 1 P< fa_sum [2] $end
$var wire 1 Q< fa_sum [1] $end
$var wire 1 R< fa_sum [0] $end

$scope module cla1 $end
$var parameter 32 S< N $end
$var wire 1 O< sum [3] $end
$var wire 1 P< sum [2] $end
$var wire 1 Q< sum [1] $end
$var wire 1 R< sum [0] $end
$var wire 1 T< c_out $end
$var wire 1 +8 a [3] $end
$var wire 1 ,8 a [2] $end
$var wire 1 -8 a [1] $end
$var wire 1 .8 a [0] $end
$var wire 1 ;8 b [3] $end
$var wire 1 <8 b [2] $end
$var wire 1 =8 b [1] $end
$var wire 1 >8 b [0] $end
$var wire 1 {7 c_in $end
$var wire 1 U< gen [3] $end
$var wire 1 V< gen [2] $end
$var wire 1 W< gen [1] $end
$var wire 1 X< gen [0] $end
$var wire 1 Y< prop [3] $end
$var wire 1 Z< prop [2] $end
$var wire 1 [< prop [1] $end
$var wire 1 \< prop [0] $end
$var wire 1 ]< carry [2] $end
$var wire 1 ^< carry [1] $end
$var wire 1 _< carry [0] $end
$var wire 1 `< fa_sum [3] $end
$var wire 1 a< fa_sum [2] $end
$var wire 1 b< fa_sum [1] $end
$var wire 1 c< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 c< s $end
$var wire 1 d< c_out $end
$var wire 1 .8 a $end
$var wire 1 >8 b $end
$var wire 1 {7 c_in $end
$var wire 1 e< xor_AB $end
$var wire 1 f< xor_ABCin $end
$var wire 1 g< NAND_AB $end
$var wire 1 h< not_NAND_AB $end
$var wire 1 i< NAND_Cin_xor_AB $end
$var wire 1 j< not_NAND_Cin_xor_AB $end
$var wire 1 k< NOR_2NAND $end
$var wire 1 l< not_NOR_2NAND $end
$var wire 1 m< Cin $end

$scope module xor1 $end
$var wire 1 .8 in1 $end
$var wire 1 >8 in2 $end
$var wire 1 e< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 e< in1 $end
$var wire 1 {7 in2 $end
$var wire 1 f< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 .8 in1 $end
$var wire 1 >8 in2 $end
$var wire 1 g< out $end
$upscope $end

$scope module not1 $end
$var wire 1 g< in1 $end
$var wire 1 h< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 m< in1 $end
$var wire 1 e< in2 $end
$var wire 1 i< out $end
$upscope $end

$scope module not2 $end
$var wire 1 i< in1 $end
$var wire 1 j< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 h< in1 $end
$var wire 1 j< in2 $end
$var wire 1 k< out $end
$upscope $end

$scope module not3 $end
$var wire 1 k< in1 $end
$var wire 1 l< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 b< s $end
$var wire 1 n< c_out $end
$var wire 1 -8 a $end
$var wire 1 =8 b $end
$var wire 1 _< c_in $end
$var wire 1 o< xor_AB $end
$var wire 1 p< xor_ABCin $end
$var wire 1 q< NAND_AB $end
$var wire 1 r< not_NAND_AB $end
$var wire 1 s< NAND_Cin_xor_AB $end
$var wire 1 t< not_NAND_Cin_xor_AB $end
$var wire 1 u< NOR_2NAND $end
$var wire 1 v< not_NOR_2NAND $end
$var wire 1 w< Cin $end

$scope module xor1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 o< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 o< in1 $end
$var wire 1 _< in2 $end
$var wire 1 p< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 q< out $end
$upscope $end

$scope module not1 $end
$var wire 1 q< in1 $end
$var wire 1 r< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 w< in1 $end
$var wire 1 o< in2 $end
$var wire 1 s< out $end
$upscope $end

$scope module not2 $end
$var wire 1 s< in1 $end
$var wire 1 t< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 r< in1 $end
$var wire 1 t< in2 $end
$var wire 1 u< out $end
$upscope $end

$scope module not3 $end
$var wire 1 u< in1 $end
$var wire 1 v< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 a< s $end
$var wire 1 x< c_out $end
$var wire 1 ,8 a $end
$var wire 1 <8 b $end
$var wire 1 ^< c_in $end
$var wire 1 y< xor_AB $end
$var wire 1 z< xor_ABCin $end
$var wire 1 {< NAND_AB $end
$var wire 1 |< not_NAND_AB $end
$var wire 1 }< NAND_Cin_xor_AB $end
$var wire 1 ~< not_NAND_Cin_xor_AB $end
$var wire 1 != NOR_2NAND $end
$var wire 1 "= not_NOR_2NAND $end
$var wire 1 #= Cin $end

$scope module xor1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 y< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 y< in1 $end
$var wire 1 ^< in2 $end
$var wire 1 z< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 {< out $end
$upscope $end

$scope module not1 $end
$var wire 1 {< in1 $end
$var wire 1 |< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #= in1 $end
$var wire 1 y< in2 $end
$var wire 1 }< out $end
$upscope $end

$scope module not2 $end
$var wire 1 }< in1 $end
$var wire 1 ~< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 |< in1 $end
$var wire 1 ~< in2 $end
$var wire 1 != out $end
$upscope $end

$scope module not3 $end
$var wire 1 != in1 $end
$var wire 1 "= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 `< s $end
$var wire 1 $= c_out $end
$var wire 1 +8 a $end
$var wire 1 ;8 b $end
$var wire 1 ]< c_in $end
$var wire 1 %= xor_AB $end
$var wire 1 &= xor_ABCin $end
$var wire 1 '= NAND_AB $end
$var wire 1 (= not_NAND_AB $end
$var wire 1 )= NAND_Cin_xor_AB $end
$var wire 1 *= not_NAND_Cin_xor_AB $end
$var wire 1 += NOR_2NAND $end
$var wire 1 ,= not_NOR_2NAND $end
$var wire 1 -= Cin $end

$scope module xor1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 %= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %= in1 $end
$var wire 1 ]< in2 $end
$var wire 1 &= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 '= out $end
$upscope $end

$scope module not1 $end
$var wire 1 '= in1 $end
$var wire 1 (= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 -= in1 $end
$var wire 1 %= in2 $end
$var wire 1 )= out $end
$upscope $end

$scope module not2 $end
$var wire 1 )= in1 $end
$var wire 1 *= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (= in1 $end
$var wire 1 *= in2 $end
$var wire 1 += out $end
$upscope $end

$scope module not3 $end
$var wire 1 += in1 $end
$var wire 1 ,= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var parameter 32 .= N $end
$var wire 1 K< sum [3] $end
$var wire 1 L< sum [2] $end
$var wire 1 M< sum [1] $end
$var wire 1 N< sum [0] $end
$var wire 1 /= c_out $end
$var wire 1 '8 a [3] $end
$var wire 1 (8 a [2] $end
$var wire 1 )8 a [1] $end
$var wire 1 *8 a [0] $end
$var wire 1 78 b [3] $end
$var wire 1 88 b [2] $end
$var wire 1 98 b [1] $end
$var wire 1 :8 b [0] $end
$var wire 1 B< c_in $end
$var wire 1 0= gen [3] $end
$var wire 1 1= gen [2] $end
$var wire 1 2= gen [1] $end
$var wire 1 3= gen [0] $end
$var wire 1 4= prop [3] $end
$var wire 1 5= prop [2] $end
$var wire 1 6= prop [1] $end
$var wire 1 7= prop [0] $end
$var wire 1 8= carry [2] $end
$var wire 1 9= carry [1] $end
$var wire 1 := carry [0] $end
$var wire 1 ;= fa_sum [3] $end
$var wire 1 <= fa_sum [2] $end
$var wire 1 == fa_sum [1] $end
$var wire 1 >= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 >= s $end
$var wire 1 ?= c_out $end
$var wire 1 *8 a $end
$var wire 1 :8 b $end
$var wire 1 B< c_in $end
$var wire 1 @= xor_AB $end
$var wire 1 A= xor_ABCin $end
$var wire 1 B= NAND_AB $end
$var wire 1 C= not_NAND_AB $end
$var wire 1 D= NAND_Cin_xor_AB $end
$var wire 1 E= not_NAND_Cin_xor_AB $end
$var wire 1 F= NOR_2NAND $end
$var wire 1 G= not_NOR_2NAND $end
$var wire 1 H= Cin $end

$scope module xor1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 @= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 @= in1 $end
$var wire 1 B< in2 $end
$var wire 1 A= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 B= out $end
$upscope $end

$scope module not1 $end
$var wire 1 B= in1 $end
$var wire 1 C= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 H= in1 $end
$var wire 1 @= in2 $end
$var wire 1 D= out $end
$upscope $end

$scope module not2 $end
$var wire 1 D= in1 $end
$var wire 1 E= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 C= in1 $end
$var wire 1 E= in2 $end
$var wire 1 F= out $end
$upscope $end

$scope module not3 $end
$var wire 1 F= in1 $end
$var wire 1 G= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 == s $end
$var wire 1 I= c_out $end
$var wire 1 )8 a $end
$var wire 1 98 b $end
$var wire 1 := c_in $end
$var wire 1 J= xor_AB $end
$var wire 1 K= xor_ABCin $end
$var wire 1 L= NAND_AB $end
$var wire 1 M= not_NAND_AB $end
$var wire 1 N= NAND_Cin_xor_AB $end
$var wire 1 O= not_NAND_Cin_xor_AB $end
$var wire 1 P= NOR_2NAND $end
$var wire 1 Q= not_NOR_2NAND $end
$var wire 1 R= Cin $end

$scope module xor1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 J= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 J= in1 $end
$var wire 1 := in2 $end
$var wire 1 K= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 L= out $end
$upscope $end

$scope module not1 $end
$var wire 1 L= in1 $end
$var wire 1 M= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 R= in1 $end
$var wire 1 J= in2 $end
$var wire 1 N= out $end
$upscope $end

$scope module not2 $end
$var wire 1 N= in1 $end
$var wire 1 O= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 M= in1 $end
$var wire 1 O= in2 $end
$var wire 1 P= out $end
$upscope $end

$scope module not3 $end
$var wire 1 P= in1 $end
$var wire 1 Q= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 <= s $end
$var wire 1 S= c_out $end
$var wire 1 (8 a $end
$var wire 1 88 b $end
$var wire 1 9= c_in $end
$var wire 1 T= xor_AB $end
$var wire 1 U= xor_ABCin $end
$var wire 1 V= NAND_AB $end
$var wire 1 W= not_NAND_AB $end
$var wire 1 X= NAND_Cin_xor_AB $end
$var wire 1 Y= not_NAND_Cin_xor_AB $end
$var wire 1 Z= NOR_2NAND $end
$var wire 1 [= not_NOR_2NAND $end
$var wire 1 \= Cin $end

$scope module xor1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 T= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 T= in1 $end
$var wire 1 9= in2 $end
$var wire 1 U= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 V= out $end
$upscope $end

$scope module not1 $end
$var wire 1 V= in1 $end
$var wire 1 W= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \= in1 $end
$var wire 1 T= in2 $end
$var wire 1 X= out $end
$upscope $end

$scope module not2 $end
$var wire 1 X= in1 $end
$var wire 1 Y= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 W= in1 $end
$var wire 1 Y= in2 $end
$var wire 1 Z= out $end
$upscope $end

$scope module not3 $end
$var wire 1 Z= in1 $end
$var wire 1 [= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 ;= s $end
$var wire 1 ]= c_out $end
$var wire 1 '8 a $end
$var wire 1 78 b $end
$var wire 1 8= c_in $end
$var wire 1 ^= xor_AB $end
$var wire 1 _= xor_ABCin $end
$var wire 1 `= NAND_AB $end
$var wire 1 a= not_NAND_AB $end
$var wire 1 b= NAND_Cin_xor_AB $end
$var wire 1 c= not_NAND_Cin_xor_AB $end
$var wire 1 d= NOR_2NAND $end
$var wire 1 e= not_NOR_2NAND $end
$var wire 1 f= Cin $end

$scope module xor1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 ^= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^= in1 $end
$var wire 1 8= in2 $end
$var wire 1 _= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 `= out $end
$upscope $end

$scope module not1 $end
$var wire 1 `= in1 $end
$var wire 1 a= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 f= in1 $end
$var wire 1 ^= in2 $end
$var wire 1 b= out $end
$upscope $end

$scope module not2 $end
$var wire 1 b= in1 $end
$var wire 1 c= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 a= in1 $end
$var wire 1 c= in2 $end
$var wire 1 d= out $end
$upscope $end

$scope module not3 $end
$var wire 1 d= in1 $end
$var wire 1 e= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var parameter 32 g= N $end
$var wire 1 G< sum [3] $end
$var wire 1 H< sum [2] $end
$var wire 1 I< sum [1] $end
$var wire 1 J< sum [0] $end
$var wire 1 h= c_out $end
$var wire 1 #8 a [3] $end
$var wire 1 $8 a [2] $end
$var wire 1 %8 a [1] $end
$var wire 1 &8 a [0] $end
$var wire 1 38 b [3] $end
$var wire 1 48 b [2] $end
$var wire 1 58 b [1] $end
$var wire 1 68 b [0] $end
$var wire 1 A< c_in $end
$var wire 1 i= gen [3] $end
$var wire 1 j= gen [2] $end
$var wire 1 k= gen [1] $end
$var wire 1 l= gen [0] $end
$var wire 1 m= prop [3] $end
$var wire 1 n= prop [2] $end
$var wire 1 o= prop [1] $end
$var wire 1 p= prop [0] $end
$var wire 1 q= carry [2] $end
$var wire 1 r= carry [1] $end
$var wire 1 s= carry [0] $end
$var wire 1 t= fa_sum [3] $end
$var wire 1 u= fa_sum [2] $end
$var wire 1 v= fa_sum [1] $end
$var wire 1 w= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 w= s $end
$var wire 1 x= c_out $end
$var wire 1 &8 a $end
$var wire 1 68 b $end
$var wire 1 A< c_in $end
$var wire 1 y= xor_AB $end
$var wire 1 z= xor_ABCin $end
$var wire 1 {= NAND_AB $end
$var wire 1 |= not_NAND_AB $end
$var wire 1 }= NAND_Cin_xor_AB $end
$var wire 1 ~= not_NAND_Cin_xor_AB $end
$var wire 1 !> NOR_2NAND $end
$var wire 1 "> not_NOR_2NAND $end
$var wire 1 #> Cin $end

$scope module xor1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 y= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 y= in1 $end
$var wire 1 A< in2 $end
$var wire 1 z= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 {= out $end
$upscope $end

$scope module not1 $end
$var wire 1 {= in1 $end
$var wire 1 |= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #> in1 $end
$var wire 1 y= in2 $end
$var wire 1 }= out $end
$upscope $end

$scope module not2 $end
$var wire 1 }= in1 $end
$var wire 1 ~= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 |= in1 $end
$var wire 1 ~= in2 $end
$var wire 1 !> out $end
$upscope $end

$scope module not3 $end
$var wire 1 !> in1 $end
$var wire 1 "> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 v= s $end
$var wire 1 $> c_out $end
$var wire 1 %8 a $end
$var wire 1 58 b $end
$var wire 1 s= c_in $end
$var wire 1 %> xor_AB $end
$var wire 1 &> xor_ABCin $end
$var wire 1 '> NAND_AB $end
$var wire 1 (> not_NAND_AB $end
$var wire 1 )> NAND_Cin_xor_AB $end
$var wire 1 *> not_NAND_Cin_xor_AB $end
$var wire 1 +> NOR_2NAND $end
$var wire 1 ,> not_NOR_2NAND $end
$var wire 1 -> Cin $end

$scope module xor1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 %> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %> in1 $end
$var wire 1 s= in2 $end
$var wire 1 &> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 '> out $end
$upscope $end

$scope module not1 $end
$var wire 1 '> in1 $end
$var wire 1 (> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 -> in1 $end
$var wire 1 %> in2 $end
$var wire 1 )> out $end
$upscope $end

$scope module not2 $end
$var wire 1 )> in1 $end
$var wire 1 *> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (> in1 $end
$var wire 1 *> in2 $end
$var wire 1 +> out $end
$upscope $end

$scope module not3 $end
$var wire 1 +> in1 $end
$var wire 1 ,> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 u= s $end
$var wire 1 .> c_out $end
$var wire 1 $8 a $end
$var wire 1 48 b $end
$var wire 1 r= c_in $end
$var wire 1 /> xor_AB $end
$var wire 1 0> xor_ABCin $end
$var wire 1 1> NAND_AB $end
$var wire 1 2> not_NAND_AB $end
$var wire 1 3> NAND_Cin_xor_AB $end
$var wire 1 4> not_NAND_Cin_xor_AB $end
$var wire 1 5> NOR_2NAND $end
$var wire 1 6> not_NOR_2NAND $end
$var wire 1 7> Cin $end

$scope module xor1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 /> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 /> in1 $end
$var wire 1 r= in2 $end
$var wire 1 0> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 1> out $end
$upscope $end

$scope module not1 $end
$var wire 1 1> in1 $end
$var wire 1 2> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7> in1 $end
$var wire 1 /> in2 $end
$var wire 1 3> out $end
$upscope $end

$scope module not2 $end
$var wire 1 3> in1 $end
$var wire 1 4> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 2> in1 $end
$var wire 1 4> in2 $end
$var wire 1 5> out $end
$upscope $end

$scope module not3 $end
$var wire 1 5> in1 $end
$var wire 1 6> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 t= s $end
$var wire 1 8> c_out $end
$var wire 1 #8 a $end
$var wire 1 38 b $end
$var wire 1 q= c_in $end
$var wire 1 9> xor_AB $end
$var wire 1 :> xor_ABCin $end
$var wire 1 ;> NAND_AB $end
$var wire 1 <> not_NAND_AB $end
$var wire 1 => NAND_Cin_xor_AB $end
$var wire 1 >> not_NAND_Cin_xor_AB $end
$var wire 1 ?> NOR_2NAND $end
$var wire 1 @> not_NOR_2NAND $end
$var wire 1 A> Cin $end

$scope module xor1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 9> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 9> in1 $end
$var wire 1 q= in2 $end
$var wire 1 :> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 ;> out $end
$upscope $end

$scope module not1 $end
$var wire 1 ;> in1 $end
$var wire 1 <> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A> in1 $end
$var wire 1 9> in2 $end
$var wire 1 => out $end
$upscope $end

$scope module not2 $end
$var wire 1 => in1 $end
$var wire 1 >> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 <> in1 $end
$var wire 1 >> in2 $end
$var wire 1 ?> out $end
$upscope $end

$scope module not3 $end
$var wire 1 ?> in1 $end
$var wire 1 @> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var parameter 32 B> N $end
$var wire 1 C< sum [3] $end
$var wire 1 D< sum [2] $end
$var wire 1 E< sum [1] $end
$var wire 1 F< sum [0] $end
$var wire 1 C> c_out $end
$var wire 1 }7 a [3] $end
$var wire 1 ~7 a [2] $end
$var wire 1 !8 a [1] $end
$var wire 1 "8 a [0] $end
$var wire 1 /8 b [3] $end
$var wire 1 08 b [2] $end
$var wire 1 18 b [1] $end
$var wire 1 28 b [0] $end
$var wire 1 @< c_in $end
$var wire 1 D> gen [3] $end
$var wire 1 E> gen [2] $end
$var wire 1 F> gen [1] $end
$var wire 1 G> gen [0] $end
$var wire 1 H> prop [3] $end
$var wire 1 I> prop [2] $end
$var wire 1 J> prop [1] $end
$var wire 1 K> prop [0] $end
$var wire 1 L> carry [2] $end
$var wire 1 M> carry [1] $end
$var wire 1 N> carry [0] $end
$var wire 1 O> fa_sum [3] $end
$var wire 1 P> fa_sum [2] $end
$var wire 1 Q> fa_sum [1] $end
$var wire 1 R> fa_sum [0] $end

$scope module fa1 $end
$var wire 1 R> s $end
$var wire 1 S> c_out $end
$var wire 1 "8 a $end
$var wire 1 28 b $end
$var wire 1 @< c_in $end
$var wire 1 T> xor_AB $end
$var wire 1 U> xor_ABCin $end
$var wire 1 V> NAND_AB $end
$var wire 1 W> not_NAND_AB $end
$var wire 1 X> NAND_Cin_xor_AB $end
$var wire 1 Y> not_NAND_Cin_xor_AB $end
$var wire 1 Z> NOR_2NAND $end
$var wire 1 [> not_NOR_2NAND $end
$var wire 1 \> Cin $end

$scope module xor1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 T> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 T> in1 $end
$var wire 1 @< in2 $end
$var wire 1 U> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 V> out $end
$upscope $end

$scope module not1 $end
$var wire 1 V> in1 $end
$var wire 1 W> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \> in1 $end
$var wire 1 T> in2 $end
$var wire 1 X> out $end
$upscope $end

$scope module not2 $end
$var wire 1 X> in1 $end
$var wire 1 Y> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 W> in1 $end
$var wire 1 Y> in2 $end
$var wire 1 Z> out $end
$upscope $end

$scope module not3 $end
$var wire 1 Z> in1 $end
$var wire 1 [> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 Q> s $end
$var wire 1 ]> c_out $end
$var wire 1 !8 a $end
$var wire 1 18 b $end
$var wire 1 N> c_in $end
$var wire 1 ^> xor_AB $end
$var wire 1 _> xor_ABCin $end
$var wire 1 `> NAND_AB $end
$var wire 1 a> not_NAND_AB $end
$var wire 1 b> NAND_Cin_xor_AB $end
$var wire 1 c> not_NAND_Cin_xor_AB $end
$var wire 1 d> NOR_2NAND $end
$var wire 1 e> not_NOR_2NAND $end
$var wire 1 f> Cin $end

$scope module xor1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 ^> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^> in1 $end
$var wire 1 N> in2 $end
$var wire 1 _> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 `> out $end
$upscope $end

$scope module not1 $end
$var wire 1 `> in1 $end
$var wire 1 a> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 f> in1 $end
$var wire 1 ^> in2 $end
$var wire 1 b> out $end
$upscope $end

$scope module not2 $end
$var wire 1 b> in1 $end
$var wire 1 c> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 a> in1 $end
$var wire 1 c> in2 $end
$var wire 1 d> out $end
$upscope $end

$scope module not3 $end
$var wire 1 d> in1 $end
$var wire 1 e> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 P> s $end
$var wire 1 g> c_out $end
$var wire 1 ~7 a $end
$var wire 1 08 b $end
$var wire 1 M> c_in $end
$var wire 1 h> xor_AB $end
$var wire 1 i> xor_ABCin $end
$var wire 1 j> NAND_AB $end
$var wire 1 k> not_NAND_AB $end
$var wire 1 l> NAND_Cin_xor_AB $end
$var wire 1 m> not_NAND_Cin_xor_AB $end
$var wire 1 n> NOR_2NAND $end
$var wire 1 o> not_NOR_2NAND $end
$var wire 1 p> Cin $end

$scope module xor1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 h> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 h> in1 $end
$var wire 1 M> in2 $end
$var wire 1 i> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 j> out $end
$upscope $end

$scope module not1 $end
$var wire 1 j> in1 $end
$var wire 1 k> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p> in1 $end
$var wire 1 h> in2 $end
$var wire 1 l> out $end
$upscope $end

$scope module not2 $end
$var wire 1 l> in1 $end
$var wire 1 m> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 k> in1 $end
$var wire 1 m> in2 $end
$var wire 1 n> out $end
$upscope $end

$scope module not3 $end
$var wire 1 n> in1 $end
$var wire 1 o> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 O> s $end
$var wire 1 q> c_out $end
$var wire 1 }7 a $end
$var wire 1 /8 b $end
$var wire 1 L> c_in $end
$var wire 1 r> xor_AB $end
$var wire 1 s> xor_ABCin $end
$var wire 1 t> NAND_AB $end
$var wire 1 u> not_NAND_AB $end
$var wire 1 v> NAND_Cin_xor_AB $end
$var wire 1 w> not_NAND_Cin_xor_AB $end
$var wire 1 x> NOR_2NAND $end
$var wire 1 y> not_NOR_2NAND $end
$var wire 1 z> Cin $end

$scope module xor1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 r> in1 $end
$var wire 1 L> in2 $end
$var wire 1 s> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 t> out $end
$upscope $end

$scope module not1 $end
$var wire 1 t> in1 $end
$var wire 1 u> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 z> in1 $end
$var wire 1 r> in2 $end
$var wire 1 v> out $end
$upscope $end

$scope module not2 $end
$var wire 1 v> in1 $end
$var wire 1 w> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 u> in1 $end
$var wire 1 w> in2 $end
$var wire 1 x> out $end
$upscope $end

$scope module not3 $end
$var wire 1 x> in1 $end
$var wire 1 y> out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 83 InA [15] $end
$var wire 1 93 InA [14] $end
$var wire 1 :3 InA [13] $end
$var wire 1 ;3 InA [12] $end
$var wire 1 <3 InA [11] $end
$var wire 1 =3 InA [10] $end
$var wire 1 >3 InA [9] $end
$var wire 1 ?3 InA [8] $end
$var wire 1 @3 InA [7] $end
$var wire 1 A3 InA [6] $end
$var wire 1 B3 InA [5] $end
$var wire 1 C3 InA [4] $end
$var wire 1 D3 InA [3] $end
$var wire 1 E3 InA [2] $end
$var wire 1 F3 InA [1] $end
$var wire 1 G3 InA [0] $end
$var wire 1 {> InB [15] $end
$var wire 1 |> InB [14] $end
$var wire 1 }> InB [13] $end
$var wire 1 ~> InB [12] $end
$var wire 1 !? InB [11] $end
$var wire 1 "? InB [10] $end
$var wire 1 #? InB [9] $end
$var wire 1 $? InB [8] $end
$var wire 1 %? InB [7] $end
$var wire 1 &? InB [6] $end
$var wire 1 '? InB [5] $end
$var wire 1 (? InB [4] $end
$var wire 1 )? InB [3] $end
$var wire 1 *? InB [2] $end
$var wire 1 +? InB [1] $end
$var wire 1 ,? InB [0] $end
$var wire 1 #9 Out $end
$var wire 1 -? difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 p3 Out $end
$var wire 1 .? difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 a4 Out $end
$var wire 1 /? difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 ?) SendNOP_In $end
$var wire 1 <) SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0? state $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1? state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2? state $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3? state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4? state $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5? state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6? state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 <) q $end
$var wire 1 ?) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7? state $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8? state $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9? state $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :? state $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;? state $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <? state $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =? state $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >? state $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?? state $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @? state $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A? state $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B? state $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C? state $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D? state $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E? state $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F? state $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G? state $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H? state $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I? state $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J? state $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K? state $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L? state $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M? state $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N? state $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O? state $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P? state $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q? state $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R? state $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S? state $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T? state $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U? state $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V? state $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W? state $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X? state $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y? state $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z? state $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [? state $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \? state $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]? state $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^? state $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _? state $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `? state $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a? state $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b? state $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c? state $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d? state $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e? state $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f? state $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g? state $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h? state $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i? state $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j? state $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k? state $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l? state $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m? state $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n? state $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o? state $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p? state $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q? state $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r? state $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s? state $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t? state $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u? state $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v? state $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w? state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x? state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y? state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z? state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {? state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |? state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }? state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~? state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !@ state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "@ state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #@ state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $@ state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %@ state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &@ state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '@ state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (@ state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )@ state $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *@ state $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +@ state $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,@ state $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -@ state $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .@ state $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /@ state $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0@ state $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1@ state $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2@ state $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3@ state $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4@ state $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5@ state $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6@ state $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7@ state $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8@ state $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9@ state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :@ state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;@ state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <@ state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =@ state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >@ state $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 p% SgnExt [15] $end
$var wire 1 q% SgnExt [14] $end
$var wire 1 r% SgnExt [13] $end
$var wire 1 s% SgnExt [12] $end
$var wire 1 t% SgnExt [11] $end
$var wire 1 u% SgnExt [10] $end
$var wire 1 v% SgnExt [9] $end
$var wire 1 w% SgnExt [8] $end
$var wire 1 x% SgnExt [7] $end
$var wire 1 y% SgnExt [6] $end
$var wire 1 z% SgnExt [5] $end
$var wire 1 {% SgnExt [4] $end
$var wire 1 |% SgnExt [3] $end
$var wire 1 }% SgnExt [2] $end
$var wire 1 ~% SgnExt [1] $end
$var wire 1 !& SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 Q) mem_halt $end
$var wire 1 ?@ MuxImmSrc [15] $end
$var wire 1 @@ MuxImmSrc [14] $end
$var wire 1 A@ MuxImmSrc [13] $end
$var wire 1 B@ MuxImmSrc [12] $end
$var wire 1 C@ MuxImmSrc [11] $end
$var wire 1 D@ MuxImmSrc [10] $end
$var wire 1 E@ MuxImmSrc [9] $end
$var wire 1 F@ MuxImmSrc [8] $end
$var wire 1 G@ MuxImmSrc [7] $end
$var wire 1 H@ MuxImmSrc [6] $end
$var wire 1 I@ MuxImmSrc [5] $end
$var wire 1 J@ MuxImmSrc [4] $end
$var wire 1 K@ MuxImmSrc [3] $end
$var wire 1 L@ MuxImmSrc [2] $end
$var wire 1 M@ MuxImmSrc [1] $end
$var wire 1 N@ MuxImmSrc [0] $end
$var wire 1 O@ adderOut [15] $end
$var wire 1 P@ adderOut [14] $end
$var wire 1 Q@ adderOut [13] $end
$var wire 1 R@ adderOut [12] $end
$var wire 1 S@ adderOut [11] $end
$var wire 1 T@ adderOut [10] $end
$var wire 1 U@ adderOut [9] $end
$var wire 1 V@ adderOut [8] $end
$var wire 1 W@ adderOut [7] $end
$var wire 1 X@ adderOut [6] $end
$var wire 1 Y@ adderOut [5] $end
$var wire 1 Z@ adderOut [4] $end
$var wire 1 [@ adderOut [3] $end
$var wire 1 \@ adderOut [2] $end
$var wire 1 ]@ adderOut [1] $end
$var wire 1 ^@ adderOut [0] $end
$var wire 1 _@ MuxBranchSrc [15] $end
$var wire 1 `@ MuxBranchSrc [14] $end
$var wire 1 a@ MuxBranchSrc [13] $end
$var wire 1 b@ MuxBranchSrc [12] $end
$var wire 1 c@ MuxBranchSrc [11] $end
$var wire 1 d@ MuxBranchSrc [10] $end
$var wire 1 e@ MuxBranchSrc [9] $end
$var wire 1 f@ MuxBranchSrc [8] $end
$var wire 1 g@ MuxBranchSrc [7] $end
$var wire 1 h@ MuxBranchSrc [6] $end
$var wire 1 i@ MuxBranchSrc [5] $end
$var wire 1 j@ MuxBranchSrc [4] $end
$var wire 1 k@ MuxBranchSrc [3] $end
$var wire 1 l@ MuxBranchSrc [2] $end
$var wire 1 m@ MuxBranchSrc [1] $end
$var wire 1 n@ MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 ?@ B [15] $end
$var wire 1 @@ B [14] $end
$var wire 1 A@ B [13] $end
$var wire 1 B@ B [12] $end
$var wire 1 C@ B [11] $end
$var wire 1 D@ B [10] $end
$var wire 1 E@ B [9] $end
$var wire 1 F@ B [8] $end
$var wire 1 G@ B [7] $end
$var wire 1 H@ B [6] $end
$var wire 1 I@ B [5] $end
$var wire 1 J@ B [4] $end
$var wire 1 K@ B [3] $end
$var wire 1 L@ B [2] $end
$var wire 1 M@ B [1] $end
$var wire 1 N@ B [0] $end
$var wire 1 O@ S [15] $end
$var wire 1 P@ S [14] $end
$var wire 1 Q@ S [13] $end
$var wire 1 R@ S [12] $end
$var wire 1 S@ S [11] $end
$var wire 1 T@ S [10] $end
$var wire 1 U@ S [9] $end
$var wire 1 V@ S [8] $end
$var wire 1 W@ S [7] $end
$var wire 1 X@ S [6] $end
$var wire 1 Y@ S [5] $end
$var wire 1 Z@ S [4] $end
$var wire 1 [@ S [3] $end
$var wire 1 \@ S [2] $end
$var wire 1 ]@ S [1] $end
$var wire 1 ^@ S [0] $end
$var wire 1 o@ Cout $end
$var wire 1 p@ Cout0 $end
$var wire 1 q@ Cout1 $end
$var wire 1 r@ Cout2 $end
$var wire 1 s@ Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 K@ B [3] $end
$var wire 1 L@ B [2] $end
$var wire 1 M@ B [1] $end
$var wire 1 N@ B [0] $end
$var wire 1 s@ Cin $end
$var wire 1 [@ S [3] $end
$var wire 1 \@ S [2] $end
$var wire 1 ]@ S [1] $end
$var wire 1 ^@ S [0] $end
$var wire 1 p@ Cout $end
$var wire 1 t@ Cout0 $end
$var wire 1 u@ Cout1 $end
$var wire 1 v@ Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 N@ B $end
$var wire 1 s@ Cin $end
$var wire 1 ^@ S $end
$var wire 1 t@ Cout $end
$var wire 1 w@ xor_AB $end
$var wire 1 x@ xor_ABCin $end
$var wire 1 y@ NAND_AB $end
$var wire 1 z@ not_NAND_AB $end
$var wire 1 {@ NAND_Cin_xor_AB $end
$var wire 1 |@ not_NAND_Cin_xor_AB $end
$var wire 1 }@ NOR_2NAND $end
$var wire 1 ~@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 N@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 N@ in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 y@ in1 $end
$var wire 1 z@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s@ in1 $end
$var wire 1 w@ in2 $end
$var wire 1 {@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 {@ in1 $end
$var wire 1 |@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z@ in1 $end
$var wire 1 |@ in2 $end
$var wire 1 }@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 }@ in1 $end
$var wire 1 ~@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 M@ B $end
$var wire 1 t@ Cin $end
$var wire 1 ]@ S $end
$var wire 1 u@ Cout $end
$var wire 1 !A xor_AB $end
$var wire 1 "A xor_ABCin $end
$var wire 1 #A NAND_AB $end
$var wire 1 $A not_NAND_AB $end
$var wire 1 %A NAND_Cin_xor_AB $end
$var wire 1 &A not_NAND_Cin_xor_AB $end
$var wire 1 'A NOR_2NAND $end
$var wire 1 (A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 !A in1 $end
$var wire 1 t@ in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 #A out $end
$upscope $end

$scope module not1 $end
$var wire 1 #A in1 $end
$var wire 1 $A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t@ in1 $end
$var wire 1 !A in2 $end
$var wire 1 %A out $end
$upscope $end

$scope module not2 $end
$var wire 1 %A in1 $end
$var wire 1 &A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $A in1 $end
$var wire 1 &A in2 $end
$var wire 1 'A out $end
$upscope $end

$scope module not3 $end
$var wire 1 'A in1 $end
$var wire 1 (A out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 L@ B $end
$var wire 1 u@ Cin $end
$var wire 1 \@ S $end
$var wire 1 v@ Cout $end
$var wire 1 )A xor_AB $end
$var wire 1 *A xor_ABCin $end
$var wire 1 +A NAND_AB $end
$var wire 1 ,A not_NAND_AB $end
$var wire 1 -A NAND_Cin_xor_AB $end
$var wire 1 .A not_NAND_Cin_xor_AB $end
$var wire 1 /A NOR_2NAND $end
$var wire 1 0A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 )A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 )A in1 $end
$var wire 1 u@ in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 +A out $end
$upscope $end

$scope module not1 $end
$var wire 1 +A in1 $end
$var wire 1 ,A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 u@ in1 $end
$var wire 1 )A in2 $end
$var wire 1 -A out $end
$upscope $end

$scope module not2 $end
$var wire 1 -A in1 $end
$var wire 1 .A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ,A in1 $end
$var wire 1 .A in2 $end
$var wire 1 /A out $end
$upscope $end

$scope module not3 $end
$var wire 1 /A in1 $end
$var wire 1 0A out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 K@ B $end
$var wire 1 v@ Cin $end
$var wire 1 [@ S $end
$var wire 1 p@ Cout $end
$var wire 1 1A xor_AB $end
$var wire 1 2A xor_ABCin $end
$var wire 1 3A NAND_AB $end
$var wire 1 4A not_NAND_AB $end
$var wire 1 5A NAND_Cin_xor_AB $end
$var wire 1 6A not_NAND_Cin_xor_AB $end
$var wire 1 7A NOR_2NAND $end
$var wire 1 8A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 1A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 1A in1 $end
$var wire 1 v@ in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 3A out $end
$upscope $end

$scope module not1 $end
$var wire 1 3A in1 $end
$var wire 1 4A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v@ in1 $end
$var wire 1 1A in2 $end
$var wire 1 5A out $end
$upscope $end

$scope module not2 $end
$var wire 1 5A in1 $end
$var wire 1 6A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 4A in1 $end
$var wire 1 6A in2 $end
$var wire 1 7A out $end
$upscope $end

$scope module not3 $end
$var wire 1 7A in1 $end
$var wire 1 8A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 G@ B [3] $end
$var wire 1 H@ B [2] $end
$var wire 1 I@ B [1] $end
$var wire 1 J@ B [0] $end
$var wire 1 p@ Cin $end
$var wire 1 W@ S [3] $end
$var wire 1 X@ S [2] $end
$var wire 1 Y@ S [1] $end
$var wire 1 Z@ S [0] $end
$var wire 1 q@ Cout $end
$var wire 1 9A Cout0 $end
$var wire 1 :A Cout1 $end
$var wire 1 ;A Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 J@ B $end
$var wire 1 p@ Cin $end
$var wire 1 Z@ S $end
$var wire 1 9A Cout $end
$var wire 1 <A xor_AB $end
$var wire 1 =A xor_ABCin $end
$var wire 1 >A NAND_AB $end
$var wire 1 ?A not_NAND_AB $end
$var wire 1 @A NAND_Cin_xor_AB $end
$var wire 1 AA not_NAND_Cin_xor_AB $end
$var wire 1 BA NOR_2NAND $end
$var wire 1 CA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <A in1 $end
$var wire 1 p@ in2 $end
$var wire 1 =A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 >A out $end
$upscope $end

$scope module not1 $end
$var wire 1 >A in1 $end
$var wire 1 ?A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p@ in1 $end
$var wire 1 <A in2 $end
$var wire 1 @A out $end
$upscope $end

$scope module not2 $end
$var wire 1 @A in1 $end
$var wire 1 AA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?A in1 $end
$var wire 1 AA in2 $end
$var wire 1 BA out $end
$upscope $end

$scope module not3 $end
$var wire 1 BA in1 $end
$var wire 1 CA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 I@ B $end
$var wire 1 9A Cin $end
$var wire 1 Y@ S $end
$var wire 1 :A Cout $end
$var wire 1 DA xor_AB $end
$var wire 1 EA xor_ABCin $end
$var wire 1 FA NAND_AB $end
$var wire 1 GA not_NAND_AB $end
$var wire 1 HA NAND_Cin_xor_AB $end
$var wire 1 IA not_NAND_Cin_xor_AB $end
$var wire 1 JA NOR_2NAND $end
$var wire 1 KA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 DA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 DA in1 $end
$var wire 1 9A in2 $end
$var wire 1 EA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 FA out $end
$upscope $end

$scope module not1 $end
$var wire 1 FA in1 $end
$var wire 1 GA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9A in1 $end
$var wire 1 DA in2 $end
$var wire 1 HA out $end
$upscope $end

$scope module not2 $end
$var wire 1 HA in1 $end
$var wire 1 IA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 GA in1 $end
$var wire 1 IA in2 $end
$var wire 1 JA out $end
$upscope $end

$scope module not3 $end
$var wire 1 JA in1 $end
$var wire 1 KA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 H@ B $end
$var wire 1 :A Cin $end
$var wire 1 X@ S $end
$var wire 1 ;A Cout $end
$var wire 1 LA xor_AB $end
$var wire 1 MA xor_ABCin $end
$var wire 1 NA NAND_AB $end
$var wire 1 OA not_NAND_AB $end
$var wire 1 PA NAND_Cin_xor_AB $end
$var wire 1 QA not_NAND_Cin_xor_AB $end
$var wire 1 RA NOR_2NAND $end
$var wire 1 SA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 LA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 LA in1 $end
$var wire 1 :A in2 $end
$var wire 1 MA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 NA out $end
$upscope $end

$scope module not1 $end
$var wire 1 NA in1 $end
$var wire 1 OA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :A in1 $end
$var wire 1 LA in2 $end
$var wire 1 PA out $end
$upscope $end

$scope module not2 $end
$var wire 1 PA in1 $end
$var wire 1 QA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 OA in1 $end
$var wire 1 QA in2 $end
$var wire 1 RA out $end
$upscope $end

$scope module not3 $end
$var wire 1 RA in1 $end
$var wire 1 SA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 G@ B $end
$var wire 1 ;A Cin $end
$var wire 1 W@ S $end
$var wire 1 q@ Cout $end
$var wire 1 TA xor_AB $end
$var wire 1 UA xor_ABCin $end
$var wire 1 VA NAND_AB $end
$var wire 1 WA not_NAND_AB $end
$var wire 1 XA NAND_Cin_xor_AB $end
$var wire 1 YA not_NAND_Cin_xor_AB $end
$var wire 1 ZA NOR_2NAND $end
$var wire 1 [A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 TA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 TA in1 $end
$var wire 1 ;A in2 $end
$var wire 1 UA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 VA out $end
$upscope $end

$scope module not1 $end
$var wire 1 VA in1 $end
$var wire 1 WA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;A in1 $end
$var wire 1 TA in2 $end
$var wire 1 XA out $end
$upscope $end

$scope module not2 $end
$var wire 1 XA in1 $end
$var wire 1 YA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 WA in1 $end
$var wire 1 YA in2 $end
$var wire 1 ZA out $end
$upscope $end

$scope module not3 $end
$var wire 1 ZA in1 $end
$var wire 1 [A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 C@ B [3] $end
$var wire 1 D@ B [2] $end
$var wire 1 E@ B [1] $end
$var wire 1 F@ B [0] $end
$var wire 1 q@ Cin $end
$var wire 1 S@ S [3] $end
$var wire 1 T@ S [2] $end
$var wire 1 U@ S [1] $end
$var wire 1 V@ S [0] $end
$var wire 1 r@ Cout $end
$var wire 1 \A Cout0 $end
$var wire 1 ]A Cout1 $end
$var wire 1 ^A Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 F@ B $end
$var wire 1 q@ Cin $end
$var wire 1 V@ S $end
$var wire 1 \A Cout $end
$var wire 1 _A xor_AB $end
$var wire 1 `A xor_ABCin $end
$var wire 1 aA NAND_AB $end
$var wire 1 bA not_NAND_AB $end
$var wire 1 cA NAND_Cin_xor_AB $end
$var wire 1 dA not_NAND_Cin_xor_AB $end
$var wire 1 eA NOR_2NAND $end
$var wire 1 fA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 _A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 _A in1 $end
$var wire 1 q@ in2 $end
$var wire 1 `A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 aA out $end
$upscope $end

$scope module not1 $end
$var wire 1 aA in1 $end
$var wire 1 bA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q@ in1 $end
$var wire 1 _A in2 $end
$var wire 1 cA out $end
$upscope $end

$scope module not2 $end
$var wire 1 cA in1 $end
$var wire 1 dA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 bA in1 $end
$var wire 1 dA in2 $end
$var wire 1 eA out $end
$upscope $end

$scope module not3 $end
$var wire 1 eA in1 $end
$var wire 1 fA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 E@ B $end
$var wire 1 \A Cin $end
$var wire 1 U@ S $end
$var wire 1 ]A Cout $end
$var wire 1 gA xor_AB $end
$var wire 1 hA xor_ABCin $end
$var wire 1 iA NAND_AB $end
$var wire 1 jA not_NAND_AB $end
$var wire 1 kA NAND_Cin_xor_AB $end
$var wire 1 lA not_NAND_Cin_xor_AB $end
$var wire 1 mA NOR_2NAND $end
$var wire 1 nA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 gA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 gA in1 $end
$var wire 1 \A in2 $end
$var wire 1 hA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 iA out $end
$upscope $end

$scope module not1 $end
$var wire 1 iA in1 $end
$var wire 1 jA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \A in1 $end
$var wire 1 gA in2 $end
$var wire 1 kA out $end
$upscope $end

$scope module not2 $end
$var wire 1 kA in1 $end
$var wire 1 lA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 jA in1 $end
$var wire 1 lA in2 $end
$var wire 1 mA out $end
$upscope $end

$scope module not3 $end
$var wire 1 mA in1 $end
$var wire 1 nA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 D@ B $end
$var wire 1 ]A Cin $end
$var wire 1 T@ S $end
$var wire 1 ^A Cout $end
$var wire 1 oA xor_AB $end
$var wire 1 pA xor_ABCin $end
$var wire 1 qA NAND_AB $end
$var wire 1 rA not_NAND_AB $end
$var wire 1 sA NAND_Cin_xor_AB $end
$var wire 1 tA not_NAND_Cin_xor_AB $end
$var wire 1 uA NOR_2NAND $end
$var wire 1 vA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 oA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 oA in1 $end
$var wire 1 ]A in2 $end
$var wire 1 pA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 qA out $end
$upscope $end

$scope module not1 $end
$var wire 1 qA in1 $end
$var wire 1 rA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]A in1 $end
$var wire 1 oA in2 $end
$var wire 1 sA out $end
$upscope $end

$scope module not2 $end
$var wire 1 sA in1 $end
$var wire 1 tA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 rA in1 $end
$var wire 1 tA in2 $end
$var wire 1 uA out $end
$upscope $end

$scope module not3 $end
$var wire 1 uA in1 $end
$var wire 1 vA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 C@ B $end
$var wire 1 ^A Cin $end
$var wire 1 S@ S $end
$var wire 1 r@ Cout $end
$var wire 1 wA xor_AB $end
$var wire 1 xA xor_ABCin $end
$var wire 1 yA NAND_AB $end
$var wire 1 zA not_NAND_AB $end
$var wire 1 {A NAND_Cin_xor_AB $end
$var wire 1 |A not_NAND_Cin_xor_AB $end
$var wire 1 }A NOR_2NAND $end
$var wire 1 ~A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 wA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 wA in1 $end
$var wire 1 ^A in2 $end
$var wire 1 xA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 yA out $end
$upscope $end

$scope module not1 $end
$var wire 1 yA in1 $end
$var wire 1 zA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^A in1 $end
$var wire 1 wA in2 $end
$var wire 1 {A out $end
$upscope $end

$scope module not2 $end
$var wire 1 {A in1 $end
$var wire 1 |A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 zA in1 $end
$var wire 1 |A in2 $end
$var wire 1 }A out $end
$upscope $end

$scope module not3 $end
$var wire 1 }A in1 $end
$var wire 1 ~A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 ?@ B [3] $end
$var wire 1 @@ B [2] $end
$var wire 1 A@ B [1] $end
$var wire 1 B@ B [0] $end
$var wire 1 r@ Cin $end
$var wire 1 O@ S [3] $end
$var wire 1 P@ S [2] $end
$var wire 1 Q@ S [1] $end
$var wire 1 R@ S [0] $end
$var wire 1 o@ Cout $end
$var wire 1 !B Cout0 $end
$var wire 1 "B Cout1 $end
$var wire 1 #B Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 B@ B $end
$var wire 1 r@ Cin $end
$var wire 1 R@ S $end
$var wire 1 !B Cout $end
$var wire 1 $B xor_AB $end
$var wire 1 %B xor_ABCin $end
$var wire 1 &B NAND_AB $end
$var wire 1 'B not_NAND_AB $end
$var wire 1 (B NAND_Cin_xor_AB $end
$var wire 1 )B not_NAND_Cin_xor_AB $end
$var wire 1 *B NOR_2NAND $end
$var wire 1 +B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 $B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $B in1 $end
$var wire 1 r@ in2 $end
$var wire 1 %B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 &B out $end
$upscope $end

$scope module not1 $end
$var wire 1 &B in1 $end
$var wire 1 'B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r@ in1 $end
$var wire 1 $B in2 $end
$var wire 1 (B out $end
$upscope $end

$scope module not2 $end
$var wire 1 (B in1 $end
$var wire 1 )B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 'B in1 $end
$var wire 1 )B in2 $end
$var wire 1 *B out $end
$upscope $end

$scope module not3 $end
$var wire 1 *B in1 $end
$var wire 1 +B out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 A@ B $end
$var wire 1 !B Cin $end
$var wire 1 Q@ S $end
$var wire 1 "B Cout $end
$var wire 1 ,B xor_AB $end
$var wire 1 -B xor_ABCin $end
$var wire 1 .B NAND_AB $end
$var wire 1 /B not_NAND_AB $end
$var wire 1 0B NAND_Cin_xor_AB $end
$var wire 1 1B not_NAND_Cin_xor_AB $end
$var wire 1 2B NOR_2NAND $end
$var wire 1 3B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 ,B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ,B in1 $end
$var wire 1 !B in2 $end
$var wire 1 -B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 .B out $end
$upscope $end

$scope module not1 $end
$var wire 1 .B in1 $end
$var wire 1 /B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !B in1 $end
$var wire 1 ,B in2 $end
$var wire 1 0B out $end
$upscope $end

$scope module not2 $end
$var wire 1 0B in1 $end
$var wire 1 1B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 /B in1 $end
$var wire 1 1B in2 $end
$var wire 1 2B out $end
$upscope $end

$scope module not3 $end
$var wire 1 2B in1 $end
$var wire 1 3B out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 @@ B $end
$var wire 1 "B Cin $end
$var wire 1 P@ S $end
$var wire 1 #B Cout $end
$var wire 1 4B xor_AB $end
$var wire 1 5B xor_ABCin $end
$var wire 1 6B NAND_AB $end
$var wire 1 7B not_NAND_AB $end
$var wire 1 8B NAND_Cin_xor_AB $end
$var wire 1 9B not_NAND_Cin_xor_AB $end
$var wire 1 :B NOR_2NAND $end
$var wire 1 ;B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 4B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 4B in1 $end
$var wire 1 "B in2 $end
$var wire 1 5B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 6B out $end
$upscope $end

$scope module not1 $end
$var wire 1 6B in1 $end
$var wire 1 7B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "B in1 $end
$var wire 1 4B in2 $end
$var wire 1 8B out $end
$upscope $end

$scope module not2 $end
$var wire 1 8B in1 $end
$var wire 1 9B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 7B in1 $end
$var wire 1 9B in2 $end
$var wire 1 :B out $end
$upscope $end

$scope module not3 $end
$var wire 1 :B in1 $end
$var wire 1 ;B out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 ?@ B $end
$var wire 1 #B Cin $end
$var wire 1 O@ S $end
$var wire 1 o@ Cout $end
$var wire 1 <B xor_AB $end
$var wire 1 =B xor_ABCin $end
$var wire 1 >B NAND_AB $end
$var wire 1 ?B not_NAND_AB $end
$var wire 1 @B NAND_Cin_xor_AB $end
$var wire 1 AB not_NAND_Cin_xor_AB $end
$var wire 1 BB NOR_2NAND $end
$var wire 1 CB not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 <B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <B in1 $end
$var wire 1 #B in2 $end
$var wire 1 =B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 >B out $end
$upscope $end

$scope module not1 $end
$var wire 1 >B in1 $end
$var wire 1 ?B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #B in1 $end
$var wire 1 <B in2 $end
$var wire 1 @B out $end
$upscope $end

$scope module not2 $end
$var wire 1 @B in1 $end
$var wire 1 AB out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?B in1 $end
$var wire 1 AB in2 $end
$var wire 1 BB out $end
$upscope $end

$scope module not3 $end
$var wire 1 BB in1 $end
$var wire 1 CB out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 DB enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 Q) err $end
$var reg 1 EB loaded $end
$var reg 17 FB largest [16:0] $end
$var integer 32 GB mcd $end
$var integer 32 HB i $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 <) SendNOP_In $end
$var wire 1 =) SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end
$var wire 1 k% b_in $end
$var wire 1 `' b_out $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 IB state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 =) q $end
$var wire 1 <) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 JB state $end
$upscope $end

$scope module branch $end
$var wire 1 `' q $end
$var wire 1 k% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 KB state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 LB state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 MB state $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 NB state $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 OB state $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 PB state $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 QB state $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 RB state $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 SB state $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 TB state $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 UB state $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 VB state $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 WB state $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 XB state $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 YB state $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ZB state $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [B state $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \B state $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]B state $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^B state $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _B state $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `B state $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 aB state $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 bB state $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 cB state $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 dB state $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 eB state $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 fB state $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 gB state $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 hB state $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 iB state $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 jB state $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 kB state $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 lB state $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 mB state $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 nB state $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 oB state $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 pB state $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 qB state $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 rB state $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 sB state $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 tB state $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 uB state $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 vB state $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 wB state $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 xB state $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 yB state $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 zB state $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {B state $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |B state $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }B state $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~B state $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !C state $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "C state $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #C state $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $C state $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %C state $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &C state $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 'C state $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (C state $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )C state $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *C state $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +C state $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,C state $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -C state $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .C state $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /C state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0C state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1C state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2C state $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var wire 1 8! err $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' branching_out_MEM_WB $end
$var wire 1 a' err1 $end
$var wire 1 b' branchNOP $end
$var wire 1 c' jumpNOP $end
$var wire 1 d' btake $end
$var wire 1 e' MUXFOUR [15] $end
$var wire 1 f' MUXFOUR [14] $end
$var wire 1 g' MUXFOUR [13] $end
$var wire 1 h' MUXFOUR [12] $end
$var wire 1 i' MUXFOUR [11] $end
$var wire 1 j' MUXFOUR [10] $end
$var wire 1 k' MUXFOUR [9] $end
$var wire 1 l' MUXFOUR [8] $end
$var wire 1 m' MUXFOUR [7] $end
$var wire 1 n' MUXFOUR [6] $end
$var wire 1 o' MUXFOUR [5] $end
$var wire 1 p' MUXFOUR [4] $end
$var wire 1 q' MUXFOUR [3] $end
$var wire 1 r' MUXFOUR [2] $end
$var wire 1 s' MUXFOUR [1] $end
$var wire 1 t' MUXFOUR [0] $end
$var wire 1 u' jmpthng $end
$var wire 1 v' jmpthng2 $end
$var wire 1 w' MUX_OUT_ONE [15] $end
$var wire 1 x' MUX_OUT_ONE [14] $end
$var wire 1 y' MUX_OUT_ONE [13] $end
$var wire 1 z' MUX_OUT_ONE [12] $end
$var wire 1 {' MUX_OUT_ONE [11] $end
$var wire 1 |' MUX_OUT_ONE [10] $end
$var wire 1 }' MUX_OUT_ONE [9] $end
$var wire 1 ~' MUX_OUT_ONE [8] $end
$var wire 1 !( MUX_OUT_ONE [7] $end
$var wire 1 "( MUX_OUT_ONE [6] $end
$var wire 1 #( MUX_OUT_ONE [5] $end
$var wire 1 $( MUX_OUT_ONE [4] $end
$var wire 1 %( MUX_OUT_ONE [3] $end
$var wire 1 &( MUX_OUT_ONE [2] $end
$var wire 1 '( MUX_OUT_ONE [1] $end
$var wire 1 (( MUX_OUT_ONE [0] $end
$var wire 1 )( MUX_OUT_TWO [15] $end
$var wire 1 *( MUX_OUT_TWO [14] $end
$var wire 1 +( MUX_OUT_TWO [13] $end
$var wire 1 ,( MUX_OUT_TWO [12] $end
$var wire 1 -( MUX_OUT_TWO [11] $end
$var wire 1 .( MUX_OUT_TWO [10] $end
$var wire 1 /( MUX_OUT_TWO [9] $end
$var wire 1 0( MUX_OUT_TWO [8] $end
$var wire 1 1( MUX_OUT_TWO [7] $end
$var wire 1 2( MUX_OUT_TWO [6] $end
$var wire 1 3( MUX_OUT_TWO [5] $end
$var wire 1 4( MUX_OUT_TWO [4] $end
$var wire 1 5( MUX_OUT_TWO [3] $end
$var wire 1 6( MUX_OUT_TWO [2] $end
$var wire 1 7( MUX_OUT_TWO [1] $end
$var wire 1 8( MUX_OUT_TWO [0] $end
$var wire 1 9( MUXTHREE [15] $end
$var wire 1 :( MUXTHREE [14] $end
$var wire 1 ;( MUXTHREE [13] $end
$var wire 1 <( MUXTHREE [12] $end
$var wire 1 =( MUXTHREE [11] $end
$var wire 1 >( MUXTHREE [10] $end
$var wire 1 ?( MUXTHREE [9] $end
$var wire 1 @( MUXTHREE [8] $end
$var wire 1 A( MUXTHREE [7] $end
$var wire 1 B( MUXTHREE [6] $end
$var wire 1 C( MUXTHREE [5] $end
$var wire 1 D( MUXTHREE [4] $end
$var wire 1 E( MUXTHREE [3] $end
$var wire 1 F( MUXTHREE [2] $end
$var wire 1 G( MUXTHREE [1] $end
$var wire 1 H( MUXTHREE [0] $end
$var wire 1 I( PC_NO_PLUS_TWO [15] $end
$var wire 1 J( PC_NO_PLUS_TWO [14] $end
$var wire 1 K( PC_NO_PLUS_TWO [13] $end
$var wire 1 L( PC_NO_PLUS_TWO [12] $end
$var wire 1 M( PC_NO_PLUS_TWO [11] $end
$var wire 1 N( PC_NO_PLUS_TWO [10] $end
$var wire 1 O( PC_NO_PLUS_TWO [9] $end
$var wire 1 P( PC_NO_PLUS_TWO [8] $end
$var wire 1 Q( PC_NO_PLUS_TWO [7] $end
$var wire 1 R( PC_NO_PLUS_TWO [6] $end
$var wire 1 S( PC_NO_PLUS_TWO [5] $end
$var wire 1 T( PC_NO_PLUS_TWO [4] $end
$var wire 1 U( PC_NO_PLUS_TWO [3] $end
$var wire 1 V( PC_NO_PLUS_TWO [2] $end
$var wire 1 W( PC_NO_PLUS_TWO [1] $end
$var wire 1 X( PC_NO_PLUS_TWO [0] $end
$var wire 1 Y( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 Z( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 [( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 \( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 ]( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 ^( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 _( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 `( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 a( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 b( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 c( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 d( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 e( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 f( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 g( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 h( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 i( SendNop $end
$var wire 1 j( muxonecond $end
$var wire 1 k( branchfail $end
$var wire 1 l( bthng2 $end
$var wire 1 m( muxtwcond $end
$var wire 1 n( inst_again [15] $end
$var wire 1 o( inst_again [14] $end
$var wire 1 p( inst_again [13] $end
$var wire 1 q( inst_again [12] $end
$var wire 1 r( inst_again [11] $end
$var wire 1 s( inst_again [10] $end
$var wire 1 t( inst_again [9] $end
$var wire 1 u( inst_again [8] $end
$var wire 1 v( inst_again [7] $end
$var wire 1 w( inst_again [6] $end
$var wire 1 x( inst_again [5] $end
$var wire 1 y( inst_again [4] $end
$var wire 1 z( inst_again [3] $end
$var wire 1 {( inst_again [2] $end
$var wire 1 |( inst_again [1] $end
$var wire 1 }( inst_again [0] $end
$var wire 1 ~( jalinf $end
$var wire 1 !) jalind $end
$var wire 1 ") jaline $end
$var wire 1 #) jalinm $end
$var wire 1 $) jalinw $end
$var wire 1 %) instagaincnd $end
$var wire 1 &) pcagaincnd $end
$var wire 1 ') pcagain [15] $end
$var wire 1 () pcagain [14] $end
$var wire 1 )) pcagain [13] $end
$var wire 1 *) pcagain [12] $end
$var wire 1 +) pcagain [11] $end
$var wire 1 ,) pcagain [10] $end
$var wire 1 -) pcagain [9] $end
$var wire 1 .) pcagain [8] $end
$var wire 1 /) pcagain [7] $end
$var wire 1 0) pcagain [6] $end
$var wire 1 1) pcagain [5] $end
$var wire 1 2) pcagain [4] $end
$var wire 1 3) pcagain [3] $end
$var wire 1 4) pcagain [2] $end
$var wire 1 5) pcagain [1] $end
$var wire 1 6) pcagain [0] $end
$var wire 1 7) fetch_stall $end
$var wire 1 8) fetch_stall_to_decode $end
$var wire 1 9) MemWrt_Decode_Out $end
$var wire 1 :) RegWrt_Decode_Out $end
$var wire 1 ;) NOP_Out_ID_EX $end
$var wire 1 <) NOP_Out_ID_MEM $end
$var wire 1 =) NOP_Out_ID_WB $end
$var wire 1 >) branching_Decode_Out $end
$var wire 1 ?) Nop_or_Branch $end
$var wire 1 @) bNOP_OUTIDEX $end
$var wire 1 A) nopmux [15] $end
$var wire 1 B) nopmux [14] $end
$var wire 1 C) nopmux [13] $end
$var wire 1 D) nopmux [12] $end
$var wire 1 E) nopmux [11] $end
$var wire 1 F) nopmux [10] $end
$var wire 1 G) nopmux [9] $end
$var wire 1 H) nopmux [8] $end
$var wire 1 I) nopmux [7] $end
$var wire 1 J) nopmux [6] $end
$var wire 1 K) nopmux [5] $end
$var wire 1 L) nopmux [4] $end
$var wire 1 M) nopmux [3] $end
$var wire 1 N) nopmux [2] $end
$var wire 1 O) nopmux [1] $end
$var wire 1 P) nopmux [0] $end
$var wire 1 Q) temp_mem_halt $end

$scope module my_clkrst $end
$var wire 1 T) err $end
$upscope $end

$scope module btaken $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jumper $end
$var wire 1 u' q $end
$var wire 1 m% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jumper2 $end
$var wire 1 v' q $end
$var wire 1 l% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module bumper2 $end
$var wire 1 l( q $end
$var wire 1 k( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jalthing $end
$var wire 1 !) q $end
$var wire 1 ~( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jalthing2 $end
$var wire 1 ") q $end
$var wire 1 [) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jalthing3 $end
$var wire 1 #) q $end
$var wire 1 ") d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jalthing4 $end
$var wire 1 $) q $end
$var wire 1 #) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 )( PC_in [15] $end
$var wire 1 *( PC_in [14] $end
$var wire 1 +( PC_in [13] $end
$var wire 1 ,( PC_in [12] $end
$var wire 1 -( PC_in [11] $end
$var wire 1 .( PC_in [10] $end
$var wire 1 /( PC_in [9] $end
$var wire 1 0( PC_in [8] $end
$var wire 1 1( PC_in [7] $end
$var wire 1 2( PC_in [6] $end
$var wire 1 3( PC_in [5] $end
$var wire 1 4( PC_in [4] $end
$var wire 1 5( PC_in [3] $end
$var wire 1 6( PC_in [2] $end
$var wire 1 7( PC_in [1] $end
$var wire 1 8( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 I( pc_temp [15] $end
$var wire 1 J( pc_temp [14] $end
$var wire 1 K( pc_temp [13] $end
$var wire 1 L( pc_temp [12] $end
$var wire 1 M( pc_temp [11] $end
$var wire 1 N( pc_temp [10] $end
$var wire 1 O( pc_temp [9] $end
$var wire 1 P( pc_temp [8] $end
$var wire 1 Q( pc_temp [7] $end
$var wire 1 R( pc_temp [6] $end
$var wire 1 S( pc_temp [5] $end
$var wire 1 T( pc_temp [4] $end
$var wire 1 U( pc_temp [3] $end
$var wire 1 V( pc_temp [2] $end
$var wire 1 W( pc_temp [1] $end
$var wire 1 X( pc_temp [0] $end
$var wire 1 7) fetch_stall $end

$scope module fa $end
$var wire 1 I( A [15] $end
$var wire 1 J( A [14] $end
$var wire 1 K( A [13] $end
$var wire 1 L( A [12] $end
$var wire 1 M( A [11] $end
$var wire 1 N( A [10] $end
$var wire 1 O( A [9] $end
$var wire 1 P( A [8] $end
$var wire 1 Q( A [7] $end
$var wire 1 R( A [6] $end
$var wire 1 S( A [5] $end
$var wire 1 T( A [4] $end
$var wire 1 U( A [3] $end
$var wire 1 V( A [2] $end
$var wire 1 W( A [1] $end
$var wire 1 X( A [0] $end
$var wire 1 _) B [15] $end
$var wire 1 `) B [14] $end
$var wire 1 a) B [13] $end
$var wire 1 b) B [12] $end
$var wire 1 c) B [11] $end
$var wire 1 d) B [10] $end
$var wire 1 e) B [9] $end
$var wire 1 f) B [8] $end
$var wire 1 g) B [7] $end
$var wire 1 h) B [6] $end
$var wire 1 i) B [5] $end
$var wire 1 j) B [4] $end
$var wire 1 k) B [3] $end
$var wire 1 l) B [2] $end
$var wire 1 m) B [1] $end
$var wire 1 n) B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 o) Cout $end
$var wire 1 p) Cout0 $end
$var wire 1 q) Cout1 $end
$var wire 1 r) Cout2 $end
$var wire 1 s) Cin $end

$scope module f1 $end
$var wire 1 U( A [3] $end
$var wire 1 V( A [2] $end
$var wire 1 W( A [1] $end
$var wire 1 X( A [0] $end
$var wire 1 k) B [3] $end
$var wire 1 l) B [2] $end
$var wire 1 m) B [1] $end
$var wire 1 n) B [0] $end
$var wire 1 s) Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 p) Cout $end
$var wire 1 t) Cout0 $end
$var wire 1 u) Cout1 $end
$var wire 1 v) Cout2 $end

$scope module f1 $end
$var wire 1 X( A $end
$var wire 1 n) B $end
$var wire 1 s) Cin $end
$var wire 1 0" S $end
$var wire 1 t) Cout $end
$var wire 1 w) xor_AB $end
$var wire 1 x) xor_ABCin $end
$var wire 1 y) NAND_AB $end
$var wire 1 z) not_NAND_AB $end
$var wire 1 {) NAND_Cin_xor_AB $end
$var wire 1 |) not_NAND_Cin_xor_AB $end
$var wire 1 }) NOR_2NAND $end
$var wire 1 ~) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 X( in1 $end
$var wire 1 n) in2 $end
$var wire 1 w) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w) in1 $end
$var wire 1 s) in2 $end
$var wire 1 x) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 X( in1 $end
$var wire 1 n) in2 $end
$var wire 1 y) out $end
$upscope $end

$scope module not1 $end
$var wire 1 y) in1 $end
$var wire 1 z) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s) in1 $end
$var wire 1 w) in2 $end
$var wire 1 {) out $end
$upscope $end

$scope module not2 $end
$var wire 1 {) in1 $end
$var wire 1 |) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z) in1 $end
$var wire 1 |) in2 $end
$var wire 1 }) out $end
$upscope $end

$scope module not3 $end
$var wire 1 }) in1 $end
$var wire 1 ~) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 W( A $end
$var wire 1 m) B $end
$var wire 1 t) Cin $end
$var wire 1 /" S $end
$var wire 1 u) Cout $end
$var wire 1 !* xor_AB $end
$var wire 1 "* xor_ABCin $end
$var wire 1 #* NAND_AB $end
$var wire 1 $* not_NAND_AB $end
$var wire 1 %* NAND_Cin_xor_AB $end
$var wire 1 &* not_NAND_Cin_xor_AB $end
$var wire 1 '* NOR_2NAND $end
$var wire 1 (* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 W( in1 $end
$var wire 1 m) in2 $end
$var wire 1 !* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 !* in1 $end
$var wire 1 t) in2 $end
$var wire 1 "* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 W( in1 $end
$var wire 1 m) in2 $end
$var wire 1 #* out $end
$upscope $end

$scope module not1 $end
$var wire 1 #* in1 $end
$var wire 1 $* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t) in1 $end
$var wire 1 !* in2 $end
$var wire 1 %* out $end
$upscope $end

$scope module not2 $end
$var wire 1 %* in1 $end
$var wire 1 &* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $* in1 $end
$var wire 1 &* in2 $end
$var wire 1 '* out $end
$upscope $end

$scope module not3 $end
$var wire 1 '* in1 $end
$var wire 1 (* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 V( A $end
$var wire 1 l) B $end
$var wire 1 u) Cin $end
$var wire 1 ." S $end
$var wire 1 v) Cout $end
$var wire 1 )* xor_AB $end
$var wire 1 ** xor_ABCin $end
$var wire 1 +* NAND_AB $end
$var wire 1 ,* not_NAND_AB $end
$var wire 1 -* NAND_Cin_xor_AB $end
$var wire 1 .* not_NAND_Cin_xor_AB $end
$var wire 1 /* NOR_2NAND $end
$var wire 1 0* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 V( in1 $end
$var wire 1 l) in2 $end
$var wire 1 )* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 )* in1 $end
$var wire 1 u) in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module nand1 $end
$var wire 1 V( in1 $end
$var wire 1 l) in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module not1 $end
$var wire 1 +* in1 $end
$var wire 1 ,* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 u) in1 $end
$var wire 1 )* in2 $end
$var wire 1 -* out $end
$upscope $end

$scope module not2 $end
$var wire 1 -* in1 $end
$var wire 1 .* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ,* in1 $end
$var wire 1 .* in2 $end
$var wire 1 /* out $end
$upscope $end

$scope module not3 $end
$var wire 1 /* in1 $end
$var wire 1 0* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 U( A $end
$var wire 1 k) B $end
$var wire 1 v) Cin $end
$var wire 1 -" S $end
$var wire 1 p) Cout $end
$var wire 1 1* xor_AB $end
$var wire 1 2* xor_ABCin $end
$var wire 1 3* NAND_AB $end
$var wire 1 4* not_NAND_AB $end
$var wire 1 5* NAND_Cin_xor_AB $end
$var wire 1 6* not_NAND_Cin_xor_AB $end
$var wire 1 7* NOR_2NAND $end
$var wire 1 8* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 U( in1 $end
$var wire 1 k) in2 $end
$var wire 1 1* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 1* in1 $end
$var wire 1 v) in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 U( in1 $end
$var wire 1 k) in2 $end
$var wire 1 3* out $end
$upscope $end

$scope module not1 $end
$var wire 1 3* in1 $end
$var wire 1 4* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v) in1 $end
$var wire 1 1* in2 $end
$var wire 1 5* out $end
$upscope $end

$scope module not2 $end
$var wire 1 5* in1 $end
$var wire 1 6* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 4* in1 $end
$var wire 1 6* in2 $end
$var wire 1 7* out $end
$upscope $end

$scope module not3 $end
$var wire 1 7* in1 $end
$var wire 1 8* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 Q( A [3] $end
$var wire 1 R( A [2] $end
$var wire 1 S( A [1] $end
$var wire 1 T( A [0] $end
$var wire 1 g) B [3] $end
$var wire 1 h) B [2] $end
$var wire 1 i) B [1] $end
$var wire 1 j) B [0] $end
$var wire 1 p) Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 q) Cout $end
$var wire 1 9* Cout0 $end
$var wire 1 :* Cout1 $end
$var wire 1 ;* Cout2 $end

$scope module f1 $end
$var wire 1 T( A $end
$var wire 1 j) B $end
$var wire 1 p) Cin $end
$var wire 1 ," S $end
$var wire 1 9* Cout $end
$var wire 1 <* xor_AB $end
$var wire 1 =* xor_ABCin $end
$var wire 1 >* NAND_AB $end
$var wire 1 ?* not_NAND_AB $end
$var wire 1 @* NAND_Cin_xor_AB $end
$var wire 1 A* not_NAND_Cin_xor_AB $end
$var wire 1 B* NOR_2NAND $end
$var wire 1 C* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 T( in1 $end
$var wire 1 j) in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <* in1 $end
$var wire 1 p) in2 $end
$var wire 1 =* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 T( in1 $end
$var wire 1 j) in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not1 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p) in1 $end
$var wire 1 <* in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not2 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?* in1 $end
$var wire 1 A* in2 $end
$var wire 1 B* out $end
$upscope $end

$scope module not3 $end
$var wire 1 B* in1 $end
$var wire 1 C* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 S( A $end
$var wire 1 i) B $end
$var wire 1 9* Cin $end
$var wire 1 +" S $end
$var wire 1 :* Cout $end
$var wire 1 D* xor_AB $end
$var wire 1 E* xor_ABCin $end
$var wire 1 F* NAND_AB $end
$var wire 1 G* not_NAND_AB $end
$var wire 1 H* NAND_Cin_xor_AB $end
$var wire 1 I* not_NAND_Cin_xor_AB $end
$var wire 1 J* NOR_2NAND $end
$var wire 1 K* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 S( in1 $end
$var wire 1 i) in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 D* in1 $end
$var wire 1 9* in2 $end
$var wire 1 E* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 S( in1 $end
$var wire 1 i) in2 $end
$var wire 1 F* out $end
$upscope $end

$scope module not1 $end
$var wire 1 F* in1 $end
$var wire 1 G* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9* in1 $end
$var wire 1 D* in2 $end
$var wire 1 H* out $end
$upscope $end

$scope module not2 $end
$var wire 1 H* in1 $end
$var wire 1 I* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 G* in1 $end
$var wire 1 I* in2 $end
$var wire 1 J* out $end
$upscope $end

$scope module not3 $end
$var wire 1 J* in1 $end
$var wire 1 K* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 R( A $end
$var wire 1 h) B $end
$var wire 1 :* Cin $end
$var wire 1 *" S $end
$var wire 1 ;* Cout $end
$var wire 1 L* xor_AB $end
$var wire 1 M* xor_ABCin $end
$var wire 1 N* NAND_AB $end
$var wire 1 O* not_NAND_AB $end
$var wire 1 P* NAND_Cin_xor_AB $end
$var wire 1 Q* not_NAND_Cin_xor_AB $end
$var wire 1 R* NOR_2NAND $end
$var wire 1 S* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 R( in1 $end
$var wire 1 h) in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 L* in1 $end
$var wire 1 :* in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 R( in1 $end
$var wire 1 h) in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module not1 $end
$var wire 1 N* in1 $end
$var wire 1 O* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :* in1 $end
$var wire 1 L* in2 $end
$var wire 1 P* out $end
$upscope $end

$scope module not2 $end
$var wire 1 P* in1 $end
$var wire 1 Q* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 O* in1 $end
$var wire 1 Q* in2 $end
$var wire 1 R* out $end
$upscope $end

$scope module not3 $end
$var wire 1 R* in1 $end
$var wire 1 S* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 Q( A $end
$var wire 1 g) B $end
$var wire 1 ;* Cin $end
$var wire 1 )" S $end
$var wire 1 q) Cout $end
$var wire 1 T* xor_AB $end
$var wire 1 U* xor_ABCin $end
$var wire 1 V* NAND_AB $end
$var wire 1 W* not_NAND_AB $end
$var wire 1 X* NAND_Cin_xor_AB $end
$var wire 1 Y* not_NAND_Cin_xor_AB $end
$var wire 1 Z* NOR_2NAND $end
$var wire 1 [* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 Q( in1 $end
$var wire 1 g) in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 T* in1 $end
$var wire 1 ;* in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Q( in1 $end
$var wire 1 g) in2 $end
$var wire 1 V* out $end
$upscope $end

$scope module not1 $end
$var wire 1 V* in1 $end
$var wire 1 W* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;* in1 $end
$var wire 1 T* in2 $end
$var wire 1 X* out $end
$upscope $end

$scope module not2 $end
$var wire 1 X* in1 $end
$var wire 1 Y* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 W* in1 $end
$var wire 1 Y* in2 $end
$var wire 1 Z* out $end
$upscope $end

$scope module not3 $end
$var wire 1 Z* in1 $end
$var wire 1 [* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 M( A [3] $end
$var wire 1 N( A [2] $end
$var wire 1 O( A [1] $end
$var wire 1 P( A [0] $end
$var wire 1 c) B [3] $end
$var wire 1 d) B [2] $end
$var wire 1 e) B [1] $end
$var wire 1 f) B [0] $end
$var wire 1 q) Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 r) Cout $end
$var wire 1 \* Cout0 $end
$var wire 1 ]* Cout1 $end
$var wire 1 ^* Cout2 $end

$scope module f1 $end
$var wire 1 P( A $end
$var wire 1 f) B $end
$var wire 1 q) Cin $end
$var wire 1 (" S $end
$var wire 1 \* Cout $end
$var wire 1 _* xor_AB $end
$var wire 1 `* xor_ABCin $end
$var wire 1 a* NAND_AB $end
$var wire 1 b* not_NAND_AB $end
$var wire 1 c* NAND_Cin_xor_AB $end
$var wire 1 d* not_NAND_Cin_xor_AB $end
$var wire 1 e* NOR_2NAND $end
$var wire 1 f* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 P( in1 $end
$var wire 1 f) in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 _* in1 $end
$var wire 1 q) in2 $end
$var wire 1 `* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 P( in1 $end
$var wire 1 f) in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module not1 $end
$var wire 1 a* in1 $end
$var wire 1 b* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q) in1 $end
$var wire 1 _* in2 $end
$var wire 1 c* out $end
$upscope $end

$scope module not2 $end
$var wire 1 c* in1 $end
$var wire 1 d* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 b* in1 $end
$var wire 1 d* in2 $end
$var wire 1 e* out $end
$upscope $end

$scope module not3 $end
$var wire 1 e* in1 $end
$var wire 1 f* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 O( A $end
$var wire 1 e) B $end
$var wire 1 \* Cin $end
$var wire 1 '" S $end
$var wire 1 ]* Cout $end
$var wire 1 g* xor_AB $end
$var wire 1 h* xor_ABCin $end
$var wire 1 i* NAND_AB $end
$var wire 1 j* not_NAND_AB $end
$var wire 1 k* NAND_Cin_xor_AB $end
$var wire 1 l* not_NAND_Cin_xor_AB $end
$var wire 1 m* NOR_2NAND $end
$var wire 1 n* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 O( in1 $end
$var wire 1 e) in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 g* in1 $end
$var wire 1 \* in2 $end
$var wire 1 h* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 O( in1 $end
$var wire 1 e) in2 $end
$var wire 1 i* out $end
$upscope $end

$scope module not1 $end
$var wire 1 i* in1 $end
$var wire 1 j* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \* in1 $end
$var wire 1 g* in2 $end
$var wire 1 k* out $end
$upscope $end

$scope module not2 $end
$var wire 1 k* in1 $end
$var wire 1 l* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 j* in1 $end
$var wire 1 l* in2 $end
$var wire 1 m* out $end
$upscope $end

$scope module not3 $end
$var wire 1 m* in1 $end
$var wire 1 n* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 N( A $end
$var wire 1 d) B $end
$var wire 1 ]* Cin $end
$var wire 1 &" S $end
$var wire 1 ^* Cout $end
$var wire 1 o* xor_AB $end
$var wire 1 p* xor_ABCin $end
$var wire 1 q* NAND_AB $end
$var wire 1 r* not_NAND_AB $end
$var wire 1 s* NAND_Cin_xor_AB $end
$var wire 1 t* not_NAND_Cin_xor_AB $end
$var wire 1 u* NOR_2NAND $end
$var wire 1 v* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 N( in1 $end
$var wire 1 d) in2 $end
$var wire 1 o* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 o* in1 $end
$var wire 1 ]* in2 $end
$var wire 1 p* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 N( in1 $end
$var wire 1 d) in2 $end
$var wire 1 q* out $end
$upscope $end

$scope module not1 $end
$var wire 1 q* in1 $end
$var wire 1 r* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]* in1 $end
$var wire 1 o* in2 $end
$var wire 1 s* out $end
$upscope $end

$scope module not2 $end
$var wire 1 s* in1 $end
$var wire 1 t* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 r* in1 $end
$var wire 1 t* in2 $end
$var wire 1 u* out $end
$upscope $end

$scope module not3 $end
$var wire 1 u* in1 $end
$var wire 1 v* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 M( A $end
$var wire 1 c) B $end
$var wire 1 ^* Cin $end
$var wire 1 %" S $end
$var wire 1 r) Cout $end
$var wire 1 w* xor_AB $end
$var wire 1 x* xor_ABCin $end
$var wire 1 y* NAND_AB $end
$var wire 1 z* not_NAND_AB $end
$var wire 1 {* NAND_Cin_xor_AB $end
$var wire 1 |* not_NAND_Cin_xor_AB $end
$var wire 1 }* NOR_2NAND $end
$var wire 1 ~* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 M( in1 $end
$var wire 1 c) in2 $end
$var wire 1 w* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w* in1 $end
$var wire 1 ^* in2 $end
$var wire 1 x* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 M( in1 $end
$var wire 1 c) in2 $end
$var wire 1 y* out $end
$upscope $end

$scope module not1 $end
$var wire 1 y* in1 $end
$var wire 1 z* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^* in1 $end
$var wire 1 w* in2 $end
$var wire 1 {* out $end
$upscope $end

$scope module not2 $end
$var wire 1 {* in1 $end
$var wire 1 |* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z* in1 $end
$var wire 1 |* in2 $end
$var wire 1 }* out $end
$upscope $end

$scope module not3 $end
$var wire 1 }* in1 $end
$var wire 1 ~* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 I( A [3] $end
$var wire 1 J( A [2] $end
$var wire 1 K( A [1] $end
$var wire 1 L( A [0] $end
$var wire 1 _) B [3] $end
$var wire 1 `) B [2] $end
$var wire 1 a) B [1] $end
$var wire 1 b) B [0] $end
$var wire 1 r) Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 o) Cout $end
$var wire 1 !+ Cout0 $end
$var wire 1 "+ Cout1 $end
$var wire 1 #+ Cout2 $end

$scope module f1 $end
$var wire 1 L( A $end
$var wire 1 b) B $end
$var wire 1 r) Cin $end
$var wire 1 $" S $end
$var wire 1 !+ Cout $end
$var wire 1 $+ xor_AB $end
$var wire 1 %+ xor_ABCin $end
$var wire 1 &+ NAND_AB $end
$var wire 1 '+ not_NAND_AB $end
$var wire 1 (+ NAND_Cin_xor_AB $end
$var wire 1 )+ not_NAND_Cin_xor_AB $end
$var wire 1 *+ NOR_2NAND $end
$var wire 1 ++ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 L( in1 $end
$var wire 1 b) in2 $end
$var wire 1 $+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $+ in1 $end
$var wire 1 r) in2 $end
$var wire 1 %+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 L( in1 $end
$var wire 1 b) in2 $end
$var wire 1 &+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 &+ in1 $end
$var wire 1 '+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r) in1 $end
$var wire 1 $+ in2 $end
$var wire 1 (+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 (+ in1 $end
$var wire 1 )+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '+ in1 $end
$var wire 1 )+ in2 $end
$var wire 1 *+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 *+ in1 $end
$var wire 1 ++ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 K( A $end
$var wire 1 a) B $end
$var wire 1 !+ Cin $end
$var wire 1 #" S $end
$var wire 1 "+ Cout $end
$var wire 1 ,+ xor_AB $end
$var wire 1 -+ xor_ABCin $end
$var wire 1 .+ NAND_AB $end
$var wire 1 /+ not_NAND_AB $end
$var wire 1 0+ NAND_Cin_xor_AB $end
$var wire 1 1+ not_NAND_Cin_xor_AB $end
$var wire 1 2+ NOR_2NAND $end
$var wire 1 3+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 K( in1 $end
$var wire 1 a) in2 $end
$var wire 1 ,+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ,+ in1 $end
$var wire 1 !+ in2 $end
$var wire 1 -+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 K( in1 $end
$var wire 1 a) in2 $end
$var wire 1 .+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 .+ in1 $end
$var wire 1 /+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !+ in1 $end
$var wire 1 ,+ in2 $end
$var wire 1 0+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 0+ in1 $end
$var wire 1 1+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 /+ in1 $end
$var wire 1 1+ in2 $end
$var wire 1 2+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 2+ in1 $end
$var wire 1 3+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 J( A $end
$var wire 1 `) B $end
$var wire 1 "+ Cin $end
$var wire 1 "" S $end
$var wire 1 #+ Cout $end
$var wire 1 4+ xor_AB $end
$var wire 1 5+ xor_ABCin $end
$var wire 1 6+ NAND_AB $end
$var wire 1 7+ not_NAND_AB $end
$var wire 1 8+ NAND_Cin_xor_AB $end
$var wire 1 9+ not_NAND_Cin_xor_AB $end
$var wire 1 :+ NOR_2NAND $end
$var wire 1 ;+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 J( in1 $end
$var wire 1 `) in2 $end
$var wire 1 4+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 4+ in1 $end
$var wire 1 "+ in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 J( in1 $end
$var wire 1 `) in2 $end
$var wire 1 6+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 6+ in1 $end
$var wire 1 7+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "+ in1 $end
$var wire 1 4+ in2 $end
$var wire 1 8+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 8+ in1 $end
$var wire 1 9+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 7+ in1 $end
$var wire 1 9+ in2 $end
$var wire 1 :+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 :+ in1 $end
$var wire 1 ;+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 I( A $end
$var wire 1 _) B $end
$var wire 1 #+ Cin $end
$var wire 1 !" S $end
$var wire 1 o) Cout $end
$var wire 1 <+ xor_AB $end
$var wire 1 =+ xor_ABCin $end
$var wire 1 >+ NAND_AB $end
$var wire 1 ?+ not_NAND_AB $end
$var wire 1 @+ NAND_Cin_xor_AB $end
$var wire 1 A+ not_NAND_Cin_xor_AB $end
$var wire 1 B+ NOR_2NAND $end
$var wire 1 C+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 I( in1 $end
$var wire 1 _) in2 $end
$var wire 1 <+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <+ in1 $end
$var wire 1 #+ in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 I( in1 $end
$var wire 1 _) in2 $end
$var wire 1 >+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 >+ in1 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #+ in1 $end
$var wire 1 <+ in2 $end
$var wire 1 @+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 @+ in1 $end
$var wire 1 A+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?+ in1 $end
$var wire 1 A+ in2 $end
$var wire 1 B+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 B+ in1 $end
$var wire 1 C+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 D+ data_in [15] $end
$var wire 1 E+ data_in [14] $end
$var wire 1 F+ data_in [13] $end
$var wire 1 G+ data_in [12] $end
$var wire 1 H+ data_in [11] $end
$var wire 1 I+ data_in [10] $end
$var wire 1 J+ data_in [9] $end
$var wire 1 K+ data_in [8] $end
$var wire 1 L+ data_in [7] $end
$var wire 1 M+ data_in [6] $end
$var wire 1 N+ data_in [5] $end
$var wire 1 O+ data_in [4] $end
$var wire 1 P+ data_in [3] $end
$var wire 1 Q+ data_in [2] $end
$var wire 1 R+ data_in [1] $end
$var wire 1 S+ data_in [0] $end
$var wire 1 I( addr [15] $end
$var wire 1 J( addr [14] $end
$var wire 1 K( addr [13] $end
$var wire 1 L( addr [12] $end
$var wire 1 M( addr [11] $end
$var wire 1 N( addr [10] $end
$var wire 1 O( addr [9] $end
$var wire 1 P( addr [8] $end
$var wire 1 Q( addr [7] $end
$var wire 1 R( addr [6] $end
$var wire 1 S( addr [5] $end
$var wire 1 T( addr [4] $end
$var wire 1 U( addr [3] $end
$var wire 1 V( addr [2] $end
$var wire 1 W( addr [1] $end
$var wire 1 X( addr [0] $end
$var wire 1 T+ enable $end
$var wire 1 U+ wr $end
$var wire 1 V+ createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 7) err $end
$upscope $end

$scope module pc[15] $end
$var wire 1 I( q $end
$var wire 1 )( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 J( q $end
$var wire 1 *( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 K( q $end
$var wire 1 +( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 L( q $end
$var wire 1 ,( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 M( q $end
$var wire 1 -( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 N( q $end
$var wire 1 .( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 O( q $end
$var wire 1 /( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 P( q $end
$var wire 1 0( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 Q( q $end
$var wire 1 1( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 R( q $end
$var wire 1 2( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 S( q $end
$var wire 1 3( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 T( q $end
$var wire 1 4( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 U( q $end
$var wire 1 5( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 V( q $end
$var wire 1 6( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 W( q $end
$var wire 1 7( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 X( q $end
$var wire 1 8( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 ') PC_next_in [15] $end
$var wire 1 () PC_next_in [14] $end
$var wire 1 )) PC_next_in [13] $end
$var wire 1 *) PC_next_in [12] $end
$var wire 1 +) PC_next_in [11] $end
$var wire 1 ,) PC_next_in [10] $end
$var wire 1 -) PC_next_in [9] $end
$var wire 1 .) PC_next_in [8] $end
$var wire 1 /) PC_next_in [7] $end
$var wire 1 0) PC_next_in [6] $end
$var wire 1 1) PC_next_in [5] $end
$var wire 1 2) PC_next_in [4] $end
$var wire 1 3) PC_next_in [3] $end
$var wire 1 4) PC_next_in [2] $end
$var wire 1 5) PC_next_in [1] $end
$var wire 1 6) PC_next_in [0] $end
$var wire 1 n( instruction_in [15] $end
$var wire 1 o( instruction_in [14] $end
$var wire 1 p( instruction_in [13] $end
$var wire 1 q( instruction_in [12] $end
$var wire 1 r( instruction_in [11] $end
$var wire 1 s( instruction_in [10] $end
$var wire 1 t( instruction_in [9] $end
$var wire 1 u( instruction_in [8] $end
$var wire 1 v( instruction_in [7] $end
$var wire 1 w( instruction_in [6] $end
$var wire 1 x( instruction_in [5] $end
$var wire 1 y( instruction_in [4] $end
$var wire 1 z( instruction_in [3] $end
$var wire 1 {( instruction_in [2] $end
$var wire 1 |( instruction_in [1] $end
$var wire 1 }( instruction_in [0] $end
$var wire 1 I( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 J( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 K( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 L( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 M( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 N( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 O( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 P( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 Q( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 R( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 S( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 T( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 U( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 V( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 W( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 X( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 Y( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 Z( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 [( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 \( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 ]( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 ^( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 _( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 `( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 a( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 b( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 c( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 d( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 e( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 f( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 g( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 h( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end
$var wire 1 7) HALT_IN $end
$var wire 1 8) HALT_OUT $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 ') d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 () d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 )) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 *) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 +) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 ,) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 -) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 .) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 /) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 0) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 1) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 2) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 3) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 4) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 5) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 6) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 n( d [15] $end
$var wire 1 o( d [14] $end
$var wire 1 p( d [13] $end
$var wire 1 q( d [12] $end
$var wire 1 r( d [11] $end
$var wire 1 s( d [10] $end
$var wire 1 t( d [9] $end
$var wire 1 u( d [8] $end
$var wire 1 v( d [7] $end
$var wire 1 w( d [6] $end
$var wire 1 x( d [5] $end
$var wire 1 y( d [4] $end
$var wire 1 z( d [3] $end
$var wire 1 {( d [2] $end
$var wire 1 |( d [1] $end
$var wire 1 }( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 Y( q $end
$var wire 1 I( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 Z( q $end
$var wire 1 J( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 [( q $end
$var wire 1 K( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 \( q $end
$var wire 1 L( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 ]( q $end
$var wire 1 M( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 ^( q $end
$var wire 1 N( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 _( q $end
$var wire 1 O( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 `( q $end
$var wire 1 P( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 a( q $end
$var wire 1 Q( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 b( q $end
$var wire 1 R( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 c( q $end
$var wire 1 S( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 d( q $end
$var wire 1 T( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 e( q $end
$var wire 1 U( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 f( q $end
$var wire 1 V( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 g( q $end
$var wire 1 W( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 h( q $end
$var wire 1 X( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[15] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[14] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[13] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[12] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[11] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[10] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[9] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[8] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[7] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[6] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[5] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[4] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[3] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[2] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[1] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module HALT[0] $end
$var wire 1 8) q $end
$var wire 1 7) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 a' err $end
$var wire 1 A) instruction [15] $end
$var wire 1 B) instruction [14] $end
$var wire 1 C) instruction [13] $end
$var wire 1 D) instruction [12] $end
$var wire 1 E) instruction [11] $end
$var wire 1 F) instruction [10] $end
$var wire 1 G) instruction [9] $end
$var wire 1 H) instruction [8] $end
$var wire 1 I) instruction [7] $end
$var wire 1 J) instruction [6] $end
$var wire 1 K) instruction [5] $end
$var wire 1 L) instruction [4] $end
$var wire 1 M) instruction [3] $end
$var wire 1 N) instruction [2] $end
$var wire 1 O) instruction [1] $end
$var wire 1 P) instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 M, signed_i_1 [15] $end
$var wire 1 N, signed_i_1 [14] $end
$var wire 1 O, signed_i_1 [13] $end
$var wire 1 P, signed_i_1 [12] $end
$var wire 1 Q, signed_i_1 [11] $end
$var wire 1 R, signed_i_1 [10] $end
$var wire 1 S, signed_i_1 [9] $end
$var wire 1 T, signed_i_1 [8] $end
$var wire 1 U, signed_i_1 [7] $end
$var wire 1 V, signed_i_1 [6] $end
$var wire 1 W, signed_i_1 [5] $end
$var wire 1 X, signed_i_1 [4] $end
$var wire 1 Y, signed_i_1 [3] $end
$var wire 1 Z, signed_i_1 [2] $end
$var wire 1 [, signed_i_1 [1] $end
$var wire 1 \, signed_i_1 [0] $end
$var wire 1 ], zero_i_1 [15] $end
$var wire 1 ^, zero_i_1 [14] $end
$var wire 1 _, zero_i_1 [13] $end
$var wire 1 `, zero_i_1 [12] $end
$var wire 1 a, zero_i_1 [11] $end
$var wire 1 b, zero_i_1 [10] $end
$var wire 1 c, zero_i_1 [9] $end
$var wire 1 d, zero_i_1 [8] $end
$var wire 1 e, zero_i_1 [7] $end
$var wire 1 f, zero_i_1 [6] $end
$var wire 1 g, zero_i_1 [5] $end
$var wire 1 h, zero_i_1 [4] $end
$var wire 1 i, zero_i_1 [3] $end
$var wire 1 j, zero_i_1 [2] $end
$var wire 1 k, zero_i_1 [1] $end
$var wire 1 l, zero_i_1 [0] $end
$var wire 1 m, signed_i_2 [15] $end
$var wire 1 n, signed_i_2 [14] $end
$var wire 1 o, signed_i_2 [13] $end
$var wire 1 p, signed_i_2 [12] $end
$var wire 1 q, signed_i_2 [11] $end
$var wire 1 r, signed_i_2 [10] $end
$var wire 1 s, signed_i_2 [9] $end
$var wire 1 t, signed_i_2 [8] $end
$var wire 1 u, signed_i_2 [7] $end
$var wire 1 v, signed_i_2 [6] $end
$var wire 1 w, signed_i_2 [5] $end
$var wire 1 x, signed_i_2 [4] $end
$var wire 1 y, signed_i_2 [3] $end
$var wire 1 z, signed_i_2 [2] $end
$var wire 1 {, signed_i_2 [1] $end
$var wire 1 |, signed_i_2 [0] $end
$var wire 1 }, zero_i_2 [15] $end
$var wire 1 ~, zero_i_2 [14] $end
$var wire 1 !- zero_i_2 [13] $end
$var wire 1 "- zero_i_2 [12] $end
$var wire 1 #- zero_i_2 [11] $end
$var wire 1 $- zero_i_2 [10] $end
$var wire 1 %- zero_i_2 [9] $end
$var wire 1 &- zero_i_2 [8] $end
$var wire 1 '- zero_i_2 [7] $end
$var wire 1 (- zero_i_2 [6] $end
$var wire 1 )- zero_i_2 [5] $end
$var wire 1 *- zero_i_2 [4] $end
$var wire 1 +- zero_i_2 [3] $end
$var wire 1 ,- zero_i_2 [2] $end
$var wire 1 -- zero_i_2 [1] $end
$var wire 1 .- zero_i_2 [0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end
$var wire 1 8) fetch_halt $end

$scope module registerfile $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 F) read1RegSel [2] $end
$var wire 1 G) read1RegSel [1] $end
$var wire 1 H) read1RegSel [0] $end
$var wire 1 I) read2RegSel [2] $end
$var wire 1 J) read2RegSel [1] $end
$var wire 1 K) read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 a' err $end
$var wire 1 B- registers [0] $end
$var wire 1 C- registers [1] $end
$var wire 1 D- registers [2] $end
$var wire 1 E- registers [3] $end
$var wire 1 F- registers [4] $end
$var wire 1 G- registers [5] $end
$var wire 1 H- registers [6] $end
$var wire 1 I- registers [7] $end
$var wire 1 J- registers [8] $end
$var wire 1 K- registers [9] $end
$var wire 1 L- registers [10] $end
$var wire 1 M- registers [11] $end
$var wire 1 N- registers [12] $end
$var wire 1 O- registers [13] $end
$var wire 1 P- registers [14] $end
$var wire 1 Q- registers [15] $end
$var wire 1 R- registers [16] $end
$var wire 1 S- registers [17] $end
$var wire 1 T- registers [18] $end
$var wire 1 U- registers [19] $end
$var wire 1 V- registers [20] $end
$var wire 1 W- registers [21] $end
$var wire 1 X- registers [22] $end
$var wire 1 Y- registers [23] $end
$var wire 1 Z- registers [24] $end
$var wire 1 [- registers [25] $end
$var wire 1 \- registers [26] $end
$var wire 1 ]- registers [27] $end
$var wire 1 ^- registers [28] $end
$var wire 1 _- registers [29] $end
$var wire 1 `- registers [30] $end
$var wire 1 a- registers [31] $end
$var wire 1 b- registers [32] $end
$var wire 1 c- registers [33] $end
$var wire 1 d- registers [34] $end
$var wire 1 e- registers [35] $end
$var wire 1 f- registers [36] $end
$var wire 1 g- registers [37] $end
$var wire 1 h- registers [38] $end
$var wire 1 i- registers [39] $end
$var wire 1 j- registers [40] $end
$var wire 1 k- registers [41] $end
$var wire 1 l- registers [42] $end
$var wire 1 m- registers [43] $end
$var wire 1 n- registers [44] $end
$var wire 1 o- registers [45] $end
$var wire 1 p- registers [46] $end
$var wire 1 q- registers [47] $end
$var wire 1 r- registers [48] $end
$var wire 1 s- registers [49] $end
$var wire 1 t- registers [50] $end
$var wire 1 u- registers [51] $end
$var wire 1 v- registers [52] $end
$var wire 1 w- registers [53] $end
$var wire 1 x- registers [54] $end
$var wire 1 y- registers [55] $end
$var wire 1 z- registers [56] $end
$var wire 1 {- registers [57] $end
$var wire 1 |- registers [58] $end
$var wire 1 }- registers [59] $end
$var wire 1 ~- registers [60] $end
$var wire 1 !. registers [61] $end
$var wire 1 ". registers [62] $end
$var wire 1 #. registers [63] $end
$var wire 1 $. registers [64] $end
$var wire 1 %. registers [65] $end
$var wire 1 &. registers [66] $end
$var wire 1 '. registers [67] $end
$var wire 1 (. registers [68] $end
$var wire 1 ). registers [69] $end
$var wire 1 *. registers [70] $end
$var wire 1 +. registers [71] $end
$var wire 1 ,. registers [72] $end
$var wire 1 -. registers [73] $end
$var wire 1 .. registers [74] $end
$var wire 1 /. registers [75] $end
$var wire 1 0. registers [76] $end
$var wire 1 1. registers [77] $end
$var wire 1 2. registers [78] $end
$var wire 1 3. registers [79] $end
$var wire 1 4. registers [80] $end
$var wire 1 5. registers [81] $end
$var wire 1 6. registers [82] $end
$var wire 1 7. registers [83] $end
$var wire 1 8. registers [84] $end
$var wire 1 9. registers [85] $end
$var wire 1 :. registers [86] $end
$var wire 1 ;. registers [87] $end
$var wire 1 <. registers [88] $end
$var wire 1 =. registers [89] $end
$var wire 1 >. registers [90] $end
$var wire 1 ?. registers [91] $end
$var wire 1 @. registers [92] $end
$var wire 1 A. registers [93] $end
$var wire 1 B. registers [94] $end
$var wire 1 C. registers [95] $end
$var wire 1 D. registers [96] $end
$var wire 1 E. registers [97] $end
$var wire 1 F. registers [98] $end
$var wire 1 G. registers [99] $end
$var wire 1 H. registers [100] $end
$var wire 1 I. registers [101] $end
$var wire 1 J. registers [102] $end
$var wire 1 K. registers [103] $end
$var wire 1 L. registers [104] $end
$var wire 1 M. registers [105] $end
$var wire 1 N. registers [106] $end
$var wire 1 O. registers [107] $end
$var wire 1 P. registers [108] $end
$var wire 1 Q. registers [109] $end
$var wire 1 R. registers [110] $end
$var wire 1 S. registers [111] $end
$var wire 1 T. registers [112] $end
$var wire 1 U. registers [113] $end
$var wire 1 V. registers [114] $end
$var wire 1 W. registers [115] $end
$var wire 1 X. registers [116] $end
$var wire 1 Y. registers [117] $end
$var wire 1 Z. registers [118] $end
$var wire 1 [. registers [119] $end
$var wire 1 \. registers [120] $end
$var wire 1 ]. registers [121] $end
$var wire 1 ^. registers [122] $end
$var wire 1 _. registers [123] $end
$var wire 1 `. registers [124] $end
$var wire 1 a. registers [125] $end
$var wire 1 b. registers [126] $end
$var wire 1 c. registers [127] $end
$var wire 1 d. mask_1 [0] $end
$var wire 1 e. mask_1 [1] $end
$var wire 1 f. mask_1 [2] $end
$var wire 1 g. mask_1 [3] $end
$var wire 1 h. mask_1 [4] $end
$var wire 1 i. mask_1 [5] $end
$var wire 1 j. mask_1 [6] $end
$var wire 1 k. mask_1 [7] $end

$scope module ind_reg1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 k. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 c. read [15] $end
$var wire 1 b. read [14] $end
$var wire 1 a. read [13] $end
$var wire 1 `. read [12] $end
$var wire 1 _. read [11] $end
$var wire 1 ^. read [10] $end
$var wire 1 ]. read [9] $end
$var wire 1 \. read [8] $end
$var wire 1 [. read [7] $end
$var wire 1 Z. read [6] $end
$var wire 1 Y. read [5] $end
$var wire 1 X. read [4] $end
$var wire 1 W. read [3] $end
$var wire 1 V. read [2] $end
$var wire 1 U. read [1] $end
$var wire 1 T. read [0] $end

$scope module flop[15] $end
$var wire 1 c. q $end
$var wire 1 m. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 b. q $end
$var wire 1 o. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 a. q $end
$var wire 1 q. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 `. q $end
$var wire 1 s. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 _. q $end
$var wire 1 u. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ^. q $end
$var wire 1 w. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ]. q $end
$var wire 1 y. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 \. q $end
$var wire 1 {. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 [. q $end
$var wire 1 }. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 Z. q $end
$var wire 1 !/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 Y. q $end
$var wire 1 #/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 X. q $end
$var wire 1 %/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 W. q $end
$var wire 1 '/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 V. q $end
$var wire 1 )/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 U. q $end
$var wire 1 +/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 T. q $end
$var wire 1 -/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 j. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 S. read [15] $end
$var wire 1 R. read [14] $end
$var wire 1 Q. read [13] $end
$var wire 1 P. read [12] $end
$var wire 1 O. read [11] $end
$var wire 1 N. read [10] $end
$var wire 1 M. read [9] $end
$var wire 1 L. read [8] $end
$var wire 1 K. read [7] $end
$var wire 1 J. read [6] $end
$var wire 1 I. read [5] $end
$var wire 1 H. read [4] $end
$var wire 1 G. read [3] $end
$var wire 1 F. read [2] $end
$var wire 1 E. read [1] $end
$var wire 1 D. read [0] $end

$scope module flop[15] $end
$var wire 1 S. q $end
$var wire 1 0/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 R. q $end
$var wire 1 2/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 Q. q $end
$var wire 1 4/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 P. q $end
$var wire 1 6/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 O. q $end
$var wire 1 8/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 N. q $end
$var wire 1 :/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 M. q $end
$var wire 1 </ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 L. q $end
$var wire 1 >/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 K. q $end
$var wire 1 @/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 J. q $end
$var wire 1 B/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 I. q $end
$var wire 1 D/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 H. q $end
$var wire 1 F/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 G. q $end
$var wire 1 H/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 F. q $end
$var wire 1 J/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 E. q $end
$var wire 1 L/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 D. q $end
$var wire 1 N/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 i. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 C. read [15] $end
$var wire 1 B. read [14] $end
$var wire 1 A. read [13] $end
$var wire 1 @. read [12] $end
$var wire 1 ?. read [11] $end
$var wire 1 >. read [10] $end
$var wire 1 =. read [9] $end
$var wire 1 <. read [8] $end
$var wire 1 ;. read [7] $end
$var wire 1 :. read [6] $end
$var wire 1 9. read [5] $end
$var wire 1 8. read [4] $end
$var wire 1 7. read [3] $end
$var wire 1 6. read [2] $end
$var wire 1 5. read [1] $end
$var wire 1 4. read [0] $end

$scope module flop[15] $end
$var wire 1 C. q $end
$var wire 1 Q/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 B. q $end
$var wire 1 S/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 A. q $end
$var wire 1 U/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 @. q $end
$var wire 1 W/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ?. q $end
$var wire 1 Y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 >. q $end
$var wire 1 [/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 =. q $end
$var wire 1 ]/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 <. q $end
$var wire 1 _/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 ;. q $end
$var wire 1 a/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 :. q $end
$var wire 1 c/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 9. q $end
$var wire 1 e/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 8. q $end
$var wire 1 g/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 7. q $end
$var wire 1 i/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 6. q $end
$var wire 1 k/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 5. q $end
$var wire 1 m/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 4. q $end
$var wire 1 o/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 h. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 3. read [15] $end
$var wire 1 2. read [14] $end
$var wire 1 1. read [13] $end
$var wire 1 0. read [12] $end
$var wire 1 /. read [11] $end
$var wire 1 .. read [10] $end
$var wire 1 -. read [9] $end
$var wire 1 ,. read [8] $end
$var wire 1 +. read [7] $end
$var wire 1 *. read [6] $end
$var wire 1 ). read [5] $end
$var wire 1 (. read [4] $end
$var wire 1 '. read [3] $end
$var wire 1 &. read [2] $end
$var wire 1 %. read [1] $end
$var wire 1 $. read [0] $end

$scope module flop[15] $end
$var wire 1 3. q $end
$var wire 1 r/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 2. q $end
$var wire 1 t/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 1. q $end
$var wire 1 v/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 0. q $end
$var wire 1 x/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 /. q $end
$var wire 1 z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 .. q $end
$var wire 1 |/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 -. q $end
$var wire 1 ~/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ,. q $end
$var wire 1 "0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 +. q $end
$var wire 1 $0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 *. q $end
$var wire 1 &0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 ). q $end
$var wire 1 (0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 (. q $end
$var wire 1 *0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 '. q $end
$var wire 1 ,0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 &. q $end
$var wire 1 .0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 %. q $end
$var wire 1 00 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 $. q $end
$var wire 1 20 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 g. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 #. read [15] $end
$var wire 1 ". read [14] $end
$var wire 1 !. read [13] $end
$var wire 1 ~- read [12] $end
$var wire 1 }- read [11] $end
$var wire 1 |- read [10] $end
$var wire 1 {- read [9] $end
$var wire 1 z- read [8] $end
$var wire 1 y- read [7] $end
$var wire 1 x- read [6] $end
$var wire 1 w- read [5] $end
$var wire 1 v- read [4] $end
$var wire 1 u- read [3] $end
$var wire 1 t- read [2] $end
$var wire 1 s- read [1] $end
$var wire 1 r- read [0] $end

$scope module flop[15] $end
$var wire 1 #. q $end
$var wire 1 50 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 ". q $end
$var wire 1 70 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 !. q $end
$var wire 1 90 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ~- q $end
$var wire 1 ;0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 }- q $end
$var wire 1 =0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 |- q $end
$var wire 1 ?0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 {- q $end
$var wire 1 A0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 z- q $end
$var wire 1 C0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 y- q $end
$var wire 1 E0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 x- q $end
$var wire 1 G0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 w- q $end
$var wire 1 I0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 v- q $end
$var wire 1 K0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 u- q $end
$var wire 1 M0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 t- q $end
$var wire 1 O0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 s- q $end
$var wire 1 Q0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 r- q $end
$var wire 1 S0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 f. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 q- read [15] $end
$var wire 1 p- read [14] $end
$var wire 1 o- read [13] $end
$var wire 1 n- read [12] $end
$var wire 1 m- read [11] $end
$var wire 1 l- read [10] $end
$var wire 1 k- read [9] $end
$var wire 1 j- read [8] $end
$var wire 1 i- read [7] $end
$var wire 1 h- read [6] $end
$var wire 1 g- read [5] $end
$var wire 1 f- read [4] $end
$var wire 1 e- read [3] $end
$var wire 1 d- read [2] $end
$var wire 1 c- read [1] $end
$var wire 1 b- read [0] $end

$scope module flop[15] $end
$var wire 1 q- q $end
$var wire 1 V0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 p- q $end
$var wire 1 X0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 o- q $end
$var wire 1 Z0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 n- q $end
$var wire 1 \0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 m- q $end
$var wire 1 ^0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 l- q $end
$var wire 1 `0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 k- q $end
$var wire 1 b0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 j- q $end
$var wire 1 d0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 i- q $end
$var wire 1 f0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 h- q $end
$var wire 1 h0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 g- q $end
$var wire 1 j0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 f- q $end
$var wire 1 l0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 e- q $end
$var wire 1 n0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 d- q $end
$var wire 1 p0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 c- q $end
$var wire 1 r0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 b- q $end
$var wire 1 t0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 e. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 a- read [15] $end
$var wire 1 `- read [14] $end
$var wire 1 _- read [13] $end
$var wire 1 ^- read [12] $end
$var wire 1 ]- read [11] $end
$var wire 1 \- read [10] $end
$var wire 1 [- read [9] $end
$var wire 1 Z- read [8] $end
$var wire 1 Y- read [7] $end
$var wire 1 X- read [6] $end
$var wire 1 W- read [5] $end
$var wire 1 V- read [4] $end
$var wire 1 U- read [3] $end
$var wire 1 T- read [2] $end
$var wire 1 S- read [1] $end
$var wire 1 R- read [0] $end

$scope module flop[15] $end
$var wire 1 a- q $end
$var wire 1 w0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 `- q $end
$var wire 1 y0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 _- q $end
$var wire 1 {0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ^- q $end
$var wire 1 }0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ]- q $end
$var wire 1 !1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 \- q $end
$var wire 1 #1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 [- q $end
$var wire 1 %1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 Z- q $end
$var wire 1 '1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 Y- q $end
$var wire 1 )1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 X- q $end
$var wire 1 +1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 W- q $end
$var wire 1 -1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 V- q $end
$var wire 1 /1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 U- q $end
$var wire 1 11 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 T- q $end
$var wire 1 31 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 S- q $end
$var wire 1 51 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 R- q $end
$var wire 1 71 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 d. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 Q- read [15] $end
$var wire 1 P- read [14] $end
$var wire 1 O- read [13] $end
$var wire 1 N- read [12] $end
$var wire 1 M- read [11] $end
$var wire 1 L- read [10] $end
$var wire 1 K- read [9] $end
$var wire 1 J- read [8] $end
$var wire 1 I- read [7] $end
$var wire 1 H- read [6] $end
$var wire 1 G- read [5] $end
$var wire 1 F- read [4] $end
$var wire 1 E- read [3] $end
$var wire 1 D- read [2] $end
$var wire 1 C- read [1] $end
$var wire 1 B- read [0] $end

$scope module flop[15] $end
$var wire 1 Q- q $end
$var wire 1 :1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 P- q $end
$var wire 1 <1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 O- q $end
$var wire 1 >1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 N- q $end
$var wire 1 @1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 M- q $end
$var wire 1 B1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 L- q $end
$var wire 1 D1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 K- q $end
$var wire 1 F1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 J- q $end
$var wire 1 H1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 I- q $end
$var wire 1 J1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 H- q $end
$var wire 1 L1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 G- q $end
$var wire 1 N1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 F- q $end
$var wire 1 P1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 E- q $end
$var wire 1 R1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 D- q $end
$var wire 1 T1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 C- q $end
$var wire 1 V1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 B- q $end
$var wire 1 X1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 ?) NOPEx $end
$var wire 1 <) NOPMem $end
$var wire 1 =) NOPWB $end
$var wire 1 i( sendNOP $end
$var wire 1 Z1 regEqual $end
$var wire 1 [1 regEqual2 $end
$var wire 1 \1 sendNOP_not_st $end
$var wire 1 ]1 sendnopout $end
$var wire 1 ^1 stinstthing $end
$var wire 1 _1 oneops $end
$var wire 1 `1 RegS [2] $end
$var wire 1 a1 RegS [1] $end
$var wire 1 b1 RegS [0] $end
$var wire 1 c1 RegT [2] $end
$var wire 1 d1 RegT [1] $end
$var wire 1 e1 RegT [0] $end
$var wire 1 R& WRMEM $end
$var wire 1 L' WRWB $end
$var wire 1 f1 compEx $end
$var wire 1 g1 compMem $end
$var wire 1 h1 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 i1 halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 @) SendNOP_In $end
$var wire 1 ;) SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 i1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 ;) q $end
$var wire 1 @) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 83 possibleslbi [15] $end
$var wire 1 93 possibleslbi [14] $end
$var wire 1 :3 possibleslbi [13] $end
$var wire 1 ;3 possibleslbi [12] $end
$var wire 1 <3 possibleslbi [11] $end
$var wire 1 =3 possibleslbi [10] $end
$var wire 1 >3 possibleslbi [9] $end
$var wire 1 ?3 possibleslbi [8] $end
$var wire 1 @3 possibleslbi [7] $end
$var wire 1 A3 possibleslbi [6] $end
$var wire 1 B3 possibleslbi [5] $end
$var wire 1 C3 possibleslbi [4] $end
$var wire 1 D3 possibleslbi [3] $end
$var wire 1 E3 possibleslbi [2] $end
$var wire 1 F3 possibleslbi [1] $end
$var wire 1 G3 possibleslbi [0] $end
$var wire 1 H3 shiftedA [15] $end
$var wire 1 I3 shiftedA [14] $end
$var wire 1 J3 shiftedA [13] $end
$var wire 1 K3 shiftedA [12] $end
$var wire 1 L3 shiftedA [11] $end
$var wire 1 M3 shiftedA [10] $end
$var wire 1 N3 shiftedA [9] $end
$var wire 1 O3 shiftedA [8] $end
$var wire 1 P3 shiftedA [7] $end
$var wire 1 Q3 shiftedA [6] $end
$var wire 1 R3 shiftedA [5] $end
$var wire 1 S3 shiftedA [4] $end
$var wire 1 T3 shiftedA [3] $end
$var wire 1 U3 shiftedA [2] $end
$var wire 1 V3 shiftedA [1] $end
$var wire 1 W3 shiftedA [0] $end
$var wire 1 X3 slbiOper $end
$var wire 1 Y3 aluout [15] $end
$var wire 1 Z3 aluout [14] $end
$var wire 1 [3 aluout [13] $end
$var wire 1 \3 aluout [12] $end
$var wire 1 ]3 aluout [11] $end
$var wire 1 ^3 aluout [10] $end
$var wire 1 _3 aluout [9] $end
$var wire 1 `3 aluout [8] $end
$var wire 1 a3 aluout [7] $end
$var wire 1 b3 aluout [6] $end
$var wire 1 c3 aluout [5] $end
$var wire 1 d3 aluout [4] $end
$var wire 1 e3 aluout [3] $end
$var wire 1 f3 aluout [2] $end
$var wire 1 g3 aluout [1] $end
$var wire 1 h3 aluout [0] $end
$var wire 1 i3 conditional $end
$var wire 1 j3 CF $end
$var wire 1 k3 Zero $end
$var wire 1 l3 Overflow $end
$var wire 1 m3 Brchcnd $end
$var wire 1 n3 Oper [1] $end
$var wire 1 o3 Oper [0] $end
$var wire 1 p3 altb $end
$var wire 1 q3 coout [15] $end
$var wire 1 r3 coout [14] $end
$var wire 1 s3 coout [13] $end
$var wire 1 t3 coout [12] $end
$var wire 1 u3 coout [11] $end
$var wire 1 v3 coout [10] $end
$var wire 1 w3 coout [9] $end
$var wire 1 x3 coout [8] $end
$var wire 1 y3 coout [7] $end
$var wire 1 z3 coout [6] $end
$var wire 1 {3 coout [5] $end
$var wire 1 |3 coout [4] $end
$var wire 1 }3 coout [3] $end
$var wire 1 ~3 coout [2] $end
$var wire 1 !4 coout [1] $end
$var wire 1 "4 coout [0] $end
$var wire 1 #4 sltoper [1] $end
$var wire 1 $4 sltoper [0] $end
$var wire 1 %4 ltout [15] $end
$var wire 1 &4 ltout [14] $end
$var wire 1 '4 ltout [13] $end
$var wire 1 (4 ltout [12] $end
$var wire 1 )4 ltout [11] $end
$var wire 1 *4 ltout [10] $end
$var wire 1 +4 ltout [9] $end
$var wire 1 ,4 ltout [8] $end
$var wire 1 -4 ltout [7] $end
$var wire 1 .4 ltout [6] $end
$var wire 1 /4 ltout [5] $end
$var wire 1 04 ltout [4] $end
$var wire 1 14 ltout [3] $end
$var wire 1 24 ltout [2] $end
$var wire 1 34 ltout [1] $end
$var wire 1 44 ltout [0] $end
$var wire 1 54 seqoper [1] $end
$var wire 1 64 seqoper [0] $end
$var wire 1 74 aeqb $end
$var wire 1 84 seqout [15] $end
$var wire 1 94 seqout [14] $end
$var wire 1 :4 seqout [13] $end
$var wire 1 ;4 seqout [12] $end
$var wire 1 <4 seqout [11] $end
$var wire 1 =4 seqout [10] $end
$var wire 1 >4 seqout [9] $end
$var wire 1 ?4 seqout [8] $end
$var wire 1 @4 seqout [7] $end
$var wire 1 A4 seqout [6] $end
$var wire 1 B4 seqout [5] $end
$var wire 1 C4 seqout [4] $end
$var wire 1 D4 seqout [3] $end
$var wire 1 E4 seqout [2] $end
$var wire 1 F4 seqout [1] $end
$var wire 1 G4 seqout [0] $end
$var wire 1 H4 alteb $end
$var wire 1 I4 sleoper [1] $end
$var wire 1 J4 sleoper [0] $end
$var wire 1 K4 sleout [15] $end
$var wire 1 L4 sleout [14] $end
$var wire 1 M4 sleout [13] $end
$var wire 1 N4 sleout [12] $end
$var wire 1 O4 sleout [11] $end
$var wire 1 P4 sleout [10] $end
$var wire 1 Q4 sleout [9] $end
$var wire 1 R4 sleout [8] $end
$var wire 1 S4 sleout [7] $end
$var wire 1 T4 sleout [6] $end
$var wire 1 U4 sleout [5] $end
$var wire 1 V4 sleout [4] $end
$var wire 1 W4 sleout [3] $end
$var wire 1 X4 sleout [2] $end
$var wire 1 Y4 sleout [1] $end
$var wire 1 Z4 sleout [0] $end
$var wire 1 [4 SetCtrl [1] $end
$var wire 1 \4 SetCtrl [0] $end
$var wire 1 ]4 carry $end
$var wire 1 ^4 SLT $end
$var wire 1 _4 SEQ $end
$var wire 1 `4 SLE $end
$var wire 1 a4 greater $end
$var wire 1 b4 ReverseOut [15] $end
$var wire 1 c4 ReverseOut [14] $end
$var wire 1 d4 ReverseOut [13] $end
$var wire 1 e4 ReverseOut [12] $end
$var wire 1 f4 ReverseOut [11] $end
$var wire 1 g4 ReverseOut [10] $end
$var wire 1 h4 ReverseOut [9] $end
$var wire 1 i4 ReverseOut [8] $end
$var wire 1 j4 ReverseOut [7] $end
$var wire 1 k4 ReverseOut [6] $end
$var wire 1 l4 ReverseOut [5] $end
$var wire 1 m4 ReverseOut [4] $end
$var wire 1 n4 ReverseOut [3] $end
$var wire 1 o4 ReverseOut [2] $end
$var wire 1 p4 ReverseOut [1] $end
$var wire 1 q4 ReverseOut [0] $end
$var wire 1 r4 reverse [15] $end
$var wire 1 s4 reverse [14] $end
$var wire 1 t4 reverse [13] $end
$var wire 1 u4 reverse [12] $end
$var wire 1 v4 reverse [11] $end
$var wire 1 w4 reverse [10] $end
$var wire 1 x4 reverse [9] $end
$var wire 1 y4 reverse [8] $end
$var wire 1 z4 reverse [7] $end
$var wire 1 {4 reverse [6] $end
$var wire 1 |4 reverse [5] $end
$var wire 1 }4 reverse [4] $end
$var wire 1 ~4 reverse [3] $end
$var wire 1 !5 reverse [2] $end
$var wire 1 "5 reverse [1] $end
$var wire 1 #5 reverse [0] $end

$scope module shift $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 +5 Oper [1] $end
$var wire 1 ,5 Oper [0] $end
$var wire 1 H3 Out [15] $end
$var wire 1 I3 Out [14] $end
$var wire 1 J3 Out [13] $end
$var wire 1 K3 Out [12] $end
$var wire 1 L3 Out [11] $end
$var wire 1 M3 Out [10] $end
$var wire 1 N3 Out [9] $end
$var wire 1 O3 Out [8] $end
$var wire 1 P3 Out [7] $end
$var wire 1 Q3 Out [6] $end
$var wire 1 R3 Out [5] $end
$var wire 1 S3 Out [4] $end
$var wire 1 T3 Out [3] $end
$var wire 1 U3 Out [2] $end
$var wire 1 V3 Out [1] $end
$var wire 1 W3 Out [0] $end
$var wire 1 -5 shift_left_r [15] $end
$var wire 1 .5 shift_left_r [14] $end
$var wire 1 /5 shift_left_r [13] $end
$var wire 1 05 shift_left_r [12] $end
$var wire 1 15 shift_left_r [11] $end
$var wire 1 25 shift_left_r [10] $end
$var wire 1 35 shift_left_r [9] $end
$var wire 1 45 shift_left_r [8] $end
$var wire 1 55 shift_left_r [7] $end
$var wire 1 65 shift_left_r [6] $end
$var wire 1 75 shift_left_r [5] $end
$var wire 1 85 shift_left_r [4] $end
$var wire 1 95 shift_left_r [3] $end
$var wire 1 :5 shift_left_r [2] $end
$var wire 1 ;5 shift_left_r [1] $end
$var wire 1 <5 shift_left_r [0] $end
$var wire 1 =5 rotate_left_r [15] $end
$var wire 1 >5 rotate_left_r [14] $end
$var wire 1 ?5 rotate_left_r [13] $end
$var wire 1 @5 rotate_left_r [12] $end
$var wire 1 A5 rotate_left_r [11] $end
$var wire 1 B5 rotate_left_r [10] $end
$var wire 1 C5 rotate_left_r [9] $end
$var wire 1 D5 rotate_left_r [8] $end
$var wire 1 E5 rotate_left_r [7] $end
$var wire 1 F5 rotate_left_r [6] $end
$var wire 1 G5 rotate_left_r [5] $end
$var wire 1 H5 rotate_left_r [4] $end
$var wire 1 I5 rotate_left_r [3] $end
$var wire 1 J5 rotate_left_r [2] $end
$var wire 1 K5 rotate_left_r [1] $end
$var wire 1 L5 rotate_left_r [0] $end
$var wire 1 M5 shift_right_l_r [15] $end
$var wire 1 N5 shift_right_l_r [14] $end
$var wire 1 O5 shift_right_l_r [13] $end
$var wire 1 P5 shift_right_l_r [12] $end
$var wire 1 Q5 shift_right_l_r [11] $end
$var wire 1 R5 shift_right_l_r [10] $end
$var wire 1 S5 shift_right_l_r [9] $end
$var wire 1 T5 shift_right_l_r [8] $end
$var wire 1 U5 shift_right_l_r [7] $end
$var wire 1 V5 shift_right_l_r [6] $end
$var wire 1 W5 shift_right_l_r [5] $end
$var wire 1 X5 shift_right_l_r [4] $end
$var wire 1 Y5 shift_right_l_r [3] $end
$var wire 1 Z5 shift_right_l_r [2] $end
$var wire 1 [5 shift_right_l_r [1] $end
$var wire 1 \5 shift_right_l_r [0] $end
$var wire 1 ]5 rotate_right_r [15] $end
$var wire 1 ^5 rotate_right_r [14] $end
$var wire 1 _5 rotate_right_r [13] $end
$var wire 1 `5 rotate_right_r [12] $end
$var wire 1 a5 rotate_right_r [11] $end
$var wire 1 b5 rotate_right_r [10] $end
$var wire 1 c5 rotate_right_r [9] $end
$var wire 1 d5 rotate_right_r [8] $end
$var wire 1 e5 rotate_right_r [7] $end
$var wire 1 f5 rotate_right_r [6] $end
$var wire 1 g5 rotate_right_r [5] $end
$var wire 1 h5 rotate_right_r [4] $end
$var wire 1 i5 rotate_right_r [3] $end
$var wire 1 j5 rotate_right_r [2] $end
$var wire 1 k5 rotate_right_r [1] $end
$var wire 1 l5 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 -5 result [15] $end
$var wire 1 .5 result [14] $end
$var wire 1 /5 result [13] $end
$var wire 1 05 result [12] $end
$var wire 1 15 result [11] $end
$var wire 1 25 result [10] $end
$var wire 1 35 result [9] $end
$var wire 1 45 result [8] $end
$var wire 1 55 result [7] $end
$var wire 1 65 result [6] $end
$var wire 1 75 result [5] $end
$var wire 1 85 result [4] $end
$var wire 1 95 result [3] $end
$var wire 1 :5 result [2] $end
$var wire 1 ;5 result [1] $end
$var wire 1 <5 result [0] $end
$var wire 1 o5 temp1 [15] $end
$var wire 1 p5 temp1 [14] $end
$var wire 1 q5 temp1 [13] $end
$var wire 1 r5 temp1 [12] $end
$var wire 1 s5 temp1 [11] $end
$var wire 1 t5 temp1 [10] $end
$var wire 1 u5 temp1 [9] $end
$var wire 1 v5 temp1 [8] $end
$var wire 1 w5 temp1 [7] $end
$var wire 1 x5 temp1 [6] $end
$var wire 1 y5 temp1 [5] $end
$var wire 1 z5 temp1 [4] $end
$var wire 1 {5 temp1 [3] $end
$var wire 1 |5 temp1 [2] $end
$var wire 1 }5 temp1 [1] $end
$var wire 1 ~5 temp1 [0] $end
$var wire 1 !6 temp2 [15] $end
$var wire 1 "6 temp2 [14] $end
$var wire 1 #6 temp2 [13] $end
$var wire 1 $6 temp2 [12] $end
$var wire 1 %6 temp2 [11] $end
$var wire 1 &6 temp2 [10] $end
$var wire 1 '6 temp2 [9] $end
$var wire 1 (6 temp2 [8] $end
$var wire 1 )6 temp2 [7] $end
$var wire 1 *6 temp2 [6] $end
$var wire 1 +6 temp2 [5] $end
$var wire 1 ,6 temp2 [4] $end
$var wire 1 -6 temp2 [3] $end
$var wire 1 .6 temp2 [2] $end
$var wire 1 /6 temp2 [1] $end
$var wire 1 06 temp2 [0] $end
$var wire 1 16 temp3 [15] $end
$var wire 1 26 temp3 [14] $end
$var wire 1 36 temp3 [13] $end
$var wire 1 46 temp3 [12] $end
$var wire 1 56 temp3 [11] $end
$var wire 1 66 temp3 [10] $end
$var wire 1 76 temp3 [9] $end
$var wire 1 86 temp3 [8] $end
$var wire 1 96 temp3 [7] $end
$var wire 1 :6 temp3 [6] $end
$var wire 1 ;6 temp3 [5] $end
$var wire 1 <6 temp3 [4] $end
$var wire 1 =6 temp3 [3] $end
$var wire 1 >6 temp3 [2] $end
$var wire 1 ?6 temp3 [1] $end
$var wire 1 @6 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 =5 result [15] $end
$var wire 1 >5 result [14] $end
$var wire 1 ?5 result [13] $end
$var wire 1 @5 result [12] $end
$var wire 1 A5 result [11] $end
$var wire 1 B5 result [10] $end
$var wire 1 C5 result [9] $end
$var wire 1 D5 result [8] $end
$var wire 1 E5 result [7] $end
$var wire 1 F5 result [6] $end
$var wire 1 G5 result [5] $end
$var wire 1 H5 result [4] $end
$var wire 1 I5 result [3] $end
$var wire 1 J5 result [2] $end
$var wire 1 K5 result [1] $end
$var wire 1 L5 result [0] $end
$var wire 1 C6 temp1 [15] $end
$var wire 1 D6 temp1 [14] $end
$var wire 1 E6 temp1 [13] $end
$var wire 1 F6 temp1 [12] $end
$var wire 1 G6 temp1 [11] $end
$var wire 1 H6 temp1 [10] $end
$var wire 1 I6 temp1 [9] $end
$var wire 1 J6 temp1 [8] $end
$var wire 1 K6 temp1 [7] $end
$var wire 1 L6 temp1 [6] $end
$var wire 1 M6 temp1 [5] $end
$var wire 1 N6 temp1 [4] $end
$var wire 1 O6 temp1 [3] $end
$var wire 1 P6 temp1 [2] $end
$var wire 1 Q6 temp1 [1] $end
$var wire 1 R6 temp1 [0] $end
$var wire 1 S6 temp2 [15] $end
$var wire 1 T6 temp2 [14] $end
$var wire 1 U6 temp2 [13] $end
$var wire 1 V6 temp2 [12] $end
$var wire 1 W6 temp2 [11] $end
$var wire 1 X6 temp2 [10] $end
$var wire 1 Y6 temp2 [9] $end
$var wire 1 Z6 temp2 [8] $end
$var wire 1 [6 temp2 [7] $end
$var wire 1 \6 temp2 [6] $end
$var wire 1 ]6 temp2 [5] $end
$var wire 1 ^6 temp2 [4] $end
$var wire 1 _6 temp2 [3] $end
$var wire 1 `6 temp2 [2] $end
$var wire 1 a6 temp2 [1] $end
$var wire 1 b6 temp2 [0] $end
$var wire 1 c6 temp3 [15] $end
$var wire 1 d6 temp3 [14] $end
$var wire 1 e6 temp3 [13] $end
$var wire 1 f6 temp3 [12] $end
$var wire 1 g6 temp3 [11] $end
$var wire 1 h6 temp3 [10] $end
$var wire 1 i6 temp3 [9] $end
$var wire 1 j6 temp3 [8] $end
$var wire 1 k6 temp3 [7] $end
$var wire 1 l6 temp3 [6] $end
$var wire 1 m6 temp3 [5] $end
$var wire 1 n6 temp3 [4] $end
$var wire 1 o6 temp3 [3] $end
$var wire 1 p6 temp3 [2] $end
$var wire 1 q6 temp3 [1] $end
$var wire 1 r6 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 M5 result [15] $end
$var wire 1 N5 result [14] $end
$var wire 1 O5 result [13] $end
$var wire 1 P5 result [12] $end
$var wire 1 Q5 result [11] $end
$var wire 1 R5 result [10] $end
$var wire 1 S5 result [9] $end
$var wire 1 T5 result [8] $end
$var wire 1 U5 result [7] $end
$var wire 1 V5 result [6] $end
$var wire 1 W5 result [5] $end
$var wire 1 X5 result [4] $end
$var wire 1 Y5 result [3] $end
$var wire 1 Z5 result [2] $end
$var wire 1 [5 result [1] $end
$var wire 1 \5 result [0] $end
$var wire 1 u6 temp1 [15] $end
$var wire 1 v6 temp1 [14] $end
$var wire 1 w6 temp1 [13] $end
$var wire 1 x6 temp1 [12] $end
$var wire 1 y6 temp1 [11] $end
$var wire 1 z6 temp1 [10] $end
$var wire 1 {6 temp1 [9] $end
$var wire 1 |6 temp1 [8] $end
$var wire 1 }6 temp1 [7] $end
$var wire 1 ~6 temp1 [6] $end
$var wire 1 !7 temp1 [5] $end
$var wire 1 "7 temp1 [4] $end
$var wire 1 #7 temp1 [3] $end
$var wire 1 $7 temp1 [2] $end
$var wire 1 %7 temp1 [1] $end
$var wire 1 &7 temp1 [0] $end
$var wire 1 '7 temp2 [15] $end
$var wire 1 (7 temp2 [14] $end
$var wire 1 )7 temp2 [13] $end
$var wire 1 *7 temp2 [12] $end
$var wire 1 +7 temp2 [11] $end
$var wire 1 ,7 temp2 [10] $end
$var wire 1 -7 temp2 [9] $end
$var wire 1 .7 temp2 [8] $end
$var wire 1 /7 temp2 [7] $end
$var wire 1 07 temp2 [6] $end
$var wire 1 17 temp2 [5] $end
$var wire 1 27 temp2 [4] $end
$var wire 1 37 temp2 [3] $end
$var wire 1 47 temp2 [2] $end
$var wire 1 57 temp2 [1] $end
$var wire 1 67 temp2 [0] $end
$var wire 1 77 temp3 [15] $end
$var wire 1 87 temp3 [14] $end
$var wire 1 97 temp3 [13] $end
$var wire 1 :7 temp3 [12] $end
$var wire 1 ;7 temp3 [11] $end
$var wire 1 <7 temp3 [10] $end
$var wire 1 =7 temp3 [9] $end
$var wire 1 >7 temp3 [8] $end
$var wire 1 ?7 temp3 [7] $end
$var wire 1 @7 temp3 [6] $end
$var wire 1 A7 temp3 [5] $end
$var wire 1 B7 temp3 [4] $end
$var wire 1 C7 temp3 [3] $end
$var wire 1 D7 temp3 [2] $end
$var wire 1 E7 temp3 [1] $end
$var wire 1 F7 temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 '5 ShAmt [3] $end
$var wire 1 (5 ShAmt [2] $end
$var wire 1 )5 ShAmt [1] $end
$var wire 1 *5 ShAmt [0] $end
$var wire 1 ]5 result [15] $end
$var wire 1 ^5 result [14] $end
$var wire 1 _5 result [13] $end
$var wire 1 `5 result [12] $end
$var wire 1 a5 result [11] $end
$var wire 1 b5 result [10] $end
$var wire 1 c5 result [9] $end
$var wire 1 d5 result [8] $end
$var wire 1 e5 result [7] $end
$var wire 1 f5 result [6] $end
$var wire 1 g5 result [5] $end
$var wire 1 h5 result [4] $end
$var wire 1 i5 result [3] $end
$var wire 1 j5 result [2] $end
$var wire 1 k5 result [1] $end
$var wire 1 l5 result [0] $end
$var wire 1 I7 temp1 [15] $end
$var wire 1 J7 temp1 [14] $end
$var wire 1 K7 temp1 [13] $end
$var wire 1 L7 temp1 [12] $end
$var wire 1 M7 temp1 [11] $end
$var wire 1 N7 temp1 [10] $end
$var wire 1 O7 temp1 [9] $end
$var wire 1 P7 temp1 [8] $end
$var wire 1 Q7 temp1 [7] $end
$var wire 1 R7 temp1 [6] $end
$var wire 1 S7 temp1 [5] $end
$var wire 1 T7 temp1 [4] $end
$var wire 1 U7 temp1 [3] $end
$var wire 1 V7 temp1 [2] $end
$var wire 1 W7 temp1 [1] $end
$var wire 1 X7 temp1 [0] $end
$var wire 1 Y7 temp2 [15] $end
$var wire 1 Z7 temp2 [14] $end
$var wire 1 [7 temp2 [13] $end
$var wire 1 \7 temp2 [12] $end
$var wire 1 ]7 temp2 [11] $end
$var wire 1 ^7 temp2 [10] $end
$var wire 1 _7 temp2 [9] $end
$var wire 1 `7 temp2 [8] $end
$var wire 1 a7 temp2 [7] $end
$var wire 1 b7 temp2 [6] $end
$var wire 1 c7 temp2 [5] $end
$var wire 1 d7 temp2 [4] $end
$var wire 1 e7 temp2 [3] $end
$var wire 1 f7 temp2 [2] $end
$var wire 1 g7 temp2 [1] $end
$var wire 1 h7 temp2 [0] $end
$var wire 1 i7 temp3 [15] $end
$var wire 1 j7 temp3 [14] $end
$var wire 1 k7 temp3 [13] $end
$var wire 1 l7 temp3 [12] $end
$var wire 1 m7 temp3 [11] $end
$var wire 1 n7 temp3 [10] $end
$var wire 1 o7 temp3 [9] $end
$var wire 1 p7 temp3 [8] $end
$var wire 1 q7 temp3 [7] $end
$var wire 1 r7 temp3 [6] $end
$var wire 1 s7 temp3 [5] $end
$var wire 1 t7 temp3 [4] $end
$var wire 1 u7 temp3 [3] $end
$var wire 1 v7 temp3 [2] $end
$var wire 1 w7 temp3 [1] $end
$var wire 1 x7 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var wire 1 83 InA [15] $end
$var wire 1 93 InA [14] $end
$var wire 1 :3 InA [13] $end
$var wire 1 ;3 InA [12] $end
$var wire 1 <3 InA [11] $end
$var wire 1 =3 InA [10] $end
$var wire 1 >3 InA [9] $end
$var wire 1 ?3 InA [8] $end
$var wire 1 @3 InA [7] $end
$var wire 1 A3 InA [6] $end
$var wire 1 B3 InA [5] $end
$var wire 1 C3 InA [4] $end
$var wire 1 D3 InA [3] $end
$var wire 1 E3 InA [2] $end
$var wire 1 F3 InA [1] $end
$var wire 1 G3 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 {7 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 |7 sign $end
$var wire 1 Y3 Out [15] $end
$var wire 1 Z3 Out [14] $end
$var wire 1 [3 Out [13] $end
$var wire 1 \3 Out [12] $end
$var wire 1 ]3 Out [11] $end
$var wire 1 ^3 Out [10] $end
$var wire 1 _3 Out [9] $end
$var wire 1 `3 Out [8] $end
$var wire 1 a3 Out [7] $end
$var wire 1 b3 Out [6] $end
$var wire 1 c3 Out [5] $end
$var wire 1 d3 Out [4] $end
$var wire 1 e3 Out [3] $end
$var wire 1 f3 Out [2] $end
$var wire 1 g3 Out [1] $end
$var wire 1 h3 Out [0] $end
$var wire 1 i3 signOut $end
$var wire 1 l3 Ofl $end
$var wire 1 k3 Zero $end
$var wire 1 j3 carryFlag $end
$var wire 1 }7 InA_invA [15] $end
$var wire 1 ~7 InA_invA [14] $end
$var wire 1 !8 InA_invA [13] $end
$var wire 1 "8 InA_invA [12] $end
$var wire 1 #8 InA_invA [11] $end
$var wire 1 $8 InA_invA [10] $end
$var wire 1 %8 InA_invA [9] $end
$var wire 1 &8 InA_invA [8] $end
$var wire 1 '8 InA_invA [7] $end
$var wire 1 (8 InA_invA [6] $end
$var wire 1 )8 InA_invA [5] $end
$var wire 1 *8 InA_invA [4] $end
$var wire 1 +8 InA_invA [3] $end
$var wire 1 ,8 InA_invA [2] $end
$var wire 1 -8 InA_invA [1] $end
$var wire 1 .8 InA_invA [0] $end
$var wire 1 /8 InB_invB [15] $end
$var wire 1 08 InB_invB [14] $end
$var wire 1 18 InB_invB [13] $end
$var wire 1 28 InB_invB [12] $end
$var wire 1 38 InB_invB [11] $end
$var wire 1 48 InB_invB [10] $end
$var wire 1 58 InB_invB [9] $end
$var wire 1 68 InB_invB [8] $end
$var wire 1 78 InB_invB [7] $end
$var wire 1 88 InB_invB [6] $end
$var wire 1 98 InB_invB [5] $end
$var wire 1 :8 InB_invB [4] $end
$var wire 1 ;8 InB_invB [3] $end
$var wire 1 <8 InB_invB [2] $end
$var wire 1 =8 InB_invB [1] $end
$var wire 1 >8 InB_invB [0] $end
$var wire 1 ?8 barrel [15] $end
$var wire 1 @8 barrel [14] $end
$var wire 1 A8 barrel [13] $end
$var wire 1 B8 barrel [12] $end
$var wire 1 C8 barrel [11] $end
$var wire 1 D8 barrel [10] $end
$var wire 1 E8 barrel [9] $end
$var wire 1 F8 barrel [8] $end
$var wire 1 G8 barrel [7] $end
$var wire 1 H8 barrel [6] $end
$var wire 1 I8 barrel [5] $end
$var wire 1 J8 barrel [4] $end
$var wire 1 K8 barrel [3] $end
$var wire 1 L8 barrel [2] $end
$var wire 1 M8 barrel [1] $end
$var wire 1 N8 barrel [0] $end
$var wire 1 O8 logic_gates_r [15] $end
$var wire 1 P8 logic_gates_r [14] $end
$var wire 1 Q8 logic_gates_r [13] $end
$var wire 1 R8 logic_gates_r [12] $end
$var wire 1 S8 logic_gates_r [11] $end
$var wire 1 T8 logic_gates_r [10] $end
$var wire 1 U8 logic_gates_r [9] $end
$var wire 1 V8 logic_gates_r [8] $end
$var wire 1 W8 logic_gates_r [7] $end
$var wire 1 X8 logic_gates_r [6] $end
$var wire 1 Y8 logic_gates_r [5] $end
$var wire 1 Z8 logic_gates_r [4] $end
$var wire 1 [8 logic_gates_r [3] $end
$var wire 1 \8 logic_gates_r [2] $end
$var wire 1 ]8 logic_gates_r [1] $end
$var wire 1 ^8 logic_gates_r [0] $end
$var wire 1 _8 addition [15] $end
$var wire 1 `8 addition [14] $end
$var wire 1 a8 addition [13] $end
$var wire 1 b8 addition [12] $end
$var wire 1 c8 addition [11] $end
$var wire 1 d8 addition [10] $end
$var wire 1 e8 addition [9] $end
$var wire 1 f8 addition [8] $end
$var wire 1 g8 addition [7] $end
$var wire 1 h8 addition [6] $end
$var wire 1 i8 addition [5] $end
$var wire 1 j8 addition [4] $end
$var wire 1 k8 addition [3] $end
$var wire 1 l8 addition [2] $end
$var wire 1 m8 addition [1] $end
$var wire 1 n8 addition [0] $end
$var wire 1 o8 addition_logic [15] $end
$var wire 1 p8 addition_logic [14] $end
$var wire 1 q8 addition_logic [13] $end
$var wire 1 r8 addition_logic [12] $end
$var wire 1 s8 addition_logic [11] $end
$var wire 1 t8 addition_logic [10] $end
$var wire 1 u8 addition_logic [9] $end
$var wire 1 v8 addition_logic [8] $end
$var wire 1 w8 addition_logic [7] $end
$var wire 1 x8 addition_logic [6] $end
$var wire 1 y8 addition_logic [5] $end
$var wire 1 z8 addition_logic [4] $end
$var wire 1 {8 addition_logic [3] $end
$var wire 1 |8 addition_logic [2] $end
$var wire 1 }8 addition_logic [1] $end
$var wire 1 ~8 addition_logic [0] $end
$var wire 1 !9 carry $end
$var wire 1 "9 signed_over $end
$var wire 1 #9 less $end

$scope module shift $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 ?8 Out [15] $end
$var wire 1 @8 Out [14] $end
$var wire 1 A8 Out [13] $end
$var wire 1 B8 Out [12] $end
$var wire 1 C8 Out [11] $end
$var wire 1 D8 Out [10] $end
$var wire 1 E8 Out [9] $end
$var wire 1 F8 Out [8] $end
$var wire 1 G8 Out [7] $end
$var wire 1 H8 Out [6] $end
$var wire 1 I8 Out [5] $end
$var wire 1 J8 Out [4] $end
$var wire 1 K8 Out [3] $end
$var wire 1 L8 Out [2] $end
$var wire 1 M8 Out [1] $end
$var wire 1 N8 Out [0] $end
$var wire 1 '9 shift_left_r [15] $end
$var wire 1 (9 shift_left_r [14] $end
$var wire 1 )9 shift_left_r [13] $end
$var wire 1 *9 shift_left_r [12] $end
$var wire 1 +9 shift_left_r [11] $end
$var wire 1 ,9 shift_left_r [10] $end
$var wire 1 -9 shift_left_r [9] $end
$var wire 1 .9 shift_left_r [8] $end
$var wire 1 /9 shift_left_r [7] $end
$var wire 1 09 shift_left_r [6] $end
$var wire 1 19 shift_left_r [5] $end
$var wire 1 29 shift_left_r [4] $end
$var wire 1 39 shift_left_r [3] $end
$var wire 1 49 shift_left_r [2] $end
$var wire 1 59 shift_left_r [1] $end
$var wire 1 69 shift_left_r [0] $end
$var wire 1 79 rotate_left_r [15] $end
$var wire 1 89 rotate_left_r [14] $end
$var wire 1 99 rotate_left_r [13] $end
$var wire 1 :9 rotate_left_r [12] $end
$var wire 1 ;9 rotate_left_r [11] $end
$var wire 1 <9 rotate_left_r [10] $end
$var wire 1 =9 rotate_left_r [9] $end
$var wire 1 >9 rotate_left_r [8] $end
$var wire 1 ?9 rotate_left_r [7] $end
$var wire 1 @9 rotate_left_r [6] $end
$var wire 1 A9 rotate_left_r [5] $end
$var wire 1 B9 rotate_left_r [4] $end
$var wire 1 C9 rotate_left_r [3] $end
$var wire 1 D9 rotate_left_r [2] $end
$var wire 1 E9 rotate_left_r [1] $end
$var wire 1 F9 rotate_left_r [0] $end
$var wire 1 G9 shift_right_l_r [15] $end
$var wire 1 H9 shift_right_l_r [14] $end
$var wire 1 I9 shift_right_l_r [13] $end
$var wire 1 J9 shift_right_l_r [12] $end
$var wire 1 K9 shift_right_l_r [11] $end
$var wire 1 L9 shift_right_l_r [10] $end
$var wire 1 M9 shift_right_l_r [9] $end
$var wire 1 N9 shift_right_l_r [8] $end
$var wire 1 O9 shift_right_l_r [7] $end
$var wire 1 P9 shift_right_l_r [6] $end
$var wire 1 Q9 shift_right_l_r [5] $end
$var wire 1 R9 shift_right_l_r [4] $end
$var wire 1 S9 shift_right_l_r [3] $end
$var wire 1 T9 shift_right_l_r [2] $end
$var wire 1 U9 shift_right_l_r [1] $end
$var wire 1 V9 shift_right_l_r [0] $end
$var wire 1 W9 rotate_right_r [15] $end
$var wire 1 X9 rotate_right_r [14] $end
$var wire 1 Y9 rotate_right_r [13] $end
$var wire 1 Z9 rotate_right_r [12] $end
$var wire 1 [9 rotate_right_r [11] $end
$var wire 1 \9 rotate_right_r [10] $end
$var wire 1 ]9 rotate_right_r [9] $end
$var wire 1 ^9 rotate_right_r [8] $end
$var wire 1 _9 rotate_right_r [7] $end
$var wire 1 `9 rotate_right_r [6] $end
$var wire 1 a9 rotate_right_r [5] $end
$var wire 1 b9 rotate_right_r [4] $end
$var wire 1 c9 rotate_right_r [3] $end
$var wire 1 d9 rotate_right_r [2] $end
$var wire 1 e9 rotate_right_r [1] $end
$var wire 1 f9 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 '9 result [15] $end
$var wire 1 (9 result [14] $end
$var wire 1 )9 result [13] $end
$var wire 1 *9 result [12] $end
$var wire 1 +9 result [11] $end
$var wire 1 ,9 result [10] $end
$var wire 1 -9 result [9] $end
$var wire 1 .9 result [8] $end
$var wire 1 /9 result [7] $end
$var wire 1 09 result [6] $end
$var wire 1 19 result [5] $end
$var wire 1 29 result [4] $end
$var wire 1 39 result [3] $end
$var wire 1 49 result [2] $end
$var wire 1 59 result [1] $end
$var wire 1 69 result [0] $end
$var wire 1 i9 temp1 [15] $end
$var wire 1 j9 temp1 [14] $end
$var wire 1 k9 temp1 [13] $end
$var wire 1 l9 temp1 [12] $end
$var wire 1 m9 temp1 [11] $end
$var wire 1 n9 temp1 [10] $end
$var wire 1 o9 temp1 [9] $end
$var wire 1 p9 temp1 [8] $end
$var wire 1 q9 temp1 [7] $end
$var wire 1 r9 temp1 [6] $end
$var wire 1 s9 temp1 [5] $end
$var wire 1 t9 temp1 [4] $end
$var wire 1 u9 temp1 [3] $end
$var wire 1 v9 temp1 [2] $end
$var wire 1 w9 temp1 [1] $end
$var wire 1 x9 temp1 [0] $end
$var wire 1 y9 temp2 [15] $end
$var wire 1 z9 temp2 [14] $end
$var wire 1 {9 temp2 [13] $end
$var wire 1 |9 temp2 [12] $end
$var wire 1 }9 temp2 [11] $end
$var wire 1 ~9 temp2 [10] $end
$var wire 1 !: temp2 [9] $end
$var wire 1 ": temp2 [8] $end
$var wire 1 #: temp2 [7] $end
$var wire 1 $: temp2 [6] $end
$var wire 1 %: temp2 [5] $end
$var wire 1 &: temp2 [4] $end
$var wire 1 ': temp2 [3] $end
$var wire 1 (: temp2 [2] $end
$var wire 1 ): temp2 [1] $end
$var wire 1 *: temp2 [0] $end
$var wire 1 +: temp3 [15] $end
$var wire 1 ,: temp3 [14] $end
$var wire 1 -: temp3 [13] $end
$var wire 1 .: temp3 [12] $end
$var wire 1 /: temp3 [11] $end
$var wire 1 0: temp3 [10] $end
$var wire 1 1: temp3 [9] $end
$var wire 1 2: temp3 [8] $end
$var wire 1 3: temp3 [7] $end
$var wire 1 4: temp3 [6] $end
$var wire 1 5: temp3 [5] $end
$var wire 1 6: temp3 [4] $end
$var wire 1 7: temp3 [3] $end
$var wire 1 8: temp3 [2] $end
$var wire 1 9: temp3 [1] $end
$var wire 1 :: temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 79 result [15] $end
$var wire 1 89 result [14] $end
$var wire 1 99 result [13] $end
$var wire 1 :9 result [12] $end
$var wire 1 ;9 result [11] $end
$var wire 1 <9 result [10] $end
$var wire 1 =9 result [9] $end
$var wire 1 >9 result [8] $end
$var wire 1 ?9 result [7] $end
$var wire 1 @9 result [6] $end
$var wire 1 A9 result [5] $end
$var wire 1 B9 result [4] $end
$var wire 1 C9 result [3] $end
$var wire 1 D9 result [2] $end
$var wire 1 E9 result [1] $end
$var wire 1 F9 result [0] $end
$var wire 1 =: temp1 [15] $end
$var wire 1 >: temp1 [14] $end
$var wire 1 ?: temp1 [13] $end
$var wire 1 @: temp1 [12] $end
$var wire 1 A: temp1 [11] $end
$var wire 1 B: temp1 [10] $end
$var wire 1 C: temp1 [9] $end
$var wire 1 D: temp1 [8] $end
$var wire 1 E: temp1 [7] $end
$var wire 1 F: temp1 [6] $end
$var wire 1 G: temp1 [5] $end
$var wire 1 H: temp1 [4] $end
$var wire 1 I: temp1 [3] $end
$var wire 1 J: temp1 [2] $end
$var wire 1 K: temp1 [1] $end
$var wire 1 L: temp1 [0] $end
$var wire 1 M: temp2 [15] $end
$var wire 1 N: temp2 [14] $end
$var wire 1 O: temp2 [13] $end
$var wire 1 P: temp2 [12] $end
$var wire 1 Q: temp2 [11] $end
$var wire 1 R: temp2 [10] $end
$var wire 1 S: temp2 [9] $end
$var wire 1 T: temp2 [8] $end
$var wire 1 U: temp2 [7] $end
$var wire 1 V: temp2 [6] $end
$var wire 1 W: temp2 [5] $end
$var wire 1 X: temp2 [4] $end
$var wire 1 Y: temp2 [3] $end
$var wire 1 Z: temp2 [2] $end
$var wire 1 [: temp2 [1] $end
$var wire 1 \: temp2 [0] $end
$var wire 1 ]: temp3 [15] $end
$var wire 1 ^: temp3 [14] $end
$var wire 1 _: temp3 [13] $end
$var wire 1 `: temp3 [12] $end
$var wire 1 a: temp3 [11] $end
$var wire 1 b: temp3 [10] $end
$var wire 1 c: temp3 [9] $end
$var wire 1 d: temp3 [8] $end
$var wire 1 e: temp3 [7] $end
$var wire 1 f: temp3 [6] $end
$var wire 1 g: temp3 [5] $end
$var wire 1 h: temp3 [4] $end
$var wire 1 i: temp3 [3] $end
$var wire 1 j: temp3 [2] $end
$var wire 1 k: temp3 [1] $end
$var wire 1 l: temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 G9 result [15] $end
$var wire 1 H9 result [14] $end
$var wire 1 I9 result [13] $end
$var wire 1 J9 result [12] $end
$var wire 1 K9 result [11] $end
$var wire 1 L9 result [10] $end
$var wire 1 M9 result [9] $end
$var wire 1 N9 result [8] $end
$var wire 1 O9 result [7] $end
$var wire 1 P9 result [6] $end
$var wire 1 Q9 result [5] $end
$var wire 1 R9 result [4] $end
$var wire 1 S9 result [3] $end
$var wire 1 T9 result [2] $end
$var wire 1 U9 result [1] $end
$var wire 1 V9 result [0] $end
$var wire 1 o: temp1 [15] $end
$var wire 1 p: temp1 [14] $end
$var wire 1 q: temp1 [13] $end
$var wire 1 r: temp1 [12] $end
$var wire 1 s: temp1 [11] $end
$var wire 1 t: temp1 [10] $end
$var wire 1 u: temp1 [9] $end
$var wire 1 v: temp1 [8] $end
$var wire 1 w: temp1 [7] $end
$var wire 1 x: temp1 [6] $end
$var wire 1 y: temp1 [5] $end
$var wire 1 z: temp1 [4] $end
$var wire 1 {: temp1 [3] $end
$var wire 1 |: temp1 [2] $end
$var wire 1 }: temp1 [1] $end
$var wire 1 ~: temp1 [0] $end
$var wire 1 !; temp2 [15] $end
$var wire 1 "; temp2 [14] $end
$var wire 1 #; temp2 [13] $end
$var wire 1 $; temp2 [12] $end
$var wire 1 %; temp2 [11] $end
$var wire 1 &; temp2 [10] $end
$var wire 1 '; temp2 [9] $end
$var wire 1 (; temp2 [8] $end
$var wire 1 ); temp2 [7] $end
$var wire 1 *; temp2 [6] $end
$var wire 1 +; temp2 [5] $end
$var wire 1 ,; temp2 [4] $end
$var wire 1 -; temp2 [3] $end
$var wire 1 .; temp2 [2] $end
$var wire 1 /; temp2 [1] $end
$var wire 1 0; temp2 [0] $end
$var wire 1 1; temp3 [15] $end
$var wire 1 2; temp3 [14] $end
$var wire 1 3; temp3 [13] $end
$var wire 1 4; temp3 [12] $end
$var wire 1 5; temp3 [11] $end
$var wire 1 6; temp3 [10] $end
$var wire 1 7; temp3 [9] $end
$var wire 1 8; temp3 [8] $end
$var wire 1 9; temp3 [7] $end
$var wire 1 :; temp3 [6] $end
$var wire 1 ;; temp3 [5] $end
$var wire 1 <; temp3 [4] $end
$var wire 1 =; temp3 [3] $end
$var wire 1 >; temp3 [2] $end
$var wire 1 ?; temp3 [1] $end
$var wire 1 @; temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 }7 In [15] $end
$var wire 1 ~7 In [14] $end
$var wire 1 !8 In [13] $end
$var wire 1 "8 In [12] $end
$var wire 1 #8 In [11] $end
$var wire 1 $8 In [10] $end
$var wire 1 %8 In [9] $end
$var wire 1 &8 In [8] $end
$var wire 1 '8 In [7] $end
$var wire 1 (8 In [6] $end
$var wire 1 )8 In [5] $end
$var wire 1 *8 In [4] $end
$var wire 1 +8 In [3] $end
$var wire 1 ,8 In [2] $end
$var wire 1 -8 In [1] $end
$var wire 1 .8 In [0] $end
$var wire 1 ;8 ShAmt [3] $end
$var wire 1 <8 ShAmt [2] $end
$var wire 1 =8 ShAmt [1] $end
$var wire 1 >8 ShAmt [0] $end
$var wire 1 W9 result [15] $end
$var wire 1 X9 result [14] $end
$var wire 1 Y9 result [13] $end
$var wire 1 Z9 result [12] $end
$var wire 1 [9 result [11] $end
$var wire 1 \9 result [10] $end
$var wire 1 ]9 result [9] $end
$var wire 1 ^9 result [8] $end
$var wire 1 _9 result [7] $end
$var wire 1 `9 result [6] $end
$var wire 1 a9 result [5] $end
$var wire 1 b9 result [4] $end
$var wire 1 c9 result [3] $end
$var wire 1 d9 result [2] $end
$var wire 1 e9 result [1] $end
$var wire 1 f9 result [0] $end
$var wire 1 C; temp1 [15] $end
$var wire 1 D; temp1 [14] $end
$var wire 1 E; temp1 [13] $end
$var wire 1 F; temp1 [12] $end
$var wire 1 G; temp1 [11] $end
$var wire 1 H; temp1 [10] $end
$var wire 1 I; temp1 [9] $end
$var wire 1 J; temp1 [8] $end
$var wire 1 K; temp1 [7] $end
$var wire 1 L; temp1 [6] $end
$var wire 1 M; temp1 [5] $end
$var wire 1 N; temp1 [4] $end
$var wire 1 O; temp1 [3] $end
$var wire 1 P; temp1 [2] $end
$var wire 1 Q; temp1 [1] $end
$var wire 1 R; temp1 [0] $end
$var wire 1 S; temp2 [15] $end
$var wire 1 T; temp2 [14] $end
$var wire 1 U; temp2 [13] $end
$var wire 1 V; temp2 [12] $end
$var wire 1 W; temp2 [11] $end
$var wire 1 X; temp2 [10] $end
$var wire 1 Y; temp2 [9] $end
$var wire 1 Z; temp2 [8] $end
$var wire 1 [; temp2 [7] $end
$var wire 1 \; temp2 [6] $end
$var wire 1 ]; temp2 [5] $end
$var wire 1 ^; temp2 [4] $end
$var wire 1 _; temp2 [3] $end
$var wire 1 `; temp2 [2] $end
$var wire 1 a; temp2 [1] $end
$var wire 1 b; temp2 [0] $end
$var wire 1 c; temp3 [15] $end
$var wire 1 d; temp3 [14] $end
$var wire 1 e; temp3 [13] $end
$var wire 1 f; temp3 [12] $end
$var wire 1 g; temp3 [11] $end
$var wire 1 h; temp3 [10] $end
$var wire 1 i; temp3 [9] $end
$var wire 1 j; temp3 [8] $end
$var wire 1 k; temp3 [7] $end
$var wire 1 l; temp3 [6] $end
$var wire 1 m; temp3 [5] $end
$var wire 1 n; temp3 [4] $end
$var wire 1 o; temp3 [3] $end
$var wire 1 p; temp3 [2] $end
$var wire 1 q; temp3 [1] $end
$var wire 1 r; temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var wire 1 }7 A [15] $end
$var wire 1 ~7 A [14] $end
$var wire 1 !8 A [13] $end
$var wire 1 "8 A [12] $end
$var wire 1 #8 A [11] $end
$var wire 1 $8 A [10] $end
$var wire 1 %8 A [9] $end
$var wire 1 &8 A [8] $end
$var wire 1 '8 A [7] $end
$var wire 1 (8 A [6] $end
$var wire 1 )8 A [5] $end
$var wire 1 *8 A [4] $end
$var wire 1 +8 A [3] $end
$var wire 1 ,8 A [2] $end
$var wire 1 -8 A [1] $end
$var wire 1 .8 A [0] $end
$var wire 1 /8 B [15] $end
$var wire 1 08 B [14] $end
$var wire 1 18 B [13] $end
$var wire 1 28 B [12] $end
$var wire 1 38 B [11] $end
$var wire 1 48 B [10] $end
$var wire 1 58 B [9] $end
$var wire 1 68 B [8] $end
$var wire 1 78 B [7] $end
$var wire 1 88 B [6] $end
$var wire 1 98 B [5] $end
$var wire 1 :8 B [4] $end
$var wire 1 ;8 B [3] $end
$var wire 1 <8 B [2] $end
$var wire 1 =8 B [1] $end
$var wire 1 >8 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 O8 Result [15] $end
$var wire 1 P8 Result [14] $end
$var wire 1 Q8 Result [13] $end
$var wire 1 R8 Result [12] $end
$var wire 1 S8 Result [11] $end
$var wire 1 T8 Result [10] $end
$var wire 1 U8 Result [9] $end
$var wire 1 V8 Result [8] $end
$var wire 1 W8 Result [7] $end
$var wire 1 X8 Result [6] $end
$var wire 1 Y8 Result [5] $end
$var wire 1 Z8 Result [4] $end
$var wire 1 [8 Result [3] $end
$var wire 1 \8 Result [2] $end
$var wire 1 ]8 Result [1] $end
$var wire 1 ^8 Result [0] $end
$upscope $end

$scope module adding $end
$var wire 1 _8 sum [15] $end
$var wire 1 `8 sum [14] $end
$var wire 1 a8 sum [13] $end
$var wire 1 b8 sum [12] $end
$var wire 1 c8 sum [11] $end
$var wire 1 d8 sum [10] $end
$var wire 1 e8 sum [9] $end
$var wire 1 f8 sum [8] $end
$var wire 1 g8 sum [7] $end
$var wire 1 h8 sum [6] $end
$var wire 1 i8 sum [5] $end
$var wire 1 j8 sum [4] $end
$var wire 1 k8 sum [3] $end
$var wire 1 l8 sum [2] $end
$var wire 1 m8 sum [1] $end
$var wire 1 n8 sum [0] $end
$var wire 1 !9 c_out $end
$var wire 1 }7 a [15] $end
$var wire 1 ~7 a [14] $end
$var wire 1 !8 a [13] $end
$var wire 1 "8 a [12] $end
$var wire 1 #8 a [11] $end
$var wire 1 $8 a [10] $end
$var wire 1 %8 a [9] $end
$var wire 1 &8 a [8] $end
$var wire 1 '8 a [7] $end
$var wire 1 (8 a [6] $end
$var wire 1 )8 a [5] $end
$var wire 1 *8 a [4] $end
$var wire 1 +8 a [3] $end
$var wire 1 ,8 a [2] $end
$var wire 1 -8 a [1] $end
$var wire 1 .8 a [0] $end
$var wire 1 /8 b [15] $end
$var wire 1 08 b [14] $end
$var wire 1 18 b [13] $end
$var wire 1 28 b [12] $end
$var wire 1 38 b [11] $end
$var wire 1 48 b [10] $end
$var wire 1 58 b [9] $end
$var wire 1 68 b [8] $end
$var wire 1 78 b [7] $end
$var wire 1 88 b [6] $end
$var wire 1 98 b [5] $end
$var wire 1 :8 b [4] $end
$var wire 1 ;8 b [3] $end
$var wire 1 <8 b [2] $end
$var wire 1 =8 b [1] $end
$var wire 1 >8 b [0] $end
$var wire 1 {7 c_in $end
$var wire 1 v; gen [15] $end
$var wire 1 w; gen [14] $end
$var wire 1 x; gen [13] $end
$var wire 1 y; gen [12] $end
$var wire 1 z; gen [11] $end
$var wire 1 {; gen [10] $end
$var wire 1 |; gen [9] $end
$var wire 1 }; gen [8] $end
$var wire 1 ~; gen [7] $end
$var wire 1 !< gen [6] $end
$var wire 1 "< gen [5] $end
$var wire 1 #< gen [4] $end
$var wire 1 $< gen [3] $end
$var wire 1 %< gen [2] $end
$var wire 1 &< gen [1] $end
$var wire 1 '< gen [0] $end
$var wire 1 (< four_gen [3] $end
$var wire 1 )< four_gen [2] $end
$var wire 1 *< four_gen [1] $end
$var wire 1 +< four_gen [0] $end
$var wire 1 ,< prop [15] $end
$var wire 1 -< prop [14] $end
$var wire 1 .< prop [13] $end
$var wire 1 /< prop [12] $end
$var wire 1 0< prop [11] $end
$var wire 1 1< prop [10] $end
$var wire 1 2< prop [9] $end
$var wire 1 3< prop [8] $end
$var wire 1 4< prop [7] $end
$var wire 1 5< prop [6] $end
$var wire 1 6< prop [5] $end
$var wire 1 7< prop [4] $end
$var wire 1 8< prop [3] $end
$var wire 1 9< prop [2] $end
$var wire 1 :< prop [1] $end
$var wire 1 ;< prop [0] $end
$var wire 1 << four_prop [3] $end
$var wire 1 =< four_prop [2] $end
$var wire 1 >< four_prop [1] $end
$var wire 1 ?< four_prop [0] $end
$var wire 1 @< carry [2] $end
$var wire 1 A< carry [1] $end
$var wire 1 B< carry [0] $end
$var wire 1 C< fa_sum [15] $end
$var wire 1 D< fa_sum [14] $end
$var wire 1 E< fa_sum [13] $end
$var wire 1 F< fa_sum [12] $end
$var wire 1 G< fa_sum [11] $end
$var wire 1 H< fa_sum [10] $end
$var wire 1 I< fa_sum [9] $end
$var wire 1 J< fa_sum [8] $end
$var wire 1 K< fa_sum [7] $end
$var wire 1 L< fa_sum [6] $end
$var wire 1 M< fa_sum [5] $end
$var wire 1 N< fa_sum [4] $end
$var wire 1 O< fa_sum [3] $end
$var wire 1 P< fa_sum [2] $end
$var wire 1 Q< fa_sum [1] $end
$var wire 1 R< fa_sum [0] $end

$scope module cla1 $end
$var wire 1 O< sum [3] $end
$var wire 1 P< sum [2] $end
$var wire 1 Q< sum [1] $end
$var wire 1 R< sum [0] $end
$var wire 1 T< c_out $end
$var wire 1 +8 a [3] $end
$var wire 1 ,8 a [2] $end
$var wire 1 -8 a [1] $end
$var wire 1 .8 a [0] $end
$var wire 1 ;8 b [3] $end
$var wire 1 <8 b [2] $end
$var wire 1 =8 b [1] $end
$var wire 1 >8 b [0] $end
$var wire 1 {7 c_in $end
$var wire 1 U< gen [3] $end
$var wire 1 V< gen [2] $end
$var wire 1 W< gen [1] $end
$var wire 1 X< gen [0] $end
$var wire 1 Y< prop [3] $end
$var wire 1 Z< prop [2] $end
$var wire 1 [< prop [1] $end
$var wire 1 \< prop [0] $end
$var wire 1 ]< carry [2] $end
$var wire 1 ^< carry [1] $end
$var wire 1 _< carry [0] $end
$var wire 1 `< fa_sum [3] $end
$var wire 1 a< fa_sum [2] $end
$var wire 1 b< fa_sum [1] $end
$var wire 1 c< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 c< s $end
$var wire 1 d< c_out $end
$var wire 1 .8 a $end
$var wire 1 >8 b $end
$var wire 1 {7 c_in $end
$var wire 1 e< xor_AB $end
$var wire 1 f< xor_ABCin $end
$var wire 1 g< NAND_AB $end
$var wire 1 h< not_NAND_AB $end
$var wire 1 i< NAND_Cin_xor_AB $end
$var wire 1 j< not_NAND_Cin_xor_AB $end
$var wire 1 k< NOR_2NAND $end
$var wire 1 l< not_NOR_2NAND $end
$var wire 1 m< Cin $end

$scope module xor1 $end
$var wire 1 .8 in1 $end
$var wire 1 >8 in2 $end
$var wire 1 e< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 e< in1 $end
$var wire 1 {7 in2 $end
$var wire 1 f< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 .8 in1 $end
$var wire 1 >8 in2 $end
$var wire 1 g< out $end
$upscope $end

$scope module not1 $end
$var wire 1 g< in1 $end
$var wire 1 h< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 m< in1 $end
$var wire 1 e< in2 $end
$var wire 1 i< out $end
$upscope $end

$scope module not2 $end
$var wire 1 i< in1 $end
$var wire 1 j< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 h< in1 $end
$var wire 1 j< in2 $end
$var wire 1 k< out $end
$upscope $end

$scope module not3 $end
$var wire 1 k< in1 $end
$var wire 1 l< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 b< s $end
$var wire 1 n< c_out $end
$var wire 1 -8 a $end
$var wire 1 =8 b $end
$var wire 1 _< c_in $end
$var wire 1 o< xor_AB $end
$var wire 1 p< xor_ABCin $end
$var wire 1 q< NAND_AB $end
$var wire 1 r< not_NAND_AB $end
$var wire 1 s< NAND_Cin_xor_AB $end
$var wire 1 t< not_NAND_Cin_xor_AB $end
$var wire 1 u< NOR_2NAND $end
$var wire 1 v< not_NOR_2NAND $end
$var wire 1 w< Cin $end

$scope module xor1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 o< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 o< in1 $end
$var wire 1 _< in2 $end
$var wire 1 p< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 q< out $end
$upscope $end

$scope module not1 $end
$var wire 1 q< in1 $end
$var wire 1 r< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 w< in1 $end
$var wire 1 o< in2 $end
$var wire 1 s< out $end
$upscope $end

$scope module not2 $end
$var wire 1 s< in1 $end
$var wire 1 t< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 r< in1 $end
$var wire 1 t< in2 $end
$var wire 1 u< out $end
$upscope $end

$scope module not3 $end
$var wire 1 u< in1 $end
$var wire 1 v< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 a< s $end
$var wire 1 x< c_out $end
$var wire 1 ,8 a $end
$var wire 1 <8 b $end
$var wire 1 ^< c_in $end
$var wire 1 y< xor_AB $end
$var wire 1 z< xor_ABCin $end
$var wire 1 {< NAND_AB $end
$var wire 1 |< not_NAND_AB $end
$var wire 1 }< NAND_Cin_xor_AB $end
$var wire 1 ~< not_NAND_Cin_xor_AB $end
$var wire 1 != NOR_2NAND $end
$var wire 1 "= not_NOR_2NAND $end
$var wire 1 #= Cin $end

$scope module xor1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 y< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 y< in1 $end
$var wire 1 ^< in2 $end
$var wire 1 z< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 {< out $end
$upscope $end

$scope module not1 $end
$var wire 1 {< in1 $end
$var wire 1 |< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #= in1 $end
$var wire 1 y< in2 $end
$var wire 1 }< out $end
$upscope $end

$scope module not2 $end
$var wire 1 }< in1 $end
$var wire 1 ~< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 |< in1 $end
$var wire 1 ~< in2 $end
$var wire 1 != out $end
$upscope $end

$scope module not3 $end
$var wire 1 != in1 $end
$var wire 1 "= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 `< s $end
$var wire 1 $= c_out $end
$var wire 1 +8 a $end
$var wire 1 ;8 b $end
$var wire 1 ]< c_in $end
$var wire 1 %= xor_AB $end
$var wire 1 &= xor_ABCin $end
$var wire 1 '= NAND_AB $end
$var wire 1 (= not_NAND_AB $end
$var wire 1 )= NAND_Cin_xor_AB $end
$var wire 1 *= not_NAND_Cin_xor_AB $end
$var wire 1 += NOR_2NAND $end
$var wire 1 ,= not_NOR_2NAND $end
$var wire 1 -= Cin $end

$scope module xor1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 %= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %= in1 $end
$var wire 1 ]< in2 $end
$var wire 1 &= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 '= out $end
$upscope $end

$scope module not1 $end
$var wire 1 '= in1 $end
$var wire 1 (= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 -= in1 $end
$var wire 1 %= in2 $end
$var wire 1 )= out $end
$upscope $end

$scope module not2 $end
$var wire 1 )= in1 $end
$var wire 1 *= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (= in1 $end
$var wire 1 *= in2 $end
$var wire 1 += out $end
$upscope $end

$scope module not3 $end
$var wire 1 += in1 $end
$var wire 1 ,= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var wire 1 K< sum [3] $end
$var wire 1 L< sum [2] $end
$var wire 1 M< sum [1] $end
$var wire 1 N< sum [0] $end
$var wire 1 /= c_out $end
$var wire 1 '8 a [3] $end
$var wire 1 (8 a [2] $end
$var wire 1 )8 a [1] $end
$var wire 1 *8 a [0] $end
$var wire 1 78 b [3] $end
$var wire 1 88 b [2] $end
$var wire 1 98 b [1] $end
$var wire 1 :8 b [0] $end
$var wire 1 B< c_in $end
$var wire 1 0= gen [3] $end
$var wire 1 1= gen [2] $end
$var wire 1 2= gen [1] $end
$var wire 1 3= gen [0] $end
$var wire 1 4= prop [3] $end
$var wire 1 5= prop [2] $end
$var wire 1 6= prop [1] $end
$var wire 1 7= prop [0] $end
$var wire 1 8= carry [2] $end
$var wire 1 9= carry [1] $end
$var wire 1 := carry [0] $end
$var wire 1 ;= fa_sum [3] $end
$var wire 1 <= fa_sum [2] $end
$var wire 1 == fa_sum [1] $end
$var wire 1 >= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 >= s $end
$var wire 1 ?= c_out $end
$var wire 1 *8 a $end
$var wire 1 :8 b $end
$var wire 1 B< c_in $end
$var wire 1 @= xor_AB $end
$var wire 1 A= xor_ABCin $end
$var wire 1 B= NAND_AB $end
$var wire 1 C= not_NAND_AB $end
$var wire 1 D= NAND_Cin_xor_AB $end
$var wire 1 E= not_NAND_Cin_xor_AB $end
$var wire 1 F= NOR_2NAND $end
$var wire 1 G= not_NOR_2NAND $end
$var wire 1 H= Cin $end

$scope module xor1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 @= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 @= in1 $end
$var wire 1 B< in2 $end
$var wire 1 A= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 B= out $end
$upscope $end

$scope module not1 $end
$var wire 1 B= in1 $end
$var wire 1 C= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 H= in1 $end
$var wire 1 @= in2 $end
$var wire 1 D= out $end
$upscope $end

$scope module not2 $end
$var wire 1 D= in1 $end
$var wire 1 E= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 C= in1 $end
$var wire 1 E= in2 $end
$var wire 1 F= out $end
$upscope $end

$scope module not3 $end
$var wire 1 F= in1 $end
$var wire 1 G= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 == s $end
$var wire 1 I= c_out $end
$var wire 1 )8 a $end
$var wire 1 98 b $end
$var wire 1 := c_in $end
$var wire 1 J= xor_AB $end
$var wire 1 K= xor_ABCin $end
$var wire 1 L= NAND_AB $end
$var wire 1 M= not_NAND_AB $end
$var wire 1 N= NAND_Cin_xor_AB $end
$var wire 1 O= not_NAND_Cin_xor_AB $end
$var wire 1 P= NOR_2NAND $end
$var wire 1 Q= not_NOR_2NAND $end
$var wire 1 R= Cin $end

$scope module xor1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 J= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 J= in1 $end
$var wire 1 := in2 $end
$var wire 1 K= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 L= out $end
$upscope $end

$scope module not1 $end
$var wire 1 L= in1 $end
$var wire 1 M= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 R= in1 $end
$var wire 1 J= in2 $end
$var wire 1 N= out $end
$upscope $end

$scope module not2 $end
$var wire 1 N= in1 $end
$var wire 1 O= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 M= in1 $end
$var wire 1 O= in2 $end
$var wire 1 P= out $end
$upscope $end

$scope module not3 $end
$var wire 1 P= in1 $end
$var wire 1 Q= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 <= s $end
$var wire 1 S= c_out $end
$var wire 1 (8 a $end
$var wire 1 88 b $end
$var wire 1 9= c_in $end
$var wire 1 T= xor_AB $end
$var wire 1 U= xor_ABCin $end
$var wire 1 V= NAND_AB $end
$var wire 1 W= not_NAND_AB $end
$var wire 1 X= NAND_Cin_xor_AB $end
$var wire 1 Y= not_NAND_Cin_xor_AB $end
$var wire 1 Z= NOR_2NAND $end
$var wire 1 [= not_NOR_2NAND $end
$var wire 1 \= Cin $end

$scope module xor1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 T= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 T= in1 $end
$var wire 1 9= in2 $end
$var wire 1 U= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 V= out $end
$upscope $end

$scope module not1 $end
$var wire 1 V= in1 $end
$var wire 1 W= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \= in1 $end
$var wire 1 T= in2 $end
$var wire 1 X= out $end
$upscope $end

$scope module not2 $end
$var wire 1 X= in1 $end
$var wire 1 Y= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 W= in1 $end
$var wire 1 Y= in2 $end
$var wire 1 Z= out $end
$upscope $end

$scope module not3 $end
$var wire 1 Z= in1 $end
$var wire 1 [= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 ;= s $end
$var wire 1 ]= c_out $end
$var wire 1 '8 a $end
$var wire 1 78 b $end
$var wire 1 8= c_in $end
$var wire 1 ^= xor_AB $end
$var wire 1 _= xor_ABCin $end
$var wire 1 `= NAND_AB $end
$var wire 1 a= not_NAND_AB $end
$var wire 1 b= NAND_Cin_xor_AB $end
$var wire 1 c= not_NAND_Cin_xor_AB $end
$var wire 1 d= NOR_2NAND $end
$var wire 1 e= not_NOR_2NAND $end
$var wire 1 f= Cin $end

$scope module xor1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 ^= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^= in1 $end
$var wire 1 8= in2 $end
$var wire 1 _= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 `= out $end
$upscope $end

$scope module not1 $end
$var wire 1 `= in1 $end
$var wire 1 a= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 f= in1 $end
$var wire 1 ^= in2 $end
$var wire 1 b= out $end
$upscope $end

$scope module not2 $end
$var wire 1 b= in1 $end
$var wire 1 c= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 a= in1 $end
$var wire 1 c= in2 $end
$var wire 1 d= out $end
$upscope $end

$scope module not3 $end
$var wire 1 d= in1 $end
$var wire 1 e= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var wire 1 G< sum [3] $end
$var wire 1 H< sum [2] $end
$var wire 1 I< sum [1] $end
$var wire 1 J< sum [0] $end
$var wire 1 h= c_out $end
$var wire 1 #8 a [3] $end
$var wire 1 $8 a [2] $end
$var wire 1 %8 a [1] $end
$var wire 1 &8 a [0] $end
$var wire 1 38 b [3] $end
$var wire 1 48 b [2] $end
$var wire 1 58 b [1] $end
$var wire 1 68 b [0] $end
$var wire 1 A< c_in $end
$var wire 1 i= gen [3] $end
$var wire 1 j= gen [2] $end
$var wire 1 k= gen [1] $end
$var wire 1 l= gen [0] $end
$var wire 1 m= prop [3] $end
$var wire 1 n= prop [2] $end
$var wire 1 o= prop [1] $end
$var wire 1 p= prop [0] $end
$var wire 1 q= carry [2] $end
$var wire 1 r= carry [1] $end
$var wire 1 s= carry [0] $end
$var wire 1 t= fa_sum [3] $end
$var wire 1 u= fa_sum [2] $end
$var wire 1 v= fa_sum [1] $end
$var wire 1 w= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 w= s $end
$var wire 1 x= c_out $end
$var wire 1 &8 a $end
$var wire 1 68 b $end
$var wire 1 A< c_in $end
$var wire 1 y= xor_AB $end
$var wire 1 z= xor_ABCin $end
$var wire 1 {= NAND_AB $end
$var wire 1 |= not_NAND_AB $end
$var wire 1 }= NAND_Cin_xor_AB $end
$var wire 1 ~= not_NAND_Cin_xor_AB $end
$var wire 1 !> NOR_2NAND $end
$var wire 1 "> not_NOR_2NAND $end
$var wire 1 #> Cin $end

$scope module xor1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 y= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 y= in1 $end
$var wire 1 A< in2 $end
$var wire 1 z= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 {= out $end
$upscope $end

$scope module not1 $end
$var wire 1 {= in1 $end
$var wire 1 |= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #> in1 $end
$var wire 1 y= in2 $end
$var wire 1 }= out $end
$upscope $end

$scope module not2 $end
$var wire 1 }= in1 $end
$var wire 1 ~= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 |= in1 $end
$var wire 1 ~= in2 $end
$var wire 1 !> out $end
$upscope $end

$scope module not3 $end
$var wire 1 !> in1 $end
$var wire 1 "> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 v= s $end
$var wire 1 $> c_out $end
$var wire 1 %8 a $end
$var wire 1 58 b $end
$var wire 1 s= c_in $end
$var wire 1 %> xor_AB $end
$var wire 1 &> xor_ABCin $end
$var wire 1 '> NAND_AB $end
$var wire 1 (> not_NAND_AB $end
$var wire 1 )> NAND_Cin_xor_AB $end
$var wire 1 *> not_NAND_Cin_xor_AB $end
$var wire 1 +> NOR_2NAND $end
$var wire 1 ,> not_NOR_2NAND $end
$var wire 1 -> Cin $end

$scope module xor1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 %> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %> in1 $end
$var wire 1 s= in2 $end
$var wire 1 &> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 '> out $end
$upscope $end

$scope module not1 $end
$var wire 1 '> in1 $end
$var wire 1 (> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 -> in1 $end
$var wire 1 %> in2 $end
$var wire 1 )> out $end
$upscope $end

$scope module not2 $end
$var wire 1 )> in1 $end
$var wire 1 *> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (> in1 $end
$var wire 1 *> in2 $end
$var wire 1 +> out $end
$upscope $end

$scope module not3 $end
$var wire 1 +> in1 $end
$var wire 1 ,> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 u= s $end
$var wire 1 .> c_out $end
$var wire 1 $8 a $end
$var wire 1 48 b $end
$var wire 1 r= c_in $end
$var wire 1 /> xor_AB $end
$var wire 1 0> xor_ABCin $end
$var wire 1 1> NAND_AB $end
$var wire 1 2> not_NAND_AB $end
$var wire 1 3> NAND_Cin_xor_AB $end
$var wire 1 4> not_NAND_Cin_xor_AB $end
$var wire 1 5> NOR_2NAND $end
$var wire 1 6> not_NOR_2NAND $end
$var wire 1 7> Cin $end

$scope module xor1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 /> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 /> in1 $end
$var wire 1 r= in2 $end
$var wire 1 0> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 1> out $end
$upscope $end

$scope module not1 $end
$var wire 1 1> in1 $end
$var wire 1 2> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7> in1 $end
$var wire 1 /> in2 $end
$var wire 1 3> out $end
$upscope $end

$scope module not2 $end
$var wire 1 3> in1 $end
$var wire 1 4> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 2> in1 $end
$var wire 1 4> in2 $end
$var wire 1 5> out $end
$upscope $end

$scope module not3 $end
$var wire 1 5> in1 $end
$var wire 1 6> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 t= s $end
$var wire 1 8> c_out $end
$var wire 1 #8 a $end
$var wire 1 38 b $end
$var wire 1 q= c_in $end
$var wire 1 9> xor_AB $end
$var wire 1 :> xor_ABCin $end
$var wire 1 ;> NAND_AB $end
$var wire 1 <> not_NAND_AB $end
$var wire 1 => NAND_Cin_xor_AB $end
$var wire 1 >> not_NAND_Cin_xor_AB $end
$var wire 1 ?> NOR_2NAND $end
$var wire 1 @> not_NOR_2NAND $end
$var wire 1 A> Cin $end

$scope module xor1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 9> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 9> in1 $end
$var wire 1 q= in2 $end
$var wire 1 :> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 ;> out $end
$upscope $end

$scope module not1 $end
$var wire 1 ;> in1 $end
$var wire 1 <> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A> in1 $end
$var wire 1 9> in2 $end
$var wire 1 => out $end
$upscope $end

$scope module not2 $end
$var wire 1 => in1 $end
$var wire 1 >> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 <> in1 $end
$var wire 1 >> in2 $end
$var wire 1 ?> out $end
$upscope $end

$scope module not3 $end
$var wire 1 ?> in1 $end
$var wire 1 @> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var wire 1 C< sum [3] $end
$var wire 1 D< sum [2] $end
$var wire 1 E< sum [1] $end
$var wire 1 F< sum [0] $end
$var wire 1 C> c_out $end
$var wire 1 }7 a [3] $end
$var wire 1 ~7 a [2] $end
$var wire 1 !8 a [1] $end
$var wire 1 "8 a [0] $end
$var wire 1 /8 b [3] $end
$var wire 1 08 b [2] $end
$var wire 1 18 b [1] $end
$var wire 1 28 b [0] $end
$var wire 1 @< c_in $end
$var wire 1 D> gen [3] $end
$var wire 1 E> gen [2] $end
$var wire 1 F> gen [1] $end
$var wire 1 G> gen [0] $end
$var wire 1 H> prop [3] $end
$var wire 1 I> prop [2] $end
$var wire 1 J> prop [1] $end
$var wire 1 K> prop [0] $end
$var wire 1 L> carry [2] $end
$var wire 1 M> carry [1] $end
$var wire 1 N> carry [0] $end
$var wire 1 O> fa_sum [3] $end
$var wire 1 P> fa_sum [2] $end
$var wire 1 Q> fa_sum [1] $end
$var wire 1 R> fa_sum [0] $end

$scope module fa1 $end
$var wire 1 R> s $end
$var wire 1 S> c_out $end
$var wire 1 "8 a $end
$var wire 1 28 b $end
$var wire 1 @< c_in $end
$var wire 1 T> xor_AB $end
$var wire 1 U> xor_ABCin $end
$var wire 1 V> NAND_AB $end
$var wire 1 W> not_NAND_AB $end
$var wire 1 X> NAND_Cin_xor_AB $end
$var wire 1 Y> not_NAND_Cin_xor_AB $end
$var wire 1 Z> NOR_2NAND $end
$var wire 1 [> not_NOR_2NAND $end
$var wire 1 \> Cin $end

$scope module xor1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 T> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 T> in1 $end
$var wire 1 @< in2 $end
$var wire 1 U> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 V> out $end
$upscope $end

$scope module not1 $end
$var wire 1 V> in1 $end
$var wire 1 W> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \> in1 $end
$var wire 1 T> in2 $end
$var wire 1 X> out $end
$upscope $end

$scope module not2 $end
$var wire 1 X> in1 $end
$var wire 1 Y> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 W> in1 $end
$var wire 1 Y> in2 $end
$var wire 1 Z> out $end
$upscope $end

$scope module not3 $end
$var wire 1 Z> in1 $end
$var wire 1 [> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 Q> s $end
$var wire 1 ]> c_out $end
$var wire 1 !8 a $end
$var wire 1 18 b $end
$var wire 1 N> c_in $end
$var wire 1 ^> xor_AB $end
$var wire 1 _> xor_ABCin $end
$var wire 1 `> NAND_AB $end
$var wire 1 a> not_NAND_AB $end
$var wire 1 b> NAND_Cin_xor_AB $end
$var wire 1 c> not_NAND_Cin_xor_AB $end
$var wire 1 d> NOR_2NAND $end
$var wire 1 e> not_NOR_2NAND $end
$var wire 1 f> Cin $end

$scope module xor1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 ^> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^> in1 $end
$var wire 1 N> in2 $end
$var wire 1 _> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 `> out $end
$upscope $end

$scope module not1 $end
$var wire 1 `> in1 $end
$var wire 1 a> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 f> in1 $end
$var wire 1 ^> in2 $end
$var wire 1 b> out $end
$upscope $end

$scope module not2 $end
$var wire 1 b> in1 $end
$var wire 1 c> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 a> in1 $end
$var wire 1 c> in2 $end
$var wire 1 d> out $end
$upscope $end

$scope module not3 $end
$var wire 1 d> in1 $end
$var wire 1 e> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 P> s $end
$var wire 1 g> c_out $end
$var wire 1 ~7 a $end
$var wire 1 08 b $end
$var wire 1 M> c_in $end
$var wire 1 h> xor_AB $end
$var wire 1 i> xor_ABCin $end
$var wire 1 j> NAND_AB $end
$var wire 1 k> not_NAND_AB $end
$var wire 1 l> NAND_Cin_xor_AB $end
$var wire 1 m> not_NAND_Cin_xor_AB $end
$var wire 1 n> NOR_2NAND $end
$var wire 1 o> not_NOR_2NAND $end
$var wire 1 p> Cin $end

$scope module xor1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 h> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 h> in1 $end
$var wire 1 M> in2 $end
$var wire 1 i> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 j> out $end
$upscope $end

$scope module not1 $end
$var wire 1 j> in1 $end
$var wire 1 k> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p> in1 $end
$var wire 1 h> in2 $end
$var wire 1 l> out $end
$upscope $end

$scope module not2 $end
$var wire 1 l> in1 $end
$var wire 1 m> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 k> in1 $end
$var wire 1 m> in2 $end
$var wire 1 n> out $end
$upscope $end

$scope module not3 $end
$var wire 1 n> in1 $end
$var wire 1 o> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 O> s $end
$var wire 1 q> c_out $end
$var wire 1 }7 a $end
$var wire 1 /8 b $end
$var wire 1 L> c_in $end
$var wire 1 r> xor_AB $end
$var wire 1 s> xor_ABCin $end
$var wire 1 t> NAND_AB $end
$var wire 1 u> not_NAND_AB $end
$var wire 1 v> NAND_Cin_xor_AB $end
$var wire 1 w> not_NAND_Cin_xor_AB $end
$var wire 1 x> NOR_2NAND $end
$var wire 1 y> not_NOR_2NAND $end
$var wire 1 z> Cin $end

$scope module xor1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 r> in1 $end
$var wire 1 L> in2 $end
$var wire 1 s> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 t> out $end
$upscope $end

$scope module not1 $end
$var wire 1 t> in1 $end
$var wire 1 u> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 z> in1 $end
$var wire 1 r> in2 $end
$var wire 1 v> out $end
$upscope $end

$scope module not2 $end
$var wire 1 v> in1 $end
$var wire 1 w> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 u> in1 $end
$var wire 1 w> in2 $end
$var wire 1 x> out $end
$upscope $end

$scope module not3 $end
$var wire 1 x> in1 $end
$var wire 1 y> out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 83 InA [15] $end
$var wire 1 93 InA [14] $end
$var wire 1 :3 InA [13] $end
$var wire 1 ;3 InA [12] $end
$var wire 1 <3 InA [11] $end
$var wire 1 =3 InA [10] $end
$var wire 1 >3 InA [9] $end
$var wire 1 ?3 InA [8] $end
$var wire 1 @3 InA [7] $end
$var wire 1 A3 InA [6] $end
$var wire 1 B3 InA [5] $end
$var wire 1 C3 InA [4] $end
$var wire 1 D3 InA [3] $end
$var wire 1 E3 InA [2] $end
$var wire 1 F3 InA [1] $end
$var wire 1 G3 InA [0] $end
$var wire 1 {> InB [15] $end
$var wire 1 |> InB [14] $end
$var wire 1 }> InB [13] $end
$var wire 1 ~> InB [12] $end
$var wire 1 !? InB [11] $end
$var wire 1 "? InB [10] $end
$var wire 1 #? InB [9] $end
$var wire 1 $? InB [8] $end
$var wire 1 %? InB [7] $end
$var wire 1 &? InB [6] $end
$var wire 1 '? InB [5] $end
$var wire 1 (? InB [4] $end
$var wire 1 )? InB [3] $end
$var wire 1 *? InB [2] $end
$var wire 1 +? InB [1] $end
$var wire 1 ,? InB [0] $end
$var wire 1 #9 Out $end
$var wire 1 -? difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 p3 Out $end
$var wire 1 .? difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 a4 Out $end
$var wire 1 /? difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 ?) SendNOP_In $end
$var wire 1 <) SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 <) q $end
$var wire 1 ?) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 p% SgnExt [15] $end
$var wire 1 q% SgnExt [14] $end
$var wire 1 r% SgnExt [13] $end
$var wire 1 s% SgnExt [12] $end
$var wire 1 t% SgnExt [11] $end
$var wire 1 u% SgnExt [10] $end
$var wire 1 v% SgnExt [9] $end
$var wire 1 w% SgnExt [8] $end
$var wire 1 x% SgnExt [7] $end
$var wire 1 y% SgnExt [6] $end
$var wire 1 z% SgnExt [5] $end
$var wire 1 {% SgnExt [4] $end
$var wire 1 |% SgnExt [3] $end
$var wire 1 }% SgnExt [2] $end
$var wire 1 ~% SgnExt [1] $end
$var wire 1 !& SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 Q) mem_halt $end
$var wire 1 ?@ MuxImmSrc [15] $end
$var wire 1 @@ MuxImmSrc [14] $end
$var wire 1 A@ MuxImmSrc [13] $end
$var wire 1 B@ MuxImmSrc [12] $end
$var wire 1 C@ MuxImmSrc [11] $end
$var wire 1 D@ MuxImmSrc [10] $end
$var wire 1 E@ MuxImmSrc [9] $end
$var wire 1 F@ MuxImmSrc [8] $end
$var wire 1 G@ MuxImmSrc [7] $end
$var wire 1 H@ MuxImmSrc [6] $end
$var wire 1 I@ MuxImmSrc [5] $end
$var wire 1 J@ MuxImmSrc [4] $end
$var wire 1 K@ MuxImmSrc [3] $end
$var wire 1 L@ MuxImmSrc [2] $end
$var wire 1 M@ MuxImmSrc [1] $end
$var wire 1 N@ MuxImmSrc [0] $end
$var wire 1 O@ adderOut [15] $end
$var wire 1 P@ adderOut [14] $end
$var wire 1 Q@ adderOut [13] $end
$var wire 1 R@ adderOut [12] $end
$var wire 1 S@ adderOut [11] $end
$var wire 1 T@ adderOut [10] $end
$var wire 1 U@ adderOut [9] $end
$var wire 1 V@ adderOut [8] $end
$var wire 1 W@ adderOut [7] $end
$var wire 1 X@ adderOut [6] $end
$var wire 1 Y@ adderOut [5] $end
$var wire 1 Z@ adderOut [4] $end
$var wire 1 [@ adderOut [3] $end
$var wire 1 \@ adderOut [2] $end
$var wire 1 ]@ adderOut [1] $end
$var wire 1 ^@ adderOut [0] $end
$var wire 1 _@ MuxBranchSrc [15] $end
$var wire 1 `@ MuxBranchSrc [14] $end
$var wire 1 a@ MuxBranchSrc [13] $end
$var wire 1 b@ MuxBranchSrc [12] $end
$var wire 1 c@ MuxBranchSrc [11] $end
$var wire 1 d@ MuxBranchSrc [10] $end
$var wire 1 e@ MuxBranchSrc [9] $end
$var wire 1 f@ MuxBranchSrc [8] $end
$var wire 1 g@ MuxBranchSrc [7] $end
$var wire 1 h@ MuxBranchSrc [6] $end
$var wire 1 i@ MuxBranchSrc [5] $end
$var wire 1 j@ MuxBranchSrc [4] $end
$var wire 1 k@ MuxBranchSrc [3] $end
$var wire 1 l@ MuxBranchSrc [2] $end
$var wire 1 m@ MuxBranchSrc [1] $end
$var wire 1 n@ MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 ?@ B [15] $end
$var wire 1 @@ B [14] $end
$var wire 1 A@ B [13] $end
$var wire 1 B@ B [12] $end
$var wire 1 C@ B [11] $end
$var wire 1 D@ B [10] $end
$var wire 1 E@ B [9] $end
$var wire 1 F@ B [8] $end
$var wire 1 G@ B [7] $end
$var wire 1 H@ B [6] $end
$var wire 1 I@ B [5] $end
$var wire 1 J@ B [4] $end
$var wire 1 K@ B [3] $end
$var wire 1 L@ B [2] $end
$var wire 1 M@ B [1] $end
$var wire 1 N@ B [0] $end
$var wire 1 O@ S [15] $end
$var wire 1 P@ S [14] $end
$var wire 1 Q@ S [13] $end
$var wire 1 R@ S [12] $end
$var wire 1 S@ S [11] $end
$var wire 1 T@ S [10] $end
$var wire 1 U@ S [9] $end
$var wire 1 V@ S [8] $end
$var wire 1 W@ S [7] $end
$var wire 1 X@ S [6] $end
$var wire 1 Y@ S [5] $end
$var wire 1 Z@ S [4] $end
$var wire 1 [@ S [3] $end
$var wire 1 \@ S [2] $end
$var wire 1 ]@ S [1] $end
$var wire 1 ^@ S [0] $end
$var wire 1 o@ Cout $end
$var wire 1 p@ Cout0 $end
$var wire 1 q@ Cout1 $end
$var wire 1 r@ Cout2 $end
$var wire 1 s@ Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 K@ B [3] $end
$var wire 1 L@ B [2] $end
$var wire 1 M@ B [1] $end
$var wire 1 N@ B [0] $end
$var wire 1 s@ Cin $end
$var wire 1 [@ S [3] $end
$var wire 1 \@ S [2] $end
$var wire 1 ]@ S [1] $end
$var wire 1 ^@ S [0] $end
$var wire 1 p@ Cout $end
$var wire 1 t@ Cout0 $end
$var wire 1 u@ Cout1 $end
$var wire 1 v@ Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 N@ B $end
$var wire 1 s@ Cin $end
$var wire 1 ^@ S $end
$var wire 1 t@ Cout $end
$var wire 1 w@ xor_AB $end
$var wire 1 x@ xor_ABCin $end
$var wire 1 y@ NAND_AB $end
$var wire 1 z@ not_NAND_AB $end
$var wire 1 {@ NAND_Cin_xor_AB $end
$var wire 1 |@ not_NAND_Cin_xor_AB $end
$var wire 1 }@ NOR_2NAND $end
$var wire 1 ~@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 N@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 N@ in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 y@ in1 $end
$var wire 1 z@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s@ in1 $end
$var wire 1 w@ in2 $end
$var wire 1 {@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 {@ in1 $end
$var wire 1 |@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z@ in1 $end
$var wire 1 |@ in2 $end
$var wire 1 }@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 }@ in1 $end
$var wire 1 ~@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 M@ B $end
$var wire 1 t@ Cin $end
$var wire 1 ]@ S $end
$var wire 1 u@ Cout $end
$var wire 1 !A xor_AB $end
$var wire 1 "A xor_ABCin $end
$var wire 1 #A NAND_AB $end
$var wire 1 $A not_NAND_AB $end
$var wire 1 %A NAND_Cin_xor_AB $end
$var wire 1 &A not_NAND_Cin_xor_AB $end
$var wire 1 'A NOR_2NAND $end
$var wire 1 (A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 !A in1 $end
$var wire 1 t@ in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 #A out $end
$upscope $end

$scope module not1 $end
$var wire 1 #A in1 $end
$var wire 1 $A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t@ in1 $end
$var wire 1 !A in2 $end
$var wire 1 %A out $end
$upscope $end

$scope module not2 $end
$var wire 1 %A in1 $end
$var wire 1 &A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $A in1 $end
$var wire 1 &A in2 $end
$var wire 1 'A out $end
$upscope $end

$scope module not3 $end
$var wire 1 'A in1 $end
$var wire 1 (A out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 L@ B $end
$var wire 1 u@ Cin $end
$var wire 1 \@ S $end
$var wire 1 v@ Cout $end
$var wire 1 )A xor_AB $end
$var wire 1 *A xor_ABCin $end
$var wire 1 +A NAND_AB $end
$var wire 1 ,A not_NAND_AB $end
$var wire 1 -A NAND_Cin_xor_AB $end
$var wire 1 .A not_NAND_Cin_xor_AB $end
$var wire 1 /A NOR_2NAND $end
$var wire 1 0A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 )A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 )A in1 $end
$var wire 1 u@ in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 +A out $end
$upscope $end

$scope module not1 $end
$var wire 1 +A in1 $end
$var wire 1 ,A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 u@ in1 $end
$var wire 1 )A in2 $end
$var wire 1 -A out $end
$upscope $end

$scope module not2 $end
$var wire 1 -A in1 $end
$var wire 1 .A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ,A in1 $end
$var wire 1 .A in2 $end
$var wire 1 /A out $end
$upscope $end

$scope module not3 $end
$var wire 1 /A in1 $end
$var wire 1 0A out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 K@ B $end
$var wire 1 v@ Cin $end
$var wire 1 [@ S $end
$var wire 1 p@ Cout $end
$var wire 1 1A xor_AB $end
$var wire 1 2A xor_ABCin $end
$var wire 1 3A NAND_AB $end
$var wire 1 4A not_NAND_AB $end
$var wire 1 5A NAND_Cin_xor_AB $end
$var wire 1 6A not_NAND_Cin_xor_AB $end
$var wire 1 7A NOR_2NAND $end
$var wire 1 8A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 1A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 1A in1 $end
$var wire 1 v@ in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 3A out $end
$upscope $end

$scope module not1 $end
$var wire 1 3A in1 $end
$var wire 1 4A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v@ in1 $end
$var wire 1 1A in2 $end
$var wire 1 5A out $end
$upscope $end

$scope module not2 $end
$var wire 1 5A in1 $end
$var wire 1 6A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 4A in1 $end
$var wire 1 6A in2 $end
$var wire 1 7A out $end
$upscope $end

$scope module not3 $end
$var wire 1 7A in1 $end
$var wire 1 8A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 G@ B [3] $end
$var wire 1 H@ B [2] $end
$var wire 1 I@ B [1] $end
$var wire 1 J@ B [0] $end
$var wire 1 p@ Cin $end
$var wire 1 W@ S [3] $end
$var wire 1 X@ S [2] $end
$var wire 1 Y@ S [1] $end
$var wire 1 Z@ S [0] $end
$var wire 1 q@ Cout $end
$var wire 1 9A Cout0 $end
$var wire 1 :A Cout1 $end
$var wire 1 ;A Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 J@ B $end
$var wire 1 p@ Cin $end
$var wire 1 Z@ S $end
$var wire 1 9A Cout $end
$var wire 1 <A xor_AB $end
$var wire 1 =A xor_ABCin $end
$var wire 1 >A NAND_AB $end
$var wire 1 ?A not_NAND_AB $end
$var wire 1 @A NAND_Cin_xor_AB $end
$var wire 1 AA not_NAND_Cin_xor_AB $end
$var wire 1 BA NOR_2NAND $end
$var wire 1 CA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <A in1 $end
$var wire 1 p@ in2 $end
$var wire 1 =A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 >A out $end
$upscope $end

$scope module not1 $end
$var wire 1 >A in1 $end
$var wire 1 ?A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p@ in1 $end
$var wire 1 <A in2 $end
$var wire 1 @A out $end
$upscope $end

$scope module not2 $end
$var wire 1 @A in1 $end
$var wire 1 AA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?A in1 $end
$var wire 1 AA in2 $end
$var wire 1 BA out $end
$upscope $end

$scope module not3 $end
$var wire 1 BA in1 $end
$var wire 1 CA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 I@ B $end
$var wire 1 9A Cin $end
$var wire 1 Y@ S $end
$var wire 1 :A Cout $end
$var wire 1 DA xor_AB $end
$var wire 1 EA xor_ABCin $end
$var wire 1 FA NAND_AB $end
$var wire 1 GA not_NAND_AB $end
$var wire 1 HA NAND_Cin_xor_AB $end
$var wire 1 IA not_NAND_Cin_xor_AB $end
$var wire 1 JA NOR_2NAND $end
$var wire 1 KA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 DA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 DA in1 $end
$var wire 1 9A in2 $end
$var wire 1 EA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 FA out $end
$upscope $end

$scope module not1 $end
$var wire 1 FA in1 $end
$var wire 1 GA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9A in1 $end
$var wire 1 DA in2 $end
$var wire 1 HA out $end
$upscope $end

$scope module not2 $end
$var wire 1 HA in1 $end
$var wire 1 IA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 GA in1 $end
$var wire 1 IA in2 $end
$var wire 1 JA out $end
$upscope $end

$scope module not3 $end
$var wire 1 JA in1 $end
$var wire 1 KA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 H@ B $end
$var wire 1 :A Cin $end
$var wire 1 X@ S $end
$var wire 1 ;A Cout $end
$var wire 1 LA xor_AB $end
$var wire 1 MA xor_ABCin $end
$var wire 1 NA NAND_AB $end
$var wire 1 OA not_NAND_AB $end
$var wire 1 PA NAND_Cin_xor_AB $end
$var wire 1 QA not_NAND_Cin_xor_AB $end
$var wire 1 RA NOR_2NAND $end
$var wire 1 SA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 LA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 LA in1 $end
$var wire 1 :A in2 $end
$var wire 1 MA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 NA out $end
$upscope $end

$scope module not1 $end
$var wire 1 NA in1 $end
$var wire 1 OA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :A in1 $end
$var wire 1 LA in2 $end
$var wire 1 PA out $end
$upscope $end

$scope module not2 $end
$var wire 1 PA in1 $end
$var wire 1 QA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 OA in1 $end
$var wire 1 QA in2 $end
$var wire 1 RA out $end
$upscope $end

$scope module not3 $end
$var wire 1 RA in1 $end
$var wire 1 SA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 G@ B $end
$var wire 1 ;A Cin $end
$var wire 1 W@ S $end
$var wire 1 q@ Cout $end
$var wire 1 TA xor_AB $end
$var wire 1 UA xor_ABCin $end
$var wire 1 VA NAND_AB $end
$var wire 1 WA not_NAND_AB $end
$var wire 1 XA NAND_Cin_xor_AB $end
$var wire 1 YA not_NAND_Cin_xor_AB $end
$var wire 1 ZA NOR_2NAND $end
$var wire 1 [A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 TA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 TA in1 $end
$var wire 1 ;A in2 $end
$var wire 1 UA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 VA out $end
$upscope $end

$scope module not1 $end
$var wire 1 VA in1 $end
$var wire 1 WA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;A in1 $end
$var wire 1 TA in2 $end
$var wire 1 XA out $end
$upscope $end

$scope module not2 $end
$var wire 1 XA in1 $end
$var wire 1 YA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 WA in1 $end
$var wire 1 YA in2 $end
$var wire 1 ZA out $end
$upscope $end

$scope module not3 $end
$var wire 1 ZA in1 $end
$var wire 1 [A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 C@ B [3] $end
$var wire 1 D@ B [2] $end
$var wire 1 E@ B [1] $end
$var wire 1 F@ B [0] $end
$var wire 1 q@ Cin $end
$var wire 1 S@ S [3] $end
$var wire 1 T@ S [2] $end
$var wire 1 U@ S [1] $end
$var wire 1 V@ S [0] $end
$var wire 1 r@ Cout $end
$var wire 1 \A Cout0 $end
$var wire 1 ]A Cout1 $end
$var wire 1 ^A Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 F@ B $end
$var wire 1 q@ Cin $end
$var wire 1 V@ S $end
$var wire 1 \A Cout $end
$var wire 1 _A xor_AB $end
$var wire 1 `A xor_ABCin $end
$var wire 1 aA NAND_AB $end
$var wire 1 bA not_NAND_AB $end
$var wire 1 cA NAND_Cin_xor_AB $end
$var wire 1 dA not_NAND_Cin_xor_AB $end
$var wire 1 eA NOR_2NAND $end
$var wire 1 fA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 _A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 _A in1 $end
$var wire 1 q@ in2 $end
$var wire 1 `A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 aA out $end
$upscope $end

$scope module not1 $end
$var wire 1 aA in1 $end
$var wire 1 bA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q@ in1 $end
$var wire 1 _A in2 $end
$var wire 1 cA out $end
$upscope $end

$scope module not2 $end
$var wire 1 cA in1 $end
$var wire 1 dA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 bA in1 $end
$var wire 1 dA in2 $end
$var wire 1 eA out $end
$upscope $end

$scope module not3 $end
$var wire 1 eA in1 $end
$var wire 1 fA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 E@ B $end
$var wire 1 \A Cin $end
$var wire 1 U@ S $end
$var wire 1 ]A Cout $end
$var wire 1 gA xor_AB $end
$var wire 1 hA xor_ABCin $end
$var wire 1 iA NAND_AB $end
$var wire 1 jA not_NAND_AB $end
$var wire 1 kA NAND_Cin_xor_AB $end
$var wire 1 lA not_NAND_Cin_xor_AB $end
$var wire 1 mA NOR_2NAND $end
$var wire 1 nA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 gA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 gA in1 $end
$var wire 1 \A in2 $end
$var wire 1 hA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 iA out $end
$upscope $end

$scope module not1 $end
$var wire 1 iA in1 $end
$var wire 1 jA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \A in1 $end
$var wire 1 gA in2 $end
$var wire 1 kA out $end
$upscope $end

$scope module not2 $end
$var wire 1 kA in1 $end
$var wire 1 lA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 jA in1 $end
$var wire 1 lA in2 $end
$var wire 1 mA out $end
$upscope $end

$scope module not3 $end
$var wire 1 mA in1 $end
$var wire 1 nA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 D@ B $end
$var wire 1 ]A Cin $end
$var wire 1 T@ S $end
$var wire 1 ^A Cout $end
$var wire 1 oA xor_AB $end
$var wire 1 pA xor_ABCin $end
$var wire 1 qA NAND_AB $end
$var wire 1 rA not_NAND_AB $end
$var wire 1 sA NAND_Cin_xor_AB $end
$var wire 1 tA not_NAND_Cin_xor_AB $end
$var wire 1 uA NOR_2NAND $end
$var wire 1 vA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 oA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 oA in1 $end
$var wire 1 ]A in2 $end
$var wire 1 pA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 qA out $end
$upscope $end

$scope module not1 $end
$var wire 1 qA in1 $end
$var wire 1 rA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]A in1 $end
$var wire 1 oA in2 $end
$var wire 1 sA out $end
$upscope $end

$scope module not2 $end
$var wire 1 sA in1 $end
$var wire 1 tA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 rA in1 $end
$var wire 1 tA in2 $end
$var wire 1 uA out $end
$upscope $end

$scope module not3 $end
$var wire 1 uA in1 $end
$var wire 1 vA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 C@ B $end
$var wire 1 ^A Cin $end
$var wire 1 S@ S $end
$var wire 1 r@ Cout $end
$var wire 1 wA xor_AB $end
$var wire 1 xA xor_ABCin $end
$var wire 1 yA NAND_AB $end
$var wire 1 zA not_NAND_AB $end
$var wire 1 {A NAND_Cin_xor_AB $end
$var wire 1 |A not_NAND_Cin_xor_AB $end
$var wire 1 }A NOR_2NAND $end
$var wire 1 ~A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 wA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 wA in1 $end
$var wire 1 ^A in2 $end
$var wire 1 xA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 yA out $end
$upscope $end

$scope module not1 $end
$var wire 1 yA in1 $end
$var wire 1 zA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^A in1 $end
$var wire 1 wA in2 $end
$var wire 1 {A out $end
$upscope $end

$scope module not2 $end
$var wire 1 {A in1 $end
$var wire 1 |A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 zA in1 $end
$var wire 1 |A in2 $end
$var wire 1 }A out $end
$upscope $end

$scope module not3 $end
$var wire 1 }A in1 $end
$var wire 1 ~A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 ?@ B [3] $end
$var wire 1 @@ B [2] $end
$var wire 1 A@ B [1] $end
$var wire 1 B@ B [0] $end
$var wire 1 r@ Cin $end
$var wire 1 O@ S [3] $end
$var wire 1 P@ S [2] $end
$var wire 1 Q@ S [1] $end
$var wire 1 R@ S [0] $end
$var wire 1 o@ Cout $end
$var wire 1 !B Cout0 $end
$var wire 1 "B Cout1 $end
$var wire 1 #B Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 B@ B $end
$var wire 1 r@ Cin $end
$var wire 1 R@ S $end
$var wire 1 !B Cout $end
$var wire 1 $B xor_AB $end
$var wire 1 %B xor_ABCin $end
$var wire 1 &B NAND_AB $end
$var wire 1 'B not_NAND_AB $end
$var wire 1 (B NAND_Cin_xor_AB $end
$var wire 1 )B not_NAND_Cin_xor_AB $end
$var wire 1 *B NOR_2NAND $end
$var wire 1 +B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 $B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $B in1 $end
$var wire 1 r@ in2 $end
$var wire 1 %B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 &B out $end
$upscope $end

$scope module not1 $end
$var wire 1 &B in1 $end
$var wire 1 'B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r@ in1 $end
$var wire 1 $B in2 $end
$var wire 1 (B out $end
$upscope $end

$scope module not2 $end
$var wire 1 (B in1 $end
$var wire 1 )B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 'B in1 $end
$var wire 1 )B in2 $end
$var wire 1 *B out $end
$upscope $end

$scope module not3 $end
$var wire 1 *B in1 $end
$var wire 1 +B out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 A@ B $end
$var wire 1 !B Cin $end
$var wire 1 Q@ S $end
$var wire 1 "B Cout $end
$var wire 1 ,B xor_AB $end
$var wire 1 -B xor_ABCin $end
$var wire 1 .B NAND_AB $end
$var wire 1 /B not_NAND_AB $end
$var wire 1 0B NAND_Cin_xor_AB $end
$var wire 1 1B not_NAND_Cin_xor_AB $end
$var wire 1 2B NOR_2NAND $end
$var wire 1 3B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 ,B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ,B in1 $end
$var wire 1 !B in2 $end
$var wire 1 -B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 .B out $end
$upscope $end

$scope module not1 $end
$var wire 1 .B in1 $end
$var wire 1 /B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !B in1 $end
$var wire 1 ,B in2 $end
$var wire 1 0B out $end
$upscope $end

$scope module not2 $end
$var wire 1 0B in1 $end
$var wire 1 1B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 /B in1 $end
$var wire 1 1B in2 $end
$var wire 1 2B out $end
$upscope $end

$scope module not3 $end
$var wire 1 2B in1 $end
$var wire 1 3B out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 @@ B $end
$var wire 1 "B Cin $end
$var wire 1 P@ S $end
$var wire 1 #B Cout $end
$var wire 1 4B xor_AB $end
$var wire 1 5B xor_ABCin $end
$var wire 1 6B NAND_AB $end
$var wire 1 7B not_NAND_AB $end
$var wire 1 8B NAND_Cin_xor_AB $end
$var wire 1 9B not_NAND_Cin_xor_AB $end
$var wire 1 :B NOR_2NAND $end
$var wire 1 ;B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 4B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 4B in1 $end
$var wire 1 "B in2 $end
$var wire 1 5B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 6B out $end
$upscope $end

$scope module not1 $end
$var wire 1 6B in1 $end
$var wire 1 7B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "B in1 $end
$var wire 1 4B in2 $end
$var wire 1 8B out $end
$upscope $end

$scope module not2 $end
$var wire 1 8B in1 $end
$var wire 1 9B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 7B in1 $end
$var wire 1 9B in2 $end
$var wire 1 :B out $end
$upscope $end

$scope module not3 $end
$var wire 1 :B in1 $end
$var wire 1 ;B out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 ?@ B $end
$var wire 1 #B Cin $end
$var wire 1 O@ S $end
$var wire 1 o@ Cout $end
$var wire 1 <B xor_AB $end
$var wire 1 =B xor_ABCin $end
$var wire 1 >B NAND_AB $end
$var wire 1 ?B not_NAND_AB $end
$var wire 1 @B NAND_Cin_xor_AB $end
$var wire 1 AB not_NAND_Cin_xor_AB $end
$var wire 1 BB NOR_2NAND $end
$var wire 1 CB not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 <B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 <B in1 $end
$var wire 1 #B in2 $end
$var wire 1 =B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 >B out $end
$upscope $end

$scope module not1 $end
$var wire 1 >B in1 $end
$var wire 1 ?B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #B in1 $end
$var wire 1 <B in2 $end
$var wire 1 @B out $end
$upscope $end

$scope module not2 $end
$var wire 1 @B in1 $end
$var wire 1 AB out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?B in1 $end
$var wire 1 AB in2 $end
$var wire 1 BB out $end
$upscope $end

$scope module not3 $end
$var wire 1 BB in1 $end
$var wire 1 CB out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 DB enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 Q) err $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 <) SendNOP_In $end
$var wire 1 =) SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end
$var wire 1 k% b_in $end
$var wire 1 `' b_out $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 =) q $end
$var wire 1 <) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 `' q $end
$var wire 1 k% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1:!
1;!
x=!
1R)
1S)
0V)
0W)
0X)
0Y)
0Z)
0\)
0])
0^)
0j+
0i+
0h+
0g+
0f+
0e+
0d+
0c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
0[+
1W+
b0 X+
0z+
0y+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0n+
0m+
0l+
0k+
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
b100000000000 &,
b100000000000 %,
b100000000000 $,
b100000000000 #,
b100000000000 ",
b100000000000 !,
b100000000000 ~+
b100000000000 }+
b100000000000 |+
b100000000000 {+
0<,
0;,
0:,
09,
08,
07,
06,
05,
04,
03,
02,
01,
00,
0/,
0.,
0-,
0L,
0K,
0J,
0I,
0H,
0G,
0F,
0E,
0D,
0C,
0B,
0A,
0@,
0?,
0>,
0=,
x/-
x0-
bx 1-
x2-
x3-
bx 4-
bx 5-
x6-
x7-
x8-
x9-
x:-
x;-
bx <-
x=-
x>-
bx ?-
bx @-
0./
0,/
0*/
0(/
0&/
0$/
0"/
0~.
0|.
0z.
0x.
0v.
0t.
0r.
0p.
0n.
0O/
0M/
0K/
0I/
0G/
0E/
0C/
0A/
0?/
0=/
0;/
09/
07/
05/
03/
01/
0p/
0n/
0l/
0j/
0h/
0f/
0d/
0b/
0`/
0^/
0\/
0Z/
0X/
0V/
0T/
0R/
030
010
0/0
0-0
0+0
0)0
0'0
0%0
0#0
0!0
0}/
0{/
0y/
0w/
0u/
0s/
0T0
0R0
0P0
0N0
0L0
0J0
0H0
0F0
0D0
0B0
0@0
0>0
0<0
0:0
080
060
0u0
0s0
0q0
0o0
0m0
0k0
0i0
0g0
0e0
0c0
0a0
0_0
0]0
0[0
0Y0
0W0
081
061
041
021
001
0.1
0,1
0*1
0(1
0&1
0$1
0"1
0~0
0|0
0z0
0x0
0Y1
0W1
0U1
0S1
0Q1
0O1
0M1
0K1
0I1
0G1
0E1
0C1
0A1
0?1
0=1
0;1
0v1
0u1
0j1
0k1
0y1
0x1
0w1
0{1
0z1
0l1
0m1
0~1
0}1
0|1
0n1
002
0/2
0.2
0-2
0,2
0+2
0*2
0)2
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
032
022
012
0P2
0O2
0N2
0M2
0L2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
0D2
0C2
0B2
0A2
0`2
0_2
0^2
0]2
0\2
0[2
0Z2
0Y2
0X2
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0p2
0o2
0n2
0m2
0l2
0k2
0j2
0i2
0h2
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0o1
0p1
0q1
0r1
0"3
0!3
0~2
0}2
0|2
0{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0s1
0t1
0$3
0#3
043
033
023
013
003
0/3
0.3
0-3
0,3
0+3
0*3
0)3
0(3
0'3
0&3
0%3
073
063
053
0G?
0F?
0E?
0D?
0C?
0B?
0A?
0@?
0??
0>?
0=?
0<?
0;?
0:?
09?
08?
0W?
0V?
0U?
0T?
0S?
0R?
0Q?
0P?
0O?
0N?
0M?
0L?
0K?
0J?
0I?
0H?
00?
01?
02?
03?
04?
05?
0g?
0f?
0e?
0d?
0c?
0b?
0a?
0`?
0_?
0^?
0]?
0\?
0[?
0Z?
0Y?
0X?
0w?
0v?
0u?
0t?
0s?
0r?
0q?
0p?
0o?
0n?
0m?
0l?
0k?
0j?
0i?
0h?
0)@
0(@
0'@
0&@
0%@
0$@
0#@
0"@
0!@
0~?
0}?
0|?
0{?
0z?
0y?
0x?
09@
08@
07@
06@
05@
04@
03@
02@
01@
00@
0/@
0.@
0-@
0,@
0+@
0*@
06?
07?
0;@
0:@
0>@
0=@
0<@
1EB
b0 FB
0MB
0LB
0]B
0\B
0[B
0ZB
0YB
0XB
0WB
0VB
0UB
0TB
0SB
0RB
0QB
0PB
0OB
0NB
0mB
0lB
0kB
0jB
0iB
0hB
0gB
0fB
0eB
0dB
0cB
0bB
0aB
0`B
0_B
0^B
0}B
0|B
0{B
0zB
0yB
0xB
0wB
0vB
0uB
0tB
0sB
0rB
0qB
0pB
0oB
0nB
0/C
0.C
0-C
0,C
0+C
0*C
0)C
0(C
0'C
0&C
0%C
0$C
0#C
0"C
0!C
0~B
0IB
0JB
02C
01C
00C
0KB
b10000 A-
b10000 l.
b10000 //
b10000 P/
b10000 q/
b10000 40
b10000 U0
b10000 v0
b10000 91
b10000 $5
b100 %5
b10 &5
b10000 m5
b100 n5
b10000 A6
b100 B6
b10000 s6
b100 t6
b10000 G7
b100 H7
b10000 y7
b11 z7
b10000 $9
b100 %9
b10 &9
b10000 g9
b100 h9
b10000 ;:
b100 <:
b10000 m:
b100 n:
b10000 A;
b100 B;
b10000 s;
b10 t;
b10000 u;
b100 S<
b100 .=
b100 g=
b100 B>
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 <!
b1 U)
bx Y+
b10000000000000000 Z+
bx GB
b10000000000000000 HB
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x)!
x*!
x+!
x,!
x-!
17!
x8!
19!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
xN!
z^!
z]!
z\!
z[!
zZ!
zY!
zX!
zW!
zV!
zU!
zT!
zS!
zR!
zQ!
zP!
zO!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
xQ"
xR"
xT"
xS"
xV"
xU"
xW"
xX"
xY"
xZ"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xa$
x`$
x_$
xd$
xc$
xb$
xe$
xf$
xh$
xg$
xj$
xi$
xk$
xl$
xm$
xn$
xq$
xp$
xo$
xt$
xs$
xr$
xu$
xv$
xw$
xx$
xz$
xy$
x|$
x{$
x}$
x~$
x!%
x"%
x%%
x$%
x#%
x(%
x'%
x&%
x)%
x*%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xk%
xl%
xm%
xn%
xo%
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xR&
xT&
xS&
xW&
xV&
xU&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x;'
x:'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
xL'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
x_'
x^'
x]'
x`'
1a'
xb'
xc'
xd'
zt'
zs'
zr'
zq'
zp'
zo'
zn'
zm'
zl'
zk'
zj'
zi'
zh'
zg'
zf'
ze'
xu'
xv'
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
zH(
zG(
zF(
zE(
zD(
zC(
zB(
zA(
z@(
z?(
z>(
z=(
z<(
z;(
z:(
z9(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xh(
xg(
xf(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xi(
xj(
xk(
xl(
xm(
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
xu(
xt(
xs(
xr(
xq(
xp(
xo(
xn(
x~(
x!)
x")
x#)
x$)
x%)
z&)
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
x))
x()
x')
x7)
x8)
xp)
xq)
xr)
0s)
0t)
xu)
xv)
xw)
xx)
1y)
0z)
1{)
0|)
1})
0~)
x!*
x"*
x#*
x$*
1%*
0&*
x'*
x(*
x)*
x**
1+*
0,*
x-*
x.*
x/*
x0*
x1*
x2*
13*
04*
x5*
x6*
x7*
x8*
x9*
x:*
x;*
x<*
x=*
1>*
0?*
x@*
xA*
xB*
xC*
xD*
xE*
1F*
0G*
xH*
xI*
xJ*
xK*
xL*
xM*
1N*
0O*
xP*
xQ*
xR*
xS*
xT*
xU*
1V*
0W*
xX*
xY*
xZ*
x[*
x\*
x]*
x^*
x_*
x`*
1a*
0b*
xc*
xd*
xe*
xf*
xg*
xh*
1i*
0j*
xk*
xl*
xm*
xn*
xo*
xp*
1q*
0r*
xs*
xt*
xu*
xv*
xw*
xx*
1y*
0z*
x{*
x|*
x}*
x~*
x!+
x"+
x#+
x$+
x%+
1&+
0'+
x(+
x)+
x*+
x++
x,+
x-+
1.+
0/+
x0+
x1+
x2+
x3+
x4+
x5+
16+
07+
x8+
x9+
x:+
x;+
x<+
x=+
1>+
0?+
x@+
xA+
xB+
xC+
x9)
x:)
x;)
x<)
x=)
x>)
x?)
x@)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xC)
xB)
xA)
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
xM,
xl,
xk,
xj,
xi,
xh,
0g,
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
x.-
x--
x,-
x+-
x*-
x)-
x(-
x'-
0&-
0%-
0$-
0#-
0"-
0!-
0~,
0},
xB-
xC-
xD-
xE-
xF-
xG-
xH-
xI-
xJ-
xK-
xL-
xM-
xN-
xO-
xP-
xQ-
xR-
xS-
xT-
xU-
xV-
xW-
xX-
xY-
xZ-
x[-
x\-
x]-
x^-
x_-
x`-
xa-
xb-
xc-
xd-
xe-
xf-
xg-
xh-
xi-
xj-
xk-
xl-
xm-
xn-
xo-
xp-
xq-
xr-
xs-
xt-
xu-
xv-
xw-
xx-
xy-
xz-
x{-
x|-
x}-
x~-
x!.
x".
x#.
x$.
x%.
x&.
x'.
x(.
x).
x*.
x+.
x,.
x-.
x..
x/.
x0.
x1.
x2.
x3.
x4.
x5.
x6.
x7.
x8.
x9.
x:.
x;.
x<.
x=.
x>.
x?.
x@.
xA.
xB.
xC.
xD.
xE.
xF.
xG.
xH.
xI.
xJ.
xK.
xL.
xM.
xN.
xO.
xP.
xQ.
xR.
xS.
xT.
xU.
xV.
xW.
xX.
xY.
xZ.
x[.
x\.
x].
x^.
x_.
x`.
xa.
xb.
xc.
xd.
xe.
xf.
xg.
xh.
xi.
xj.
xk.
xZ1
z[1
x\1
x]1
x^1
z_1
xb1
xa1
x`1
xe1
xd1
xc1
xf1
xg1
xh1
xG3
xF3
xE3
xD3
xC3
xB3
xA3
x@3
x?3
x>3
x=3
x<3
x;3
x:3
x93
x83
0W3
0V3
0U3
0T3
0S3
0R3
0Q3
0P3
xO3
xN3
xM3
xL3
xK3
xJ3
xI3
xH3
xX3
0<5
0;5
0:5
095
085
075
065
055
x45
x35
x25
x15
x05
x/5
x.5
x-5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xB5
xA5
x@5
x?5
x>5
x=5
x\5
x[5
xZ5
xY5
xX5
xW5
xV5
xU5
0T5
0S5
0R5
0Q5
0P5
0O5
0N5
0M5
xl5
xk5
xj5
xi5
xh5
xg5
xf5
xe5
xd5
xc5
xb5
xa5
x`5
x_5
x^5
x]5
x~5
x}5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
xr5
xq5
xp5
xo5
x06
x/6
x.6
x-6
x,6
x+6
x*6
x)6
x(6
x'6
x&6
x%6
x$6
x#6
x"6
x!6
x@6
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
x56
x46
x36
x26
x16
xR6
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xE6
xD6
xC6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xT6
xS6
xr6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
xe6
xd6
xc6
x&7
x%7
x$7
x#7
x"7
x!7
x~6
x}6
x|6
x{6
xz6
xy6
xx6
xw6
xv6
xu6
x67
x57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
x*7
x)7
x(7
x'7
xF7
xE7
xD7
xC7
xB7
xA7
x@7
x?7
x>7
x=7
x<7
x;7
x:7
x97
x87
x77
xX7
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xJ7
xI7
xh7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xx7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
xi7
xh3
xg3
xf3
xe3
xd3
xc3
xb3
xa3
x`3
x_3
x^3
x]3
x\3
x[3
xZ3
xY3
xi3
xj3
xk3
xl3
x.8
x-8
x,8
x+8
x*8
x)8
x(8
x'8
x&8
x%8
x$8
x#8
x"8
x!8
x~7
x}7
x>8
x=8
x<8
x;8
x:8
x98
x88
x78
x68
x58
x48
x38
x28
x18
x08
x/8
xN8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xA8
x@8
x?8
x^8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xQ8
xP8
xO8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
xa8
x`8
x_8
x~8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
xt8
xs8
xr8
xq8
xp8
xo8
x69
x59
x49
x39
x29
x19
x09
x/9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
xF9
xE9
xD9
xC9
xB9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
x89
x79
xV9
xU9
xT9
xS9
xR9
xQ9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
xI9
xH9
xG9
xf9
xe9
xd9
xc9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
xY9
xX9
xW9
xx9
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
xj9
xi9
x*:
x):
x(:
x':
x&:
x%:
x$:
x#:
x":
x!:
x~9
x}9
x|9
x{9
xz9
xy9
x::
x9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
x/:
x.:
x-:
x,:
x+:
xL:
xK:
xJ:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
x?:
x>:
x=:
x\:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xN:
xM:
xl:
xk:
xj:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x^:
x]:
x~:
x}:
x|:
x{:
xz:
xy:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
xo:
x0;
x/;
x.;
x-;
x,;
x+;
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x@;
x?;
x>;
x=;
x<;
x;;
x:;
x9;
x8;
x7;
x6;
x5;
x4;
x3;
x2;
x1;
xR;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
xC;
xb;
xa;
x`;
x_;
x^;
x];
x\;
x[;
xZ;
xY;
xX;
xW;
xV;
xU;
xT;
xS;
xr;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
xe;
xd;
xc;
x!9
x"9
x'<
x&<
x%<
x$<
x#<
x"<
x!<
x~;
x};
x|;
x{;
xz;
xy;
xx;
xw;
xv;
x+<
x*<
x)<
x(<
x;<
x:<
x9<
x8<
x7<
x6<
x5<
x4<
x3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x?<
x><
x=<
x<<
xB<
xA<
x@<
xR<
xQ<
xP<
xO<
xN<
xM<
xL<
xK<
xJ<
xI<
xH<
xG<
xF<
xE<
xD<
xC<
xX<
xW<
xV<
xU<
x\<
x[<
xZ<
xY<
x_<
x^<
x]<
xc<
xb<
xa<
x`<
xe<
xf<
xg<
xh<
xi<
xj<
xk<
xl<
zm<
xo<
xp<
xq<
xr<
xs<
xt<
xu<
xv<
zw<
xy<
xz<
x{<
x|<
x}<
x~<
x!=
x"=
z#=
x%=
x&=
x'=
x(=
x)=
x*=
x+=
x,=
z-=
x3=
x2=
x1=
x0=
x7=
x6=
x5=
x4=
x:=
x9=
x8=
x>=
x==
x<=
x;=
x@=
xA=
xB=
xC=
xD=
xE=
xF=
xG=
zH=
xJ=
xK=
xL=
xM=
xN=
xO=
xP=
xQ=
zR=
xT=
xU=
xV=
xW=
xX=
xY=
xZ=
x[=
z\=
x^=
x_=
x`=
xa=
xb=
xc=
xd=
xe=
zf=
xl=
xk=
xj=
xi=
xp=
xo=
xn=
xm=
xs=
xr=
xq=
xw=
xv=
xu=
xt=
xy=
xz=
x{=
x|=
x}=
x~=
x!>
x">
z#>
x%>
x&>
x'>
x(>
x)>
x*>
x+>
x,>
z->
x/>
x0>
x1>
x2>
x3>
x4>
x5>
x6>
z7>
x9>
x:>
x;>
x<>
x=>
x>>
x?>
x@>
zA>
xG>
xF>
xE>
xD>
xK>
xJ>
xI>
xH>
xN>
xM>
xL>
xR>
xQ>
xP>
xO>
xT>
xU>
xV>
xW>
xX>
xY>
xZ>
x[>
z\>
x^>
x_>
x`>
xa>
xb>
xc>
xd>
xe>
zf>
xh>
xi>
xj>
xk>
xl>
xm>
xn>
xo>
zp>
xr>
xs>
xt>
xu>
xv>
xw>
xx>
xy>
zz>
x#9
x-?
xm3
xo3
xn3
xp3
x"4
0!4
0~3
0}3
0|3
0{3
0z3
0y3
0x3
0w3
0v3
0u3
0t3
0s3
0r3
0q3
x$4
x#4
x44
034
024
014
004
0/4
0.4
0-4
0,4
0+4
0*4
0)4
0(4
0'4
0&4
0%4
x64
x54
x74
xG4
0F4
0E4
0D4
0C4
0B4
0A4
0@4
0?4
0>4
0=4
0<4
0;4
0:4
094
084
xH4
xJ4
xI4
xZ4
0Y4
0X4
0W4
0V4
0U4
0T4
0S4
0R4
0Q4
0P4
0O4
0N4
0M4
0L4
0K4
x\4
x[4
x]4
x^4
x_4
x`4
x.?
xa4
x/?
xq4
xp4
xo4
xn4
xm4
xl4
xk4
xj4
xi4
xh4
xg4
xf4
xe4
xd4
xc4
xb4
x#5
x"5
x!5
x~4
x}4
x|4
x{4
xz4
xy4
xx4
xw4
xv4
xu4
xt4
xs4
xr4
xQ)
xN@
xM@
xL@
xK@
xJ@
xI@
xH@
xG@
xF@
xE@
xD@
xC@
xB@
xA@
x@@
x?@
x^@
x]@
x\@
x[@
xZ@
xY@
xX@
xW@
xV@
xU@
xT@
xS@
xR@
xQ@
xP@
xO@
xp@
xq@
xr@
0s@
xt@
xu@
xv@
xw@
xx@
xy@
xz@
1{@
0|@
x}@
x~@
x!A
x"A
x#A
x$A
x%A
x&A
x'A
x(A
x)A
x*A
x+A
x,A
x-A
x.A
x/A
x0A
x1A
x2A
x3A
x4A
x5A
x6A
x7A
x8A
x9A
x:A
x;A
x<A
x=A
x>A
x?A
x@A
xAA
xBA
xCA
xDA
xEA
xFA
xGA
xHA
xIA
xJA
xKA
xLA
xMA
xNA
xOA
xPA
xQA
xRA
xSA
xTA
xUA
xVA
xWA
xXA
xYA
xZA
x[A
x\A
x]A
x^A
x_A
x`A
xaA
xbA
xcA
xdA
xeA
xfA
xgA
xhA
xiA
xjA
xkA
xlA
xmA
xnA
xoA
xpA
xqA
xrA
xsA
xtA
xuA
xvA
xwA
xxA
xyA
xzA
x{A
x|A
x}A
x~A
x!B
x"B
x#B
x$B
x%B
x&B
x'B
x(B
x)B
x*B
x+B
x,B
x-B
x.B
x/B
x0B
x1B
x2B
x3B
x4B
x5B
x6B
x7B
x8B
x9B
x:B
x;B
x<B
x=B
x>B
x?B
x@B
xAB
xBB
xCB
xn@
xm@
xl@
xk@
xj@
xi@
xh@
xg@
xf@
xe@
xd@
xc@
xb@
xa@
x`@
x_@
x6!
x5!
xi1
x[)
xT)
0V+
0U+
1T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0G+
0F+
0E+
0D+
0n)
1m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
xo)
x-/
x+/
x)/
x'/
x%/
x#/
x!/
x}.
x{.
xy.
xw.
xu.
xs.
xq.
xo.
xm.
xN/
xL/
xJ/
xH/
xF/
xD/
xB/
x@/
x>/
x</
x:/
x8/
x6/
x4/
x2/
x0/
xo/
xm/
xk/
xi/
xg/
xe/
xc/
xa/
x_/
x]/
x[/
xY/
xW/
xU/
xS/
xQ/
x20
x00
x.0
x,0
x*0
x(0
x&0
x$0
x"0
x~/
x|/
xz/
xx/
xv/
xt/
xr/
xS0
xQ0
xO0
xM0
xK0
xI0
xG0
xE0
xC0
xA0
x?0
x=0
x;0
x90
x70
x50
xt0
xr0
xp0
xn0
xl0
xj0
xh0
xf0
xd0
xb0
x`0
x^0
x\0
xZ0
xX0
xV0
x71
x51
x31
x11
x/1
x-1
x+1
x)1
x'1
x%1
x#1
x!1
x}0
x{0
xy0
xw0
xX1
xV1
xT1
xR1
xP1
xN1
xL1
xJ1
xH1
xF1
xD1
xB1
x@1
x>1
x<1
x:1
x|7
x{7
1,5
0+5
0*5
0)5
0(5
1'5
0,?
0+?
0*?
0)?
0(?
0'?
0&?
0%?
0$?
0#?
0"?
0!?
0~>
0}>
0|>
0{>
xT<
xd<
xn<
xx<
x$=
x/=
x?=
xI=
xS=
x]=
xh=
xx=
x$>
x.>
x8>
xC>
xS>
x]>
xg>
xq>
1DB
xo@
$end
#1
0`'
0]'
0^'
0_'
0=)
0L'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0*'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0['
0\'
0h&
0i&
0j&
0k&
0l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0:'
0;'
0U&
0V&
0W&
0S&
0T&
0<)
0R&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
0P&
0Q&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
0@&
0A&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
00&
01&
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0~%
0!&
0o%
0n%
0m%
0l%
0k%
0*%
0[%
0\%
0]%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
0i%
0j%
0;%
0<%
0=%
0>%
0?%
0@%
0A%
0B%
0C%
0D%
0E%
0F%
0G%
0H%
0I%
0J%
0&%
0'%
0(%
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0{$
0|$
0;)
0"%
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0~$
0x$
0v$
0f$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
0R"
0r$
0s$
0t$
0n$
0l$
0i$
0j$
0b$
0c$
0d$
0Z"
0X"
0U"
0V"
0Q-
0P-
0O-
0N-
0M-
0L-
0K-
0J-
0I-
0H-
0G-
0F-
0E-
0D-
0C-
0B-
0a-
0`-
0_-
0^-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
0q-
0p-
0o-
0n-
0m-
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0b-
0#.
0".
0!.
0~-
0}-
0|-
0{-
0z-
0y-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
03.
02.
01.
00.
0/.
0..
0-.
0,.
0+.
0*.
0).
0(.
0'.
0&.
0%.
0$.
0C.
0B.
0A.
0@.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
04.
0S.
0R.
0Q.
0P.
0O.
0N.
0M.
0L.
0K.
0J.
0I.
0H.
0G.
0F.
0E.
0D.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
0Y(
0Z(
0[(
0\(
0](
0^(
0_(
0`(
0a(
0b(
0c(
0d(
0e(
0f(
0g(
0h(
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0I(
0J(
0K(
0L(
0M(
0N(
0O(
0P(
0Q(
0R(
0S(
0T(
0U(
0V(
0W(
0X(
0$)
0#)
0")
0!)
0l(
0v'
0u'
0d'
0[)
0w)
07)
1!*
1#*
0)*
01*
0<*
0D*
0L*
0T*
0_*
0g*
0o*
0w*
0$+
0,+
04+
0<+
0o!
0p!
0q!
0r!
1s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
08)
0|7
0{7
0X3
0c'
0)%
0?)
0Q)
0j(
0k(
1y@
1#A
1+A
13A
1>A
1FA
1NA
1VA
1aA
1iA
1qA
1yA
1&B
1.B
16B
1>B
0?B
07B
0/B
0'B
0zA
0rA
0jA
0bA
0WA
0OA
0GA
0?A
04A
0,A
0$A
0z@
0Z1
1@+
18+
10+
1(+
1{*
1s*
1k*
1c*
1X*
1P*
1H*
1@*
15*
1-*
0$*
1"*
0x)
00"
1/"
1'*
0.*
06*
0A*
0I*
0Q*
0Y*
0d*
0l*
0t*
0|*
0)+
01+
09+
0A+
1}@
0~@
1B+
1:+
12+
1*+
1}*
1u*
1m*
1e*
1Z*
1R*
1J*
1B*
17*
1/*
0(*
0u)
00*
08*
0C*
0K*
0S*
0[*
0f*
0n*
0v*
0~*
0++
03+
0;+
0C+
0t@
1%A
0o)
0#+
0"+
0!+
0r)
0^*
0]*
0\*
0q)
0;*
0:*
09*
0p)
0v)
0**
0."
02*
0=*
0E*
0M*
0U*
0`*
0h*
0p*
0x*
0%+
0-+
05+
0=+
0&A
1'A
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0(A
0u@
1-A
0.A
1/A
00A
0v@
15A
06A
17A
08A
0p@
1@A
0AA
1BA
0CA
09A
1HA
0IA
1JA
0KA
0:A
1PA
0QA
1RA
0SA
0;A
1XA
0YA
1ZA
0[A
0q@
1cA
0dA
1eA
0fA
0\A
1kA
0lA
1mA
0nA
0]A
1sA
0tA
1uA
0vA
0^A
1{A
0|A
1}A
0~A
0r@
1(B
0)B
1*B
0+B
0!B
10B
01B
12B
03B
0"B
18B
09B
1:B
0;B
0#B
1@B
0AB
1BB
0CB
0o@
0b'
0d.
0e.
0f.
0g.
0h.
0i.
0j.
0k.
0A
0V
0-!
0U
0m(
0%)
0]1
0\1
0^1
0((
1'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0e1
0d1
0c1
0b1
0a1
0`1
1n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
1b!
1a!
0`!
0_!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
06)
04)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0()
0')
0^8
0]8
0\8
0[8
0Z8
0Y8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0Q8
0P8
0O8
0\4
0[4
0~5
0}5
0|5
0{5
0z5
0y5
0x5
0w5
0v5
0u5
0t5
0s5
0r5
0q5
0p5
0o5
0R6
0Q6
0P6
0O6
0N6
0M6
0L6
0K6
0J6
0I6
0H6
0G6
0F6
0E6
0D6
0C6
0&7
0%7
0$7
0#7
0"7
0!7
0~6
0}6
0|6
0{6
0z6
0y6
0x6
0w6
0v6
0u6
0X7
0W7
0V7
0U7
0T7
0S7
0R7
0Q7
0P7
0O7
0N7
0M7
0L7
0K7
0J7
0I7
0G3
0F3
0E3
0D3
0C3
0B3
0A3
0@3
0?3
0>3
0=3
0<3
0;3
0:3
093
083
0#5
0"5
0!5
0~4
0}4
0|4
0{4
0z4
0y4
0x4
0w4
0v4
0u4
0t4
0s4
0r4
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
1g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
1[&
1Z&
0Y&
0X&
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0n@
0m@
0l@
0k@
0j@
0i@
0h@
0g@
0f@
0e@
0d@
0c@
0b@
0a@
0`@
0_@
0N@
0M@
0L@
0K@
0J@
0I@
0H@
0G@
0F@
0E@
0D@
0C@
0B@
0A@
0@@
0?@
06!
05!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0D
0C
0B
0<B
04B
0,B
0$B
0wA
0oA
0gA
0_A
0TA
0LA
0DA
0<A
01A
0)A
0!A
0w@
0x@
0"A
0*A
02A
0=A
0EA
0MA
0UA
0`A
0hA
0pA
0xA
0%B
0-B
05B
0=B
0O@
0P@
0Q@
0R@
0S@
0T@
0U@
0V@
0W@
0X@
0Y@
0Z@
0[@
0\@
0]@
0^@
0i(
1h1
1g1
1f1
0`4
1_4
0^4
0]4
0#9
0-?
1k3
0a4
0/?
174
0p3
0.?
1)!
1+!
1*!
1,!
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
1(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
1z
1y
0x
0w
0>8
0=8
0<8
0;8
0:8
098
088
078
068
058
048
038
028
018
008
0/8
0.8
0-8
0,8
0+8
0*8
0)8
0(8
0'8
0&8
0%8
0$8
0#8
0"8
0!8
0~7
0}7
0h7
0g7
0f7
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0]7
0\7
0[7
0Z7
0Y7
067
057
047
037
027
017
007
0/7
0.7
0-7
0,7
0+7
0*7
0)7
0(7
0'7
0b6
0a6
0`6
0_6
0^6
0]6
0\6
0[6
0Z6
0Y6
0X6
0W6
0V6
0U6
0T6
0S6
006
0/6
0.6
0-6
0,6
0+6
0*6
0)6
0(6
0'6
0&6
0%6
0$6
0#6
0"6
0!6
1@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
14
13
02
01
1}(
0|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
0s(
0r(
1q(
1p(
0o(
0n(
15)
08(
17(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0-/
0+/
0)/
0'/
0%/
0#/
0!/
0}.
0{.
0y.
0w.
0u.
0s.
0q.
0o.
0m.
0N/
0L/
0J/
0H/
0F/
0D/
0B/
0@/
0>/
0</
0:/
08/
06/
04/
02/
00/
0o/
0m/
0k/
0i/
0g/
0e/
0c/
0a/
0_/
0]/
0[/
0Y/
0W/
0U/
0S/
0Q/
020
000
0.0
0,0
0*0
0(0
0&0
0$0
0"0
0~/
0|/
0z/
0x/
0v/
0t/
0r/
0S0
0Q0
0O0
0M0
0K0
0I0
0G0
0E0
0C0
0A0
0?0
0=0
0;0
090
070
050
0t0
0r0
0p0
0n0
0l0
0j0
0h0
0f0
0d0
0b0
0`0
0^0
0\0
0Z0
0X0
0V0
071
051
031
011
0/1
0-1
0+1
0)1
0'1
0%1
0#1
0!1
0}0
0{0
0y0
0w0
0X1
0V1
0T1
0R1
0P1
0N1
0L1
0J1
0H1
0F1
0D1
0B1
0@1
0>1
0<1
0:1
0r>
0,<
0h>
0-<
0^>
0.<
0T>
0/<
09>
00<
0/>
01<
0%>
02<
0y=
03<
0^=
04<
0T=
05<
0J=
06<
0@=
07<
0%=
08<
0y<
09<
0o<
0:<
0e<
0;<
1t>
0v;
1j>
0w;
1`>
0x;
1V>
0y;
1;>
0z;
11>
0{;
1'>
0|;
1{=
0};
1`=
0~;
1V=
0!<
1L=
0"<
1B=
0#<
1'=
0$<
1{<
0%<
1q<
0&<
1g<
0'<
1H4
1i3
0e$
0!%
0k$
0@)
0h<
0r<
0|<
0+<
0(=
0C=
0M=
0W=
0*<
0a=
0|=
0(>
02>
0)<
0<>
0W>
0a>
0k>
0(<
0u>
0f<
1i<
1s<
1}<
0?<
1)=
1D=
1N=
1X=
0><
1b=
1}=
1)>
13>
0=<
1=>
1X>
1b>
1l>
0<<
1v>
0w>
0!9
0m>
0c>
0Y>
0>>
0@<
04>
0*>
0~=
0c=
0A<
0Y=
0O=
0E=
0*=
0~<
0t<
0j<
0c<
0B<
0A=
1k<
1u<
1!=
1+=
1F=
1P=
1Z=
0z=
1d=
1!>
1+>
15>
0U>
1?>
1Z>
1d>
1n>
0l3
0j3
1x>
0y>
0o>
0e>
0[>
0@>
0R>
06>
0,>
0">
0e=
0w=
0[=
0Q=
0G=
0,=
0"=
0v<
0l<
0>=
0d<
0n<
0x<
0$=
0?=
0I=
0S=
0]=
0x=
0$>
0.>
08>
0S>
0]>
0g>
0q>
1m3
0~(
0N<
0J<
0F<
0R<
0@6
0?6
0>6
0=6
0<6
0;6
0:6
096
086
076
066
056
046
036
026
016
0r6
0q6
0p6
0o6
0n6
0m6
0l6
0k6
0j6
0i6
0h6
0g6
0f6
0e6
0d6
0c6
0F7
0E7
0D7
0C7
0B7
0A7
0@7
0?7
0>7
0=7
0<7
0;7
0:7
097
087
077
0x7
0w7
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0n7
0m7
0l7
0k7
0j7
0i7
0G>
0F>
0E>
0D>
0K>
0J>
0I>
0H>
0l=
0k=
0j=
0i=
0p=
0o=
0n=
0m=
03=
02=
01=
00=
07=
06=
05=
04=
0x9
0w9
0v9
0u9
0t9
0s9
0r9
0q9
0p9
0o9
0n9
0m9
0l9
0k9
0j9
0i9
0L:
0K:
0J:
0I:
0H:
0G:
0F:
0E:
0D:
0C:
0B:
0A:
0@:
0?:
0>:
0=:
0~:
0}:
0|:
0{:
0z:
0y:
0x:
0w:
0v:
0u:
0t:
0s:
0r:
0q:
0p:
0o:
0R;
0Q;
0P;
0O;
0N;
0M;
0L;
0K;
0J;
0I;
0H;
0G;
0F;
0E;
0D;
0C;
0X<
0W<
0V<
0U<
0\<
0[<
0Z<
0Y<
0o3
0n3
0$4
0#4
164
154
1J4
0I4
0T<
0]<
0^<
0_<
0/=
08=
09=
0:=
0h=
0q=
0r=
0s=
0C>
0L>
0M>
0N>
0_>
0i>
0s>
0&>
00>
0:>
0K=
0U=
0_=
0p<
0z<
0&=
0`<
0a<
0b<
0;=
0<=
0==
0t=
0u=
0v=
0O>
0P>
0Q>
0E<
0D<
0C<
0I<
0H<
0G<
0M<
0L<
0K<
0Q<
0P<
0O<
1G4
0"4
0b;
0a;
0`;
0_;
0^;
0];
0\;
0[;
0Z;
0Y;
0X;
0W;
0V;
0U;
0T;
0S;
00;
0/;
0.;
0-;
0,;
0+;
0*;
0);
0(;
0';
0&;
0%;
0$;
0#;
0";
0!;
0\:
0[:
0Z:
0Y:
0X:
0W:
0V:
0U:
0T:
0S:
0R:
0Q:
0P:
0O:
0N:
0M:
0*:
0):
0(:
0':
0&:
0%:
0$:
0#:
0":
0!:
0~9
0}9
0|9
0{9
0z9
0y9
0l5
0k5
0j5
0i5
0h5
0g5
0f5
0e5
0d5
0c5
0b5
0a5
0`5
0_5
0^5
0]5
0\5
0[5
0Z5
0Y5
0X5
0W5
0V5
0U5
0L5
0K5
0J5
0I5
0H5
0G5
0F5
0E5
0D5
0C5
0B5
0A5
0@5
0?5
0>5
0=5
045
035
025
015
005
0/5
0.5
0-5
0n8
0j8
0f8
0b8
0~8
0z8
0v8
0r8
0O3
0N3
0M3
0L3
0K3
0J3
0I3
0H3
0::
09:
08:
07:
06:
05:
04:
03:
02:
01:
00:
0/:
0.:
0-:
0,:
0+:
0l:
0k:
0j:
0i:
0h:
0g:
0f:
0e:
0d:
0c:
0b:
0a:
0`:
0_:
0^:
0]:
0@;
0?;
0>;
0=;
0<;
0;;
0:;
09;
08;
07;
06;
05;
04;
03;
02;
01;
0r;
0q;
0p;
0o;
0n;
0m;
0l;
0k;
0j;
0i;
0h;
0g;
0f;
0e;
0d;
0c;
044
1Z4
0m8
0l8
0k8
0i8
0h8
0g8
0e8
0d8
0c8
0a8
0`8
0_8
0"9
0}8
0|8
0{8
0y8
0x8
0w8
0u8
0t8
0s8
0q8
0p8
0o8
0f9
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0X9
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
0K9
0J9
0I9
0H9
0G9
0F9
0E9
0D9
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
059
049
039
029
019
009
0/9
0.9
0-9
0,9
0+9
0*9
0)9
0(9
0'9
0N8
0M8
0L8
0K8
0J8
0I8
0H8
0G8
0F8
0E8
0D8
0C8
0B8
0A8
0@8
0?8
0h3
0g3
0f3
0e3
0d3
0c3
0b3
0a3
0`3
0_3
0^3
0]3
0\3
0[3
0Z3
0Y3
0q4
0p4
0o4
0n4
0m4
0l4
0k4
0j4
0i4
0h4
0g4
0f4
0e4
0d4
0c4
0b4
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
1E)
0D)
0C)
0B)
0A)
0a'
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0l,
0k,
0j,
0i,
0h,
0\,
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0S,
0R,
0Q,
0P,
0O,
0N,
0M,
0.-
0--
0,-
0+-
0*-
0)-
0(-
0'-
0|,
0{,
0z,
0y,
0x,
0w,
0v,
0u,
0t,
0s,
0r,
0q,
0p,
0o,
0n,
0m,
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0/-
00-
b0 1-
0>-
b0 ?-
0=-
b0 4-
b0 5-
06-
07-
08-
09-
0:-
0;-
b0 <-
03-
b0 @-
02-
0:)
0>)
0m$
0W"
0Y"
0N!
09)
0u$
0w$
0Q"
0q$
0p$
0o$
0z$
0y$
0T"
0S"
0a$
0`$
0_$
0h$
0g$
0%%
0$%
0#%
0}$
0i1
#50
0:!
0R)
07!
#100
1:!
1R)
17!
b10 U)
b10 <!
#150
0:!
0R)
07!
#200
1:!
1R)
17!
b11 U)
b11 <!
#201
0;!
0S)
09!
#250
0:!
0R)
07!
#300
1:!
1R)
17!
1i+
1y+
b11000000000001 ,,
b11000000000001 +,
b11000000000001 *,
b11000000000001 ),
b11000000000001 (,
b11000000000001 ',
b11000000000001 &,
b11000000000001 %,
b11000000000001 $,
b11000000000001 #,
b11000000000001 ",
b11000000000001 !,
b11000000000001 ~+
b11000000000001 }+
b11000000000001 |+
b11000000000001 {+
1]B
1QB
1PB
b100 U)
b100 <!
b1 1!
b1 2!
b1 3!
b1 4!
#301
1j&
1k&
1w&
1?"
1W(
0!*
0#*
1q!
1r!
0s!
1~!
1$*
0"*
0/"
0'*
1(*
1u)
1**
1."
1]1
1\1
1i(
1%)
1m(
0'(
1&(
0n!
1e!
0b!
0a!
1`!
1_!
1/
05)
14)
1@)
0%)
0m(
0@
17
04
03
12
11
15)
04)
07(
16(
0}(
1t(
0q(
0p(
1o(
1n(
05)
14)
1P)
0E)
1D)
1C)
1l,
1\,
1.-
1|,
1N$
1.$
1l#
1L#
b100 4-
1;-
b11 1-
10-
1w$
1%%
1$%
1#%
1_$
1:)
1!%
#350
0:!
0R)
07!
#400
1:!
1R)
17!
0i+
1h+
0y+
1x+
b1100001000000000 ,,
b1100001000000000 +,
b1100001000000000 *,
b1100001000000000 ),
b1100001000000000 (,
b1100001000000000 ',
b1100001000000000 &,
b1100001000000000 %,
b1100001000000000 $,
b1100001000000000 #,
b1100001000000000 ",
b1100001000000000 !,
b1100001000000000 ~+
b1100001000000000 }+
b1100001000000000 |+
b1100001000000000 {+
1;,
1w1
1P2
1`2
1p2
1q1
1"3
1s1
1t1
133
173
163
153
b101 U)
b101 <!
b10 1!
b10 2!
b10 3!
b10 4!
#401
1&%
1'%
1(%
1O"
1;)
1"%
1>$
1x$
1^$
1|#
1\#
1b$
1g(
1>"
0?"
1V(
0W(
1!*
1#*
1)*
1o!
1p!
0q!
0r!
1u!
0~!
1c'
1?)
1Z1
0@)
0**
0-*
0$*
1"*
1/"
1'*
1.*
0."
0/*
0(*
0u)
10*
1v)
1**
1-*
0.*
1."
12*
1-"
1/*
00*
0v)
02*
0-"
0f1
1b'
0]1
0\1
1%)
1m(
1'(
1a1
0e!
0`!
0_!
0/
1.
15)
0!%
0Z1
0i(
07
02
01
05)
1]1
1\1
1i(
0P)
1E)
0D)
0C)
0l,
0\,
0.-
0|,
0N$
0.$
0l#
0L#
00-
b0 1-
b0 4-
0;-
0:)
0_$
0%%
0$%
0#%
0w$
#450
0:!
0R)
07!
#500
1:!
1R)
17!
0;,
1:,
0w1
0P2
0`2
0p2
0q1
0"3
0s1
0t1
033
123
073
063
053
12?
1g?
1(@
19@
16?
17?
1>@
1=@
1<@
b110 U)
b110 <!
b11 1!
b11 2!
b11 3!
b11 4!
#501
1U&
1V&
1W&
1<)
1R&
1Q&
1@&
1!&
1l%
0&%
0'%
0(%
1N"
0O"
0;)
0"%
0>$
0x$
0^$
0|#
0\#
0b$
1f(
0g(
0?)
1j(
1!A
1Z1
1"A
1]@
0g1
0m(
1f1
0'(
0&(
1m@
1N@
0]1
0\1
1w@
0Z1
1x@
1^@
0i(
1]1
1\1
1n@
1('
06(
1i(
1'(
1)'
1((
17(
18(
#550
0:!
0R)
07!
#600
1:!
1R)
17!
1X)
1j+
1i+
0h+
02?
0g?
0(@
1'@
09@
06?
07?
0>@
0=@
0<@
1|B
1IB
1JB
12C
11C
10C
b111 U)
b111 <!
b100 1!
b100 2!
b100 3!
b100 4!
#601
1]'
1^'
1_'
1=)
1L'
18'
0U&
0V&
0W&
0<)
0R&
0Q&
1?&
0@&
0!&
0l%
0V(
1W(
1X(
1v'
1w)
17)
0!*
0#*
0)*
0j(
0c'
0!A
1)A
1Z1
1*A
0"A
0**
1$*
0"*
1x)
10"
0/"
0'*
0."
0]@
1\@
1(*
1u)
1**
1."
0h1
1d.
1A
1g1
0%)
0'(
1&(
1e!
1`!
1_!
10
1/
0.
0n@
0m@
1l@
0N@
1L!
1D
1C
1B
0]1
0\1
0w@
0Z1
0x@
0^@
1S
0)'
0('
1''
17
12
11
07(
16(
16)
1V1
0i(
1]1
1\1
1m(
1i(
17(
06(
0m(
07(
16(
#650
0:!
0R)
07!
#700
1:!
1R)
17!
0X)
0i+
1h+
1z+
1<,
1;,
0:,
1L,
1K,
1J,
1I,
1H,
1G,
1F,
1E,
1D,
1C,
1B,
1A,
1@,
1?,
1>,
1=,
1W1
0|B
1{B
0IB
0JB
02C
01C
00C
b1000 U)
b1000 <!
b1 .!
b101 1!
b101 2!
b101 3!
b101 4!
#701
0]'
0^'
0_'
0=)
0L'
17'
08'
1C-
0f(
1g(
1h(
1@"
1V(
0W(
0v'
1!*
1#*
1)*
18)
0**
0-*
0$*
1"*
1/"
1'*
1.*
0."
0/*
0(*
0u)
10*
1v)
1**
1-*
0.*
1."
12*
1-"
1/*
00*
0v)
02*
0-"
1h1
0d.
0A
0b'
1'(
0e!
0`!
0_!
0/
1.
15)
0L!
1K!
0D
0C
0B
1@)
0S
1R
0t(
0o(
0n(
07
02
01
17(
1G)
0E)
1B)
1A)
1%$
12-
10-
b1 1-
b10 5-
b11 <-
1}$
1:)
1z$
1y$
1S"
1$%
1!%
1i1
0h1
0g1
0f1
#750
0:!
0R)
07!
#800
1:!
1R)
17!
1i+
1y+
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
b0 &,
b0 %,
b0 $,
b0 #,
b0 ",
b0 !,
b0 ~+
b0 }+
b0 |+
b0 {+
0;,
1:,
1u1
1r1
1w2
1s1
1t1
1$3
1#3
143
163
b1001 U)
b1001 <!
b110 1!
b110 2!
b110 3!
b110 4!
#801
1'%
1P"
1{$
1|$
1;)
1"%
15$
1~$
1U"
1f(
0g(
1?"
1W(
0!*
0#*
0o!
0p!
0u!
1?)
1$*
0"*
0/"
0'*
1(*
1u)
0**
0-*
1.*
0."
0/*
10*
1v)
12*
1-"
1f1
0'(
0&(
1%(
0a1
1/
05)
04)
13)
1Z1
07(
06(
15(
1h1
1g1
0f1
0]1
0\1
0Z1
0i(
1]1
1\1
0!%
0@)
1%)
1m(
1i(
1!%
1@)
17(
16(
05(
15)
14)
03)
0%)
0m(
07(
06(
15(
05)
04)
13)
0G)
0B)
0A)
0$%
0%$
00-
b0 1-
b0 5-
b0 <-
0:)
0z$
0y$
0S"
0!%
#850
0:!
0R)
07!
#900
1:!
1R)
17!
0i+
0h+
1g+
0y+
0x+
1w+
1;,
0u1
0w2
0s1
0$3
0#3
133
063
15?
1^?
1)@
16?
17?
1;@
1:@
1=@
b1010 U)
b1010 <!
b111 1!
b111 2!
b111 3!
b111 4!
#901
1V&
1S&
1T&
1<)
1R&
1A&
1v%
1o%
0'%
1O"
0{$
0|$
0"%
05$
0U"
1g(
1="
0>"
0?"
1U(
0V(
0W(
1!*
1#*
0)*
11*
1w@
1Z1
1x@
02*
05*
1**
1-*
0$*
1"*
1/"
1'*
0.*
1."
16*
0-"
1^@
07*
1/*
0(*
0u)
00*
18*
1p)
0v)
0**
0."
12*
15*
1=*
1,"
06*
1-"
17*
08*
0p)
0=*
0,"
0g1
1-!
1f1
0]1
0\1
1'(
0/
0.
1-
15)
1E@
1n@
16!
15!
1gA
1hA
1U@
0i(
1)'
17(
0@)
1%)
1m(
07(
05)
1E)
#950
0:!
0R)
07!
#1000
1:!
1R)
17!
0;,
0:,
19,
0t1
033
023
113
0^?
1(@
06?
0;@
0:@
0=@
b10000000000000000000000000000011 GB
b0 HB
b1 HB
b10 HB
1MB
1LB
1}B
1IB
1JB
11C
b1011 U)
b1011 <!
b10 .!
b1000 1!
b1000 2!
b1000 3!
b1000 4!
#1001
1^'
1=)
1L'
19'
1:'
1;'
0V&
0S&
0T&
0R&
1@&
0v%
1M"
0N"
0O"
0;)
1e(
0f(
0g(
0?)
1!A
1"A
1]@
0h1
1i.
1A
1g1
0E@
1m@
06!
05!
0K!
1C
0gA
0Z1
0hA
0U@
0R
1('
1]1
1\1
1i(
1@)
0%)
0m(
17(
15)
0E)
