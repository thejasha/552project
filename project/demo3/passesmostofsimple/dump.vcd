$date
	Mon Dec 16 17:39:50 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end

$scope module DUT $end
$var wire 1 5! clk $end
$var wire 1 6! err $end
$var wire 1 7! rst $end

$scope module c0 $end
$var reg 1 8! clk $end
$var reg 1 9! rst $end
$var wire 1 6! err $end
$var integer 32 :! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;! err $end
$var wire 1 <! data_write [15] $end
$var wire 1 =! data_write [14] $end
$var wire 1 >! data_write [13] $end
$var wire 1 ?! data_write [12] $end
$var wire 1 @! data_write [11] $end
$var wire 1 A! data_write [10] $end
$var wire 1 B! data_write [9] $end
$var wire 1 C! data_write [8] $end
$var wire 1 D! data_write [7] $end
$var wire 1 E! data_write [6] $end
$var wire 1 F! data_write [5] $end
$var wire 1 G! data_write [4] $end
$var wire 1 H! data_write [3] $end
$var wire 1 I! data_write [2] $end
$var wire 1 J! data_write [1] $end
$var wire 1 K! data_write [0] $end
$var wire 1 L! ImmSrc $end
$var wire 1 M! temp [15] $end
$var wire 1 N! temp [14] $end
$var wire 1 O! temp [13] $end
$var wire 1 P! temp [12] $end
$var wire 1 Q! temp [11] $end
$var wire 1 R! temp [10] $end
$var wire 1 S! temp [9] $end
$var wire 1 T! temp [8] $end
$var wire 1 U! temp [7] $end
$var wire 1 V! temp [6] $end
$var wire 1 W! temp [5] $end
$var wire 1 X! temp [4] $end
$var wire 1 Y! temp [3] $end
$var wire 1 Z! temp [2] $end
$var wire 1 [! temp [1] $end
$var wire 1 \! temp [0] $end
$var wire 1 ]! instruction [15] $end
$var wire 1 ^! instruction [14] $end
$var wire 1 _! instruction [13] $end
$var wire 1 `! instruction [12] $end
$var wire 1 a! instruction [11] $end
$var wire 1 b! instruction [10] $end
$var wire 1 c! instruction [9] $end
$var wire 1 d! instruction [8] $end
$var wire 1 e! instruction [7] $end
$var wire 1 f! instruction [6] $end
$var wire 1 g! instruction [5] $end
$var wire 1 h! instruction [4] $end
$var wire 1 i! instruction [3] $end
$var wire 1 j! instruction [2] $end
$var wire 1 k! instruction [1] $end
$var wire 1 l! instruction [0] $end
$var wire 1 m! instruction_out_IF_ID [15] $end
$var wire 1 n! instruction_out_IF_ID [14] $end
$var wire 1 o! instruction_out_IF_ID [13] $end
$var wire 1 p! instruction_out_IF_ID [12] $end
$var wire 1 q! instruction_out_IF_ID [11] $end
$var wire 1 r! instruction_out_IF_ID [10] $end
$var wire 1 s! instruction_out_IF_ID [9] $end
$var wire 1 t! instruction_out_IF_ID [8] $end
$var wire 1 u! instruction_out_IF_ID [7] $end
$var wire 1 v! instruction_out_IF_ID [6] $end
$var wire 1 w! instruction_out_IF_ID [5] $end
$var wire 1 x! instruction_out_IF_ID [4] $end
$var wire 1 y! instruction_out_IF_ID [3] $end
$var wire 1 z! instruction_out_IF_ID [2] $end
$var wire 1 {! instruction_out_IF_ID [1] $end
$var wire 1 |! instruction_out_IF_ID [0] $end
$var wire 1 }! pc_next_to_IF_ID [15] $end
$var wire 1 ~! pc_next_to_IF_ID [14] $end
$var wire 1 !" pc_next_to_IF_ID [13] $end
$var wire 1 "" pc_next_to_IF_ID [12] $end
$var wire 1 #" pc_next_to_IF_ID [11] $end
$var wire 1 $" pc_next_to_IF_ID [10] $end
$var wire 1 %" pc_next_to_IF_ID [9] $end
$var wire 1 &" pc_next_to_IF_ID [8] $end
$var wire 1 '" pc_next_to_IF_ID [7] $end
$var wire 1 (" pc_next_to_IF_ID [6] $end
$var wire 1 )" pc_next_to_IF_ID [5] $end
$var wire 1 *" pc_next_to_IF_ID [4] $end
$var wire 1 +" pc_next_to_IF_ID [3] $end
$var wire 1 ," pc_next_to_IF_ID [2] $end
$var wire 1 -" pc_next_to_IF_ID [1] $end
$var wire 1 ." pc_next_to_IF_ID [0] $end
$var wire 1 /" pc_next_out_IF_ID [15] $end
$var wire 1 0" pc_next_out_IF_ID [14] $end
$var wire 1 1" pc_next_out_IF_ID [13] $end
$var wire 1 2" pc_next_out_IF_ID [12] $end
$var wire 1 3" pc_next_out_IF_ID [11] $end
$var wire 1 4" pc_next_out_IF_ID [10] $end
$var wire 1 5" pc_next_out_IF_ID [9] $end
$var wire 1 6" pc_next_out_IF_ID [8] $end
$var wire 1 7" pc_next_out_IF_ID [7] $end
$var wire 1 8" pc_next_out_IF_ID [6] $end
$var wire 1 9" pc_next_out_IF_ID [5] $end
$var wire 1 :" pc_next_out_IF_ID [4] $end
$var wire 1 ;" pc_next_out_IF_ID [3] $end
$var wire 1 <" pc_next_out_IF_ID [2] $end
$var wire 1 =" pc_next_out_IF_ID [1] $end
$var wire 1 >" pc_next_out_IF_ID [0] $end
$var wire 1 ?" pc_next_out_ID_EX [15] $end
$var wire 1 @" pc_next_out_ID_EX [14] $end
$var wire 1 A" pc_next_out_ID_EX [13] $end
$var wire 1 B" pc_next_out_ID_EX [12] $end
$var wire 1 C" pc_next_out_ID_EX [11] $end
$var wire 1 D" pc_next_out_ID_EX [10] $end
$var wire 1 E" pc_next_out_ID_EX [9] $end
$var wire 1 F" pc_next_out_ID_EX [8] $end
$var wire 1 G" pc_next_out_ID_EX [7] $end
$var wire 1 H" pc_next_out_ID_EX [6] $end
$var wire 1 I" pc_next_out_ID_EX [5] $end
$var wire 1 J" pc_next_out_ID_EX [4] $end
$var wire 1 K" pc_next_out_ID_EX [3] $end
$var wire 1 L" pc_next_out_ID_EX [2] $end
$var wire 1 M" pc_next_out_ID_EX [1] $end
$var wire 1 N" pc_next_out_ID_EX [0] $end
$var wire 1 O" BTR_to_ID_EX $end
$var wire 1 P" BTR_out_ID_EX $end
$var wire 1 Q" BSrc_to_ID_EX [1] $end
$var wire 1 R" BSrc_to_ID_EX [0] $end
$var wire 1 S" BSrc_out_ID_EX [1] $end
$var wire 1 T" BSrc_out_ID_EX [0] $end
$var wire 1 U" InvB_to_ID_EX $end
$var wire 1 V" InvB_out_ID_EX $end
$var wire 1 W" InvA_to_ID_EX $end
$var wire 1 X" InvA_out_ID_EX $end
$var wire 1 Y" read_data_1_to_ID_EX [15] $end
$var wire 1 Z" read_data_1_to_ID_EX [14] $end
$var wire 1 [" read_data_1_to_ID_EX [13] $end
$var wire 1 \" read_data_1_to_ID_EX [12] $end
$var wire 1 ]" read_data_1_to_ID_EX [11] $end
$var wire 1 ^" read_data_1_to_ID_EX [10] $end
$var wire 1 _" read_data_1_to_ID_EX [9] $end
$var wire 1 `" read_data_1_to_ID_EX [8] $end
$var wire 1 a" read_data_1_to_ID_EX [7] $end
$var wire 1 b" read_data_1_to_ID_EX [6] $end
$var wire 1 c" read_data_1_to_ID_EX [5] $end
$var wire 1 d" read_data_1_to_ID_EX [4] $end
$var wire 1 e" read_data_1_to_ID_EX [3] $end
$var wire 1 f" read_data_1_to_ID_EX [2] $end
$var wire 1 g" read_data_1_to_ID_EX [1] $end
$var wire 1 h" read_data_1_to_ID_EX [0] $end
$var wire 1 i" read_data_1_out_ID_EX [15] $end
$var wire 1 j" read_data_1_out_ID_EX [14] $end
$var wire 1 k" read_data_1_out_ID_EX [13] $end
$var wire 1 l" read_data_1_out_ID_EX [12] $end
$var wire 1 m" read_data_1_out_ID_EX [11] $end
$var wire 1 n" read_data_1_out_ID_EX [10] $end
$var wire 1 o" read_data_1_out_ID_EX [9] $end
$var wire 1 p" read_data_1_out_ID_EX [8] $end
$var wire 1 q" read_data_1_out_ID_EX [7] $end
$var wire 1 r" read_data_1_out_ID_EX [6] $end
$var wire 1 s" read_data_1_out_ID_EX [5] $end
$var wire 1 t" read_data_1_out_ID_EX [4] $end
$var wire 1 u" read_data_1_out_ID_EX [3] $end
$var wire 1 v" read_data_1_out_ID_EX [2] $end
$var wire 1 w" read_data_1_out_ID_EX [1] $end
$var wire 1 x" read_data_1_out_ID_EX [0] $end
$var wire 1 y" read_data_2_to_ID_EX [15] $end
$var wire 1 z" read_data_2_to_ID_EX [14] $end
$var wire 1 {" read_data_2_to_ID_EX [13] $end
$var wire 1 |" read_data_2_to_ID_EX [12] $end
$var wire 1 }" read_data_2_to_ID_EX [11] $end
$var wire 1 ~" read_data_2_to_ID_EX [10] $end
$var wire 1 !# read_data_2_to_ID_EX [9] $end
$var wire 1 "# read_data_2_to_ID_EX [8] $end
$var wire 1 ## read_data_2_to_ID_EX [7] $end
$var wire 1 $# read_data_2_to_ID_EX [6] $end
$var wire 1 %# read_data_2_to_ID_EX [5] $end
$var wire 1 &# read_data_2_to_ID_EX [4] $end
$var wire 1 '# read_data_2_to_ID_EX [3] $end
$var wire 1 (# read_data_2_to_ID_EX [2] $end
$var wire 1 )# read_data_2_to_ID_EX [1] $end
$var wire 1 *# read_data_2_to_ID_EX [0] $end
$var wire 1 +# read_data_2_out_ID_EX [15] $end
$var wire 1 ,# read_data_2_out_ID_EX [14] $end
$var wire 1 -# read_data_2_out_ID_EX [13] $end
$var wire 1 .# read_data_2_out_ID_EX [12] $end
$var wire 1 /# read_data_2_out_ID_EX [11] $end
$var wire 1 0# read_data_2_out_ID_EX [10] $end
$var wire 1 1# read_data_2_out_ID_EX [9] $end
$var wire 1 2# read_data_2_out_ID_EX [8] $end
$var wire 1 3# read_data_2_out_ID_EX [7] $end
$var wire 1 4# read_data_2_out_ID_EX [6] $end
$var wire 1 5# read_data_2_out_ID_EX [5] $end
$var wire 1 6# read_data_2_out_ID_EX [4] $end
$var wire 1 7# read_data_2_out_ID_EX [3] $end
$var wire 1 8# read_data_2_out_ID_EX [2] $end
$var wire 1 9# read_data_2_out_ID_EX [1] $end
$var wire 1 :# read_data_2_out_ID_EX [0] $end
$var wire 1 ;# i1_to_ID_EX [15] $end
$var wire 1 <# i1_to_ID_EX [14] $end
$var wire 1 =# i1_to_ID_EX [13] $end
$var wire 1 ># i1_to_ID_EX [12] $end
$var wire 1 ?# i1_to_ID_EX [11] $end
$var wire 1 @# i1_to_ID_EX [10] $end
$var wire 1 A# i1_to_ID_EX [9] $end
$var wire 1 B# i1_to_ID_EX [8] $end
$var wire 1 C# i1_to_ID_EX [7] $end
$var wire 1 D# i1_to_ID_EX [6] $end
$var wire 1 E# i1_to_ID_EX [5] $end
$var wire 1 F# i1_to_ID_EX [4] $end
$var wire 1 G# i1_to_ID_EX [3] $end
$var wire 1 H# i1_to_ID_EX [2] $end
$var wire 1 I# i1_to_ID_EX [1] $end
$var wire 1 J# i1_to_ID_EX [0] $end
$var wire 1 K# i1_out_ID_EX [15] $end
$var wire 1 L# i1_out_ID_EX [14] $end
$var wire 1 M# i1_out_ID_EX [13] $end
$var wire 1 N# i1_out_ID_EX [12] $end
$var wire 1 O# i1_out_ID_EX [11] $end
$var wire 1 P# i1_out_ID_EX [10] $end
$var wire 1 Q# i1_out_ID_EX [9] $end
$var wire 1 R# i1_out_ID_EX [8] $end
$var wire 1 S# i1_out_ID_EX [7] $end
$var wire 1 T# i1_out_ID_EX [6] $end
$var wire 1 U# i1_out_ID_EX [5] $end
$var wire 1 V# i1_out_ID_EX [4] $end
$var wire 1 W# i1_out_ID_EX [3] $end
$var wire 1 X# i1_out_ID_EX [2] $end
$var wire 1 Y# i1_out_ID_EX [1] $end
$var wire 1 Z# i1_out_ID_EX [0] $end
$var wire 1 [# i2_to_ID_EX [15] $end
$var wire 1 \# i2_to_ID_EX [14] $end
$var wire 1 ]# i2_to_ID_EX [13] $end
$var wire 1 ^# i2_to_ID_EX [12] $end
$var wire 1 _# i2_to_ID_EX [11] $end
$var wire 1 `# i2_to_ID_EX [10] $end
$var wire 1 a# i2_to_ID_EX [9] $end
$var wire 1 b# i2_to_ID_EX [8] $end
$var wire 1 c# i2_to_ID_EX [7] $end
$var wire 1 d# i2_to_ID_EX [6] $end
$var wire 1 e# i2_to_ID_EX [5] $end
$var wire 1 f# i2_to_ID_EX [4] $end
$var wire 1 g# i2_to_ID_EX [3] $end
$var wire 1 h# i2_to_ID_EX [2] $end
$var wire 1 i# i2_to_ID_EX [1] $end
$var wire 1 j# i2_to_ID_EX [0] $end
$var wire 1 k# i2_out_ID_EX [15] $end
$var wire 1 l# i2_out_ID_EX [14] $end
$var wire 1 m# i2_out_ID_EX [13] $end
$var wire 1 n# i2_out_ID_EX [12] $end
$var wire 1 o# i2_out_ID_EX [11] $end
$var wire 1 p# i2_out_ID_EX [10] $end
$var wire 1 q# i2_out_ID_EX [9] $end
$var wire 1 r# i2_out_ID_EX [8] $end
$var wire 1 s# i2_out_ID_EX [7] $end
$var wire 1 t# i2_out_ID_EX [6] $end
$var wire 1 u# i2_out_ID_EX [5] $end
$var wire 1 v# i2_out_ID_EX [4] $end
$var wire 1 w# i2_out_ID_EX [3] $end
$var wire 1 x# i2_out_ID_EX [2] $end
$var wire 1 y# i2_out_ID_EX [1] $end
$var wire 1 z# i2_out_ID_EX [0] $end
$var wire 1 {# word_align_jump_to_ID_EX [15] $end
$var wire 1 |# word_align_jump_to_ID_EX [14] $end
$var wire 1 }# word_align_jump_to_ID_EX [13] $end
$var wire 1 ~# word_align_jump_to_ID_EX [12] $end
$var wire 1 !$ word_align_jump_to_ID_EX [11] $end
$var wire 1 "$ word_align_jump_to_ID_EX [10] $end
$var wire 1 #$ word_align_jump_to_ID_EX [9] $end
$var wire 1 $$ word_align_jump_to_ID_EX [8] $end
$var wire 1 %$ word_align_jump_to_ID_EX [7] $end
$var wire 1 &$ word_align_jump_to_ID_EX [6] $end
$var wire 1 '$ word_align_jump_to_ID_EX [5] $end
$var wire 1 ($ word_align_jump_to_ID_EX [4] $end
$var wire 1 )$ word_align_jump_to_ID_EX [3] $end
$var wire 1 *$ word_align_jump_to_ID_EX [2] $end
$var wire 1 +$ word_align_jump_to_ID_EX [1] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [0] $end
$var wire 1 -$ word_align_jump_out_ID_EX [15] $end
$var wire 1 .$ word_align_jump_out_ID_EX [14] $end
$var wire 1 /$ word_align_jump_out_ID_EX [13] $end
$var wire 1 0$ word_align_jump_out_ID_EX [12] $end
$var wire 1 1$ word_align_jump_out_ID_EX [11] $end
$var wire 1 2$ word_align_jump_out_ID_EX [10] $end
$var wire 1 3$ word_align_jump_out_ID_EX [9] $end
$var wire 1 4$ word_align_jump_out_ID_EX [8] $end
$var wire 1 5$ word_align_jump_out_ID_EX [7] $end
$var wire 1 6$ word_align_jump_out_ID_EX [6] $end
$var wire 1 7$ word_align_jump_out_ID_EX [5] $end
$var wire 1 8$ word_align_jump_out_ID_EX [4] $end
$var wire 1 9$ word_align_jump_out_ID_EX [3] $end
$var wire 1 :$ word_align_jump_out_ID_EX [2] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [1] $end
$var wire 1 <$ word_align_jump_out_ID_EX [0] $end
$var wire 1 =$ to_shift_to_ID_EX [15] $end
$var wire 1 >$ to_shift_to_ID_EX [14] $end
$var wire 1 ?$ to_shift_to_ID_EX [13] $end
$var wire 1 @$ to_shift_to_ID_EX [12] $end
$var wire 1 A$ to_shift_to_ID_EX [11] $end
$var wire 1 B$ to_shift_to_ID_EX [10] $end
$var wire 1 C$ to_shift_to_ID_EX [9] $end
$var wire 1 D$ to_shift_to_ID_EX [8] $end
$var wire 1 E$ to_shift_to_ID_EX [7] $end
$var wire 1 F$ to_shift_to_ID_EX [6] $end
$var wire 1 G$ to_shift_to_ID_EX [5] $end
$var wire 1 H$ to_shift_to_ID_EX [4] $end
$var wire 1 I$ to_shift_to_ID_EX [3] $end
$var wire 1 J$ to_shift_to_ID_EX [2] $end
$var wire 1 K$ to_shift_to_ID_EX [1] $end
$var wire 1 L$ to_shift_to_ID_EX [0] $end
$var wire 1 M$ to_shift_out_ID_EX [15] $end
$var wire 1 N$ to_shift_out_ID_EX [14] $end
$var wire 1 O$ to_shift_out_ID_EX [13] $end
$var wire 1 P$ to_shift_out_ID_EX [12] $end
$var wire 1 Q$ to_shift_out_ID_EX [11] $end
$var wire 1 R$ to_shift_out_ID_EX [10] $end
$var wire 1 S$ to_shift_out_ID_EX [9] $end
$var wire 1 T$ to_shift_out_ID_EX [8] $end
$var wire 1 U$ to_shift_out_ID_EX [7] $end
$var wire 1 V$ to_shift_out_ID_EX [6] $end
$var wire 1 W$ to_shift_out_ID_EX [5] $end
$var wire 1 X$ to_shift_out_ID_EX [4] $end
$var wire 1 Y$ to_shift_out_ID_EX [3] $end
$var wire 1 Z$ to_shift_out_ID_EX [2] $end
$var wire 1 [$ to_shift_out_ID_EX [1] $end
$var wire 1 \$ to_shift_out_ID_EX [0] $end
$var wire 1 ]$ ALUOpr_to_ID_EX [2] $end
$var wire 1 ^$ ALUOpr_to_ID_EX [1] $end
$var wire 1 _$ ALUOpr_to_ID_EX [0] $end
$var wire 1 `$ ALUOpr_out_ID_EX [2] $end
$var wire 1 a$ ALUOpr_out_ID_EX [1] $end
$var wire 1 b$ ALUOpr_out_ID_EX [0] $end
$var wire 1 c$ MemWrt_to_ID_EX $end
$var wire 1 d$ MemWrt_out_ID_EX $end
$var wire 1 e$ branch_command_to_ID_EX [1] $end
$var wire 1 f$ branch_command_to_ID_EX [0] $end
$var wire 1 g$ branch_command_out_ID_EX [1] $end
$var wire 1 h$ branch_command_out_ID_EX [0] $end
$var wire 1 i$ branching_to_ID_EX $end
$var wire 1 j$ branching_out_ID_EX $end
$var wire 1 k$ SLBI_to_ID_EX $end
$var wire 1 l$ SLBI_out_ID_EX $end
$var wire 1 m$ SetCtrl_to_ID_EX [2] $end
$var wire 1 n$ SetCtrl_to_ID_EX [1] $end
$var wire 1 o$ SetCtrl_to_ID_EX [0] $end
$var wire 1 p$ SetCtrl_out_ID_EX [2] $end
$var wire 1 q$ SetCtrl_out_ID_EX [1] $end
$var wire 1 r$ SetCtrl_out_ID_EX [0] $end
$var wire 1 s$ ALUJMP_in_ID_EX $end
$var wire 1 t$ ALUJMP_out_ID_EX $end
$var wire 1 u$ PC_or_add_in_ID_EX $end
$var wire 1 v$ PC_or_add_out_ID_EX $end
$var wire 1 w$ RegSrc_to_ID_EX [1] $end
$var wire 1 x$ RegSrc_to_ID_EX [0] $end
$var wire 1 y$ RegSrc_out_ID_EX [1] $end
$var wire 1 z$ RegSrc_out_ID_EX [0] $end
$var wire 1 {$ halt_to_ID_EX $end
$var wire 1 |$ halt_out_ID_EX $end
$var wire 1 }$ RegWrt_to_ID_EX $end
$var wire 1 ~$ RegWrt_out_ID_EX $end
$var wire 1 !% write_reg_to_ID_EX [2] $end
$var wire 1 "% write_reg_to_ID_EX [1] $end
$var wire 1 #% write_reg_to_ID_EX [0] $end
$var wire 1 $% write_reg_out_ID_EX [2] $end
$var wire 1 %% write_reg_out_ID_EX [1] $end
$var wire 1 &% write_reg_out_ID_EX [0] $end
$var wire 1 '% branchtake_to_EX_MEM $end
$var wire 1 (% branchtake_out_EX_MEM $end
$var wire 1 )% Alu_result_to_EX_MEM [15] $end
$var wire 1 *% Alu_result_to_EX_MEM [14] $end
$var wire 1 +% Alu_result_to_EX_MEM [13] $end
$var wire 1 ,% Alu_result_to_EX_MEM [12] $end
$var wire 1 -% Alu_result_to_EX_MEM [11] $end
$var wire 1 .% Alu_result_to_EX_MEM [10] $end
$var wire 1 /% Alu_result_to_EX_MEM [9] $end
$var wire 1 0% Alu_result_to_EX_MEM [8] $end
$var wire 1 1% Alu_result_to_EX_MEM [7] $end
$var wire 1 2% Alu_result_to_EX_MEM [6] $end
$var wire 1 3% Alu_result_to_EX_MEM [5] $end
$var wire 1 4% Alu_result_to_EX_MEM [4] $end
$var wire 1 5% Alu_result_to_EX_MEM [3] $end
$var wire 1 6% Alu_result_to_EX_MEM [2] $end
$var wire 1 7% Alu_result_to_EX_MEM [1] $end
$var wire 1 8% Alu_result_to_EX_MEM [0] $end
$var wire 1 9% Alu_result_out_EX_MEM [15] $end
$var wire 1 :% Alu_result_out_EX_MEM [14] $end
$var wire 1 ;% Alu_result_out_EX_MEM [13] $end
$var wire 1 <% Alu_result_out_EX_MEM [12] $end
$var wire 1 =% Alu_result_out_EX_MEM [11] $end
$var wire 1 >% Alu_result_out_EX_MEM [10] $end
$var wire 1 ?% Alu_result_out_EX_MEM [9] $end
$var wire 1 @% Alu_result_out_EX_MEM [8] $end
$var wire 1 A% Alu_result_out_EX_MEM [7] $end
$var wire 1 B% Alu_result_out_EX_MEM [6] $end
$var wire 1 C% Alu_result_out_EX_MEM [5] $end
$var wire 1 D% Alu_result_out_EX_MEM [4] $end
$var wire 1 E% Alu_result_out_EX_MEM [3] $end
$var wire 1 F% Alu_result_out_EX_MEM [2] $end
$var wire 1 G% Alu_result_out_EX_MEM [1] $end
$var wire 1 H% Alu_result_out_EX_MEM [0] $end
$var wire 1 I% Binput_to_EX_MEM [15] $end
$var wire 1 J% Binput_to_EX_MEM [14] $end
$var wire 1 K% Binput_to_EX_MEM [13] $end
$var wire 1 L% Binput_to_EX_MEM [12] $end
$var wire 1 M% Binput_to_EX_MEM [11] $end
$var wire 1 N% Binput_to_EX_MEM [10] $end
$var wire 1 O% Binput_to_EX_MEM [9] $end
$var wire 1 P% Binput_to_EX_MEM [8] $end
$var wire 1 Q% Binput_to_EX_MEM [7] $end
$var wire 1 R% Binput_to_EX_MEM [6] $end
$var wire 1 S% Binput_to_EX_MEM [5] $end
$var wire 1 T% Binput_to_EX_MEM [4] $end
$var wire 1 U% Binput_to_EX_MEM [3] $end
$var wire 1 V% Binput_to_EX_MEM [2] $end
$var wire 1 W% Binput_to_EX_MEM [1] $end
$var wire 1 X% Binput_to_EX_MEM [0] $end
$var wire 1 Y% Binput_out_EX_MEM [15] $end
$var wire 1 Z% Binput_out_EX_MEM [14] $end
$var wire 1 [% Binput_out_EX_MEM [13] $end
$var wire 1 \% Binput_out_EX_MEM [12] $end
$var wire 1 ]% Binput_out_EX_MEM [11] $end
$var wire 1 ^% Binput_out_EX_MEM [10] $end
$var wire 1 _% Binput_out_EX_MEM [9] $end
$var wire 1 `% Binput_out_EX_MEM [8] $end
$var wire 1 a% Binput_out_EX_MEM [7] $end
$var wire 1 b% Binput_out_EX_MEM [6] $end
$var wire 1 c% Binput_out_EX_MEM [5] $end
$var wire 1 d% Binput_out_EX_MEM [4] $end
$var wire 1 e% Binput_out_EX_MEM [3] $end
$var wire 1 f% Binput_out_EX_MEM [2] $end
$var wire 1 g% Binput_out_EX_MEM [1] $end
$var wire 1 h% Binput_out_EX_MEM [0] $end
$var wire 1 i% branching_out_EX_MEM $end
$var wire 1 j% PC_or_add_out_EX_MEM $end
$var wire 1 k% ALUJMP_out_EX_MEM $end
$var wire 1 l% MemWrt_out_EX_MEM $end
$var wire 1 m% halt_out_EX_MEM $end
$var wire 1 n% word_align_jump_out_EX_MEM [15] $end
$var wire 1 o% word_align_jump_out_EX_MEM [14] $end
$var wire 1 p% word_align_jump_out_EX_MEM [13] $end
$var wire 1 q% word_align_jump_out_EX_MEM [12] $end
$var wire 1 r% word_align_jump_out_EX_MEM [11] $end
$var wire 1 s% word_align_jump_out_EX_MEM [10] $end
$var wire 1 t% word_align_jump_out_EX_MEM [9] $end
$var wire 1 u% word_align_jump_out_EX_MEM [8] $end
$var wire 1 v% word_align_jump_out_EX_MEM [7] $end
$var wire 1 w% word_align_jump_out_EX_MEM [6] $end
$var wire 1 x% word_align_jump_out_EX_MEM [5] $end
$var wire 1 y% word_align_jump_out_EX_MEM [4] $end
$var wire 1 z% word_align_jump_out_EX_MEM [3] $end
$var wire 1 {% word_align_jump_out_EX_MEM [2] $end
$var wire 1 |% word_align_jump_out_EX_MEM [1] $end
$var wire 1 }% word_align_jump_out_EX_MEM [0] $end
$var wire 1 ~% read_data_2_out_EX_MEM [15] $end
$var wire 1 !& read_data_2_out_EX_MEM [14] $end
$var wire 1 "& read_data_2_out_EX_MEM [13] $end
$var wire 1 #& read_data_2_out_EX_MEM [12] $end
$var wire 1 $& read_data_2_out_EX_MEM [11] $end
$var wire 1 %& read_data_2_out_EX_MEM [10] $end
$var wire 1 && read_data_2_out_EX_MEM [9] $end
$var wire 1 '& read_data_2_out_EX_MEM [8] $end
$var wire 1 (& read_data_2_out_EX_MEM [7] $end
$var wire 1 )& read_data_2_out_EX_MEM [6] $end
$var wire 1 *& read_data_2_out_EX_MEM [5] $end
$var wire 1 +& read_data_2_out_EX_MEM [4] $end
$var wire 1 ,& read_data_2_out_EX_MEM [3] $end
$var wire 1 -& read_data_2_out_EX_MEM [2] $end
$var wire 1 .& read_data_2_out_EX_MEM [1] $end
$var wire 1 /& read_data_2_out_EX_MEM [0] $end
$var wire 1 0& pc_next_out_EX_MEM [15] $end
$var wire 1 1& pc_next_out_EX_MEM [14] $end
$var wire 1 2& pc_next_out_EX_MEM [13] $end
$var wire 1 3& pc_next_out_EX_MEM [12] $end
$var wire 1 4& pc_next_out_EX_MEM [11] $end
$var wire 1 5& pc_next_out_EX_MEM [10] $end
$var wire 1 6& pc_next_out_EX_MEM [9] $end
$var wire 1 7& pc_next_out_EX_MEM [8] $end
$var wire 1 8& pc_next_out_EX_MEM [7] $end
$var wire 1 9& pc_next_out_EX_MEM [6] $end
$var wire 1 :& pc_next_out_EX_MEM [5] $end
$var wire 1 ;& pc_next_out_EX_MEM [4] $end
$var wire 1 <& pc_next_out_EX_MEM [3] $end
$var wire 1 =& pc_next_out_EX_MEM [2] $end
$var wire 1 >& pc_next_out_EX_MEM [1] $end
$var wire 1 ?& pc_next_out_EX_MEM [0] $end
$var wire 1 @& i2_out_EX_MEM [15] $end
$var wire 1 A& i2_out_EX_MEM [14] $end
$var wire 1 B& i2_out_EX_MEM [13] $end
$var wire 1 C& i2_out_EX_MEM [12] $end
$var wire 1 D& i2_out_EX_MEM [11] $end
$var wire 1 E& i2_out_EX_MEM [10] $end
$var wire 1 F& i2_out_EX_MEM [9] $end
$var wire 1 G& i2_out_EX_MEM [8] $end
$var wire 1 H& i2_out_EX_MEM [7] $end
$var wire 1 I& i2_out_EX_MEM [6] $end
$var wire 1 J& i2_out_EX_MEM [5] $end
$var wire 1 K& i2_out_EX_MEM [4] $end
$var wire 1 L& i2_out_EX_MEM [3] $end
$var wire 1 M& i2_out_EX_MEM [2] $end
$var wire 1 N& i2_out_EX_MEM [1] $end
$var wire 1 O& i2_out_EX_MEM [0] $end
$var wire 1 P& RegWrt_out_EX_MEM $end
$var wire 1 Q& RegSrc_out_EX_MEM [1] $end
$var wire 1 R& RegSrc_out_EX_MEM [0] $end
$var wire 1 S& write_reg_out_EX_MEM [2] $end
$var wire 1 T& write_reg_out_EX_MEM [1] $end
$var wire 1 U& write_reg_out_EX_MEM [0] $end
$var wire 1 V& memory_data_to_MEM_WB [15] $end
$var wire 1 W& memory_data_to_MEM_WB [14] $end
$var wire 1 X& memory_data_to_MEM_WB [13] $end
$var wire 1 Y& memory_data_to_MEM_WB [12] $end
$var wire 1 Z& memory_data_to_MEM_WB [11] $end
$var wire 1 [& memory_data_to_MEM_WB [10] $end
$var wire 1 \& memory_data_to_MEM_WB [9] $end
$var wire 1 ]& memory_data_to_MEM_WB [8] $end
$var wire 1 ^& memory_data_to_MEM_WB [7] $end
$var wire 1 _& memory_data_to_MEM_WB [6] $end
$var wire 1 `& memory_data_to_MEM_WB [5] $end
$var wire 1 a& memory_data_to_MEM_WB [4] $end
$var wire 1 b& memory_data_to_MEM_WB [3] $end
$var wire 1 c& memory_data_to_MEM_WB [2] $end
$var wire 1 d& memory_data_to_MEM_WB [1] $end
$var wire 1 e& memory_data_to_MEM_WB [0] $end
$var wire 1 f& memory_data_out_MEM_WB [15] $end
$var wire 1 g& memory_data_out_MEM_WB [14] $end
$var wire 1 h& memory_data_out_MEM_WB [13] $end
$var wire 1 i& memory_data_out_MEM_WB [12] $end
$var wire 1 j& memory_data_out_MEM_WB [11] $end
$var wire 1 k& memory_data_out_MEM_WB [10] $end
$var wire 1 l& memory_data_out_MEM_WB [9] $end
$var wire 1 m& memory_data_out_MEM_WB [8] $end
$var wire 1 n& memory_data_out_MEM_WB [7] $end
$var wire 1 o& memory_data_out_MEM_WB [6] $end
$var wire 1 p& memory_data_out_MEM_WB [5] $end
$var wire 1 q& memory_data_out_MEM_WB [4] $end
$var wire 1 r& memory_data_out_MEM_WB [3] $end
$var wire 1 s& memory_data_out_MEM_WB [2] $end
$var wire 1 t& memory_data_out_MEM_WB [1] $end
$var wire 1 u& memory_data_out_MEM_WB [0] $end
$var wire 1 v& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 w& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 (' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 )' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 8' RegSrc_out_MEM_WB [1] $end
$var wire 1 9' RegSrc_out_MEM_WB [0] $end
$var wire 1 :' Binput_out_MEM_WB [15] $end
$var wire 1 ;' Binput_out_MEM_WB [14] $end
$var wire 1 <' Binput_out_MEM_WB [13] $end
$var wire 1 =' Binput_out_MEM_WB [12] $end
$var wire 1 >' Binput_out_MEM_WB [11] $end
$var wire 1 ?' Binput_out_MEM_WB [10] $end
$var wire 1 @' Binput_out_MEM_WB [9] $end
$var wire 1 A' Binput_out_MEM_WB [8] $end
$var wire 1 B' Binput_out_MEM_WB [7] $end
$var wire 1 C' Binput_out_MEM_WB [6] $end
$var wire 1 D' Binput_out_MEM_WB [5] $end
$var wire 1 E' Binput_out_MEM_WB [4] $end
$var wire 1 F' Binput_out_MEM_WB [3] $end
$var wire 1 G' Binput_out_MEM_WB [2] $end
$var wire 1 H' Binput_out_MEM_WB [1] $end
$var wire 1 I' Binput_out_MEM_WB [0] $end
$var wire 1 J' RegWrt_out_MEM_WB $end
$var wire 1 K' Alu_result_out_MEM_WB [15] $end
$var wire 1 L' Alu_result_out_MEM_WB [14] $end
$var wire 1 M' Alu_result_out_MEM_WB [13] $end
$var wire 1 N' Alu_result_out_MEM_WB [12] $end
$var wire 1 O' Alu_result_out_MEM_WB [11] $end
$var wire 1 P' Alu_result_out_MEM_WB [10] $end
$var wire 1 Q' Alu_result_out_MEM_WB [9] $end
$var wire 1 R' Alu_result_out_MEM_WB [8] $end
$var wire 1 S' Alu_result_out_MEM_WB [7] $end
$var wire 1 T' Alu_result_out_MEM_WB [6] $end
$var wire 1 U' Alu_result_out_MEM_WB [5] $end
$var wire 1 V' Alu_result_out_MEM_WB [4] $end
$var wire 1 W' Alu_result_out_MEM_WB [3] $end
$var wire 1 X' Alu_result_out_MEM_WB [2] $end
$var wire 1 Y' Alu_result_out_MEM_WB [1] $end
$var wire 1 Z' Alu_result_out_MEM_WB [0] $end
$var wire 1 [' write_reg_out_MEM_WB [2] $end
$var wire 1 \' write_reg_out_MEM_WB [1] $end
$var wire 1 ]' write_reg_out_MEM_WB [0] $end
$var wire 1 ^' branching_out_MEM_WB $end
$var wire 1 _' err1 $end
$var wire 1 `' branchNOP $end
$var wire 1 a' jumpNOP $end
$var wire 1 b' memrd_to_ID_EX $end
$var wire 1 c' memrd_out_ID_EX $end
$var wire 1 d' memrd_to_mem $end
$var wire 1 e' btake $end
$var wire 1 f' MUXFOUR [15] $end
$var wire 1 g' MUXFOUR [14] $end
$var wire 1 h' MUXFOUR [13] $end
$var wire 1 i' MUXFOUR [12] $end
$var wire 1 j' MUXFOUR [11] $end
$var wire 1 k' MUXFOUR [10] $end
$var wire 1 l' MUXFOUR [9] $end
$var wire 1 m' MUXFOUR [8] $end
$var wire 1 n' MUXFOUR [7] $end
$var wire 1 o' MUXFOUR [6] $end
$var wire 1 p' MUXFOUR [5] $end
$var wire 1 q' MUXFOUR [4] $end
$var wire 1 r' MUXFOUR [3] $end
$var wire 1 s' MUXFOUR [2] $end
$var wire 1 t' MUXFOUR [1] $end
$var wire 1 u' MUXFOUR [0] $end
$var wire 1 v' jmpthng $end
$var wire 1 w' jmpthng2 $end
$var wire 1 x' MUX_OUT_ONE [15] $end
$var wire 1 y' MUX_OUT_ONE [14] $end
$var wire 1 z' MUX_OUT_ONE [13] $end
$var wire 1 {' MUX_OUT_ONE [12] $end
$var wire 1 |' MUX_OUT_ONE [11] $end
$var wire 1 }' MUX_OUT_ONE [10] $end
$var wire 1 ~' MUX_OUT_ONE [9] $end
$var wire 1 !( MUX_OUT_ONE [8] $end
$var wire 1 "( MUX_OUT_ONE [7] $end
$var wire 1 #( MUX_OUT_ONE [6] $end
$var wire 1 $( MUX_OUT_ONE [5] $end
$var wire 1 %( MUX_OUT_ONE [4] $end
$var wire 1 &( MUX_OUT_ONE [3] $end
$var wire 1 '( MUX_OUT_ONE [2] $end
$var wire 1 (( MUX_OUT_ONE [1] $end
$var wire 1 )( MUX_OUT_ONE [0] $end
$var wire 1 *( MUX_OUT_TWO [15] $end
$var wire 1 +( MUX_OUT_TWO [14] $end
$var wire 1 ,( MUX_OUT_TWO [13] $end
$var wire 1 -( MUX_OUT_TWO [12] $end
$var wire 1 .( MUX_OUT_TWO [11] $end
$var wire 1 /( MUX_OUT_TWO [10] $end
$var wire 1 0( MUX_OUT_TWO [9] $end
$var wire 1 1( MUX_OUT_TWO [8] $end
$var wire 1 2( MUX_OUT_TWO [7] $end
$var wire 1 3( MUX_OUT_TWO [6] $end
$var wire 1 4( MUX_OUT_TWO [5] $end
$var wire 1 5( MUX_OUT_TWO [4] $end
$var wire 1 6( MUX_OUT_TWO [3] $end
$var wire 1 7( MUX_OUT_TWO [2] $end
$var wire 1 8( MUX_OUT_TWO [1] $end
$var wire 1 9( MUX_OUT_TWO [0] $end
$var wire 1 :( MUXTHREE [15] $end
$var wire 1 ;( MUXTHREE [14] $end
$var wire 1 <( MUXTHREE [13] $end
$var wire 1 =( MUXTHREE [12] $end
$var wire 1 >( MUXTHREE [11] $end
$var wire 1 ?( MUXTHREE [10] $end
$var wire 1 @( MUXTHREE [9] $end
$var wire 1 A( MUXTHREE [8] $end
$var wire 1 B( MUXTHREE [7] $end
$var wire 1 C( MUXTHREE [6] $end
$var wire 1 D( MUXTHREE [5] $end
$var wire 1 E( MUXTHREE [4] $end
$var wire 1 F( MUXTHREE [3] $end
$var wire 1 G( MUXTHREE [2] $end
$var wire 1 H( MUXTHREE [1] $end
$var wire 1 I( MUXTHREE [0] $end
$var wire 1 J( PC_NO_PLUS_TWO [15] $end
$var wire 1 K( PC_NO_PLUS_TWO [14] $end
$var wire 1 L( PC_NO_PLUS_TWO [13] $end
$var wire 1 M( PC_NO_PLUS_TWO [12] $end
$var wire 1 N( PC_NO_PLUS_TWO [11] $end
$var wire 1 O( PC_NO_PLUS_TWO [10] $end
$var wire 1 P( PC_NO_PLUS_TWO [9] $end
$var wire 1 Q( PC_NO_PLUS_TWO [8] $end
$var wire 1 R( PC_NO_PLUS_TWO [7] $end
$var wire 1 S( PC_NO_PLUS_TWO [6] $end
$var wire 1 T( PC_NO_PLUS_TWO [5] $end
$var wire 1 U( PC_NO_PLUS_TWO [4] $end
$var wire 1 V( PC_NO_PLUS_TWO [3] $end
$var wire 1 W( PC_NO_PLUS_TWO [2] $end
$var wire 1 X( PC_NO_PLUS_TWO [1] $end
$var wire 1 Y( PC_NO_PLUS_TWO [0] $end
$var wire 1 Z( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 [( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 \( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 ]( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 ^( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 _( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 `( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 a( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 b( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 c( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 d( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 e( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 f( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 g( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 h( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 i( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 j( SendNop $end
$var wire 1 k( muxonecond $end
$var wire 1 l( branchfail $end
$var wire 1 m( bthng2 $end
$var wire 1 n( fetch_stall $end
$var wire 1 o( muxtwcond $end
$var wire 1 p( inst_again [15] $end
$var wire 1 q( inst_again [14] $end
$var wire 1 r( inst_again [13] $end
$var wire 1 s( inst_again [12] $end
$var wire 1 t( inst_again [11] $end
$var wire 1 u( inst_again [10] $end
$var wire 1 v( inst_again [9] $end
$var wire 1 w( inst_again [8] $end
$var wire 1 x( inst_again [7] $end
$var wire 1 y( inst_again [6] $end
$var wire 1 z( inst_again [5] $end
$var wire 1 {( inst_again [4] $end
$var wire 1 |( inst_again [3] $end
$var wire 1 }( inst_again [2] $end
$var wire 1 ~( inst_again [1] $end
$var wire 1 !) inst_again [0] $end
$var wire 1 ") jalinf $end
$var wire 1 #) jalind $end
$var wire 1 $) jaline $end
$var wire 1 %) jalinm $end
$var wire 1 &) jalinw $end
$var wire 1 ') instagaincnd $end
$var wire 1 () pcagaincnd $end
$var wire 1 )) pcagain [15] $end
$var wire 1 *) pcagain [14] $end
$var wire 1 +) pcagain [13] $end
$var wire 1 ,) pcagain [12] $end
$var wire 1 -) pcagain [11] $end
$var wire 1 .) pcagain [10] $end
$var wire 1 /) pcagain [9] $end
$var wire 1 0) pcagain [8] $end
$var wire 1 1) pcagain [7] $end
$var wire 1 2) pcagain [6] $end
$var wire 1 3) pcagain [5] $end
$var wire 1 4) pcagain [4] $end
$var wire 1 5) pcagain [3] $end
$var wire 1 6) pcagain [2] $end
$var wire 1 7) pcagain [1] $end
$var wire 1 8) pcagain [0] $end
$var wire 1 9) fetch_halt $end
$var wire 1 :) fetch_halt_to_decode $end
$var wire 1 ;) fetch_stall_to_decode $end
$var wire 1 <) MemWrt_Decode_Out $end
$var wire 1 =) RegWrt_Decode_Out $end
$var wire 1 >) NOP_Out_ID_EX $end
$var wire 1 ?) NOP_Out_ID_MEM $end
$var wire 1 @) NOP_Out_ID_WB $end
$var wire 1 A) branching_Decode_Out $end
$var wire 1 B) Nop_or_Branch $end
$var wire 1 C) bNOP_OUTIDEX $end
$var wire 1 D) nopmux [15] $end
$var wire 1 E) nopmux [14] $end
$var wire 1 F) nopmux [13] $end
$var wire 1 G) nopmux [12] $end
$var wire 1 H) nopmux [11] $end
$var wire 1 I) nopmux [10] $end
$var wire 1 J) nopmux [9] $end
$var wire 1 K) nopmux [8] $end
$var wire 1 L) nopmux [7] $end
$var wire 1 M) nopmux [6] $end
$var wire 1 N) nopmux [5] $end
$var wire 1 O) nopmux [4] $end
$var wire 1 P) nopmux [3] $end
$var wire 1 Q) nopmux [2] $end
$var wire 1 R) nopmux [1] $end
$var wire 1 S) nopmux [0] $end
$var wire 1 T) mem_stall $end
$var wire 1 U) temp_mem_halt $end

$scope module my_clkrst $end
$var reg 1 V) clk $end
$var reg 1 W) rst $end
$var wire 1 X) err $end
$var integer 32 Y) cycle_count $end
$upscope $end

$scope module btaken $end
$var wire 1 e' q $end
$var wire 1 (% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z) state $end
$upscope $end

$scope module jumper $end
$var wire 1 v' q $end
$var wire 1 k% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [) state $end
$upscope $end

$scope module jumper2 $end
$var wire 1 w' q $end
$var wire 1 j% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \) state $end
$upscope $end

$scope module bumper2 $end
$var wire 1 m( q $end
$var wire 1 l( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]) state $end
$upscope $end

$scope module jalthing $end
$var wire 1 #) q $end
$var wire 1 ") d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^) state $end
$upscope $end

$scope module jalthing2 $end
$var wire 1 $) q $end
$var wire 1 _) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `) state $end
$upscope $end

$scope module jalthing3 $end
$var wire 1 %) q $end
$var wire 1 $) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a) state $end
$upscope $end

$scope module jalthing4 $end
$var wire 1 &) q $end
$var wire 1 %) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b) state $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 *( PC_in [15] $end
$var wire 1 +( PC_in [14] $end
$var wire 1 ,( PC_in [13] $end
$var wire 1 -( PC_in [12] $end
$var wire 1 .( PC_in [11] $end
$var wire 1 /( PC_in [10] $end
$var wire 1 0( PC_in [9] $end
$var wire 1 1( PC_in [8] $end
$var wire 1 2( PC_in [7] $end
$var wire 1 3( PC_in [6] $end
$var wire 1 4( PC_in [5] $end
$var wire 1 5( PC_in [4] $end
$var wire 1 6( PC_in [3] $end
$var wire 1 7( PC_in [2] $end
$var wire 1 8( PC_in [1] $end
$var wire 1 9( PC_in [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 }! PC_next [15] $end
$var wire 1 ~! PC_next [14] $end
$var wire 1 !" PC_next [13] $end
$var wire 1 "" PC_next [12] $end
$var wire 1 #" PC_next [11] $end
$var wire 1 $" PC_next [10] $end
$var wire 1 %" PC_next [9] $end
$var wire 1 &" PC_next [8] $end
$var wire 1 '" PC_next [7] $end
$var wire 1 (" PC_next [6] $end
$var wire 1 )" PC_next [5] $end
$var wire 1 *" PC_next [4] $end
$var wire 1 +" PC_next [3] $end
$var wire 1 ," PC_next [2] $end
$var wire 1 -" PC_next [1] $end
$var wire 1 ." PC_next [0] $end
$var wire 1 ]! instruction [15] $end
$var wire 1 ^! instruction [14] $end
$var wire 1 _! instruction [13] $end
$var wire 1 `! instruction [12] $end
$var wire 1 a! instruction [11] $end
$var wire 1 b! instruction [10] $end
$var wire 1 c! instruction [9] $end
$var wire 1 d! instruction [8] $end
$var wire 1 e! instruction [7] $end
$var wire 1 f! instruction [6] $end
$var wire 1 g! instruction [5] $end
$var wire 1 h! instruction [4] $end
$var wire 1 i! instruction [3] $end
$var wire 1 j! instruction [2] $end
$var wire 1 k! instruction [1] $end
$var wire 1 l! instruction [0] $end
$var wire 1 J( pc_temp [15] $end
$var wire 1 K( pc_temp [14] $end
$var wire 1 L( pc_temp [13] $end
$var wire 1 M( pc_temp [12] $end
$var wire 1 N( pc_temp [11] $end
$var wire 1 O( pc_temp [10] $end
$var wire 1 P( pc_temp [9] $end
$var wire 1 Q( pc_temp [8] $end
$var wire 1 R( pc_temp [7] $end
$var wire 1 S( pc_temp [6] $end
$var wire 1 T( pc_temp [5] $end
$var wire 1 U( pc_temp [4] $end
$var wire 1 V( pc_temp [3] $end
$var wire 1 W( pc_temp [2] $end
$var wire 1 X( pc_temp [1] $end
$var wire 1 Y( pc_temp [0] $end
$var wire 1 9) fetch_halt $end
$var wire 1 n( fetch_stall $end
$var wire 1 c) done $end
$var wire 1 d) stall $end
$var wire 1 e) cachehit $end

$scope module fa $end
$var wire 1 J( A [15] $end
$var wire 1 K( A [14] $end
$var wire 1 L( A [13] $end
$var wire 1 M( A [12] $end
$var wire 1 N( A [11] $end
$var wire 1 O( A [10] $end
$var wire 1 P( A [9] $end
$var wire 1 Q( A [8] $end
$var wire 1 R( A [7] $end
$var wire 1 S( A [6] $end
$var wire 1 T( A [5] $end
$var wire 1 U( A [4] $end
$var wire 1 V( A [3] $end
$var wire 1 W( A [2] $end
$var wire 1 X( A [1] $end
$var wire 1 Y( A [0] $end
$var wire 1 f) B [15] $end
$var wire 1 g) B [14] $end
$var wire 1 h) B [13] $end
$var wire 1 i) B [12] $end
$var wire 1 j) B [11] $end
$var wire 1 k) B [10] $end
$var wire 1 l) B [9] $end
$var wire 1 m) B [8] $end
$var wire 1 n) B [7] $end
$var wire 1 o) B [6] $end
$var wire 1 p) B [5] $end
$var wire 1 q) B [4] $end
$var wire 1 r) B [3] $end
$var wire 1 s) B [2] $end
$var wire 1 t) B [1] $end
$var wire 1 u) B [0] $end
$var wire 1 }! S [15] $end
$var wire 1 ~! S [14] $end
$var wire 1 !" S [13] $end
$var wire 1 "" S [12] $end
$var wire 1 #" S [11] $end
$var wire 1 $" S [10] $end
$var wire 1 %" S [9] $end
$var wire 1 &" S [8] $end
$var wire 1 '" S [7] $end
$var wire 1 (" S [6] $end
$var wire 1 )" S [5] $end
$var wire 1 *" S [4] $end
$var wire 1 +" S [3] $end
$var wire 1 ," S [2] $end
$var wire 1 -" S [1] $end
$var wire 1 ." S [0] $end
$var wire 1 v) Cout $end
$var wire 1 w) Cout0 $end
$var wire 1 x) Cout1 $end
$var wire 1 y) Cout2 $end
$var wire 1 z) Cin $end

$scope module f1 $end
$var wire 1 V( A [3] $end
$var wire 1 W( A [2] $end
$var wire 1 X( A [1] $end
$var wire 1 Y( A [0] $end
$var wire 1 r) B [3] $end
$var wire 1 s) B [2] $end
$var wire 1 t) B [1] $end
$var wire 1 u) B [0] $end
$var wire 1 z) Cin $end
$var wire 1 +" S [3] $end
$var wire 1 ," S [2] $end
$var wire 1 -" S [1] $end
$var wire 1 ." S [0] $end
$var wire 1 w) Cout $end
$var wire 1 {) Cout0 $end
$var wire 1 |) Cout1 $end
$var wire 1 }) Cout2 $end

$scope module f1 $end
$var wire 1 Y( A $end
$var wire 1 u) B $end
$var wire 1 z) Cin $end
$var wire 1 ." S $end
$var wire 1 {) Cout $end
$var wire 1 ~) xor_AB $end
$var wire 1 !* xor_ABCin $end
$var wire 1 "* NAND_AB $end
$var wire 1 #* not_NAND_AB $end
$var wire 1 $* NAND_Cin_xor_AB $end
$var wire 1 %* not_NAND_Cin_xor_AB $end
$var wire 1 &* NOR_2NAND $end
$var wire 1 '* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 Y( in1 $end
$var wire 1 u) in2 $end
$var wire 1 ~) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~) in1 $end
$var wire 1 z) in2 $end
$var wire 1 !* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Y( in1 $end
$var wire 1 u) in2 $end
$var wire 1 "* out $end
$upscope $end

$scope module not1 $end
$var wire 1 "* in1 $end
$var wire 1 #* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 z) in1 $end
$var wire 1 ~) in2 $end
$var wire 1 $* out $end
$upscope $end

$scope module not2 $end
$var wire 1 $* in1 $end
$var wire 1 %* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #* in1 $end
$var wire 1 %* in2 $end
$var wire 1 &* out $end
$upscope $end

$scope module not3 $end
$var wire 1 &* in1 $end
$var wire 1 '* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 X( A $end
$var wire 1 t) B $end
$var wire 1 {) Cin $end
$var wire 1 -" S $end
$var wire 1 |) Cout $end
$var wire 1 (* xor_AB $end
$var wire 1 )* xor_ABCin $end
$var wire 1 ** NAND_AB $end
$var wire 1 +* not_NAND_AB $end
$var wire 1 ,* NAND_Cin_xor_AB $end
$var wire 1 -* not_NAND_Cin_xor_AB $end
$var wire 1 .* NOR_2NAND $end
$var wire 1 /* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 X( in1 $end
$var wire 1 t) in2 $end
$var wire 1 (* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 (* in1 $end
$var wire 1 {) in2 $end
$var wire 1 )* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 X( in1 $end
$var wire 1 t) in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module not1 $end
$var wire 1 ** in1 $end
$var wire 1 +* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 {) in1 $end
$var wire 1 (* in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module not2 $end
$var wire 1 ,* in1 $end
$var wire 1 -* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 +* in1 $end
$var wire 1 -* in2 $end
$var wire 1 .* out $end
$upscope $end

$scope module not3 $end
$var wire 1 .* in1 $end
$var wire 1 /* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 W( A $end
$var wire 1 s) B $end
$var wire 1 |) Cin $end
$var wire 1 ," S $end
$var wire 1 }) Cout $end
$var wire 1 0* xor_AB $end
$var wire 1 1* xor_ABCin $end
$var wire 1 2* NAND_AB $end
$var wire 1 3* not_NAND_AB $end
$var wire 1 4* NAND_Cin_xor_AB $end
$var wire 1 5* not_NAND_Cin_xor_AB $end
$var wire 1 6* NOR_2NAND $end
$var wire 1 7* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 W( in1 $end
$var wire 1 s) in2 $end
$var wire 1 0* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 0* in1 $end
$var wire 1 |) in2 $end
$var wire 1 1* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 W( in1 $end
$var wire 1 s) in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module not1 $end
$var wire 1 2* in1 $end
$var wire 1 3* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 |) in1 $end
$var wire 1 0* in2 $end
$var wire 1 4* out $end
$upscope $end

$scope module not2 $end
$var wire 1 4* in1 $end
$var wire 1 5* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 3* in1 $end
$var wire 1 5* in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module not3 $end
$var wire 1 6* in1 $end
$var wire 1 7* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 V( A $end
$var wire 1 r) B $end
$var wire 1 }) Cin $end
$var wire 1 +" S $end
$var wire 1 w) Cout $end
$var wire 1 8* xor_AB $end
$var wire 1 9* xor_ABCin $end
$var wire 1 :* NAND_AB $end
$var wire 1 ;* not_NAND_AB $end
$var wire 1 <* NAND_Cin_xor_AB $end
$var wire 1 =* not_NAND_Cin_xor_AB $end
$var wire 1 >* NOR_2NAND $end
$var wire 1 ?* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 V( in1 $end
$var wire 1 r) in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8* in1 $end
$var wire 1 }) in2 $end
$var wire 1 9* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 V( in1 $end
$var wire 1 r) in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module not1 $end
$var wire 1 :* in1 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }) in1 $end
$var wire 1 8* in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not2 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;* in1 $end
$var wire 1 =* in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not3 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 R( A [3] $end
$var wire 1 S( A [2] $end
$var wire 1 T( A [1] $end
$var wire 1 U( A [0] $end
$var wire 1 n) B [3] $end
$var wire 1 o) B [2] $end
$var wire 1 p) B [1] $end
$var wire 1 q) B [0] $end
$var wire 1 w) Cin $end
$var wire 1 '" S [3] $end
$var wire 1 (" S [2] $end
$var wire 1 )" S [1] $end
$var wire 1 *" S [0] $end
$var wire 1 x) Cout $end
$var wire 1 @* Cout0 $end
$var wire 1 A* Cout1 $end
$var wire 1 B* Cout2 $end

$scope module f1 $end
$var wire 1 U( A $end
$var wire 1 q) B $end
$var wire 1 w) Cin $end
$var wire 1 *" S $end
$var wire 1 @* Cout $end
$var wire 1 C* xor_AB $end
$var wire 1 D* xor_ABCin $end
$var wire 1 E* NAND_AB $end
$var wire 1 F* not_NAND_AB $end
$var wire 1 G* NAND_Cin_xor_AB $end
$var wire 1 H* not_NAND_Cin_xor_AB $end
$var wire 1 I* NOR_2NAND $end
$var wire 1 J* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 U( in1 $end
$var wire 1 q) in2 $end
$var wire 1 C* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 C* in1 $end
$var wire 1 w) in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 U( in1 $end
$var wire 1 q) in2 $end
$var wire 1 E* out $end
$upscope $end

$scope module not1 $end
$var wire 1 E* in1 $end
$var wire 1 F* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 w) in1 $end
$var wire 1 C* in2 $end
$var wire 1 G* out $end
$upscope $end

$scope module not2 $end
$var wire 1 G* in1 $end
$var wire 1 H* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 F* in1 $end
$var wire 1 H* in2 $end
$var wire 1 I* out $end
$upscope $end

$scope module not3 $end
$var wire 1 I* in1 $end
$var wire 1 J* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 T( A $end
$var wire 1 p) B $end
$var wire 1 @* Cin $end
$var wire 1 )" S $end
$var wire 1 A* Cout $end
$var wire 1 K* xor_AB $end
$var wire 1 L* xor_ABCin $end
$var wire 1 M* NAND_AB $end
$var wire 1 N* not_NAND_AB $end
$var wire 1 O* NAND_Cin_xor_AB $end
$var wire 1 P* not_NAND_Cin_xor_AB $end
$var wire 1 Q* NOR_2NAND $end
$var wire 1 R* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 T( in1 $end
$var wire 1 p) in2 $end
$var wire 1 K* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 K* in1 $end
$var wire 1 @* in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 T( in1 $end
$var wire 1 p) in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module not1 $end
$var wire 1 M* in1 $end
$var wire 1 N* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @* in1 $end
$var wire 1 K* in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module not2 $end
$var wire 1 O* in1 $end
$var wire 1 P* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 N* in1 $end
$var wire 1 P* in2 $end
$var wire 1 Q* out $end
$upscope $end

$scope module not3 $end
$var wire 1 Q* in1 $end
$var wire 1 R* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 S( A $end
$var wire 1 o) B $end
$var wire 1 A* Cin $end
$var wire 1 (" S $end
$var wire 1 B* Cout $end
$var wire 1 S* xor_AB $end
$var wire 1 T* xor_ABCin $end
$var wire 1 U* NAND_AB $end
$var wire 1 V* not_NAND_AB $end
$var wire 1 W* NAND_Cin_xor_AB $end
$var wire 1 X* not_NAND_Cin_xor_AB $end
$var wire 1 Y* NOR_2NAND $end
$var wire 1 Z* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 S( in1 $end
$var wire 1 o) in2 $end
$var wire 1 S* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S* in1 $end
$var wire 1 A* in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 S( in1 $end
$var wire 1 o) in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module not1 $end
$var wire 1 U* in1 $end
$var wire 1 V* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A* in1 $end
$var wire 1 S* in2 $end
$var wire 1 W* out $end
$upscope $end

$scope module not2 $end
$var wire 1 W* in1 $end
$var wire 1 X* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V* in1 $end
$var wire 1 X* in2 $end
$var wire 1 Y* out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y* in1 $end
$var wire 1 Z* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 R( A $end
$var wire 1 n) B $end
$var wire 1 B* Cin $end
$var wire 1 '" S $end
$var wire 1 x) Cout $end
$var wire 1 [* xor_AB $end
$var wire 1 \* xor_ABCin $end
$var wire 1 ]* NAND_AB $end
$var wire 1 ^* not_NAND_AB $end
$var wire 1 _* NAND_Cin_xor_AB $end
$var wire 1 `* not_NAND_Cin_xor_AB $end
$var wire 1 a* NOR_2NAND $end
$var wire 1 b* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 R( in1 $end
$var wire 1 n) in2 $end
$var wire 1 [* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 [* in1 $end
$var wire 1 B* in2 $end
$var wire 1 \* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 R( in1 $end
$var wire 1 n) in2 $end
$var wire 1 ]* out $end
$upscope $end

$scope module not1 $end
$var wire 1 ]* in1 $end
$var wire 1 ^* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 B* in1 $end
$var wire 1 [* in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module not2 $end
$var wire 1 _* in1 $end
$var wire 1 `* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ^* in1 $end
$var wire 1 `* in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module not3 $end
$var wire 1 a* in1 $end
$var wire 1 b* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 N( A [3] $end
$var wire 1 O( A [2] $end
$var wire 1 P( A [1] $end
$var wire 1 Q( A [0] $end
$var wire 1 j) B [3] $end
$var wire 1 k) B [2] $end
$var wire 1 l) B [1] $end
$var wire 1 m) B [0] $end
$var wire 1 x) Cin $end
$var wire 1 #" S [3] $end
$var wire 1 $" S [2] $end
$var wire 1 %" S [1] $end
$var wire 1 &" S [0] $end
$var wire 1 y) Cout $end
$var wire 1 c* Cout0 $end
$var wire 1 d* Cout1 $end
$var wire 1 e* Cout2 $end

$scope module f1 $end
$var wire 1 Q( A $end
$var wire 1 m) B $end
$var wire 1 x) Cin $end
$var wire 1 &" S $end
$var wire 1 c* Cout $end
$var wire 1 f* xor_AB $end
$var wire 1 g* xor_ABCin $end
$var wire 1 h* NAND_AB $end
$var wire 1 i* not_NAND_AB $end
$var wire 1 j* NAND_Cin_xor_AB $end
$var wire 1 k* not_NAND_Cin_xor_AB $end
$var wire 1 l* NOR_2NAND $end
$var wire 1 m* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 Q( in1 $end
$var wire 1 m) in2 $end
$var wire 1 f* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 f* in1 $end
$var wire 1 x) in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Q( in1 $end
$var wire 1 m) in2 $end
$var wire 1 h* out $end
$upscope $end

$scope module not1 $end
$var wire 1 h* in1 $end
$var wire 1 i* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 x) in1 $end
$var wire 1 f* in2 $end
$var wire 1 j* out $end
$upscope $end

$scope module not2 $end
$var wire 1 j* in1 $end
$var wire 1 k* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 i* in1 $end
$var wire 1 k* in2 $end
$var wire 1 l* out $end
$upscope $end

$scope module not3 $end
$var wire 1 l* in1 $end
$var wire 1 m* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 P( A $end
$var wire 1 l) B $end
$var wire 1 c* Cin $end
$var wire 1 %" S $end
$var wire 1 d* Cout $end
$var wire 1 n* xor_AB $end
$var wire 1 o* xor_ABCin $end
$var wire 1 p* NAND_AB $end
$var wire 1 q* not_NAND_AB $end
$var wire 1 r* NAND_Cin_xor_AB $end
$var wire 1 s* not_NAND_Cin_xor_AB $end
$var wire 1 t* NOR_2NAND $end
$var wire 1 u* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 P( in1 $end
$var wire 1 l) in2 $end
$var wire 1 n* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n* in1 $end
$var wire 1 c* in2 $end
$var wire 1 o* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 P( in1 $end
$var wire 1 l) in2 $end
$var wire 1 p* out $end
$upscope $end

$scope module not1 $end
$var wire 1 p* in1 $end
$var wire 1 q* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 c* in1 $end
$var wire 1 n* in2 $end
$var wire 1 r* out $end
$upscope $end

$scope module not2 $end
$var wire 1 r* in1 $end
$var wire 1 s* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q* in1 $end
$var wire 1 s* in2 $end
$var wire 1 t* out $end
$upscope $end

$scope module not3 $end
$var wire 1 t* in1 $end
$var wire 1 u* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 O( A $end
$var wire 1 k) B $end
$var wire 1 d* Cin $end
$var wire 1 $" S $end
$var wire 1 e* Cout $end
$var wire 1 v* xor_AB $end
$var wire 1 w* xor_ABCin $end
$var wire 1 x* NAND_AB $end
$var wire 1 y* not_NAND_AB $end
$var wire 1 z* NAND_Cin_xor_AB $end
$var wire 1 {* not_NAND_Cin_xor_AB $end
$var wire 1 |* NOR_2NAND $end
$var wire 1 }* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 O( in1 $end
$var wire 1 k) in2 $end
$var wire 1 v* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 v* in1 $end
$var wire 1 d* in2 $end
$var wire 1 w* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 O( in1 $end
$var wire 1 k) in2 $end
$var wire 1 x* out $end
$upscope $end

$scope module not1 $end
$var wire 1 x* in1 $end
$var wire 1 y* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 d* in1 $end
$var wire 1 v* in2 $end
$var wire 1 z* out $end
$upscope $end

$scope module not2 $end
$var wire 1 z* in1 $end
$var wire 1 {* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 y* in1 $end
$var wire 1 {* in2 $end
$var wire 1 |* out $end
$upscope $end

$scope module not3 $end
$var wire 1 |* in1 $end
$var wire 1 }* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 N( A $end
$var wire 1 j) B $end
$var wire 1 e* Cin $end
$var wire 1 #" S $end
$var wire 1 y) Cout $end
$var wire 1 ~* xor_AB $end
$var wire 1 !+ xor_ABCin $end
$var wire 1 "+ NAND_AB $end
$var wire 1 #+ not_NAND_AB $end
$var wire 1 $+ NAND_Cin_xor_AB $end
$var wire 1 %+ not_NAND_Cin_xor_AB $end
$var wire 1 &+ NOR_2NAND $end
$var wire 1 '+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 N( in1 $end
$var wire 1 j) in2 $end
$var wire 1 ~* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~* in1 $end
$var wire 1 e* in2 $end
$var wire 1 !+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 N( in1 $end
$var wire 1 j) in2 $end
$var wire 1 "+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 "+ in1 $end
$var wire 1 #+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e* in1 $end
$var wire 1 ~* in2 $end
$var wire 1 $+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 $+ in1 $end
$var wire 1 %+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #+ in1 $end
$var wire 1 %+ in2 $end
$var wire 1 &+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 &+ in1 $end
$var wire 1 '+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 J( A [3] $end
$var wire 1 K( A [2] $end
$var wire 1 L( A [1] $end
$var wire 1 M( A [0] $end
$var wire 1 f) B [3] $end
$var wire 1 g) B [2] $end
$var wire 1 h) B [1] $end
$var wire 1 i) B [0] $end
$var wire 1 y) Cin $end
$var wire 1 }! S [3] $end
$var wire 1 ~! S [2] $end
$var wire 1 !" S [1] $end
$var wire 1 "" S [0] $end
$var wire 1 v) Cout $end
$var wire 1 (+ Cout0 $end
$var wire 1 )+ Cout1 $end
$var wire 1 *+ Cout2 $end

$scope module f1 $end
$var wire 1 M( A $end
$var wire 1 i) B $end
$var wire 1 y) Cin $end
$var wire 1 "" S $end
$var wire 1 (+ Cout $end
$var wire 1 ++ xor_AB $end
$var wire 1 ,+ xor_ABCin $end
$var wire 1 -+ NAND_AB $end
$var wire 1 .+ not_NAND_AB $end
$var wire 1 /+ NAND_Cin_xor_AB $end
$var wire 1 0+ not_NAND_Cin_xor_AB $end
$var wire 1 1+ NOR_2NAND $end
$var wire 1 2+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 M( in1 $end
$var wire 1 i) in2 $end
$var wire 1 ++ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ++ in1 $end
$var wire 1 y) in2 $end
$var wire 1 ,+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 M( in1 $end
$var wire 1 i) in2 $end
$var wire 1 -+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 -+ in1 $end
$var wire 1 .+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 y) in1 $end
$var wire 1 ++ in2 $end
$var wire 1 /+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 /+ in1 $end
$var wire 1 0+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .+ in1 $end
$var wire 1 0+ in2 $end
$var wire 1 1+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 1+ in1 $end
$var wire 1 2+ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 L( A $end
$var wire 1 h) B $end
$var wire 1 (+ Cin $end
$var wire 1 !" S $end
$var wire 1 )+ Cout $end
$var wire 1 3+ xor_AB $end
$var wire 1 4+ xor_ABCin $end
$var wire 1 5+ NAND_AB $end
$var wire 1 6+ not_NAND_AB $end
$var wire 1 7+ NAND_Cin_xor_AB $end
$var wire 1 8+ not_NAND_Cin_xor_AB $end
$var wire 1 9+ NOR_2NAND $end
$var wire 1 :+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 L( in1 $end
$var wire 1 h) in2 $end
$var wire 1 3+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 3+ in1 $end
$var wire 1 (+ in2 $end
$var wire 1 4+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 L( in1 $end
$var wire 1 h) in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 5+ in1 $end
$var wire 1 6+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 (+ in1 $end
$var wire 1 3+ in2 $end
$var wire 1 7+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 7+ in1 $end
$var wire 1 8+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 6+ in1 $end
$var wire 1 8+ in2 $end
$var wire 1 9+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 9+ in1 $end
$var wire 1 :+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 K( A $end
$var wire 1 g) B $end
$var wire 1 )+ Cin $end
$var wire 1 ~! S $end
$var wire 1 *+ Cout $end
$var wire 1 ;+ xor_AB $end
$var wire 1 <+ xor_ABCin $end
$var wire 1 =+ NAND_AB $end
$var wire 1 >+ not_NAND_AB $end
$var wire 1 ?+ NAND_Cin_xor_AB $end
$var wire 1 @+ not_NAND_Cin_xor_AB $end
$var wire 1 A+ NOR_2NAND $end
$var wire 1 B+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 K( in1 $end
$var wire 1 g) in2 $end
$var wire 1 ;+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;+ in1 $end
$var wire 1 )+ in2 $end
$var wire 1 <+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 K( in1 $end
$var wire 1 g) in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 =+ in1 $end
$var wire 1 >+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )+ in1 $end
$var wire 1 ;+ in2 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?+ in1 $end
$var wire 1 @+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >+ in1 $end
$var wire 1 @+ in2 $end
$var wire 1 A+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 A+ in1 $end
$var wire 1 B+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 J( A $end
$var wire 1 f) B $end
$var wire 1 *+ Cin $end
$var wire 1 }! S $end
$var wire 1 v) Cout $end
$var wire 1 C+ xor_AB $end
$var wire 1 D+ xor_ABCin $end
$var wire 1 E+ NAND_AB $end
$var wire 1 F+ not_NAND_AB $end
$var wire 1 G+ NAND_Cin_xor_AB $end
$var wire 1 H+ not_NAND_Cin_xor_AB $end
$var wire 1 I+ NOR_2NAND $end
$var wire 1 J+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 J( in1 $end
$var wire 1 f) in2 $end
$var wire 1 C+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 C+ in1 $end
$var wire 1 *+ in2 $end
$var wire 1 D+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 J( in1 $end
$var wire 1 f) in2 $end
$var wire 1 E+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 E+ in1 $end
$var wire 1 F+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 *+ in1 $end
$var wire 1 C+ in2 $end
$var wire 1 G+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 G+ in1 $end
$var wire 1 H+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 F+ in1 $end
$var wire 1 H+ in2 $end
$var wire 1 I+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 I+ in1 $end
$var wire 1 J+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 ]! DataOut [15] $end
$var wire 1 ^! DataOut [14] $end
$var wire 1 _! DataOut [13] $end
$var wire 1 `! DataOut [12] $end
$var wire 1 a! DataOut [11] $end
$var wire 1 b! DataOut [10] $end
$var wire 1 c! DataOut [9] $end
$var wire 1 d! DataOut [8] $end
$var wire 1 e! DataOut [7] $end
$var wire 1 f! DataOut [6] $end
$var wire 1 g! DataOut [5] $end
$var wire 1 h! DataOut [4] $end
$var wire 1 i! DataOut [3] $end
$var wire 1 j! DataOut [2] $end
$var wire 1 k! DataOut [1] $end
$var wire 1 l! DataOut [0] $end
$var wire 1 c) Done $end
$var wire 1 d) Stall $end
$var wire 1 e) CacheHit $end
$var wire 1 K+ DataIn [15] $end
$var wire 1 L+ DataIn [14] $end
$var wire 1 M+ DataIn [13] $end
$var wire 1 N+ DataIn [12] $end
$var wire 1 O+ DataIn [11] $end
$var wire 1 P+ DataIn [10] $end
$var wire 1 Q+ DataIn [9] $end
$var wire 1 R+ DataIn [8] $end
$var wire 1 S+ DataIn [7] $end
$var wire 1 T+ DataIn [6] $end
$var wire 1 U+ DataIn [5] $end
$var wire 1 V+ DataIn [4] $end
$var wire 1 W+ DataIn [3] $end
$var wire 1 X+ DataIn [2] $end
$var wire 1 Y+ DataIn [1] $end
$var wire 1 Z+ DataIn [0] $end
$var wire 1 J( Addr [15] $end
$var wire 1 K( Addr [14] $end
$var wire 1 L( Addr [13] $end
$var wire 1 M( Addr [12] $end
$var wire 1 N( Addr [11] $end
$var wire 1 O( Addr [10] $end
$var wire 1 P( Addr [9] $end
$var wire 1 Q( Addr [8] $end
$var wire 1 R( Addr [7] $end
$var wire 1 S( Addr [6] $end
$var wire 1 T( Addr [5] $end
$var wire 1 U( Addr [4] $end
$var wire 1 V( Addr [3] $end
$var wire 1 W( Addr [2] $end
$var wire 1 X( Addr [1] $end
$var wire 1 Y( Addr [0] $end
$var wire 1 [+ Wr $end
$var wire 1 \+ Rd $end
$var wire 1 ]+ createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9) err $end
$var reg 1 ^+ loaded $end
$var reg 17 _+ largest [16:0] $end
$var reg 32 `+ rand_pat [31:0] $end
$var wire 1 a+ ready $end
$var integer 32 b+ mcd $end
$var integer 32 c+ i $end
$var integer 32 d+ seed $end
$upscope $end

$scope module pc[15] $end
$var wire 1 J( q $end
$var wire 1 *( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e+ state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 K( q $end
$var wire 1 +( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f+ state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 L( q $end
$var wire 1 ,( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 M( q $end
$var wire 1 -( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h+ state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 N( q $end
$var wire 1 .( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i+ state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 O( q $end
$var wire 1 /( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j+ state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 P( q $end
$var wire 1 0( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k+ state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 Q( q $end
$var wire 1 1( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l+ state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 R( q $end
$var wire 1 2( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m+ state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 S( q $end
$var wire 1 3( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n+ state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 T( q $end
$var wire 1 4( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o+ state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 U( q $end
$var wire 1 5( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p+ state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 V( q $end
$var wire 1 6( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q+ state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 W( q $end
$var wire 1 7( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r+ state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 X( q $end
$var wire 1 8( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s+ state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 Y( q $end
$var wire 1 9( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t+ state $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 )) PC_next_in [15] $end
$var wire 1 *) PC_next_in [14] $end
$var wire 1 +) PC_next_in [13] $end
$var wire 1 ,) PC_next_in [12] $end
$var wire 1 -) PC_next_in [11] $end
$var wire 1 .) PC_next_in [10] $end
$var wire 1 /) PC_next_in [9] $end
$var wire 1 0) PC_next_in [8] $end
$var wire 1 1) PC_next_in [7] $end
$var wire 1 2) PC_next_in [6] $end
$var wire 1 3) PC_next_in [5] $end
$var wire 1 4) PC_next_in [4] $end
$var wire 1 5) PC_next_in [3] $end
$var wire 1 6) PC_next_in [2] $end
$var wire 1 7) PC_next_in [1] $end
$var wire 1 8) PC_next_in [0] $end
$var wire 1 p( instruction_in [15] $end
$var wire 1 q( instruction_in [14] $end
$var wire 1 r( instruction_in [13] $end
$var wire 1 s( instruction_in [12] $end
$var wire 1 t( instruction_in [11] $end
$var wire 1 u( instruction_in [10] $end
$var wire 1 v( instruction_in [9] $end
$var wire 1 w( instruction_in [8] $end
$var wire 1 x( instruction_in [7] $end
$var wire 1 y( instruction_in [6] $end
$var wire 1 z( instruction_in [5] $end
$var wire 1 {( instruction_in [4] $end
$var wire 1 |( instruction_in [3] $end
$var wire 1 }( instruction_in [2] $end
$var wire 1 ~( instruction_in [1] $end
$var wire 1 !) instruction_in [0] $end
$var wire 1 J( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 K( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 L( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 M( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 N( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 O( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 P( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 Q( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 R( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 S( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 T( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 U( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 V( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 W( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 X( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 Y( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 Z( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 [( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 \( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 ]( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 ^( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 _( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 `( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 a( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 b( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 c( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 d( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 e( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 f( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 g( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 h( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 i( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 /" PC_next_in_out [15] $end
$var wire 1 0" PC_next_in_out [14] $end
$var wire 1 1" PC_next_in_out [13] $end
$var wire 1 2" PC_next_in_out [12] $end
$var wire 1 3" PC_next_in_out [11] $end
$var wire 1 4" PC_next_in_out [10] $end
$var wire 1 5" PC_next_in_out [9] $end
$var wire 1 6" PC_next_in_out [8] $end
$var wire 1 7" PC_next_in_out [7] $end
$var wire 1 8" PC_next_in_out [6] $end
$var wire 1 9" PC_next_in_out [5] $end
$var wire 1 :" PC_next_in_out [4] $end
$var wire 1 ;" PC_next_in_out [3] $end
$var wire 1 <" PC_next_in_out [2] $end
$var wire 1 =" PC_next_in_out [1] $end
$var wire 1 >" PC_next_in_out [0] $end
$var wire 1 m! instruction_out [15] $end
$var wire 1 n! instruction_out [14] $end
$var wire 1 o! instruction_out [13] $end
$var wire 1 p! instruction_out [12] $end
$var wire 1 q! instruction_out [11] $end
$var wire 1 r! instruction_out [10] $end
$var wire 1 s! instruction_out [9] $end
$var wire 1 t! instruction_out [8] $end
$var wire 1 u! instruction_out [7] $end
$var wire 1 v! instruction_out [6] $end
$var wire 1 w! instruction_out [5] $end
$var wire 1 x! instruction_out [4] $end
$var wire 1 y! instruction_out [3] $end
$var wire 1 z! instruction_out [2] $end
$var wire 1 {! instruction_out [1] $end
$var wire 1 |! instruction_out [0] $end
$var wire 1 9) HALT_IN $end
$var wire 1 :) HALT_OUT $end
$var wire 1 n( STALL_IN $end
$var wire 1 ;) STALL_OUT $end

$scope module pc[15] $end
$var wire 1 /" q $end
$var wire 1 )) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u+ state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 0" q $end
$var wire 1 *) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v+ state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 1" q $end
$var wire 1 +) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 2" q $end
$var wire 1 ,) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x+ state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 3" q $end
$var wire 1 -) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y+ state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 4" q $end
$var wire 1 .) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z+ state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 5" q $end
$var wire 1 /) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {+ state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 6" q $end
$var wire 1 0) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |+ state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 7" q $end
$var wire 1 1) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }+ state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 8" q $end
$var wire 1 2) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~+ state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 9" q $end
$var wire 1 3) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !, state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 :" q $end
$var wire 1 4) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ", state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 ;" q $end
$var wire 1 5) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #, state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 <" q $end
$var wire 1 6) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $, state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 =" q $end
$var wire 1 7) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %, state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 >" q $end
$var wire 1 8) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &, state $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 ', state [15:0] $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 (, state [15:0] $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 ), state [15:0] $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 *, state [15:0] $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 +, state [15:0] $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 ,, state [15:0] $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 -, state [15:0] $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 ., state [15:0] $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 /, state [15:0] $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 0, state [15:0] $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 1, state [15:0] $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 2, state [15:0] $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 3, state [15:0] $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 4, state [15:0] $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 5, state [15:0] $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 16 6, state [15:0] $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 Z( q $end
$var wire 1 J( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7, state $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 [( q $end
$var wire 1 K( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8, state $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 \( q $end
$var wire 1 L( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9, state $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 ]( q $end
$var wire 1 M( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :, state $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 ^( q $end
$var wire 1 N( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;, state $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 _( q $end
$var wire 1 O( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <, state $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 `( q $end
$var wire 1 P( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =, state $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 a( q $end
$var wire 1 Q( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >, state $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 b( q $end
$var wire 1 R( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?, state $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 c( q $end
$var wire 1 S( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @, state $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 d( q $end
$var wire 1 T( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A, state $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 e( q $end
$var wire 1 U( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B, state $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 f( q $end
$var wire 1 V( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C, state $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 g( q $end
$var wire 1 W( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D, state $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 h( q $end
$var wire 1 X( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E, state $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 i( q $end
$var wire 1 Y( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F, state $end
$upscope $end

$scope module HALT[15] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G, state $end
$upscope $end

$scope module HALT[14] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H, state $end
$upscope $end

$scope module HALT[13] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I, state $end
$upscope $end

$scope module HALT[12] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J, state $end
$upscope $end

$scope module HALT[11] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K, state $end
$upscope $end

$scope module HALT[10] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L, state $end
$upscope $end

$scope module HALT[9] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M, state $end
$upscope $end

$scope module HALT[8] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N, state $end
$upscope $end

$scope module HALT[7] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O, state $end
$upscope $end

$scope module HALT[6] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P, state $end
$upscope $end

$scope module HALT[5] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q, state $end
$upscope $end

$scope module HALT[4] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R, state $end
$upscope $end

$scope module HALT[3] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S, state $end
$upscope $end

$scope module HALT[2] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T, state $end
$upscope $end

$scope module HALT[1] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U, state $end
$upscope $end

$scope module HALT[0] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V, state $end
$upscope $end

$scope module STALL[15] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W, state $end
$upscope $end

$scope module STALL[14] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X, state $end
$upscope $end

$scope module STALL[13] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y, state $end
$upscope $end

$scope module STALL[12] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z, state $end
$upscope $end

$scope module STALL[11] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [, state $end
$upscope $end

$scope module STALL[10] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \, state $end
$upscope $end

$scope module STALL[9] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ], state $end
$upscope $end

$scope module STALL[8] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^, state $end
$upscope $end

$scope module STALL[7] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _, state $end
$upscope $end

$scope module STALL[6] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `, state $end
$upscope $end

$scope module STALL[5] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a, state $end
$upscope $end

$scope module STALL[4] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b, state $end
$upscope $end

$scope module STALL[3] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c, state $end
$upscope $end

$scope module STALL[2] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d, state $end
$upscope $end

$scope module STALL[1] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e, state $end
$upscope $end

$scope module STALL[0] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f, state $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _' err $end
$var wire 1 D) instruction [15] $end
$var wire 1 E) instruction [14] $end
$var wire 1 F) instruction [13] $end
$var wire 1 G) instruction [12] $end
$var wire 1 H) instruction [11] $end
$var wire 1 I) instruction [10] $end
$var wire 1 J) instruction [9] $end
$var wire 1 K) instruction [8] $end
$var wire 1 L) instruction [7] $end
$var wire 1 M) instruction [6] $end
$var wire 1 N) instruction [5] $end
$var wire 1 O) instruction [4] $end
$var wire 1 P) instruction [3] $end
$var wire 1 Q) instruction [2] $end
$var wire 1 R) instruction [1] $end
$var wire 1 S) instruction [0] $end
$var wire 1 <! data_write [15] $end
$var wire 1 =! data_write [14] $end
$var wire 1 >! data_write [13] $end
$var wire 1 ?! data_write [12] $end
$var wire 1 @! data_write [11] $end
$var wire 1 A! data_write [10] $end
$var wire 1 B! data_write [9] $end
$var wire 1 C! data_write [8] $end
$var wire 1 D! data_write [7] $end
$var wire 1 E! data_write [6] $end
$var wire 1 F! data_write [5] $end
$var wire 1 G! data_write [4] $end
$var wire 1 H! data_write [3] $end
$var wire 1 I! data_write [2] $end
$var wire 1 J! data_write [1] $end
$var wire 1 K! data_write [0] $end
$var wire 1 Y" read_data_1 [15] $end
$var wire 1 Z" read_data_1 [14] $end
$var wire 1 [" read_data_1 [13] $end
$var wire 1 \" read_data_1 [12] $end
$var wire 1 ]" read_data_1 [11] $end
$var wire 1 ^" read_data_1 [10] $end
$var wire 1 _" read_data_1 [9] $end
$var wire 1 `" read_data_1 [8] $end
$var wire 1 a" read_data_1 [7] $end
$var wire 1 b" read_data_1 [6] $end
$var wire 1 c" read_data_1 [5] $end
$var wire 1 d" read_data_1 [4] $end
$var wire 1 e" read_data_1 [3] $end
$var wire 1 f" read_data_1 [2] $end
$var wire 1 g" read_data_1 [1] $end
$var wire 1 h" read_data_1 [0] $end
$var wire 1 y" read_data_2 [15] $end
$var wire 1 z" read_data_2 [14] $end
$var wire 1 {" read_data_2 [13] $end
$var wire 1 |" read_data_2 [12] $end
$var wire 1 }" read_data_2 [11] $end
$var wire 1 ~" read_data_2 [10] $end
$var wire 1 !# read_data_2 [9] $end
$var wire 1 "# read_data_2 [8] $end
$var wire 1 ## read_data_2 [7] $end
$var wire 1 $# read_data_2 [6] $end
$var wire 1 %# read_data_2 [5] $end
$var wire 1 &# read_data_2 [4] $end
$var wire 1 '# read_data_2 [3] $end
$var wire 1 (# read_data_2 [2] $end
$var wire 1 )# read_data_2 [1] $end
$var wire 1 *# read_data_2 [0] $end
$var wire 1 =$ to_shift [15] $end
$var wire 1 >$ to_shift [14] $end
$var wire 1 ?$ to_shift [13] $end
$var wire 1 @$ to_shift [12] $end
$var wire 1 A$ to_shift [11] $end
$var wire 1 B$ to_shift [10] $end
$var wire 1 C$ to_shift [9] $end
$var wire 1 D$ to_shift [8] $end
$var wire 1 E$ to_shift [7] $end
$var wire 1 F$ to_shift [6] $end
$var wire 1 G$ to_shift [5] $end
$var wire 1 H$ to_shift [4] $end
$var wire 1 I$ to_shift [3] $end
$var wire 1 J$ to_shift [2] $end
$var wire 1 K$ to_shift [1] $end
$var wire 1 L$ to_shift [0] $end
$var wire 1 ;# i_1 [15] $end
$var wire 1 <# i_1 [14] $end
$var wire 1 =# i_1 [13] $end
$var wire 1 ># i_1 [12] $end
$var wire 1 ?# i_1 [11] $end
$var wire 1 @# i_1 [10] $end
$var wire 1 A# i_1 [9] $end
$var wire 1 B# i_1 [8] $end
$var wire 1 C# i_1 [7] $end
$var wire 1 D# i_1 [6] $end
$var wire 1 E# i_1 [5] $end
$var wire 1 F# i_1 [4] $end
$var wire 1 G# i_1 [3] $end
$var wire 1 H# i_1 [2] $end
$var wire 1 I# i_1 [1] $end
$var wire 1 J# i_1 [0] $end
$var wire 1 [# i_2 [15] $end
$var wire 1 \# i_2 [14] $end
$var wire 1 ]# i_2 [13] $end
$var wire 1 ^# i_2 [12] $end
$var wire 1 _# i_2 [11] $end
$var wire 1 `# i_2 [10] $end
$var wire 1 a# i_2 [9] $end
$var wire 1 b# i_2 [8] $end
$var wire 1 c# i_2 [7] $end
$var wire 1 d# i_2 [6] $end
$var wire 1 e# i_2 [5] $end
$var wire 1 f# i_2 [4] $end
$var wire 1 g# i_2 [3] $end
$var wire 1 h# i_2 [2] $end
$var wire 1 i# i_2 [1] $end
$var wire 1 j# i_2 [0] $end
$var wire 1 {# word_align_jump [15] $end
$var wire 1 |# word_align_jump [14] $end
$var wire 1 }# word_align_jump [13] $end
$var wire 1 ~# word_align_jump [12] $end
$var wire 1 !$ word_align_jump [11] $end
$var wire 1 "$ word_align_jump [10] $end
$var wire 1 #$ word_align_jump [9] $end
$var wire 1 $$ word_align_jump [8] $end
$var wire 1 %$ word_align_jump [7] $end
$var wire 1 &$ word_align_jump [6] $end
$var wire 1 '$ word_align_jump [5] $end
$var wire 1 ($ word_align_jump [4] $end
$var wire 1 )$ word_align_jump [3] $end
$var wire 1 *$ word_align_jump [2] $end
$var wire 1 +$ word_align_jump [1] $end
$var wire 1 ,$ word_align_jump [0] $end
$var wire 1 g, signed_i_1 [15] $end
$var wire 1 h, signed_i_1 [14] $end
$var wire 1 i, signed_i_1 [13] $end
$var wire 1 j, signed_i_1 [12] $end
$var wire 1 k, signed_i_1 [11] $end
$var wire 1 l, signed_i_1 [10] $end
$var wire 1 m, signed_i_1 [9] $end
$var wire 1 n, signed_i_1 [8] $end
$var wire 1 o, signed_i_1 [7] $end
$var wire 1 p, signed_i_1 [6] $end
$var wire 1 q, signed_i_1 [5] $end
$var wire 1 r, signed_i_1 [4] $end
$var wire 1 s, signed_i_1 [3] $end
$var wire 1 t, signed_i_1 [2] $end
$var wire 1 u, signed_i_1 [1] $end
$var wire 1 v, signed_i_1 [0] $end
$var wire 1 w, zero_i_1 [15] $end
$var wire 1 x, zero_i_1 [14] $end
$var wire 1 y, zero_i_1 [13] $end
$var wire 1 z, zero_i_1 [12] $end
$var wire 1 {, zero_i_1 [11] $end
$var wire 1 |, zero_i_1 [10] $end
$var wire 1 }, zero_i_1 [9] $end
$var wire 1 ~, zero_i_1 [8] $end
$var wire 1 !- zero_i_1 [7] $end
$var wire 1 "- zero_i_1 [6] $end
$var wire 1 #- zero_i_1 [5] $end
$var wire 1 $- zero_i_1 [4] $end
$var wire 1 %- zero_i_1 [3] $end
$var wire 1 &- zero_i_1 [2] $end
$var wire 1 '- zero_i_1 [1] $end
$var wire 1 (- zero_i_1 [0] $end
$var wire 1 )- signed_i_2 [15] $end
$var wire 1 *- signed_i_2 [14] $end
$var wire 1 +- signed_i_2 [13] $end
$var wire 1 ,- signed_i_2 [12] $end
$var wire 1 -- signed_i_2 [11] $end
$var wire 1 .- signed_i_2 [10] $end
$var wire 1 /- signed_i_2 [9] $end
$var wire 1 0- signed_i_2 [8] $end
$var wire 1 1- signed_i_2 [7] $end
$var wire 1 2- signed_i_2 [6] $end
$var wire 1 3- signed_i_2 [5] $end
$var wire 1 4- signed_i_2 [4] $end
$var wire 1 5- signed_i_2 [3] $end
$var wire 1 6- signed_i_2 [2] $end
$var wire 1 7- signed_i_2 [1] $end
$var wire 1 8- signed_i_2 [0] $end
$var wire 1 9- zero_i_2 [15] $end
$var wire 1 :- zero_i_2 [14] $end
$var wire 1 ;- zero_i_2 [13] $end
$var wire 1 <- zero_i_2 [12] $end
$var wire 1 =- zero_i_2 [11] $end
$var wire 1 >- zero_i_2 [10] $end
$var wire 1 ?- zero_i_2 [9] $end
$var wire 1 @- zero_i_2 [8] $end
$var wire 1 A- zero_i_2 [7] $end
$var wire 1 B- zero_i_2 [6] $end
$var wire 1 C- zero_i_2 [5] $end
$var wire 1 D- zero_i_2 [4] $end
$var wire 1 E- zero_i_2 [3] $end
$var wire 1 F- zero_i_2 [2] $end
$var wire 1 G- zero_i_2 [1] $end
$var wire 1 H- zero_i_2 [0] $end
$var reg 1 I- OExt $end
$var reg 1 J- RegWrt $end
$var reg 2 K- RegDst [1:0] $end
$var reg 1 L- halt $end
$var reg 1 M- BTR $end
$var reg 3 N- ALUOpr [2:0] $end
$var reg 2 O- Bsrc [1:0] $end
$var reg 1 P- InvB $end
$var reg 1 Q- InvA $end
$var reg 1 R- ImmSrc $end
$var reg 1 S- MemWrt $end
$var reg 1 T- ALUJMP $end
$var reg 1 U- PC_or_add $end
$var reg 2 V- RegSrc [1:0] $end
$var reg 1 W- SLBI $end
$var reg 1 X- branching $end
$var reg 2 Y- branch_command [1:0] $end
$var reg 3 Z- SetCtrl [2:0] $end
$var reg 1 [- MemRd $end
$var wire 1 !% write_reg_out [2] $end
$var wire 1 "% write_reg_out [1] $end
$var wire 1 #% write_reg_out [0] $end
$var wire 1 [' write_reg_from_wb [2] $end
$var wire 1 \' write_reg_from_wb [1] $end
$var wire 1 ]' write_reg_from_wb [0] $end
$var wire 1 J' RegWrt_from_wb $end
$var wire 1 :) fetch_halt $end
$var wire 1 ;) fetch_stall $end

$scope module registerfile $end
$var parameter 32 \- bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 I) read1RegSel [2] $end
$var wire 1 J) read1RegSel [1] $end
$var wire 1 K) read1RegSel [0] $end
$var wire 1 L) read2RegSel [2] $end
$var wire 1 M) read2RegSel [1] $end
$var wire 1 N) read2RegSel [0] $end
$var wire 1 [' writeRegSel [2] $end
$var wire 1 \' writeRegSel [1] $end
$var wire 1 ]' writeRegSel [0] $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 J' writeEn $end
$var wire 1 Y" read1Data [15] $end
$var wire 1 Z" read1Data [14] $end
$var wire 1 [" read1Data [13] $end
$var wire 1 \" read1Data [12] $end
$var wire 1 ]" read1Data [11] $end
$var wire 1 ^" read1Data [10] $end
$var wire 1 _" read1Data [9] $end
$var wire 1 `" read1Data [8] $end
$var wire 1 a" read1Data [7] $end
$var wire 1 b" read1Data [6] $end
$var wire 1 c" read1Data [5] $end
$var wire 1 d" read1Data [4] $end
$var wire 1 e" read1Data [3] $end
$var wire 1 f" read1Data [2] $end
$var wire 1 g" read1Data [1] $end
$var wire 1 h" read1Data [0] $end
$var wire 1 y" read2Data [15] $end
$var wire 1 z" read2Data [14] $end
$var wire 1 {" read2Data [13] $end
$var wire 1 |" read2Data [12] $end
$var wire 1 }" read2Data [11] $end
$var wire 1 ~" read2Data [10] $end
$var wire 1 !# read2Data [9] $end
$var wire 1 "# read2Data [8] $end
$var wire 1 ## read2Data [7] $end
$var wire 1 $# read2Data [6] $end
$var wire 1 %# read2Data [5] $end
$var wire 1 &# read2Data [4] $end
$var wire 1 '# read2Data [3] $end
$var wire 1 (# read2Data [2] $end
$var wire 1 )# read2Data [1] $end
$var wire 1 *# read2Data [0] $end
$var wire 1 _' err $end
$var wire 1 ]- registers [0] $end
$var wire 1 ^- registers [1] $end
$var wire 1 _- registers [2] $end
$var wire 1 `- registers [3] $end
$var wire 1 a- registers [4] $end
$var wire 1 b- registers [5] $end
$var wire 1 c- registers [6] $end
$var wire 1 d- registers [7] $end
$var wire 1 e- registers [8] $end
$var wire 1 f- registers [9] $end
$var wire 1 g- registers [10] $end
$var wire 1 h- registers [11] $end
$var wire 1 i- registers [12] $end
$var wire 1 j- registers [13] $end
$var wire 1 k- registers [14] $end
$var wire 1 l- registers [15] $end
$var wire 1 m- registers [16] $end
$var wire 1 n- registers [17] $end
$var wire 1 o- registers [18] $end
$var wire 1 p- registers [19] $end
$var wire 1 q- registers [20] $end
$var wire 1 r- registers [21] $end
$var wire 1 s- registers [22] $end
$var wire 1 t- registers [23] $end
$var wire 1 u- registers [24] $end
$var wire 1 v- registers [25] $end
$var wire 1 w- registers [26] $end
$var wire 1 x- registers [27] $end
$var wire 1 y- registers [28] $end
$var wire 1 z- registers [29] $end
$var wire 1 {- registers [30] $end
$var wire 1 |- registers [31] $end
$var wire 1 }- registers [32] $end
$var wire 1 ~- registers [33] $end
$var wire 1 !. registers [34] $end
$var wire 1 ". registers [35] $end
$var wire 1 #. registers [36] $end
$var wire 1 $. registers [37] $end
$var wire 1 %. registers [38] $end
$var wire 1 &. registers [39] $end
$var wire 1 '. registers [40] $end
$var wire 1 (. registers [41] $end
$var wire 1 ). registers [42] $end
$var wire 1 *. registers [43] $end
$var wire 1 +. registers [44] $end
$var wire 1 ,. registers [45] $end
$var wire 1 -. registers [46] $end
$var wire 1 .. registers [47] $end
$var wire 1 /. registers [48] $end
$var wire 1 0. registers [49] $end
$var wire 1 1. registers [50] $end
$var wire 1 2. registers [51] $end
$var wire 1 3. registers [52] $end
$var wire 1 4. registers [53] $end
$var wire 1 5. registers [54] $end
$var wire 1 6. registers [55] $end
$var wire 1 7. registers [56] $end
$var wire 1 8. registers [57] $end
$var wire 1 9. registers [58] $end
$var wire 1 :. registers [59] $end
$var wire 1 ;. registers [60] $end
$var wire 1 <. registers [61] $end
$var wire 1 =. registers [62] $end
$var wire 1 >. registers [63] $end
$var wire 1 ?. registers [64] $end
$var wire 1 @. registers [65] $end
$var wire 1 A. registers [66] $end
$var wire 1 B. registers [67] $end
$var wire 1 C. registers [68] $end
$var wire 1 D. registers [69] $end
$var wire 1 E. registers [70] $end
$var wire 1 F. registers [71] $end
$var wire 1 G. registers [72] $end
$var wire 1 H. registers [73] $end
$var wire 1 I. registers [74] $end
$var wire 1 J. registers [75] $end
$var wire 1 K. registers [76] $end
$var wire 1 L. registers [77] $end
$var wire 1 M. registers [78] $end
$var wire 1 N. registers [79] $end
$var wire 1 O. registers [80] $end
$var wire 1 P. registers [81] $end
$var wire 1 Q. registers [82] $end
$var wire 1 R. registers [83] $end
$var wire 1 S. registers [84] $end
$var wire 1 T. registers [85] $end
$var wire 1 U. registers [86] $end
$var wire 1 V. registers [87] $end
$var wire 1 W. registers [88] $end
$var wire 1 X. registers [89] $end
$var wire 1 Y. registers [90] $end
$var wire 1 Z. registers [91] $end
$var wire 1 [. registers [92] $end
$var wire 1 \. registers [93] $end
$var wire 1 ]. registers [94] $end
$var wire 1 ^. registers [95] $end
$var wire 1 _. registers [96] $end
$var wire 1 `. registers [97] $end
$var wire 1 a. registers [98] $end
$var wire 1 b. registers [99] $end
$var wire 1 c. registers [100] $end
$var wire 1 d. registers [101] $end
$var wire 1 e. registers [102] $end
$var wire 1 f. registers [103] $end
$var wire 1 g. registers [104] $end
$var wire 1 h. registers [105] $end
$var wire 1 i. registers [106] $end
$var wire 1 j. registers [107] $end
$var wire 1 k. registers [108] $end
$var wire 1 l. registers [109] $end
$var wire 1 m. registers [110] $end
$var wire 1 n. registers [111] $end
$var wire 1 o. registers [112] $end
$var wire 1 p. registers [113] $end
$var wire 1 q. registers [114] $end
$var wire 1 r. registers [115] $end
$var wire 1 s. registers [116] $end
$var wire 1 t. registers [117] $end
$var wire 1 u. registers [118] $end
$var wire 1 v. registers [119] $end
$var wire 1 w. registers [120] $end
$var wire 1 x. registers [121] $end
$var wire 1 y. registers [122] $end
$var wire 1 z. registers [123] $end
$var wire 1 {. registers [124] $end
$var wire 1 |. registers [125] $end
$var wire 1 }. registers [126] $end
$var wire 1 ~. registers [127] $end
$var wire 1 !/ mask_1 [0] $end
$var wire 1 "/ mask_1 [1] $end
$var wire 1 #/ mask_1 [2] $end
$var wire 1 $/ mask_1 [3] $end
$var wire 1 %/ mask_1 [4] $end
$var wire 1 &/ mask_1 [5] $end
$var wire 1 '/ mask_1 [6] $end
$var wire 1 (/ mask_1 [7] $end

$scope module ind_reg1 $end
$var parameter 32 )/ bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 (/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 ~. read [15] $end
$var wire 1 }. read [14] $end
$var wire 1 |. read [13] $end
$var wire 1 {. read [12] $end
$var wire 1 z. read [11] $end
$var wire 1 y. read [10] $end
$var wire 1 x. read [9] $end
$var wire 1 w. read [8] $end
$var wire 1 v. read [7] $end
$var wire 1 u. read [6] $end
$var wire 1 t. read [5] $end
$var wire 1 s. read [4] $end
$var wire 1 r. read [3] $end
$var wire 1 q. read [2] $end
$var wire 1 p. read [1] $end
$var wire 1 o. read [0] $end

$scope module flop[15] $end
$var wire 1 ~. q $end
$var wire 1 */ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 }. q $end
$var wire 1 ,/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 |. q $end
$var wire 1 ./ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 // state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 {. q $end
$var wire 1 0/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 z. q $end
$var wire 1 2/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 y. q $end
$var wire 1 4/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 x. q $end
$var wire 1 6/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 7/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 w. q $end
$var wire 1 8/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 9/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 v. q $end
$var wire 1 :/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 u. q $end
$var wire 1 </ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 t. q $end
$var wire 1 >/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 s. q $end
$var wire 1 @/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 r. q $end
$var wire 1 B/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 q. q $end
$var wire 1 D/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 p. q $end
$var wire 1 F/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 o. q $end
$var wire 1 H/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I/ state $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var parameter 32 J/ bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 '/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 n. read [15] $end
$var wire 1 m. read [14] $end
$var wire 1 l. read [13] $end
$var wire 1 k. read [12] $end
$var wire 1 j. read [11] $end
$var wire 1 i. read [10] $end
$var wire 1 h. read [9] $end
$var wire 1 g. read [8] $end
$var wire 1 f. read [7] $end
$var wire 1 e. read [6] $end
$var wire 1 d. read [5] $end
$var wire 1 c. read [4] $end
$var wire 1 b. read [3] $end
$var wire 1 a. read [2] $end
$var wire 1 `. read [1] $end
$var wire 1 _. read [0] $end

$scope module flop[15] $end
$var wire 1 n. q $end
$var wire 1 K/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 m. q $end
$var wire 1 M/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 l. q $end
$var wire 1 O/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 k. q $end
$var wire 1 Q/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 j. q $end
$var wire 1 S/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 i. q $end
$var wire 1 U/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 h. q $end
$var wire 1 W/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 g. q $end
$var wire 1 Y/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 f. q $end
$var wire 1 [/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 e. q $end
$var wire 1 ]/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 d. q $end
$var wire 1 _/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 c. q $end
$var wire 1 a/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 b. q $end
$var wire 1 c/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 a. q $end
$var wire 1 e/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 `. q $end
$var wire 1 g/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 _. q $end
$var wire 1 i/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j/ state $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var parameter 32 k/ bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 &/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 ^. read [15] $end
$var wire 1 ]. read [14] $end
$var wire 1 \. read [13] $end
$var wire 1 [. read [12] $end
$var wire 1 Z. read [11] $end
$var wire 1 Y. read [10] $end
$var wire 1 X. read [9] $end
$var wire 1 W. read [8] $end
$var wire 1 V. read [7] $end
$var wire 1 U. read [6] $end
$var wire 1 T. read [5] $end
$var wire 1 S. read [4] $end
$var wire 1 R. read [3] $end
$var wire 1 Q. read [2] $end
$var wire 1 P. read [1] $end
$var wire 1 O. read [0] $end

$scope module flop[15] $end
$var wire 1 ^. q $end
$var wire 1 l/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 ]. q $end
$var wire 1 n/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 \. q $end
$var wire 1 p/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 q/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 [. q $end
$var wire 1 r/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 s/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 Z. q $end
$var wire 1 t/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 u/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 Y. q $end
$var wire 1 v/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 w/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 X. q $end
$var wire 1 x/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 y/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 W. q $end
$var wire 1 z/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 V. q $end
$var wire 1 |/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 U. q $end
$var wire 1 ~/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 T. q $end
$var wire 1 "0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 S. q $end
$var wire 1 $0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 R. q $end
$var wire 1 &0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 '0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 Q. q $end
$var wire 1 (0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 P. q $end
$var wire 1 *0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 O. q $end
$var wire 1 ,0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -0 state $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var parameter 32 .0 bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 N. read [15] $end
$var wire 1 M. read [14] $end
$var wire 1 L. read [13] $end
$var wire 1 K. read [12] $end
$var wire 1 J. read [11] $end
$var wire 1 I. read [10] $end
$var wire 1 H. read [9] $end
$var wire 1 G. read [8] $end
$var wire 1 F. read [7] $end
$var wire 1 E. read [6] $end
$var wire 1 D. read [5] $end
$var wire 1 C. read [4] $end
$var wire 1 B. read [3] $end
$var wire 1 A. read [2] $end
$var wire 1 @. read [1] $end
$var wire 1 ?. read [0] $end

$scope module flop[15] $end
$var wire 1 N. q $end
$var wire 1 /0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 00 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 M. q $end
$var wire 1 10 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 20 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 L. q $end
$var wire 1 30 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 40 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 K. q $end
$var wire 1 50 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 60 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 J. q $end
$var wire 1 70 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 80 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 I. q $end
$var wire 1 90 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 H. q $end
$var wire 1 ;0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 G. q $end
$var wire 1 =0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 F. q $end
$var wire 1 ?0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 E. q $end
$var wire 1 A0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 D. q $end
$var wire 1 C0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 C. q $end
$var wire 1 E0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 B. q $end
$var wire 1 G0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 A. q $end
$var wire 1 I0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 @. q $end
$var wire 1 K0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 ?. q $end
$var wire 1 M0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N0 state $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var parameter 32 O0 bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 $/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 >. read [15] $end
$var wire 1 =. read [14] $end
$var wire 1 <. read [13] $end
$var wire 1 ;. read [12] $end
$var wire 1 :. read [11] $end
$var wire 1 9. read [10] $end
$var wire 1 8. read [9] $end
$var wire 1 7. read [8] $end
$var wire 1 6. read [7] $end
$var wire 1 5. read [6] $end
$var wire 1 4. read [5] $end
$var wire 1 3. read [4] $end
$var wire 1 2. read [3] $end
$var wire 1 1. read [2] $end
$var wire 1 0. read [1] $end
$var wire 1 /. read [0] $end

$scope module flop[15] $end
$var wire 1 >. q $end
$var wire 1 P0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 =. q $end
$var wire 1 R0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 <. q $end
$var wire 1 T0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 U0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ;. q $end
$var wire 1 V0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 W0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 :. q $end
$var wire 1 X0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Y0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 9. q $end
$var wire 1 Z0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 8. q $end
$var wire 1 \0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 7. q $end
$var wire 1 ^0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 6. q $end
$var wire 1 `0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 a0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 5. q $end
$var wire 1 b0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 c0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 4. q $end
$var wire 1 d0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 e0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 3. q $end
$var wire 1 f0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 g0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 2. q $end
$var wire 1 h0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 i0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 1. q $end
$var wire 1 j0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 k0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 0. q $end
$var wire 1 l0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 m0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 /. q $end
$var wire 1 n0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 o0 state $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var parameter 32 p0 bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 .. read [15] $end
$var wire 1 -. read [14] $end
$var wire 1 ,. read [13] $end
$var wire 1 +. read [12] $end
$var wire 1 *. read [11] $end
$var wire 1 ). read [10] $end
$var wire 1 (. read [9] $end
$var wire 1 '. read [8] $end
$var wire 1 &. read [7] $end
$var wire 1 %. read [6] $end
$var wire 1 $. read [5] $end
$var wire 1 #. read [4] $end
$var wire 1 ". read [3] $end
$var wire 1 !. read [2] $end
$var wire 1 ~- read [1] $end
$var wire 1 }- read [0] $end

$scope module flop[15] $end
$var wire 1 .. q $end
$var wire 1 q0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 -. q $end
$var wire 1 s0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ,. q $end
$var wire 1 u0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 +. q $end
$var wire 1 w0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 *. q $end
$var wire 1 y0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ). q $end
$var wire 1 {0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 (. q $end
$var wire 1 }0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 '. q $end
$var wire 1 !1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 &. q $end
$var wire 1 #1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 %. q $end
$var wire 1 %1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 $. q $end
$var wire 1 '1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 #. q $end
$var wire 1 )1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *1 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 ". q $end
$var wire 1 +1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,1 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 !. q $end
$var wire 1 -1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .1 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 ~- q $end
$var wire 1 /1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 01 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 }- q $end
$var wire 1 11 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 21 state $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var parameter 32 31 bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 "/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 |- read [15] $end
$var wire 1 {- read [14] $end
$var wire 1 z- read [13] $end
$var wire 1 y- read [12] $end
$var wire 1 x- read [11] $end
$var wire 1 w- read [10] $end
$var wire 1 v- read [9] $end
$var wire 1 u- read [8] $end
$var wire 1 t- read [7] $end
$var wire 1 s- read [6] $end
$var wire 1 r- read [5] $end
$var wire 1 q- read [4] $end
$var wire 1 p- read [3] $end
$var wire 1 o- read [2] $end
$var wire 1 n- read [1] $end
$var wire 1 m- read [0] $end

$scope module flop[15] $end
$var wire 1 |- q $end
$var wire 1 41 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 51 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 {- q $end
$var wire 1 61 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 71 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 z- q $end
$var wire 1 81 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 91 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 y- q $end
$var wire 1 :1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ;1 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 x- q $end
$var wire 1 <1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 =1 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 w- q $end
$var wire 1 >1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ?1 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 v- q $end
$var wire 1 @1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 A1 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 u- q $end
$var wire 1 B1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 C1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 t- q $end
$var wire 1 D1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 E1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 s- q $end
$var wire 1 F1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 G1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 r- q $end
$var wire 1 H1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 I1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 q- q $end
$var wire 1 J1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 K1 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 p- q $end
$var wire 1 L1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 M1 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 o- q $end
$var wire 1 N1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 O1 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 n- q $end
$var wire 1 P1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Q1 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 m- q $end
$var wire 1 R1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 S1 state $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var parameter 32 T1 bitlength $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 !/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 l- read [15] $end
$var wire 1 k- read [14] $end
$var wire 1 j- read [13] $end
$var wire 1 i- read [12] $end
$var wire 1 h- read [11] $end
$var wire 1 g- read [10] $end
$var wire 1 f- read [9] $end
$var wire 1 e- read [8] $end
$var wire 1 d- read [7] $end
$var wire 1 c- read [6] $end
$var wire 1 b- read [5] $end
$var wire 1 a- read [4] $end
$var wire 1 `- read [3] $end
$var wire 1 _- read [2] $end
$var wire 1 ^- read [1] $end
$var wire 1 ]- read [0] $end

$scope module flop[15] $end
$var wire 1 l- q $end
$var wire 1 U1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V1 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 k- q $end
$var wire 1 W1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X1 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 j- q $end
$var wire 1 Y1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z1 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 i- q $end
$var wire 1 [1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \1 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 h- q $end
$var wire 1 ]1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^1 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 g- q $end
$var wire 1 _1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `1 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 f- q $end
$var wire 1 a1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b1 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 e- q $end
$var wire 1 c1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 d- q $end
$var wire 1 e1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 c- q $end
$var wire 1 g1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 b- q $end
$var wire 1 i1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 a- q $end
$var wire 1 k1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l1 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 `- q $end
$var wire 1 m1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n1 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 _- q $end
$var wire 1 o1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p1 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 ^- q $end
$var wire 1 q1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r1 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 ]- q $end
$var wire 1 s1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t1 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 m! inst [15] $end
$var wire 1 n! inst [14] $end
$var wire 1 o! inst [13] $end
$var wire 1 p! inst [12] $end
$var wire 1 q! inst [11] $end
$var wire 1 r! inst [10] $end
$var wire 1 s! inst [9] $end
$var wire 1 t! inst [8] $end
$var wire 1 u! inst [7] $end
$var wire 1 v! inst [6] $end
$var wire 1 w! inst [5] $end
$var wire 1 x! inst [4] $end
$var wire 1 y! inst [3] $end
$var wire 1 z! inst [2] $end
$var wire 1 {! inst [1] $end
$var wire 1 |! inst [0] $end
$var wire 1 $% execute [2] $end
$var wire 1 %% execute [1] $end
$var wire 1 &% execute [0] $end
$var wire 1 S& memory [2] $end
$var wire 1 T& memory [1] $end
$var wire 1 U& memory [0] $end
$var wire 1 [' writeback [2] $end
$var wire 1 \' writeback [1] $end
$var wire 1 ]' writeback [0] $end
$var wire 1 Q" BSrc [1] $end
$var wire 1 R" BSrc [0] $end
$var wire 1 i$ Branch $end
$var wire 1 j$ BranchEx $end
$var wire 1 B) NOPEx $end
$var wire 1 ?) NOPMem $end
$var wire 1 @) NOPWB $end
$var wire 1 n( fetch_stall $end
$var wire 1 T) mem_stall $end
$var wire 1 j( sendNOP $end
$var wire 1 u1 regEqual $end
$var wire 1 v1 regEqual2 $end
$var wire 1 w1 sendNOP_not_st $end
$var wire 1 x1 sendnopout $end
$var wire 1 y1 stinstthing $end
$var wire 1 z1 oneops $end
$var wire 1 {1 RegS [2] $end
$var wire 1 |1 RegS [1] $end
$var wire 1 }1 RegS [0] $end
$var wire 1 ~1 RegT [2] $end
$var wire 1 !2 RegT [1] $end
$var wire 1 "2 RegT [0] $end
$var wire 1 P& WRMEM $end
$var wire 1 J' WRWB $end
$var wire 1 #2 compEx $end
$var wire 1 $2 compMem $end
$var wire 1 %2 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T) mem_stall $end
$var wire 1 n( fetch_stall $end
$var wire 1 Q" BSrc_in [1] $end
$var wire 1 R" BSrc_in [0] $end
$var wire 1 S" BSrc_out [1] $end
$var wire 1 T" BSrc_out [0] $end
$var wire 1 U" InvB_in $end
$var wire 1 V" InvB_out $end
$var wire 1 W" InvA_in $end
$var wire 1 X" InvA_out $end
$var wire 1 ]$ ALUCtrl_in [2] $end
$var wire 1 ^$ ALUCtrl_in [1] $end
$var wire 1 _$ ALUCtrl_in [0] $end
$var wire 1 `$ ALUCtrl_out [2] $end
$var wire 1 a$ ALUCtrl_out [1] $end
$var wire 1 b$ ALUCtrl_out [0] $end
$var wire 1 e$ BranchCtrl_in [1] $end
$var wire 1 f$ BranchCtrl_in [0] $end
$var wire 1 g$ BranchCtrl_out [1] $end
$var wire 1 h$ BranchCtrl_out [0] $end
$var wire 1 i$ branch_in $end
$var wire 1 j$ branch_out $end
$var wire 1 k$ SLBI_in $end
$var wire 1 l$ SLBI_out $end
$var wire 1 m$ SetCtrl3_in [2] $end
$var wire 1 n$ SetCtrl3_in [1] $end
$var wire 1 o$ SetCtrl3_in [0] $end
$var wire 1 p$ SetCtrl3_out [2] $end
$var wire 1 q$ SetCtrl3_out [1] $end
$var wire 1 r$ SetCtrl3_out [0] $end
$var wire 1 O" BTR_in $end
$var wire 1 P" BTR_out $end
$var wire 1 Y" ReadData1_in [15] $end
$var wire 1 Z" ReadData1_in [14] $end
$var wire 1 [" ReadData1_in [13] $end
$var wire 1 \" ReadData1_in [12] $end
$var wire 1 ]" ReadData1_in [11] $end
$var wire 1 ^" ReadData1_in [10] $end
$var wire 1 _" ReadData1_in [9] $end
$var wire 1 `" ReadData1_in [8] $end
$var wire 1 a" ReadData1_in [7] $end
$var wire 1 b" ReadData1_in [6] $end
$var wire 1 c" ReadData1_in [5] $end
$var wire 1 d" ReadData1_in [4] $end
$var wire 1 e" ReadData1_in [3] $end
$var wire 1 f" ReadData1_in [2] $end
$var wire 1 g" ReadData1_in [1] $end
$var wire 1 h" ReadData1_in [0] $end
$var wire 1 i" ReadData1_out [15] $end
$var wire 1 j" ReadData1_out [14] $end
$var wire 1 k" ReadData1_out [13] $end
$var wire 1 l" ReadData1_out [12] $end
$var wire 1 m" ReadData1_out [11] $end
$var wire 1 n" ReadData1_out [10] $end
$var wire 1 o" ReadData1_out [9] $end
$var wire 1 p" ReadData1_out [8] $end
$var wire 1 q" ReadData1_out [7] $end
$var wire 1 r" ReadData1_out [6] $end
$var wire 1 s" ReadData1_out [5] $end
$var wire 1 t" ReadData1_out [4] $end
$var wire 1 u" ReadData1_out [3] $end
$var wire 1 v" ReadData1_out [2] $end
$var wire 1 w" ReadData1_out [1] $end
$var wire 1 x" ReadData1_out [0] $end
$var wire 1 y" ReadData2_in [15] $end
$var wire 1 z" ReadData2_in [14] $end
$var wire 1 {" ReadData2_in [13] $end
$var wire 1 |" ReadData2_in [12] $end
$var wire 1 }" ReadData2_in [11] $end
$var wire 1 ~" ReadData2_in [10] $end
$var wire 1 !# ReadData2_in [9] $end
$var wire 1 "# ReadData2_in [8] $end
$var wire 1 ## ReadData2_in [7] $end
$var wire 1 $# ReadData2_in [6] $end
$var wire 1 %# ReadData2_in [5] $end
$var wire 1 &# ReadData2_in [4] $end
$var wire 1 '# ReadData2_in [3] $end
$var wire 1 (# ReadData2_in [2] $end
$var wire 1 )# ReadData2_in [1] $end
$var wire 1 *# ReadData2_in [0] $end
$var wire 1 +# ReadData2_out [15] $end
$var wire 1 ,# ReadData2_out [14] $end
$var wire 1 -# ReadData2_out [13] $end
$var wire 1 .# ReadData2_out [12] $end
$var wire 1 /# ReadData2_out [11] $end
$var wire 1 0# ReadData2_out [10] $end
$var wire 1 1# ReadData2_out [9] $end
$var wire 1 2# ReadData2_out [8] $end
$var wire 1 3# ReadData2_out [7] $end
$var wire 1 4# ReadData2_out [6] $end
$var wire 1 5# ReadData2_out [5] $end
$var wire 1 6# ReadData2_out [4] $end
$var wire 1 7# ReadData2_out [3] $end
$var wire 1 8# ReadData2_out [2] $end
$var wire 1 9# ReadData2_out [1] $end
$var wire 1 :# ReadData2_out [0] $end
$var wire 1 ;# fourExtend_in [15] $end
$var wire 1 <# fourExtend_in [14] $end
$var wire 1 =# fourExtend_in [13] $end
$var wire 1 ># fourExtend_in [12] $end
$var wire 1 ?# fourExtend_in [11] $end
$var wire 1 @# fourExtend_in [10] $end
$var wire 1 A# fourExtend_in [9] $end
$var wire 1 B# fourExtend_in [8] $end
$var wire 1 C# fourExtend_in [7] $end
$var wire 1 D# fourExtend_in [6] $end
$var wire 1 E# fourExtend_in [5] $end
$var wire 1 F# fourExtend_in [4] $end
$var wire 1 G# fourExtend_in [3] $end
$var wire 1 H# fourExtend_in [2] $end
$var wire 1 I# fourExtend_in [1] $end
$var wire 1 J# fourExtend_in [0] $end
$var wire 1 K# fourExtend_out [15] $end
$var wire 1 L# fourExtend_out [14] $end
$var wire 1 M# fourExtend_out [13] $end
$var wire 1 N# fourExtend_out [12] $end
$var wire 1 O# fourExtend_out [11] $end
$var wire 1 P# fourExtend_out [10] $end
$var wire 1 Q# fourExtend_out [9] $end
$var wire 1 R# fourExtend_out [8] $end
$var wire 1 S# fourExtend_out [7] $end
$var wire 1 T# fourExtend_out [6] $end
$var wire 1 U# fourExtend_out [5] $end
$var wire 1 V# fourExtend_out [4] $end
$var wire 1 W# fourExtend_out [3] $end
$var wire 1 X# fourExtend_out [2] $end
$var wire 1 Y# fourExtend_out [1] $end
$var wire 1 Z# fourExtend_out [0] $end
$var wire 1 [# sevenExtend_in [15] $end
$var wire 1 \# sevenExtend_in [14] $end
$var wire 1 ]# sevenExtend_in [13] $end
$var wire 1 ^# sevenExtend_in [12] $end
$var wire 1 _# sevenExtend_in [11] $end
$var wire 1 `# sevenExtend_in [10] $end
$var wire 1 a# sevenExtend_in [9] $end
$var wire 1 b# sevenExtend_in [8] $end
$var wire 1 c# sevenExtend_in [7] $end
$var wire 1 d# sevenExtend_in [6] $end
$var wire 1 e# sevenExtend_in [5] $end
$var wire 1 f# sevenExtend_in [4] $end
$var wire 1 g# sevenExtend_in [3] $end
$var wire 1 h# sevenExtend_in [2] $end
$var wire 1 i# sevenExtend_in [1] $end
$var wire 1 j# sevenExtend_in [0] $end
$var wire 1 k# sevenExtend_out [15] $end
$var wire 1 l# sevenExtend_out [14] $end
$var wire 1 m# sevenExtend_out [13] $end
$var wire 1 n# sevenExtend_out [12] $end
$var wire 1 o# sevenExtend_out [11] $end
$var wire 1 p# sevenExtend_out [10] $end
$var wire 1 q# sevenExtend_out [9] $end
$var wire 1 r# sevenExtend_out [8] $end
$var wire 1 s# sevenExtend_out [7] $end
$var wire 1 t# sevenExtend_out [6] $end
$var wire 1 u# sevenExtend_out [5] $end
$var wire 1 v# sevenExtend_out [4] $end
$var wire 1 w# sevenExtend_out [3] $end
$var wire 1 x# sevenExtend_out [2] $end
$var wire 1 y# sevenExtend_out [1] $end
$var wire 1 z# sevenExtend_out [0] $end
$var wire 1 =$ shifted_in [15] $end
$var wire 1 >$ shifted_in [14] $end
$var wire 1 ?$ shifted_in [13] $end
$var wire 1 @$ shifted_in [12] $end
$var wire 1 A$ shifted_in [11] $end
$var wire 1 B$ shifted_in [10] $end
$var wire 1 C$ shifted_in [9] $end
$var wire 1 D$ shifted_in [8] $end
$var wire 1 E$ shifted_in [7] $end
$var wire 1 F$ shifted_in [6] $end
$var wire 1 G$ shifted_in [5] $end
$var wire 1 H$ shifted_in [4] $end
$var wire 1 I$ shifted_in [3] $end
$var wire 1 J$ shifted_in [2] $end
$var wire 1 K$ shifted_in [1] $end
$var wire 1 L$ shifted_in [0] $end
$var wire 1 M$ shifted_out [15] $end
$var wire 1 N$ shifted_out [14] $end
$var wire 1 O$ shifted_out [13] $end
$var wire 1 P$ shifted_out [12] $end
$var wire 1 Q$ shifted_out [11] $end
$var wire 1 R$ shifted_out [10] $end
$var wire 1 S$ shifted_out [9] $end
$var wire 1 T$ shifted_out [8] $end
$var wire 1 U$ shifted_out [7] $end
$var wire 1 V$ shifted_out [6] $end
$var wire 1 W$ shifted_out [5] $end
$var wire 1 X$ shifted_out [4] $end
$var wire 1 Y$ shifted_out [3] $end
$var wire 1 Z$ shifted_out [2] $end
$var wire 1 [$ shifted_out [1] $end
$var wire 1 \$ shifted_out [0] $end
$var wire 1 c$ MemWrt_in $end
$var wire 1 d$ MemWrt_out $end
$var wire 1 s$ ALUJMP_in $end
$var wire 1 t$ ALUJMP_out $end
$var wire 1 u$ PC_or_add_in $end
$var wire 1 v$ PC_or_add_out $end
$var wire 1 &2 halt_in $end
$var wire 1 |$ halt_out $end
$var wire 1 {# word_align_jump_in [15] $end
$var wire 1 |# word_align_jump_in [14] $end
$var wire 1 }# word_align_jump_in [13] $end
$var wire 1 ~# word_align_jump_in [12] $end
$var wire 1 !$ word_align_jump_in [11] $end
$var wire 1 "$ word_align_jump_in [10] $end
$var wire 1 #$ word_align_jump_in [9] $end
$var wire 1 $$ word_align_jump_in [8] $end
$var wire 1 %$ word_align_jump_in [7] $end
$var wire 1 &$ word_align_jump_in [6] $end
$var wire 1 '$ word_align_jump_in [5] $end
$var wire 1 ($ word_align_jump_in [4] $end
$var wire 1 )$ word_align_jump_in [3] $end
$var wire 1 *$ word_align_jump_in [2] $end
$var wire 1 +$ word_align_jump_in [1] $end
$var wire 1 ,$ word_align_jump_in [0] $end
$var wire 1 -$ word_align_jump_out [15] $end
$var wire 1 .$ word_align_jump_out [14] $end
$var wire 1 /$ word_align_jump_out [13] $end
$var wire 1 0$ word_align_jump_out [12] $end
$var wire 1 1$ word_align_jump_out [11] $end
$var wire 1 2$ word_align_jump_out [10] $end
$var wire 1 3$ word_align_jump_out [9] $end
$var wire 1 4$ word_align_jump_out [8] $end
$var wire 1 5$ word_align_jump_out [7] $end
$var wire 1 6$ word_align_jump_out [6] $end
$var wire 1 7$ word_align_jump_out [5] $end
$var wire 1 8$ word_align_jump_out [4] $end
$var wire 1 9$ word_align_jump_out [3] $end
$var wire 1 :$ word_align_jump_out [2] $end
$var wire 1 ;$ word_align_jump_out [1] $end
$var wire 1 <$ word_align_jump_out [0] $end
$var wire 1 }$ RegWrt_in $end
$var wire 1 ~$ RegWrt_out $end
$var wire 1 C) SendNOP_In $end
$var wire 1 >) SendNOP_Out $end
$var wire 1 b' MemRd_in $end
$var wire 1 c' MemRd_out $end
$var wire 1 w$ RegSrc_in [1] $end
$var wire 1 x$ RegSrc_in [0] $end
$var wire 1 y$ RegSrc_out [1] $end
$var wire 1 z$ RegSrc_out [0] $end
$var wire 1 /" pc2_in [15] $end
$var wire 1 0" pc2_in [14] $end
$var wire 1 1" pc2_in [13] $end
$var wire 1 2" pc2_in [12] $end
$var wire 1 3" pc2_in [11] $end
$var wire 1 4" pc2_in [10] $end
$var wire 1 5" pc2_in [9] $end
$var wire 1 6" pc2_in [8] $end
$var wire 1 7" pc2_in [7] $end
$var wire 1 8" pc2_in [6] $end
$var wire 1 9" pc2_in [5] $end
$var wire 1 :" pc2_in [4] $end
$var wire 1 ;" pc2_in [3] $end
$var wire 1 <" pc2_in [2] $end
$var wire 1 =" pc2_in [1] $end
$var wire 1 >" pc2_in [0] $end
$var wire 1 ?" pc2_out [15] $end
$var wire 1 @" pc2_out [14] $end
$var wire 1 A" pc2_out [13] $end
$var wire 1 B" pc2_out [12] $end
$var wire 1 C" pc2_out [11] $end
$var wire 1 D" pc2_out [10] $end
$var wire 1 E" pc2_out [9] $end
$var wire 1 F" pc2_out [8] $end
$var wire 1 G" pc2_out [7] $end
$var wire 1 H" pc2_out [6] $end
$var wire 1 I" pc2_out [5] $end
$var wire 1 J" pc2_out [4] $end
$var wire 1 K" pc2_out [3] $end
$var wire 1 L" pc2_out [2] $end
$var wire 1 M" pc2_out [1] $end
$var wire 1 N" pc2_out [0] $end
$var wire 1 !% write_reg_in [2] $end
$var wire 1 "% write_reg_in [1] $end
$var wire 1 #% write_reg_in [0] $end
$var wire 1 $% write_reg_out [2] $end
$var wire 1 %% write_reg_out [1] $end
$var wire 1 &% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 V" q $end
$var wire 1 '2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (2 state $end
$upscope $end

$scope module InvA $end
$var wire 1 X" q $end
$var wire 1 )2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *2 state $end
$upscope $end

$scope module branch $end
$var wire 1 j$ q $end
$var wire 1 +2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,2 state $end
$upscope $end

$scope module SLBI $end
$var wire 1 l$ q $end
$var wire 1 -2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .2 state $end
$upscope $end

$scope module BTR $end
$var wire 1 P" q $end
$var wire 1 /2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 02 state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 d$ q $end
$var wire 1 12 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 22 state $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 t$ q $end
$var wire 1 32 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 42 state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 v$ q $end
$var wire 1 52 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 62 state $end
$upscope $end

$scope module halt $end
$var wire 1 |$ q $end
$var wire 1 72 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 82 state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 ~$ q $end
$var wire 1 92 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :2 state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 >) q $end
$var wire 1 ;2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <2 state $end
$upscope $end

$scope module memrd $end
$var wire 1 c' q $end
$var wire 1 =2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >2 state $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 S" q $end
$var wire 1 ?2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @2 state $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 T" q $end
$var wire 1 A2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B2 state $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 `$ q $end
$var wire 1 C2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D2 state $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 a$ q $end
$var wire 1 E2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F2 state $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 b$ q $end
$var wire 1 G2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H2 state $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 g$ q $end
$var wire 1 I2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J2 state $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 h$ q $end
$var wire 1 K2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L2 state $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 p$ q $end
$var wire 1 M2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N2 state $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 q$ q $end
$var wire 1 O2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P2 state $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 r$ q $end
$var wire 1 Q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R2 state $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 i" q $end
$var wire 1 S2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T2 state $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 j" q $end
$var wire 1 U2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V2 state $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 k" q $end
$var wire 1 W2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X2 state $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 l" q $end
$var wire 1 Y2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z2 state $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 m" q $end
$var wire 1 [2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \2 state $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 n" q $end
$var wire 1 ]2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^2 state $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 o" q $end
$var wire 1 _2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `2 state $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 p" q $end
$var wire 1 a2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b2 state $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 q" q $end
$var wire 1 c2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d2 state $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 r" q $end
$var wire 1 e2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f2 state $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 s" q $end
$var wire 1 g2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h2 state $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 t" q $end
$var wire 1 i2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j2 state $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 u" q $end
$var wire 1 k2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l2 state $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 v" q $end
$var wire 1 m2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n2 state $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 w" q $end
$var wire 1 o2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p2 state $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 x" q $end
$var wire 1 q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r2 state $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 +# q $end
$var wire 1 s2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t2 state $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 ,# q $end
$var wire 1 u2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v2 state $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 -# q $end
$var wire 1 w2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x2 state $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 .# q $end
$var wire 1 y2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z2 state $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 /# q $end
$var wire 1 {2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |2 state $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 0# q $end
$var wire 1 }2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~2 state $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 1# q $end
$var wire 1 !3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "3 state $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 2# q $end
$var wire 1 #3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $3 state $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 3# q $end
$var wire 1 %3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &3 state $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 4# q $end
$var wire 1 '3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (3 state $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 5# q $end
$var wire 1 )3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *3 state $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 6# q $end
$var wire 1 +3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,3 state $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 7# q $end
$var wire 1 -3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .3 state $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 8# q $end
$var wire 1 /3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 03 state $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 9# q $end
$var wire 1 13 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 23 state $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 :# q $end
$var wire 1 33 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 43 state $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 K# q $end
$var wire 1 53 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 63 state $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 L# q $end
$var wire 1 73 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 83 state $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 M# q $end
$var wire 1 93 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :3 state $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 N# q $end
$var wire 1 ;3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <3 state $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 O# q $end
$var wire 1 =3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >3 state $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 P# q $end
$var wire 1 ?3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @3 state $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 Q# q $end
$var wire 1 A3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B3 state $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 R# q $end
$var wire 1 C3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D3 state $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 S# q $end
$var wire 1 E3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F3 state $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 T# q $end
$var wire 1 G3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H3 state $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 U# q $end
$var wire 1 I3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J3 state $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 V# q $end
$var wire 1 K3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L3 state $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 W# q $end
$var wire 1 M3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N3 state $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 X# q $end
$var wire 1 O3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P3 state $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 Y# q $end
$var wire 1 Q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R3 state $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 Z# q $end
$var wire 1 S3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T3 state $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 k# q $end
$var wire 1 U3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V3 state $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 l# q $end
$var wire 1 W3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X3 state $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 m# q $end
$var wire 1 Y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z3 state $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 n# q $end
$var wire 1 [3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \3 state $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 o# q $end
$var wire 1 ]3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^3 state $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 p# q $end
$var wire 1 _3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `3 state $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 q# q $end
$var wire 1 a3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b3 state $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 r# q $end
$var wire 1 c3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d3 state $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 s# q $end
$var wire 1 e3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f3 state $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 t# q $end
$var wire 1 g3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h3 state $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 u# q $end
$var wire 1 i3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j3 state $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 v# q $end
$var wire 1 k3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l3 state $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 w# q $end
$var wire 1 m3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n3 state $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 x# q $end
$var wire 1 o3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p3 state $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 y# q $end
$var wire 1 q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r3 state $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 z# q $end
$var wire 1 s3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t3 state $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 M$ q $end
$var wire 1 u3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v3 state $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 N$ q $end
$var wire 1 w3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x3 state $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 O$ q $end
$var wire 1 y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z3 state $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 P$ q $end
$var wire 1 {3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |3 state $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 Q$ q $end
$var wire 1 }3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~3 state $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 R$ q $end
$var wire 1 !4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "4 state $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 S$ q $end
$var wire 1 #4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $4 state $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 T$ q $end
$var wire 1 %4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &4 state $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 U$ q $end
$var wire 1 '4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (4 state $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 V$ q $end
$var wire 1 )4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *4 state $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 W$ q $end
$var wire 1 +4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,4 state $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 X$ q $end
$var wire 1 -4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .4 state $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 Y$ q $end
$var wire 1 /4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 04 state $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 Z$ q $end
$var wire 1 14 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 24 state $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 [$ q $end
$var wire 1 34 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 44 state $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 \$ q $end
$var wire 1 54 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 64 state $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 -$ q $end
$var wire 1 74 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 84 state $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 .$ q $end
$var wire 1 94 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :4 state $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 /$ q $end
$var wire 1 ;4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <4 state $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 0$ q $end
$var wire 1 =4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >4 state $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 1$ q $end
$var wire 1 ?4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @4 state $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 2$ q $end
$var wire 1 A4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 B4 state $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 3$ q $end
$var wire 1 C4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 D4 state $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 4$ q $end
$var wire 1 E4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 F4 state $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 5$ q $end
$var wire 1 G4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 H4 state $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 6$ q $end
$var wire 1 I4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 J4 state $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 7$ q $end
$var wire 1 K4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 L4 state $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 8$ q $end
$var wire 1 M4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 N4 state $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 9$ q $end
$var wire 1 O4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 P4 state $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 :$ q $end
$var wire 1 Q4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 R4 state $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 ;$ q $end
$var wire 1 S4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 T4 state $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 <$ q $end
$var wire 1 U4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 V4 state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 y$ q $end
$var wire 1 W4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 X4 state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 z$ q $end
$var wire 1 Y4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 Z4 state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 ?" q $end
$var wire 1 [4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \4 state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 @" q $end
$var wire 1 ]4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^4 state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 A" q $end
$var wire 1 _4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `4 state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 B" q $end
$var wire 1 a4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 b4 state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 C" q $end
$var wire 1 c4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 d4 state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 D" q $end
$var wire 1 e4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 f4 state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 E" q $end
$var wire 1 g4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 h4 state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 F" q $end
$var wire 1 i4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 j4 state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 G" q $end
$var wire 1 k4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 l4 state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 H" q $end
$var wire 1 m4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 n4 state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 I" q $end
$var wire 1 o4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 p4 state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 J" q $end
$var wire 1 q4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 r4 state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 K" q $end
$var wire 1 s4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 t4 state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 L" q $end
$var wire 1 u4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 v4 state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 M" q $end
$var wire 1 w4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 x4 state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 N" q $end
$var wire 1 y4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z4 state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 $% q $end
$var wire 1 {4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |4 state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 %% q $end
$var wire 1 }4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~4 state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 &% q $end
$var wire 1 !5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "5 state $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 V" InvB $end
$var wire 1 X" InvA $end
$var wire 1 `$ ALUCtrl [2] $end
$var wire 1 a$ ALUCtrl [1] $end
$var wire 1 b$ ALUCtrl [0] $end
$var wire 1 i" ReadData1 [15] $end
$var wire 1 j" ReadData1 [14] $end
$var wire 1 k" ReadData1 [13] $end
$var wire 1 l" ReadData1 [12] $end
$var wire 1 m" ReadData1 [11] $end
$var wire 1 n" ReadData1 [10] $end
$var wire 1 o" ReadData1 [9] $end
$var wire 1 p" ReadData1 [8] $end
$var wire 1 q" ReadData1 [7] $end
$var wire 1 r" ReadData1 [6] $end
$var wire 1 s" ReadData1 [5] $end
$var wire 1 t" ReadData1 [4] $end
$var wire 1 u" ReadData1 [3] $end
$var wire 1 v" ReadData1 [2] $end
$var wire 1 w" ReadData1 [1] $end
$var wire 1 x" ReadData1 [0] $end
$var wire 1 +# ReadData2 [15] $end
$var wire 1 ,# ReadData2 [14] $end
$var wire 1 -# ReadData2 [13] $end
$var wire 1 .# ReadData2 [12] $end
$var wire 1 /# ReadData2 [11] $end
$var wire 1 0# ReadData2 [10] $end
$var wire 1 1# ReadData2 [9] $end
$var wire 1 2# ReadData2 [8] $end
$var wire 1 3# ReadData2 [7] $end
$var wire 1 4# ReadData2 [6] $end
$var wire 1 5# ReadData2 [5] $end
$var wire 1 6# ReadData2 [4] $end
$var wire 1 7# ReadData2 [3] $end
$var wire 1 8# ReadData2 [2] $end
$var wire 1 9# ReadData2 [1] $end
$var wire 1 :# ReadData2 [0] $end
$var wire 1 K# fourExtend [15] $end
$var wire 1 L# fourExtend [14] $end
$var wire 1 M# fourExtend [13] $end
$var wire 1 N# fourExtend [12] $end
$var wire 1 O# fourExtend [11] $end
$var wire 1 P# fourExtend [10] $end
$var wire 1 Q# fourExtend [9] $end
$var wire 1 R# fourExtend [8] $end
$var wire 1 S# fourExtend [7] $end
$var wire 1 T# fourExtend [6] $end
$var wire 1 U# fourExtend [5] $end
$var wire 1 V# fourExtend [4] $end
$var wire 1 W# fourExtend [3] $end
$var wire 1 X# fourExtend [2] $end
$var wire 1 Y# fourExtend [1] $end
$var wire 1 Z# fourExtend [0] $end
$var wire 1 k# sevenExtend [15] $end
$var wire 1 l# sevenExtend [14] $end
$var wire 1 m# sevenExtend [13] $end
$var wire 1 n# sevenExtend [12] $end
$var wire 1 o# sevenExtend [11] $end
$var wire 1 p# sevenExtend [10] $end
$var wire 1 q# sevenExtend [9] $end
$var wire 1 r# sevenExtend [8] $end
$var wire 1 s# sevenExtend [7] $end
$var wire 1 t# sevenExtend [6] $end
$var wire 1 u# sevenExtend [5] $end
$var wire 1 v# sevenExtend [4] $end
$var wire 1 w# sevenExtend [3] $end
$var wire 1 x# sevenExtend [2] $end
$var wire 1 y# sevenExtend [1] $end
$var wire 1 z# sevenExtend [0] $end
$var wire 1 M$ shifted [15] $end
$var wire 1 N$ shifted [14] $end
$var wire 1 O$ shifted [13] $end
$var wire 1 P$ shifted [12] $end
$var wire 1 Q$ shifted [11] $end
$var wire 1 R$ shifted [10] $end
$var wire 1 S$ shifted [9] $end
$var wire 1 T$ shifted [8] $end
$var wire 1 U$ shifted [7] $end
$var wire 1 V$ shifted [6] $end
$var wire 1 W$ shifted [5] $end
$var wire 1 X$ shifted [4] $end
$var wire 1 Y$ shifted [3] $end
$var wire 1 Z$ shifted [2] $end
$var wire 1 [$ shifted [1] $end
$var wire 1 \$ shifted [0] $end
$var wire 1 g$ BranchCtrl [1] $end
$var wire 1 h$ BranchCtrl [0] $end
$var wire 1 j$ branch $end
$var wire 1 l$ SLBI $end
$var wire 1 p$ SetCtrl3 [2] $end
$var wire 1 q$ SetCtrl3 [1] $end
$var wire 1 r$ SetCtrl3 [0] $end
$var wire 1 P" BTR $end
$var wire 1 )% ALU [15] $end
$var wire 1 *% ALU [14] $end
$var wire 1 +% ALU [13] $end
$var wire 1 ,% ALU [12] $end
$var wire 1 -% ALU [11] $end
$var wire 1 .% ALU [10] $end
$var wire 1 /% ALU [9] $end
$var wire 1 0% ALU [8] $end
$var wire 1 1% ALU [7] $end
$var wire 1 2% ALU [6] $end
$var wire 1 3% ALU [5] $end
$var wire 1 4% ALU [4] $end
$var wire 1 5% ALU [3] $end
$var wire 1 6% ALU [2] $end
$var wire 1 7% ALU [1] $end
$var wire 1 8% ALU [0] $end
$var wire 1 I% BInput [15] $end
$var wire 1 J% BInput [14] $end
$var wire 1 K% BInput [13] $end
$var wire 1 L% BInput [12] $end
$var wire 1 M% BInput [11] $end
$var wire 1 N% BInput [10] $end
$var wire 1 O% BInput [9] $end
$var wire 1 P% BInput [8] $end
$var wire 1 Q% BInput [7] $end
$var wire 1 R% BInput [6] $end
$var wire 1 S% BInput [5] $end
$var wire 1 T% BInput [4] $end
$var wire 1 U% BInput [3] $end
$var wire 1 V% BInput [2] $end
$var wire 1 W% BInput [1] $end
$var wire 1 X% BInput [0] $end
$var wire 1 '% branchtake $end
$var wire 1 #5 possibleslbi [15] $end
$var wire 1 $5 possibleslbi [14] $end
$var wire 1 %5 possibleslbi [13] $end
$var wire 1 &5 possibleslbi [12] $end
$var wire 1 '5 possibleslbi [11] $end
$var wire 1 (5 possibleslbi [10] $end
$var wire 1 )5 possibleslbi [9] $end
$var wire 1 *5 possibleslbi [8] $end
$var wire 1 +5 possibleslbi [7] $end
$var wire 1 ,5 possibleslbi [6] $end
$var wire 1 -5 possibleslbi [5] $end
$var wire 1 .5 possibleslbi [4] $end
$var wire 1 /5 possibleslbi [3] $end
$var wire 1 05 possibleslbi [2] $end
$var wire 1 15 possibleslbi [1] $end
$var wire 1 25 possibleslbi [0] $end
$var wire 1 35 shiftedA [15] $end
$var wire 1 45 shiftedA [14] $end
$var wire 1 55 shiftedA [13] $end
$var wire 1 65 shiftedA [12] $end
$var wire 1 75 shiftedA [11] $end
$var wire 1 85 shiftedA [10] $end
$var wire 1 95 shiftedA [9] $end
$var wire 1 :5 shiftedA [8] $end
$var wire 1 ;5 shiftedA [7] $end
$var wire 1 <5 shiftedA [6] $end
$var wire 1 =5 shiftedA [5] $end
$var wire 1 >5 shiftedA [4] $end
$var wire 1 ?5 shiftedA [3] $end
$var wire 1 @5 shiftedA [2] $end
$var wire 1 A5 shiftedA [1] $end
$var wire 1 B5 shiftedA [0] $end
$var wire 1 C5 slbiOper $end
$var wire 1 D5 aluout [15] $end
$var wire 1 E5 aluout [14] $end
$var wire 1 F5 aluout [13] $end
$var wire 1 G5 aluout [12] $end
$var wire 1 H5 aluout [11] $end
$var wire 1 I5 aluout [10] $end
$var wire 1 J5 aluout [9] $end
$var wire 1 K5 aluout [8] $end
$var wire 1 L5 aluout [7] $end
$var wire 1 M5 aluout [6] $end
$var wire 1 N5 aluout [5] $end
$var wire 1 O5 aluout [4] $end
$var wire 1 P5 aluout [3] $end
$var wire 1 Q5 aluout [2] $end
$var wire 1 R5 aluout [1] $end
$var wire 1 S5 aluout [0] $end
$var wire 1 T5 conditional $end
$var wire 1 U5 CF $end
$var wire 1 V5 Zero $end
$var wire 1 W5 Overflow $end
$var wire 1 X5 Brchcnd $end
$var wire 1 Y5 Oper [1] $end
$var wire 1 Z5 Oper [0] $end
$var wire 1 [5 altb $end
$var wire 1 \5 coout [15] $end
$var wire 1 ]5 coout [14] $end
$var wire 1 ^5 coout [13] $end
$var wire 1 _5 coout [12] $end
$var wire 1 `5 coout [11] $end
$var wire 1 a5 coout [10] $end
$var wire 1 b5 coout [9] $end
$var wire 1 c5 coout [8] $end
$var wire 1 d5 coout [7] $end
$var wire 1 e5 coout [6] $end
$var wire 1 f5 coout [5] $end
$var wire 1 g5 coout [4] $end
$var wire 1 h5 coout [3] $end
$var wire 1 i5 coout [2] $end
$var wire 1 j5 coout [1] $end
$var wire 1 k5 coout [0] $end
$var wire 1 l5 sltoper [1] $end
$var wire 1 m5 sltoper [0] $end
$var wire 1 n5 ltout [15] $end
$var wire 1 o5 ltout [14] $end
$var wire 1 p5 ltout [13] $end
$var wire 1 q5 ltout [12] $end
$var wire 1 r5 ltout [11] $end
$var wire 1 s5 ltout [10] $end
$var wire 1 t5 ltout [9] $end
$var wire 1 u5 ltout [8] $end
$var wire 1 v5 ltout [7] $end
$var wire 1 w5 ltout [6] $end
$var wire 1 x5 ltout [5] $end
$var wire 1 y5 ltout [4] $end
$var wire 1 z5 ltout [3] $end
$var wire 1 {5 ltout [2] $end
$var wire 1 |5 ltout [1] $end
$var wire 1 }5 ltout [0] $end
$var wire 1 ~5 seqoper [1] $end
$var wire 1 !6 seqoper [0] $end
$var wire 1 "6 aeqb $end
$var wire 1 #6 seqout [15] $end
$var wire 1 $6 seqout [14] $end
$var wire 1 %6 seqout [13] $end
$var wire 1 &6 seqout [12] $end
$var wire 1 '6 seqout [11] $end
$var wire 1 (6 seqout [10] $end
$var wire 1 )6 seqout [9] $end
$var wire 1 *6 seqout [8] $end
$var wire 1 +6 seqout [7] $end
$var wire 1 ,6 seqout [6] $end
$var wire 1 -6 seqout [5] $end
$var wire 1 .6 seqout [4] $end
$var wire 1 /6 seqout [3] $end
$var wire 1 06 seqout [2] $end
$var wire 1 16 seqout [1] $end
$var wire 1 26 seqout [0] $end
$var wire 1 36 alteb $end
$var wire 1 46 sleoper [1] $end
$var wire 1 56 sleoper [0] $end
$var wire 1 66 sleout [15] $end
$var wire 1 76 sleout [14] $end
$var wire 1 86 sleout [13] $end
$var wire 1 96 sleout [12] $end
$var wire 1 :6 sleout [11] $end
$var wire 1 ;6 sleout [10] $end
$var wire 1 <6 sleout [9] $end
$var wire 1 =6 sleout [8] $end
$var wire 1 >6 sleout [7] $end
$var wire 1 ?6 sleout [6] $end
$var wire 1 @6 sleout [5] $end
$var wire 1 A6 sleout [4] $end
$var wire 1 B6 sleout [3] $end
$var wire 1 C6 sleout [2] $end
$var wire 1 D6 sleout [1] $end
$var wire 1 E6 sleout [0] $end
$var wire 1 F6 SetCtrl [1] $end
$var wire 1 G6 SetCtrl [0] $end
$var wire 1 H6 carry $end
$var wire 1 I6 SLT $end
$var wire 1 J6 SEQ $end
$var wire 1 K6 SLE $end
$var wire 1 L6 greater $end
$var wire 1 M6 ReverseOut [15] $end
$var wire 1 N6 ReverseOut [14] $end
$var wire 1 O6 ReverseOut [13] $end
$var wire 1 P6 ReverseOut [12] $end
$var wire 1 Q6 ReverseOut [11] $end
$var wire 1 R6 ReverseOut [10] $end
$var wire 1 S6 ReverseOut [9] $end
$var wire 1 T6 ReverseOut [8] $end
$var wire 1 U6 ReverseOut [7] $end
$var wire 1 V6 ReverseOut [6] $end
$var wire 1 W6 ReverseOut [5] $end
$var wire 1 X6 ReverseOut [4] $end
$var wire 1 Y6 ReverseOut [3] $end
$var wire 1 Z6 ReverseOut [2] $end
$var wire 1 [6 ReverseOut [1] $end
$var wire 1 \6 ReverseOut [0] $end
$var wire 1 ]6 reverse [15] $end
$var wire 1 ^6 reverse [14] $end
$var wire 1 _6 reverse [13] $end
$var wire 1 `6 reverse [12] $end
$var wire 1 a6 reverse [11] $end
$var wire 1 b6 reverse [10] $end
$var wire 1 c6 reverse [9] $end
$var wire 1 d6 reverse [8] $end
$var wire 1 e6 reverse [7] $end
$var wire 1 f6 reverse [6] $end
$var wire 1 g6 reverse [5] $end
$var wire 1 h6 reverse [4] $end
$var wire 1 i6 reverse [3] $end
$var wire 1 j6 reverse [2] $end
$var wire 1 k6 reverse [1] $end
$var wire 1 l6 reverse [0] $end

$scope module shift $end
$var parameter 32 m6 OPERAND_WIDTH $end
$var parameter 32 n6 SHAMT_WIDTH $end
$var parameter 32 o6 NUM_OPERATIONS $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 t6 Oper [1] $end
$var wire 1 u6 Oper [0] $end
$var wire 1 35 Out [15] $end
$var wire 1 45 Out [14] $end
$var wire 1 55 Out [13] $end
$var wire 1 65 Out [12] $end
$var wire 1 75 Out [11] $end
$var wire 1 85 Out [10] $end
$var wire 1 95 Out [9] $end
$var wire 1 :5 Out [8] $end
$var wire 1 ;5 Out [7] $end
$var wire 1 <5 Out [6] $end
$var wire 1 =5 Out [5] $end
$var wire 1 >5 Out [4] $end
$var wire 1 ?5 Out [3] $end
$var wire 1 @5 Out [2] $end
$var wire 1 A5 Out [1] $end
$var wire 1 B5 Out [0] $end
$var wire 1 v6 shift_left_r [15] $end
$var wire 1 w6 shift_left_r [14] $end
$var wire 1 x6 shift_left_r [13] $end
$var wire 1 y6 shift_left_r [12] $end
$var wire 1 z6 shift_left_r [11] $end
$var wire 1 {6 shift_left_r [10] $end
$var wire 1 |6 shift_left_r [9] $end
$var wire 1 }6 shift_left_r [8] $end
$var wire 1 ~6 shift_left_r [7] $end
$var wire 1 !7 shift_left_r [6] $end
$var wire 1 "7 shift_left_r [5] $end
$var wire 1 #7 shift_left_r [4] $end
$var wire 1 $7 shift_left_r [3] $end
$var wire 1 %7 shift_left_r [2] $end
$var wire 1 &7 shift_left_r [1] $end
$var wire 1 '7 shift_left_r [0] $end
$var wire 1 (7 rotate_left_r [15] $end
$var wire 1 )7 rotate_left_r [14] $end
$var wire 1 *7 rotate_left_r [13] $end
$var wire 1 +7 rotate_left_r [12] $end
$var wire 1 ,7 rotate_left_r [11] $end
$var wire 1 -7 rotate_left_r [10] $end
$var wire 1 .7 rotate_left_r [9] $end
$var wire 1 /7 rotate_left_r [8] $end
$var wire 1 07 rotate_left_r [7] $end
$var wire 1 17 rotate_left_r [6] $end
$var wire 1 27 rotate_left_r [5] $end
$var wire 1 37 rotate_left_r [4] $end
$var wire 1 47 rotate_left_r [3] $end
$var wire 1 57 rotate_left_r [2] $end
$var wire 1 67 rotate_left_r [1] $end
$var wire 1 77 rotate_left_r [0] $end
$var wire 1 87 shift_right_l_r [15] $end
$var wire 1 97 shift_right_l_r [14] $end
$var wire 1 :7 shift_right_l_r [13] $end
$var wire 1 ;7 shift_right_l_r [12] $end
$var wire 1 <7 shift_right_l_r [11] $end
$var wire 1 =7 shift_right_l_r [10] $end
$var wire 1 >7 shift_right_l_r [9] $end
$var wire 1 ?7 shift_right_l_r [8] $end
$var wire 1 @7 shift_right_l_r [7] $end
$var wire 1 A7 shift_right_l_r [6] $end
$var wire 1 B7 shift_right_l_r [5] $end
$var wire 1 C7 shift_right_l_r [4] $end
$var wire 1 D7 shift_right_l_r [3] $end
$var wire 1 E7 shift_right_l_r [2] $end
$var wire 1 F7 shift_right_l_r [1] $end
$var wire 1 G7 shift_right_l_r [0] $end
$var wire 1 H7 rotate_right_r [15] $end
$var wire 1 I7 rotate_right_r [14] $end
$var wire 1 J7 rotate_right_r [13] $end
$var wire 1 K7 rotate_right_r [12] $end
$var wire 1 L7 rotate_right_r [11] $end
$var wire 1 M7 rotate_right_r [10] $end
$var wire 1 N7 rotate_right_r [9] $end
$var wire 1 O7 rotate_right_r [8] $end
$var wire 1 P7 rotate_right_r [7] $end
$var wire 1 Q7 rotate_right_r [6] $end
$var wire 1 R7 rotate_right_r [5] $end
$var wire 1 S7 rotate_right_r [4] $end
$var wire 1 T7 rotate_right_r [3] $end
$var wire 1 U7 rotate_right_r [2] $end
$var wire 1 V7 rotate_right_r [1] $end
$var wire 1 W7 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 X7 OPERAND_WIDTH $end
$var parameter 32 Y7 SHAMT_WIDTH $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 v6 result [15] $end
$var wire 1 w6 result [14] $end
$var wire 1 x6 result [13] $end
$var wire 1 y6 result [12] $end
$var wire 1 z6 result [11] $end
$var wire 1 {6 result [10] $end
$var wire 1 |6 result [9] $end
$var wire 1 }6 result [8] $end
$var wire 1 ~6 result [7] $end
$var wire 1 !7 result [6] $end
$var wire 1 "7 result [5] $end
$var wire 1 #7 result [4] $end
$var wire 1 $7 result [3] $end
$var wire 1 %7 result [2] $end
$var wire 1 &7 result [1] $end
$var wire 1 '7 result [0] $end
$var wire 1 Z7 temp1 [15] $end
$var wire 1 [7 temp1 [14] $end
$var wire 1 \7 temp1 [13] $end
$var wire 1 ]7 temp1 [12] $end
$var wire 1 ^7 temp1 [11] $end
$var wire 1 _7 temp1 [10] $end
$var wire 1 `7 temp1 [9] $end
$var wire 1 a7 temp1 [8] $end
$var wire 1 b7 temp1 [7] $end
$var wire 1 c7 temp1 [6] $end
$var wire 1 d7 temp1 [5] $end
$var wire 1 e7 temp1 [4] $end
$var wire 1 f7 temp1 [3] $end
$var wire 1 g7 temp1 [2] $end
$var wire 1 h7 temp1 [1] $end
$var wire 1 i7 temp1 [0] $end
$var wire 1 j7 temp2 [15] $end
$var wire 1 k7 temp2 [14] $end
$var wire 1 l7 temp2 [13] $end
$var wire 1 m7 temp2 [12] $end
$var wire 1 n7 temp2 [11] $end
$var wire 1 o7 temp2 [10] $end
$var wire 1 p7 temp2 [9] $end
$var wire 1 q7 temp2 [8] $end
$var wire 1 r7 temp2 [7] $end
$var wire 1 s7 temp2 [6] $end
$var wire 1 t7 temp2 [5] $end
$var wire 1 u7 temp2 [4] $end
$var wire 1 v7 temp2 [3] $end
$var wire 1 w7 temp2 [2] $end
$var wire 1 x7 temp2 [1] $end
$var wire 1 y7 temp2 [0] $end
$var wire 1 z7 temp3 [15] $end
$var wire 1 {7 temp3 [14] $end
$var wire 1 |7 temp3 [13] $end
$var wire 1 }7 temp3 [12] $end
$var wire 1 ~7 temp3 [11] $end
$var wire 1 !8 temp3 [10] $end
$var wire 1 "8 temp3 [9] $end
$var wire 1 #8 temp3 [8] $end
$var wire 1 $8 temp3 [7] $end
$var wire 1 %8 temp3 [6] $end
$var wire 1 &8 temp3 [5] $end
$var wire 1 '8 temp3 [4] $end
$var wire 1 (8 temp3 [3] $end
$var wire 1 )8 temp3 [2] $end
$var wire 1 *8 temp3 [1] $end
$var wire 1 +8 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 ,8 OPERAND_WIDTH $end
$var parameter 32 -8 SHAMT_WIDTH $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 (7 result [15] $end
$var wire 1 )7 result [14] $end
$var wire 1 *7 result [13] $end
$var wire 1 +7 result [12] $end
$var wire 1 ,7 result [11] $end
$var wire 1 -7 result [10] $end
$var wire 1 .7 result [9] $end
$var wire 1 /7 result [8] $end
$var wire 1 07 result [7] $end
$var wire 1 17 result [6] $end
$var wire 1 27 result [5] $end
$var wire 1 37 result [4] $end
$var wire 1 47 result [3] $end
$var wire 1 57 result [2] $end
$var wire 1 67 result [1] $end
$var wire 1 77 result [0] $end
$var wire 1 .8 temp1 [15] $end
$var wire 1 /8 temp1 [14] $end
$var wire 1 08 temp1 [13] $end
$var wire 1 18 temp1 [12] $end
$var wire 1 28 temp1 [11] $end
$var wire 1 38 temp1 [10] $end
$var wire 1 48 temp1 [9] $end
$var wire 1 58 temp1 [8] $end
$var wire 1 68 temp1 [7] $end
$var wire 1 78 temp1 [6] $end
$var wire 1 88 temp1 [5] $end
$var wire 1 98 temp1 [4] $end
$var wire 1 :8 temp1 [3] $end
$var wire 1 ;8 temp1 [2] $end
$var wire 1 <8 temp1 [1] $end
$var wire 1 =8 temp1 [0] $end
$var wire 1 >8 temp2 [15] $end
$var wire 1 ?8 temp2 [14] $end
$var wire 1 @8 temp2 [13] $end
$var wire 1 A8 temp2 [12] $end
$var wire 1 B8 temp2 [11] $end
$var wire 1 C8 temp2 [10] $end
$var wire 1 D8 temp2 [9] $end
$var wire 1 E8 temp2 [8] $end
$var wire 1 F8 temp2 [7] $end
$var wire 1 G8 temp2 [6] $end
$var wire 1 H8 temp2 [5] $end
$var wire 1 I8 temp2 [4] $end
$var wire 1 J8 temp2 [3] $end
$var wire 1 K8 temp2 [2] $end
$var wire 1 L8 temp2 [1] $end
$var wire 1 M8 temp2 [0] $end
$var wire 1 N8 temp3 [15] $end
$var wire 1 O8 temp3 [14] $end
$var wire 1 P8 temp3 [13] $end
$var wire 1 Q8 temp3 [12] $end
$var wire 1 R8 temp3 [11] $end
$var wire 1 S8 temp3 [10] $end
$var wire 1 T8 temp3 [9] $end
$var wire 1 U8 temp3 [8] $end
$var wire 1 V8 temp3 [7] $end
$var wire 1 W8 temp3 [6] $end
$var wire 1 X8 temp3 [5] $end
$var wire 1 Y8 temp3 [4] $end
$var wire 1 Z8 temp3 [3] $end
$var wire 1 [8 temp3 [2] $end
$var wire 1 \8 temp3 [1] $end
$var wire 1 ]8 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 ^8 OPERAND_WIDTH $end
$var parameter 32 _8 SHAMT_WIDTH $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 87 result [15] $end
$var wire 1 97 result [14] $end
$var wire 1 :7 result [13] $end
$var wire 1 ;7 result [12] $end
$var wire 1 <7 result [11] $end
$var wire 1 =7 result [10] $end
$var wire 1 >7 result [9] $end
$var wire 1 ?7 result [8] $end
$var wire 1 @7 result [7] $end
$var wire 1 A7 result [6] $end
$var wire 1 B7 result [5] $end
$var wire 1 C7 result [4] $end
$var wire 1 D7 result [3] $end
$var wire 1 E7 result [2] $end
$var wire 1 F7 result [1] $end
$var wire 1 G7 result [0] $end
$var wire 1 `8 temp1 [15] $end
$var wire 1 a8 temp1 [14] $end
$var wire 1 b8 temp1 [13] $end
$var wire 1 c8 temp1 [12] $end
$var wire 1 d8 temp1 [11] $end
$var wire 1 e8 temp1 [10] $end
$var wire 1 f8 temp1 [9] $end
$var wire 1 g8 temp1 [8] $end
$var wire 1 h8 temp1 [7] $end
$var wire 1 i8 temp1 [6] $end
$var wire 1 j8 temp1 [5] $end
$var wire 1 k8 temp1 [4] $end
$var wire 1 l8 temp1 [3] $end
$var wire 1 m8 temp1 [2] $end
$var wire 1 n8 temp1 [1] $end
$var wire 1 o8 temp1 [0] $end
$var wire 1 p8 temp2 [15] $end
$var wire 1 q8 temp2 [14] $end
$var wire 1 r8 temp2 [13] $end
$var wire 1 s8 temp2 [12] $end
$var wire 1 t8 temp2 [11] $end
$var wire 1 u8 temp2 [10] $end
$var wire 1 v8 temp2 [9] $end
$var wire 1 w8 temp2 [8] $end
$var wire 1 x8 temp2 [7] $end
$var wire 1 y8 temp2 [6] $end
$var wire 1 z8 temp2 [5] $end
$var wire 1 {8 temp2 [4] $end
$var wire 1 |8 temp2 [3] $end
$var wire 1 }8 temp2 [2] $end
$var wire 1 ~8 temp2 [1] $end
$var wire 1 !9 temp2 [0] $end
$var wire 1 "9 temp3 [15] $end
$var wire 1 #9 temp3 [14] $end
$var wire 1 $9 temp3 [13] $end
$var wire 1 %9 temp3 [12] $end
$var wire 1 &9 temp3 [11] $end
$var wire 1 '9 temp3 [10] $end
$var wire 1 (9 temp3 [9] $end
$var wire 1 )9 temp3 [8] $end
$var wire 1 *9 temp3 [7] $end
$var wire 1 +9 temp3 [6] $end
$var wire 1 ,9 temp3 [5] $end
$var wire 1 -9 temp3 [4] $end
$var wire 1 .9 temp3 [3] $end
$var wire 1 /9 temp3 [2] $end
$var wire 1 09 temp3 [1] $end
$var wire 1 19 temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 29 OPERAND_WIDTH $end
$var parameter 32 39 SHAMT_WIDTH $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 H7 result [15] $end
$var wire 1 I7 result [14] $end
$var wire 1 J7 result [13] $end
$var wire 1 K7 result [12] $end
$var wire 1 L7 result [11] $end
$var wire 1 M7 result [10] $end
$var wire 1 N7 result [9] $end
$var wire 1 O7 result [8] $end
$var wire 1 P7 result [7] $end
$var wire 1 Q7 result [6] $end
$var wire 1 R7 result [5] $end
$var wire 1 S7 result [4] $end
$var wire 1 T7 result [3] $end
$var wire 1 U7 result [2] $end
$var wire 1 V7 result [1] $end
$var wire 1 W7 result [0] $end
$var wire 1 49 temp1 [15] $end
$var wire 1 59 temp1 [14] $end
$var wire 1 69 temp1 [13] $end
$var wire 1 79 temp1 [12] $end
$var wire 1 89 temp1 [11] $end
$var wire 1 99 temp1 [10] $end
$var wire 1 :9 temp1 [9] $end
$var wire 1 ;9 temp1 [8] $end
$var wire 1 <9 temp1 [7] $end
$var wire 1 =9 temp1 [6] $end
$var wire 1 >9 temp1 [5] $end
$var wire 1 ?9 temp1 [4] $end
$var wire 1 @9 temp1 [3] $end
$var wire 1 A9 temp1 [2] $end
$var wire 1 B9 temp1 [1] $end
$var wire 1 C9 temp1 [0] $end
$var wire 1 D9 temp2 [15] $end
$var wire 1 E9 temp2 [14] $end
$var wire 1 F9 temp2 [13] $end
$var wire 1 G9 temp2 [12] $end
$var wire 1 H9 temp2 [11] $end
$var wire 1 I9 temp2 [10] $end
$var wire 1 J9 temp2 [9] $end
$var wire 1 K9 temp2 [8] $end
$var wire 1 L9 temp2 [7] $end
$var wire 1 M9 temp2 [6] $end
$var wire 1 N9 temp2 [5] $end
$var wire 1 O9 temp2 [4] $end
$var wire 1 P9 temp2 [3] $end
$var wire 1 Q9 temp2 [2] $end
$var wire 1 R9 temp2 [1] $end
$var wire 1 S9 temp2 [0] $end
$var wire 1 T9 temp3 [15] $end
$var wire 1 U9 temp3 [14] $end
$var wire 1 V9 temp3 [13] $end
$var wire 1 W9 temp3 [12] $end
$var wire 1 X9 temp3 [11] $end
$var wire 1 Y9 temp3 [10] $end
$var wire 1 Z9 temp3 [9] $end
$var wire 1 [9 temp3 [8] $end
$var wire 1 \9 temp3 [7] $end
$var wire 1 ]9 temp3 [6] $end
$var wire 1 ^9 temp3 [5] $end
$var wire 1 _9 temp3 [4] $end
$var wire 1 `9 temp3 [3] $end
$var wire 1 a9 temp3 [2] $end
$var wire 1 b9 temp3 [1] $end
$var wire 1 c9 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 d9 OPERAND_WIDTH $end
$var parameter 32 e9 NUM_OPERATIONS $end
$var wire 1 #5 InA [15] $end
$var wire 1 $5 InA [14] $end
$var wire 1 %5 InA [13] $end
$var wire 1 &5 InA [12] $end
$var wire 1 '5 InA [11] $end
$var wire 1 (5 InA [10] $end
$var wire 1 )5 InA [9] $end
$var wire 1 *5 InA [8] $end
$var wire 1 +5 InA [7] $end
$var wire 1 ,5 InA [6] $end
$var wire 1 -5 InA [5] $end
$var wire 1 .5 InA [4] $end
$var wire 1 /5 InA [3] $end
$var wire 1 05 InA [2] $end
$var wire 1 15 InA [1] $end
$var wire 1 25 InA [0] $end
$var wire 1 I% InB [15] $end
$var wire 1 J% InB [14] $end
$var wire 1 K% InB [13] $end
$var wire 1 L% InB [12] $end
$var wire 1 M% InB [11] $end
$var wire 1 N% InB [10] $end
$var wire 1 O% InB [9] $end
$var wire 1 P% InB [8] $end
$var wire 1 Q% InB [7] $end
$var wire 1 R% InB [6] $end
$var wire 1 S% InB [5] $end
$var wire 1 T% InB [4] $end
$var wire 1 U% InB [3] $end
$var wire 1 V% InB [2] $end
$var wire 1 W% InB [1] $end
$var wire 1 X% InB [0] $end
$var wire 1 f9 Cin $end
$var wire 1 `$ Oper [2] $end
$var wire 1 a$ Oper [1] $end
$var wire 1 b$ Oper [0] $end
$var wire 1 X" invA $end
$var wire 1 V" invB $end
$var wire 1 g9 sign $end
$var wire 1 D5 Out [15] $end
$var wire 1 E5 Out [14] $end
$var wire 1 F5 Out [13] $end
$var wire 1 G5 Out [12] $end
$var wire 1 H5 Out [11] $end
$var wire 1 I5 Out [10] $end
$var wire 1 J5 Out [9] $end
$var wire 1 K5 Out [8] $end
$var wire 1 L5 Out [7] $end
$var wire 1 M5 Out [6] $end
$var wire 1 N5 Out [5] $end
$var wire 1 O5 Out [4] $end
$var wire 1 P5 Out [3] $end
$var wire 1 Q5 Out [2] $end
$var wire 1 R5 Out [1] $end
$var wire 1 S5 Out [0] $end
$var wire 1 T5 signOut $end
$var wire 1 W5 Ofl $end
$var wire 1 V5 Zero $end
$var wire 1 U5 carryFlag $end
$var wire 1 h9 InA_invA [15] $end
$var wire 1 i9 InA_invA [14] $end
$var wire 1 j9 InA_invA [13] $end
$var wire 1 k9 InA_invA [12] $end
$var wire 1 l9 InA_invA [11] $end
$var wire 1 m9 InA_invA [10] $end
$var wire 1 n9 InA_invA [9] $end
$var wire 1 o9 InA_invA [8] $end
$var wire 1 p9 InA_invA [7] $end
$var wire 1 q9 InA_invA [6] $end
$var wire 1 r9 InA_invA [5] $end
$var wire 1 s9 InA_invA [4] $end
$var wire 1 t9 InA_invA [3] $end
$var wire 1 u9 InA_invA [2] $end
$var wire 1 v9 InA_invA [1] $end
$var wire 1 w9 InA_invA [0] $end
$var wire 1 x9 InB_invB [15] $end
$var wire 1 y9 InB_invB [14] $end
$var wire 1 z9 InB_invB [13] $end
$var wire 1 {9 InB_invB [12] $end
$var wire 1 |9 InB_invB [11] $end
$var wire 1 }9 InB_invB [10] $end
$var wire 1 ~9 InB_invB [9] $end
$var wire 1 !: InB_invB [8] $end
$var wire 1 ": InB_invB [7] $end
$var wire 1 #: InB_invB [6] $end
$var wire 1 $: InB_invB [5] $end
$var wire 1 %: InB_invB [4] $end
$var wire 1 &: InB_invB [3] $end
$var wire 1 ': InB_invB [2] $end
$var wire 1 (: InB_invB [1] $end
$var wire 1 ): InB_invB [0] $end
$var wire 1 *: barrel [15] $end
$var wire 1 +: barrel [14] $end
$var wire 1 ,: barrel [13] $end
$var wire 1 -: barrel [12] $end
$var wire 1 .: barrel [11] $end
$var wire 1 /: barrel [10] $end
$var wire 1 0: barrel [9] $end
$var wire 1 1: barrel [8] $end
$var wire 1 2: barrel [7] $end
$var wire 1 3: barrel [6] $end
$var wire 1 4: barrel [5] $end
$var wire 1 5: barrel [4] $end
$var wire 1 6: barrel [3] $end
$var wire 1 7: barrel [2] $end
$var wire 1 8: barrel [1] $end
$var wire 1 9: barrel [0] $end
$var wire 1 :: logic_gates_r [15] $end
$var wire 1 ;: logic_gates_r [14] $end
$var wire 1 <: logic_gates_r [13] $end
$var wire 1 =: logic_gates_r [12] $end
$var wire 1 >: logic_gates_r [11] $end
$var wire 1 ?: logic_gates_r [10] $end
$var wire 1 @: logic_gates_r [9] $end
$var wire 1 A: logic_gates_r [8] $end
$var wire 1 B: logic_gates_r [7] $end
$var wire 1 C: logic_gates_r [6] $end
$var wire 1 D: logic_gates_r [5] $end
$var wire 1 E: logic_gates_r [4] $end
$var wire 1 F: logic_gates_r [3] $end
$var wire 1 G: logic_gates_r [2] $end
$var wire 1 H: logic_gates_r [1] $end
$var wire 1 I: logic_gates_r [0] $end
$var wire 1 J: addition [15] $end
$var wire 1 K: addition [14] $end
$var wire 1 L: addition [13] $end
$var wire 1 M: addition [12] $end
$var wire 1 N: addition [11] $end
$var wire 1 O: addition [10] $end
$var wire 1 P: addition [9] $end
$var wire 1 Q: addition [8] $end
$var wire 1 R: addition [7] $end
$var wire 1 S: addition [6] $end
$var wire 1 T: addition [5] $end
$var wire 1 U: addition [4] $end
$var wire 1 V: addition [3] $end
$var wire 1 W: addition [2] $end
$var wire 1 X: addition [1] $end
$var wire 1 Y: addition [0] $end
$var wire 1 Z: addition_logic [15] $end
$var wire 1 [: addition_logic [14] $end
$var wire 1 \: addition_logic [13] $end
$var wire 1 ]: addition_logic [12] $end
$var wire 1 ^: addition_logic [11] $end
$var wire 1 _: addition_logic [10] $end
$var wire 1 `: addition_logic [9] $end
$var wire 1 a: addition_logic [8] $end
$var wire 1 b: addition_logic [7] $end
$var wire 1 c: addition_logic [6] $end
$var wire 1 d: addition_logic [5] $end
$var wire 1 e: addition_logic [4] $end
$var wire 1 f: addition_logic [3] $end
$var wire 1 g: addition_logic [2] $end
$var wire 1 h: addition_logic [1] $end
$var wire 1 i: addition_logic [0] $end
$var wire 1 j: carry $end
$var wire 1 k: signed_over $end
$var wire 1 l: less $end

$scope module shift $end
$var parameter 32 m: OPERAND_WIDTH $end
$var parameter 32 n: SHAMT_WIDTH $end
$var parameter 32 o: NUM_OPERATIONS $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 a$ Oper [1] $end
$var wire 1 b$ Oper [0] $end
$var wire 1 *: Out [15] $end
$var wire 1 +: Out [14] $end
$var wire 1 ,: Out [13] $end
$var wire 1 -: Out [12] $end
$var wire 1 .: Out [11] $end
$var wire 1 /: Out [10] $end
$var wire 1 0: Out [9] $end
$var wire 1 1: Out [8] $end
$var wire 1 2: Out [7] $end
$var wire 1 3: Out [6] $end
$var wire 1 4: Out [5] $end
$var wire 1 5: Out [4] $end
$var wire 1 6: Out [3] $end
$var wire 1 7: Out [2] $end
$var wire 1 8: Out [1] $end
$var wire 1 9: Out [0] $end
$var wire 1 p: shift_left_r [15] $end
$var wire 1 q: shift_left_r [14] $end
$var wire 1 r: shift_left_r [13] $end
$var wire 1 s: shift_left_r [12] $end
$var wire 1 t: shift_left_r [11] $end
$var wire 1 u: shift_left_r [10] $end
$var wire 1 v: shift_left_r [9] $end
$var wire 1 w: shift_left_r [8] $end
$var wire 1 x: shift_left_r [7] $end
$var wire 1 y: shift_left_r [6] $end
$var wire 1 z: shift_left_r [5] $end
$var wire 1 {: shift_left_r [4] $end
$var wire 1 |: shift_left_r [3] $end
$var wire 1 }: shift_left_r [2] $end
$var wire 1 ~: shift_left_r [1] $end
$var wire 1 !; shift_left_r [0] $end
$var wire 1 "; rotate_left_r [15] $end
$var wire 1 #; rotate_left_r [14] $end
$var wire 1 $; rotate_left_r [13] $end
$var wire 1 %; rotate_left_r [12] $end
$var wire 1 &; rotate_left_r [11] $end
$var wire 1 '; rotate_left_r [10] $end
$var wire 1 (; rotate_left_r [9] $end
$var wire 1 ); rotate_left_r [8] $end
$var wire 1 *; rotate_left_r [7] $end
$var wire 1 +; rotate_left_r [6] $end
$var wire 1 ,; rotate_left_r [5] $end
$var wire 1 -; rotate_left_r [4] $end
$var wire 1 .; rotate_left_r [3] $end
$var wire 1 /; rotate_left_r [2] $end
$var wire 1 0; rotate_left_r [1] $end
$var wire 1 1; rotate_left_r [0] $end
$var wire 1 2; shift_right_l_r [15] $end
$var wire 1 3; shift_right_l_r [14] $end
$var wire 1 4; shift_right_l_r [13] $end
$var wire 1 5; shift_right_l_r [12] $end
$var wire 1 6; shift_right_l_r [11] $end
$var wire 1 7; shift_right_l_r [10] $end
$var wire 1 8; shift_right_l_r [9] $end
$var wire 1 9; shift_right_l_r [8] $end
$var wire 1 :; shift_right_l_r [7] $end
$var wire 1 ;; shift_right_l_r [6] $end
$var wire 1 <; shift_right_l_r [5] $end
$var wire 1 =; shift_right_l_r [4] $end
$var wire 1 >; shift_right_l_r [3] $end
$var wire 1 ?; shift_right_l_r [2] $end
$var wire 1 @; shift_right_l_r [1] $end
$var wire 1 A; shift_right_l_r [0] $end
$var wire 1 B; rotate_right_r [15] $end
$var wire 1 C; rotate_right_r [14] $end
$var wire 1 D; rotate_right_r [13] $end
$var wire 1 E; rotate_right_r [12] $end
$var wire 1 F; rotate_right_r [11] $end
$var wire 1 G; rotate_right_r [10] $end
$var wire 1 H; rotate_right_r [9] $end
$var wire 1 I; rotate_right_r [8] $end
$var wire 1 J; rotate_right_r [7] $end
$var wire 1 K; rotate_right_r [6] $end
$var wire 1 L; rotate_right_r [5] $end
$var wire 1 M; rotate_right_r [4] $end
$var wire 1 N; rotate_right_r [3] $end
$var wire 1 O; rotate_right_r [2] $end
$var wire 1 P; rotate_right_r [1] $end
$var wire 1 Q; rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 R; OPERAND_WIDTH $end
$var parameter 32 S; SHAMT_WIDTH $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 p: result [15] $end
$var wire 1 q: result [14] $end
$var wire 1 r: result [13] $end
$var wire 1 s: result [12] $end
$var wire 1 t: result [11] $end
$var wire 1 u: result [10] $end
$var wire 1 v: result [9] $end
$var wire 1 w: result [8] $end
$var wire 1 x: result [7] $end
$var wire 1 y: result [6] $end
$var wire 1 z: result [5] $end
$var wire 1 {: result [4] $end
$var wire 1 |: result [3] $end
$var wire 1 }: result [2] $end
$var wire 1 ~: result [1] $end
$var wire 1 !; result [0] $end
$var wire 1 T; temp1 [15] $end
$var wire 1 U; temp1 [14] $end
$var wire 1 V; temp1 [13] $end
$var wire 1 W; temp1 [12] $end
$var wire 1 X; temp1 [11] $end
$var wire 1 Y; temp1 [10] $end
$var wire 1 Z; temp1 [9] $end
$var wire 1 [; temp1 [8] $end
$var wire 1 \; temp1 [7] $end
$var wire 1 ]; temp1 [6] $end
$var wire 1 ^; temp1 [5] $end
$var wire 1 _; temp1 [4] $end
$var wire 1 `; temp1 [3] $end
$var wire 1 a; temp1 [2] $end
$var wire 1 b; temp1 [1] $end
$var wire 1 c; temp1 [0] $end
$var wire 1 d; temp2 [15] $end
$var wire 1 e; temp2 [14] $end
$var wire 1 f; temp2 [13] $end
$var wire 1 g; temp2 [12] $end
$var wire 1 h; temp2 [11] $end
$var wire 1 i; temp2 [10] $end
$var wire 1 j; temp2 [9] $end
$var wire 1 k; temp2 [8] $end
$var wire 1 l; temp2 [7] $end
$var wire 1 m; temp2 [6] $end
$var wire 1 n; temp2 [5] $end
$var wire 1 o; temp2 [4] $end
$var wire 1 p; temp2 [3] $end
$var wire 1 q; temp2 [2] $end
$var wire 1 r; temp2 [1] $end
$var wire 1 s; temp2 [0] $end
$var wire 1 t; temp3 [15] $end
$var wire 1 u; temp3 [14] $end
$var wire 1 v; temp3 [13] $end
$var wire 1 w; temp3 [12] $end
$var wire 1 x; temp3 [11] $end
$var wire 1 y; temp3 [10] $end
$var wire 1 z; temp3 [9] $end
$var wire 1 {; temp3 [8] $end
$var wire 1 |; temp3 [7] $end
$var wire 1 }; temp3 [6] $end
$var wire 1 ~; temp3 [5] $end
$var wire 1 !< temp3 [4] $end
$var wire 1 "< temp3 [3] $end
$var wire 1 #< temp3 [2] $end
$var wire 1 $< temp3 [1] $end
$var wire 1 %< temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 &< OPERAND_WIDTH $end
$var parameter 32 '< SHAMT_WIDTH $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 "; result [15] $end
$var wire 1 #; result [14] $end
$var wire 1 $; result [13] $end
$var wire 1 %; result [12] $end
$var wire 1 &; result [11] $end
$var wire 1 '; result [10] $end
$var wire 1 (; result [9] $end
$var wire 1 ); result [8] $end
$var wire 1 *; result [7] $end
$var wire 1 +; result [6] $end
$var wire 1 ,; result [5] $end
$var wire 1 -; result [4] $end
$var wire 1 .; result [3] $end
$var wire 1 /; result [2] $end
$var wire 1 0; result [1] $end
$var wire 1 1; result [0] $end
$var wire 1 (< temp1 [15] $end
$var wire 1 )< temp1 [14] $end
$var wire 1 *< temp1 [13] $end
$var wire 1 +< temp1 [12] $end
$var wire 1 ,< temp1 [11] $end
$var wire 1 -< temp1 [10] $end
$var wire 1 .< temp1 [9] $end
$var wire 1 /< temp1 [8] $end
$var wire 1 0< temp1 [7] $end
$var wire 1 1< temp1 [6] $end
$var wire 1 2< temp1 [5] $end
$var wire 1 3< temp1 [4] $end
$var wire 1 4< temp1 [3] $end
$var wire 1 5< temp1 [2] $end
$var wire 1 6< temp1 [1] $end
$var wire 1 7< temp1 [0] $end
$var wire 1 8< temp2 [15] $end
$var wire 1 9< temp2 [14] $end
$var wire 1 :< temp2 [13] $end
$var wire 1 ;< temp2 [12] $end
$var wire 1 << temp2 [11] $end
$var wire 1 =< temp2 [10] $end
$var wire 1 >< temp2 [9] $end
$var wire 1 ?< temp2 [8] $end
$var wire 1 @< temp2 [7] $end
$var wire 1 A< temp2 [6] $end
$var wire 1 B< temp2 [5] $end
$var wire 1 C< temp2 [4] $end
$var wire 1 D< temp2 [3] $end
$var wire 1 E< temp2 [2] $end
$var wire 1 F< temp2 [1] $end
$var wire 1 G< temp2 [0] $end
$var wire 1 H< temp3 [15] $end
$var wire 1 I< temp3 [14] $end
$var wire 1 J< temp3 [13] $end
$var wire 1 K< temp3 [12] $end
$var wire 1 L< temp3 [11] $end
$var wire 1 M< temp3 [10] $end
$var wire 1 N< temp3 [9] $end
$var wire 1 O< temp3 [8] $end
$var wire 1 P< temp3 [7] $end
$var wire 1 Q< temp3 [6] $end
$var wire 1 R< temp3 [5] $end
$var wire 1 S< temp3 [4] $end
$var wire 1 T< temp3 [3] $end
$var wire 1 U< temp3 [2] $end
$var wire 1 V< temp3 [1] $end
$var wire 1 W< temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 X< OPERAND_WIDTH $end
$var parameter 32 Y< SHAMT_WIDTH $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 2; result [15] $end
$var wire 1 3; result [14] $end
$var wire 1 4; result [13] $end
$var wire 1 5; result [12] $end
$var wire 1 6; result [11] $end
$var wire 1 7; result [10] $end
$var wire 1 8; result [9] $end
$var wire 1 9; result [8] $end
$var wire 1 :; result [7] $end
$var wire 1 ;; result [6] $end
$var wire 1 <; result [5] $end
$var wire 1 =; result [4] $end
$var wire 1 >; result [3] $end
$var wire 1 ?; result [2] $end
$var wire 1 @; result [1] $end
$var wire 1 A; result [0] $end
$var wire 1 Z< temp1 [15] $end
$var wire 1 [< temp1 [14] $end
$var wire 1 \< temp1 [13] $end
$var wire 1 ]< temp1 [12] $end
$var wire 1 ^< temp1 [11] $end
$var wire 1 _< temp1 [10] $end
$var wire 1 `< temp1 [9] $end
$var wire 1 a< temp1 [8] $end
$var wire 1 b< temp1 [7] $end
$var wire 1 c< temp1 [6] $end
$var wire 1 d< temp1 [5] $end
$var wire 1 e< temp1 [4] $end
$var wire 1 f< temp1 [3] $end
$var wire 1 g< temp1 [2] $end
$var wire 1 h< temp1 [1] $end
$var wire 1 i< temp1 [0] $end
$var wire 1 j< temp2 [15] $end
$var wire 1 k< temp2 [14] $end
$var wire 1 l< temp2 [13] $end
$var wire 1 m< temp2 [12] $end
$var wire 1 n< temp2 [11] $end
$var wire 1 o< temp2 [10] $end
$var wire 1 p< temp2 [9] $end
$var wire 1 q< temp2 [8] $end
$var wire 1 r< temp2 [7] $end
$var wire 1 s< temp2 [6] $end
$var wire 1 t< temp2 [5] $end
$var wire 1 u< temp2 [4] $end
$var wire 1 v< temp2 [3] $end
$var wire 1 w< temp2 [2] $end
$var wire 1 x< temp2 [1] $end
$var wire 1 y< temp2 [0] $end
$var wire 1 z< temp3 [15] $end
$var wire 1 {< temp3 [14] $end
$var wire 1 |< temp3 [13] $end
$var wire 1 }< temp3 [12] $end
$var wire 1 ~< temp3 [11] $end
$var wire 1 != temp3 [10] $end
$var wire 1 "= temp3 [9] $end
$var wire 1 #= temp3 [8] $end
$var wire 1 $= temp3 [7] $end
$var wire 1 %= temp3 [6] $end
$var wire 1 &= temp3 [5] $end
$var wire 1 '= temp3 [4] $end
$var wire 1 (= temp3 [3] $end
$var wire 1 )= temp3 [2] $end
$var wire 1 *= temp3 [1] $end
$var wire 1 += temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 ,= OPERAND_WIDTH $end
$var parameter 32 -= SHAMT_WIDTH $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 B; result [15] $end
$var wire 1 C; result [14] $end
$var wire 1 D; result [13] $end
$var wire 1 E; result [12] $end
$var wire 1 F; result [11] $end
$var wire 1 G; result [10] $end
$var wire 1 H; result [9] $end
$var wire 1 I; result [8] $end
$var wire 1 J; result [7] $end
$var wire 1 K; result [6] $end
$var wire 1 L; result [5] $end
$var wire 1 M; result [4] $end
$var wire 1 N; result [3] $end
$var wire 1 O; result [2] $end
$var wire 1 P; result [1] $end
$var wire 1 Q; result [0] $end
$var wire 1 .= temp1 [15] $end
$var wire 1 /= temp1 [14] $end
$var wire 1 0= temp1 [13] $end
$var wire 1 1= temp1 [12] $end
$var wire 1 2= temp1 [11] $end
$var wire 1 3= temp1 [10] $end
$var wire 1 4= temp1 [9] $end
$var wire 1 5= temp1 [8] $end
$var wire 1 6= temp1 [7] $end
$var wire 1 7= temp1 [6] $end
$var wire 1 8= temp1 [5] $end
$var wire 1 9= temp1 [4] $end
$var wire 1 := temp1 [3] $end
$var wire 1 ;= temp1 [2] $end
$var wire 1 <= temp1 [1] $end
$var wire 1 == temp1 [0] $end
$var wire 1 >= temp2 [15] $end
$var wire 1 ?= temp2 [14] $end
$var wire 1 @= temp2 [13] $end
$var wire 1 A= temp2 [12] $end
$var wire 1 B= temp2 [11] $end
$var wire 1 C= temp2 [10] $end
$var wire 1 D= temp2 [9] $end
$var wire 1 E= temp2 [8] $end
$var wire 1 F= temp2 [7] $end
$var wire 1 G= temp2 [6] $end
$var wire 1 H= temp2 [5] $end
$var wire 1 I= temp2 [4] $end
$var wire 1 J= temp2 [3] $end
$var wire 1 K= temp2 [2] $end
$var wire 1 L= temp2 [1] $end
$var wire 1 M= temp2 [0] $end
$var wire 1 N= temp3 [15] $end
$var wire 1 O= temp3 [14] $end
$var wire 1 P= temp3 [13] $end
$var wire 1 Q= temp3 [12] $end
$var wire 1 R= temp3 [11] $end
$var wire 1 S= temp3 [10] $end
$var wire 1 T= temp3 [9] $end
$var wire 1 U= temp3 [8] $end
$var wire 1 V= temp3 [7] $end
$var wire 1 W= temp3 [6] $end
$var wire 1 X= temp3 [5] $end
$var wire 1 Y= temp3 [4] $end
$var wire 1 Z= temp3 [3] $end
$var wire 1 [= temp3 [2] $end
$var wire 1 \= temp3 [1] $end
$var wire 1 ]= temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var parameter 32 ^= OPERAND_WIDTH $end
$var parameter 32 _= NUM_OPERATIONS $end
$var wire 1 h9 A [15] $end
$var wire 1 i9 A [14] $end
$var wire 1 j9 A [13] $end
$var wire 1 k9 A [12] $end
$var wire 1 l9 A [11] $end
$var wire 1 m9 A [10] $end
$var wire 1 n9 A [9] $end
$var wire 1 o9 A [8] $end
$var wire 1 p9 A [7] $end
$var wire 1 q9 A [6] $end
$var wire 1 r9 A [5] $end
$var wire 1 s9 A [4] $end
$var wire 1 t9 A [3] $end
$var wire 1 u9 A [2] $end
$var wire 1 v9 A [1] $end
$var wire 1 w9 A [0] $end
$var wire 1 x9 B [15] $end
$var wire 1 y9 B [14] $end
$var wire 1 z9 B [13] $end
$var wire 1 {9 B [12] $end
$var wire 1 |9 B [11] $end
$var wire 1 }9 B [10] $end
$var wire 1 ~9 B [9] $end
$var wire 1 !: B [8] $end
$var wire 1 ": B [7] $end
$var wire 1 #: B [6] $end
$var wire 1 $: B [5] $end
$var wire 1 %: B [4] $end
$var wire 1 &: B [3] $end
$var wire 1 ': B [2] $end
$var wire 1 (: B [1] $end
$var wire 1 ): B [0] $end
$var wire 1 a$ Oper [1] $end
$var wire 1 b$ Oper [0] $end
$var wire 1 :: Result [15] $end
$var wire 1 ;: Result [14] $end
$var wire 1 <: Result [13] $end
$var wire 1 =: Result [12] $end
$var wire 1 >: Result [11] $end
$var wire 1 ?: Result [10] $end
$var wire 1 @: Result [9] $end
$var wire 1 A: Result [8] $end
$var wire 1 B: Result [7] $end
$var wire 1 C: Result [6] $end
$var wire 1 D: Result [5] $end
$var wire 1 E: Result [4] $end
$var wire 1 F: Result [3] $end
$var wire 1 G: Result [2] $end
$var wire 1 H: Result [1] $end
$var wire 1 I: Result [0] $end
$upscope $end

$scope module adding $end
$var parameter 32 `= N $end
$var wire 1 J: sum [15] $end
$var wire 1 K: sum [14] $end
$var wire 1 L: sum [13] $end
$var wire 1 M: sum [12] $end
$var wire 1 N: sum [11] $end
$var wire 1 O: sum [10] $end
$var wire 1 P: sum [9] $end
$var wire 1 Q: sum [8] $end
$var wire 1 R: sum [7] $end
$var wire 1 S: sum [6] $end
$var wire 1 T: sum [5] $end
$var wire 1 U: sum [4] $end
$var wire 1 V: sum [3] $end
$var wire 1 W: sum [2] $end
$var wire 1 X: sum [1] $end
$var wire 1 Y: sum [0] $end
$var wire 1 j: c_out $end
$var wire 1 h9 a [15] $end
$var wire 1 i9 a [14] $end
$var wire 1 j9 a [13] $end
$var wire 1 k9 a [12] $end
$var wire 1 l9 a [11] $end
$var wire 1 m9 a [10] $end
$var wire 1 n9 a [9] $end
$var wire 1 o9 a [8] $end
$var wire 1 p9 a [7] $end
$var wire 1 q9 a [6] $end
$var wire 1 r9 a [5] $end
$var wire 1 s9 a [4] $end
$var wire 1 t9 a [3] $end
$var wire 1 u9 a [2] $end
$var wire 1 v9 a [1] $end
$var wire 1 w9 a [0] $end
$var wire 1 x9 b [15] $end
$var wire 1 y9 b [14] $end
$var wire 1 z9 b [13] $end
$var wire 1 {9 b [12] $end
$var wire 1 |9 b [11] $end
$var wire 1 }9 b [10] $end
$var wire 1 ~9 b [9] $end
$var wire 1 !: b [8] $end
$var wire 1 ": b [7] $end
$var wire 1 #: b [6] $end
$var wire 1 $: b [5] $end
$var wire 1 %: b [4] $end
$var wire 1 &: b [3] $end
$var wire 1 ': b [2] $end
$var wire 1 (: b [1] $end
$var wire 1 ): b [0] $end
$var wire 1 f9 c_in $end
$var wire 1 a= gen [15] $end
$var wire 1 b= gen [14] $end
$var wire 1 c= gen [13] $end
$var wire 1 d= gen [12] $end
$var wire 1 e= gen [11] $end
$var wire 1 f= gen [10] $end
$var wire 1 g= gen [9] $end
$var wire 1 h= gen [8] $end
$var wire 1 i= gen [7] $end
$var wire 1 j= gen [6] $end
$var wire 1 k= gen [5] $end
$var wire 1 l= gen [4] $end
$var wire 1 m= gen [3] $end
$var wire 1 n= gen [2] $end
$var wire 1 o= gen [1] $end
$var wire 1 p= gen [0] $end
$var wire 1 q= four_gen [3] $end
$var wire 1 r= four_gen [2] $end
$var wire 1 s= four_gen [1] $end
$var wire 1 t= four_gen [0] $end
$var wire 1 u= prop [15] $end
$var wire 1 v= prop [14] $end
$var wire 1 w= prop [13] $end
$var wire 1 x= prop [12] $end
$var wire 1 y= prop [11] $end
$var wire 1 z= prop [10] $end
$var wire 1 {= prop [9] $end
$var wire 1 |= prop [8] $end
$var wire 1 }= prop [7] $end
$var wire 1 ~= prop [6] $end
$var wire 1 !> prop [5] $end
$var wire 1 "> prop [4] $end
$var wire 1 #> prop [3] $end
$var wire 1 $> prop [2] $end
$var wire 1 %> prop [1] $end
$var wire 1 &> prop [0] $end
$var wire 1 '> four_prop [3] $end
$var wire 1 (> four_prop [2] $end
$var wire 1 )> four_prop [1] $end
$var wire 1 *> four_prop [0] $end
$var wire 1 +> carry [2] $end
$var wire 1 ,> carry [1] $end
$var wire 1 -> carry [0] $end
$var wire 1 .> fa_sum [15] $end
$var wire 1 /> fa_sum [14] $end
$var wire 1 0> fa_sum [13] $end
$var wire 1 1> fa_sum [12] $end
$var wire 1 2> fa_sum [11] $end
$var wire 1 3> fa_sum [10] $end
$var wire 1 4> fa_sum [9] $end
$var wire 1 5> fa_sum [8] $end
$var wire 1 6> fa_sum [7] $end
$var wire 1 7> fa_sum [6] $end
$var wire 1 8> fa_sum [5] $end
$var wire 1 9> fa_sum [4] $end
$var wire 1 :> fa_sum [3] $end
$var wire 1 ;> fa_sum [2] $end
$var wire 1 <> fa_sum [1] $end
$var wire 1 => fa_sum [0] $end

$scope module cla1 $end
$var parameter 32 >> N $end
$var wire 1 :> sum [3] $end
$var wire 1 ;> sum [2] $end
$var wire 1 <> sum [1] $end
$var wire 1 => sum [0] $end
$var wire 1 ?> c_out $end
$var wire 1 t9 a [3] $end
$var wire 1 u9 a [2] $end
$var wire 1 v9 a [1] $end
$var wire 1 w9 a [0] $end
$var wire 1 &: b [3] $end
$var wire 1 ': b [2] $end
$var wire 1 (: b [1] $end
$var wire 1 ): b [0] $end
$var wire 1 f9 c_in $end
$var wire 1 @> gen [3] $end
$var wire 1 A> gen [2] $end
$var wire 1 B> gen [1] $end
$var wire 1 C> gen [0] $end
$var wire 1 D> prop [3] $end
$var wire 1 E> prop [2] $end
$var wire 1 F> prop [1] $end
$var wire 1 G> prop [0] $end
$var wire 1 H> carry [2] $end
$var wire 1 I> carry [1] $end
$var wire 1 J> carry [0] $end
$var wire 1 K> fa_sum [3] $end
$var wire 1 L> fa_sum [2] $end
$var wire 1 M> fa_sum [1] $end
$var wire 1 N> fa_sum [0] $end

$scope module fa1 $end
$var wire 1 N> s $end
$var wire 1 O> c_out $end
$var wire 1 w9 a $end
$var wire 1 ): b $end
$var wire 1 f9 c_in $end
$var wire 1 P> xor_AB $end
$var wire 1 Q> xor_ABCin $end
$var wire 1 R> NAND_AB $end
$var wire 1 S> not_NAND_AB $end
$var wire 1 T> NAND_Cin_xor_AB $end
$var wire 1 U> not_NAND_Cin_xor_AB $end
$var wire 1 V> NOR_2NAND $end
$var wire 1 W> not_NOR_2NAND $end
$var wire 1 X> Cin $end

$scope module xor1 $end
$var wire 1 w9 in1 $end
$var wire 1 ): in2 $end
$var wire 1 P> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P> in1 $end
$var wire 1 f9 in2 $end
$var wire 1 Q> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 w9 in1 $end
$var wire 1 ): in2 $end
$var wire 1 R> out $end
$upscope $end

$scope module not1 $end
$var wire 1 R> in1 $end
$var wire 1 S> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X> in1 $end
$var wire 1 P> in2 $end
$var wire 1 T> out $end
$upscope $end

$scope module not2 $end
$var wire 1 T> in1 $end
$var wire 1 U> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S> in1 $end
$var wire 1 U> in2 $end
$var wire 1 V> out $end
$upscope $end

$scope module not3 $end
$var wire 1 V> in1 $end
$var wire 1 W> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 M> s $end
$var wire 1 Y> c_out $end
$var wire 1 v9 a $end
$var wire 1 (: b $end
$var wire 1 J> c_in $end
$var wire 1 Z> xor_AB $end
$var wire 1 [> xor_ABCin $end
$var wire 1 \> NAND_AB $end
$var wire 1 ]> not_NAND_AB $end
$var wire 1 ^> NAND_Cin_xor_AB $end
$var wire 1 _> not_NAND_Cin_xor_AB $end
$var wire 1 `> NOR_2NAND $end
$var wire 1 a> not_NOR_2NAND $end
$var wire 1 b> Cin $end

$scope module xor1 $end
$var wire 1 v9 in1 $end
$var wire 1 (: in2 $end
$var wire 1 Z> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 Z> in1 $end
$var wire 1 J> in2 $end
$var wire 1 [> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 v9 in1 $end
$var wire 1 (: in2 $end
$var wire 1 \> out $end
$upscope $end

$scope module not1 $end
$var wire 1 \> in1 $end
$var wire 1 ]> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 b> in1 $end
$var wire 1 Z> in2 $end
$var wire 1 ^> out $end
$upscope $end

$scope module not2 $end
$var wire 1 ^> in1 $end
$var wire 1 _> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ]> in1 $end
$var wire 1 _> in2 $end
$var wire 1 `> out $end
$upscope $end

$scope module not3 $end
$var wire 1 `> in1 $end
$var wire 1 a> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 L> s $end
$var wire 1 c> c_out $end
$var wire 1 u9 a $end
$var wire 1 ': b $end
$var wire 1 I> c_in $end
$var wire 1 d> xor_AB $end
$var wire 1 e> xor_ABCin $end
$var wire 1 f> NAND_AB $end
$var wire 1 g> not_NAND_AB $end
$var wire 1 h> NAND_Cin_xor_AB $end
$var wire 1 i> not_NAND_Cin_xor_AB $end
$var wire 1 j> NOR_2NAND $end
$var wire 1 k> not_NOR_2NAND $end
$var wire 1 l> Cin $end

$scope module xor1 $end
$var wire 1 u9 in1 $end
$var wire 1 ': in2 $end
$var wire 1 d> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d> in1 $end
$var wire 1 I> in2 $end
$var wire 1 e> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 u9 in1 $end
$var wire 1 ': in2 $end
$var wire 1 f> out $end
$upscope $end

$scope module not1 $end
$var wire 1 f> in1 $end
$var wire 1 g> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l> in1 $end
$var wire 1 d> in2 $end
$var wire 1 h> out $end
$upscope $end

$scope module not2 $end
$var wire 1 h> in1 $end
$var wire 1 i> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g> in1 $end
$var wire 1 i> in2 $end
$var wire 1 j> out $end
$upscope $end

$scope module not3 $end
$var wire 1 j> in1 $end
$var wire 1 k> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 K> s $end
$var wire 1 m> c_out $end
$var wire 1 t9 a $end
$var wire 1 &: b $end
$var wire 1 H> c_in $end
$var wire 1 n> xor_AB $end
$var wire 1 o> xor_ABCin $end
$var wire 1 p> NAND_AB $end
$var wire 1 q> not_NAND_AB $end
$var wire 1 r> NAND_Cin_xor_AB $end
$var wire 1 s> not_NAND_Cin_xor_AB $end
$var wire 1 t> NOR_2NAND $end
$var wire 1 u> not_NOR_2NAND $end
$var wire 1 v> Cin $end

$scope module xor1 $end
$var wire 1 t9 in1 $end
$var wire 1 &: in2 $end
$var wire 1 n> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n> in1 $end
$var wire 1 H> in2 $end
$var wire 1 o> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 t9 in1 $end
$var wire 1 &: in2 $end
$var wire 1 p> out $end
$upscope $end

$scope module not1 $end
$var wire 1 p> in1 $end
$var wire 1 q> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v> in1 $end
$var wire 1 n> in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module not2 $end
$var wire 1 r> in1 $end
$var wire 1 s> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q> in1 $end
$var wire 1 s> in2 $end
$var wire 1 t> out $end
$upscope $end

$scope module not3 $end
$var wire 1 t> in1 $end
$var wire 1 u> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var parameter 32 w> N $end
$var wire 1 6> sum [3] $end
$var wire 1 7> sum [2] $end
$var wire 1 8> sum [1] $end
$var wire 1 9> sum [0] $end
$var wire 1 x> c_out $end
$var wire 1 p9 a [3] $end
$var wire 1 q9 a [2] $end
$var wire 1 r9 a [1] $end
$var wire 1 s9 a [0] $end
$var wire 1 ": b [3] $end
$var wire 1 #: b [2] $end
$var wire 1 $: b [1] $end
$var wire 1 %: b [0] $end
$var wire 1 -> c_in $end
$var wire 1 y> gen [3] $end
$var wire 1 z> gen [2] $end
$var wire 1 {> gen [1] $end
$var wire 1 |> gen [0] $end
$var wire 1 }> prop [3] $end
$var wire 1 ~> prop [2] $end
$var wire 1 !? prop [1] $end
$var wire 1 "? prop [0] $end
$var wire 1 #? carry [2] $end
$var wire 1 $? carry [1] $end
$var wire 1 %? carry [0] $end
$var wire 1 &? fa_sum [3] $end
$var wire 1 '? fa_sum [2] $end
$var wire 1 (? fa_sum [1] $end
$var wire 1 )? fa_sum [0] $end

$scope module fa1 $end
$var wire 1 )? s $end
$var wire 1 *? c_out $end
$var wire 1 s9 a $end
$var wire 1 %: b $end
$var wire 1 -> c_in $end
$var wire 1 +? xor_AB $end
$var wire 1 ,? xor_ABCin $end
$var wire 1 -? NAND_AB $end
$var wire 1 .? not_NAND_AB $end
$var wire 1 /? NAND_Cin_xor_AB $end
$var wire 1 0? not_NAND_Cin_xor_AB $end
$var wire 1 1? NOR_2NAND $end
$var wire 1 2? not_NOR_2NAND $end
$var wire 1 3? Cin $end

$scope module xor1 $end
$var wire 1 s9 in1 $end
$var wire 1 %: in2 $end
$var wire 1 +? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +? in1 $end
$var wire 1 -> in2 $end
$var wire 1 ,? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 s9 in1 $end
$var wire 1 %: in2 $end
$var wire 1 -? out $end
$upscope $end

$scope module not1 $end
$var wire 1 -? in1 $end
$var wire 1 .? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3? in1 $end
$var wire 1 +? in2 $end
$var wire 1 /? out $end
$upscope $end

$scope module not2 $end
$var wire 1 /? in1 $end
$var wire 1 0? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .? in1 $end
$var wire 1 0? in2 $end
$var wire 1 1? out $end
$upscope $end

$scope module not3 $end
$var wire 1 1? in1 $end
$var wire 1 2? out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 (? s $end
$var wire 1 4? c_out $end
$var wire 1 r9 a $end
$var wire 1 $: b $end
$var wire 1 %? c_in $end
$var wire 1 5? xor_AB $end
$var wire 1 6? xor_ABCin $end
$var wire 1 7? NAND_AB $end
$var wire 1 8? not_NAND_AB $end
$var wire 1 9? NAND_Cin_xor_AB $end
$var wire 1 :? not_NAND_Cin_xor_AB $end
$var wire 1 ;? NOR_2NAND $end
$var wire 1 <? not_NOR_2NAND $end
$var wire 1 =? Cin $end

$scope module xor1 $end
$var wire 1 r9 in1 $end
$var wire 1 $: in2 $end
$var wire 1 5? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5? in1 $end
$var wire 1 %? in2 $end
$var wire 1 6? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 r9 in1 $end
$var wire 1 $: in2 $end
$var wire 1 7? out $end
$upscope $end

$scope module not1 $end
$var wire 1 7? in1 $end
$var wire 1 8? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 =? in1 $end
$var wire 1 5? in2 $end
$var wire 1 9? out $end
$upscope $end

$scope module not2 $end
$var wire 1 9? in1 $end
$var wire 1 :? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8? in1 $end
$var wire 1 :? in2 $end
$var wire 1 ;? out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;? in1 $end
$var wire 1 <? out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 '? s $end
$var wire 1 >? c_out $end
$var wire 1 q9 a $end
$var wire 1 #: b $end
$var wire 1 $? c_in $end
$var wire 1 ?? xor_AB $end
$var wire 1 @? xor_ABCin $end
$var wire 1 A? NAND_AB $end
$var wire 1 B? not_NAND_AB $end
$var wire 1 C? NAND_Cin_xor_AB $end
$var wire 1 D? not_NAND_Cin_xor_AB $end
$var wire 1 E? NOR_2NAND $end
$var wire 1 F? not_NOR_2NAND $end
$var wire 1 G? Cin $end

$scope module xor1 $end
$var wire 1 q9 in1 $end
$var wire 1 #: in2 $end
$var wire 1 ?? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ?? in1 $end
$var wire 1 $? in2 $end
$var wire 1 @? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 q9 in1 $end
$var wire 1 #: in2 $end
$var wire 1 A? out $end
$upscope $end

$scope module not1 $end
$var wire 1 A? in1 $end
$var wire 1 B? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G? in1 $end
$var wire 1 ?? in2 $end
$var wire 1 C? out $end
$upscope $end

$scope module not2 $end
$var wire 1 C? in1 $end
$var wire 1 D? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 B? in1 $end
$var wire 1 D? in2 $end
$var wire 1 E? out $end
$upscope $end

$scope module not3 $end
$var wire 1 E? in1 $end
$var wire 1 F? out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 &? s $end
$var wire 1 H? c_out $end
$var wire 1 p9 a $end
$var wire 1 ": b $end
$var wire 1 #? c_in $end
$var wire 1 I? xor_AB $end
$var wire 1 J? xor_ABCin $end
$var wire 1 K? NAND_AB $end
$var wire 1 L? not_NAND_AB $end
$var wire 1 M? NAND_Cin_xor_AB $end
$var wire 1 N? not_NAND_Cin_xor_AB $end
$var wire 1 O? NOR_2NAND $end
$var wire 1 P? not_NOR_2NAND $end
$var wire 1 Q? Cin $end

$scope module xor1 $end
$var wire 1 p9 in1 $end
$var wire 1 ": in2 $end
$var wire 1 I? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 I? in1 $end
$var wire 1 #? in2 $end
$var wire 1 J? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 p9 in1 $end
$var wire 1 ": in2 $end
$var wire 1 K? out $end
$upscope $end

$scope module not1 $end
$var wire 1 K? in1 $end
$var wire 1 L? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q? in1 $end
$var wire 1 I? in2 $end
$var wire 1 M? out $end
$upscope $end

$scope module not2 $end
$var wire 1 M? in1 $end
$var wire 1 N? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 L? in1 $end
$var wire 1 N? in2 $end
$var wire 1 O? out $end
$upscope $end

$scope module not3 $end
$var wire 1 O? in1 $end
$var wire 1 P? out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var parameter 32 R? N $end
$var wire 1 2> sum [3] $end
$var wire 1 3> sum [2] $end
$var wire 1 4> sum [1] $end
$var wire 1 5> sum [0] $end
$var wire 1 S? c_out $end
$var wire 1 l9 a [3] $end
$var wire 1 m9 a [2] $end
$var wire 1 n9 a [1] $end
$var wire 1 o9 a [0] $end
$var wire 1 |9 b [3] $end
$var wire 1 }9 b [2] $end
$var wire 1 ~9 b [1] $end
$var wire 1 !: b [0] $end
$var wire 1 ,> c_in $end
$var wire 1 T? gen [3] $end
$var wire 1 U? gen [2] $end
$var wire 1 V? gen [1] $end
$var wire 1 W? gen [0] $end
$var wire 1 X? prop [3] $end
$var wire 1 Y? prop [2] $end
$var wire 1 Z? prop [1] $end
$var wire 1 [? prop [0] $end
$var wire 1 \? carry [2] $end
$var wire 1 ]? carry [1] $end
$var wire 1 ^? carry [0] $end
$var wire 1 _? fa_sum [3] $end
$var wire 1 `? fa_sum [2] $end
$var wire 1 a? fa_sum [1] $end
$var wire 1 b? fa_sum [0] $end

$scope module fa1 $end
$var wire 1 b? s $end
$var wire 1 c? c_out $end
$var wire 1 o9 a $end
$var wire 1 !: b $end
$var wire 1 ,> c_in $end
$var wire 1 d? xor_AB $end
$var wire 1 e? xor_ABCin $end
$var wire 1 f? NAND_AB $end
$var wire 1 g? not_NAND_AB $end
$var wire 1 h? NAND_Cin_xor_AB $end
$var wire 1 i? not_NAND_Cin_xor_AB $end
$var wire 1 j? NOR_2NAND $end
$var wire 1 k? not_NOR_2NAND $end
$var wire 1 l? Cin $end

$scope module xor1 $end
$var wire 1 o9 in1 $end
$var wire 1 !: in2 $end
$var wire 1 d? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d? in1 $end
$var wire 1 ,> in2 $end
$var wire 1 e? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 o9 in1 $end
$var wire 1 !: in2 $end
$var wire 1 f? out $end
$upscope $end

$scope module not1 $end
$var wire 1 f? in1 $end
$var wire 1 g? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l? in1 $end
$var wire 1 d? in2 $end
$var wire 1 h? out $end
$upscope $end

$scope module not2 $end
$var wire 1 h? in1 $end
$var wire 1 i? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g? in1 $end
$var wire 1 i? in2 $end
$var wire 1 j? out $end
$upscope $end

$scope module not3 $end
$var wire 1 j? in1 $end
$var wire 1 k? out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 a? s $end
$var wire 1 m? c_out $end
$var wire 1 n9 a $end
$var wire 1 ~9 b $end
$var wire 1 ^? c_in $end
$var wire 1 n? xor_AB $end
$var wire 1 o? xor_ABCin $end
$var wire 1 p? NAND_AB $end
$var wire 1 q? not_NAND_AB $end
$var wire 1 r? NAND_Cin_xor_AB $end
$var wire 1 s? not_NAND_Cin_xor_AB $end
$var wire 1 t? NOR_2NAND $end
$var wire 1 u? not_NOR_2NAND $end
$var wire 1 v? Cin $end

$scope module xor1 $end
$var wire 1 n9 in1 $end
$var wire 1 ~9 in2 $end
$var wire 1 n? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n? in1 $end
$var wire 1 ^? in2 $end
$var wire 1 o? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 n9 in1 $end
$var wire 1 ~9 in2 $end
$var wire 1 p? out $end
$upscope $end

$scope module not1 $end
$var wire 1 p? in1 $end
$var wire 1 q? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v? in1 $end
$var wire 1 n? in2 $end
$var wire 1 r? out $end
$upscope $end

$scope module not2 $end
$var wire 1 r? in1 $end
$var wire 1 s? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q? in1 $end
$var wire 1 s? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module not3 $end
$var wire 1 t? in1 $end
$var wire 1 u? out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 `? s $end
$var wire 1 w? c_out $end
$var wire 1 m9 a $end
$var wire 1 }9 b $end
$var wire 1 ]? c_in $end
$var wire 1 x? xor_AB $end
$var wire 1 y? xor_ABCin $end
$var wire 1 z? NAND_AB $end
$var wire 1 {? not_NAND_AB $end
$var wire 1 |? NAND_Cin_xor_AB $end
$var wire 1 }? not_NAND_Cin_xor_AB $end
$var wire 1 ~? NOR_2NAND $end
$var wire 1 !@ not_NOR_2NAND $end
$var wire 1 "@ Cin $end

$scope module xor1 $end
$var wire 1 m9 in1 $end
$var wire 1 }9 in2 $end
$var wire 1 x? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x? in1 $end
$var wire 1 ]? in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 m9 in1 $end
$var wire 1 }9 in2 $end
$var wire 1 z? out $end
$upscope $end

$scope module not1 $end
$var wire 1 z? in1 $end
$var wire 1 {? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "@ in1 $end
$var wire 1 x? in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module not2 $end
$var wire 1 |? in1 $end
$var wire 1 }? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {? in1 $end
$var wire 1 }? in2 $end
$var wire 1 ~? out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~? in1 $end
$var wire 1 !@ out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 _? s $end
$var wire 1 #@ c_out $end
$var wire 1 l9 a $end
$var wire 1 |9 b $end
$var wire 1 \? c_in $end
$var wire 1 $@ xor_AB $end
$var wire 1 %@ xor_ABCin $end
$var wire 1 &@ NAND_AB $end
$var wire 1 '@ not_NAND_AB $end
$var wire 1 (@ NAND_Cin_xor_AB $end
$var wire 1 )@ not_NAND_Cin_xor_AB $end
$var wire 1 *@ NOR_2NAND $end
$var wire 1 +@ not_NOR_2NAND $end
$var wire 1 ,@ Cin $end

$scope module xor1 $end
$var wire 1 l9 in1 $end
$var wire 1 |9 in2 $end
$var wire 1 $@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $@ in1 $end
$var wire 1 \? in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 l9 in1 $end
$var wire 1 |9 in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 &@ in1 $end
$var wire 1 '@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ,@ in1 $end
$var wire 1 $@ in2 $end
$var wire 1 (@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 (@ in1 $end
$var wire 1 )@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '@ in1 $end
$var wire 1 )@ in2 $end
$var wire 1 *@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 *@ in1 $end
$var wire 1 +@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var parameter 32 -@ N $end
$var wire 1 .> sum [3] $end
$var wire 1 /> sum [2] $end
$var wire 1 0> sum [1] $end
$var wire 1 1> sum [0] $end
$var wire 1 .@ c_out $end
$var wire 1 h9 a [3] $end
$var wire 1 i9 a [2] $end
$var wire 1 j9 a [1] $end
$var wire 1 k9 a [0] $end
$var wire 1 x9 b [3] $end
$var wire 1 y9 b [2] $end
$var wire 1 z9 b [1] $end
$var wire 1 {9 b [0] $end
$var wire 1 +> c_in $end
$var wire 1 /@ gen [3] $end
$var wire 1 0@ gen [2] $end
$var wire 1 1@ gen [1] $end
$var wire 1 2@ gen [0] $end
$var wire 1 3@ prop [3] $end
$var wire 1 4@ prop [2] $end
$var wire 1 5@ prop [1] $end
$var wire 1 6@ prop [0] $end
$var wire 1 7@ carry [2] $end
$var wire 1 8@ carry [1] $end
$var wire 1 9@ carry [0] $end
$var wire 1 :@ fa_sum [3] $end
$var wire 1 ;@ fa_sum [2] $end
$var wire 1 <@ fa_sum [1] $end
$var wire 1 =@ fa_sum [0] $end

$scope module fa1 $end
$var wire 1 =@ s $end
$var wire 1 >@ c_out $end
$var wire 1 k9 a $end
$var wire 1 {9 b $end
$var wire 1 +> c_in $end
$var wire 1 ?@ xor_AB $end
$var wire 1 @@ xor_ABCin $end
$var wire 1 A@ NAND_AB $end
$var wire 1 B@ not_NAND_AB $end
$var wire 1 C@ NAND_Cin_xor_AB $end
$var wire 1 D@ not_NAND_Cin_xor_AB $end
$var wire 1 E@ NOR_2NAND $end
$var wire 1 F@ not_NOR_2NAND $end
$var wire 1 G@ Cin $end

$scope module xor1 $end
$var wire 1 k9 in1 $end
$var wire 1 {9 in2 $end
$var wire 1 ?@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ?@ in1 $end
$var wire 1 +> in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 k9 in1 $end
$var wire 1 {9 in2 $end
$var wire 1 A@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 A@ in1 $end
$var wire 1 B@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G@ in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 C@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 C@ in1 $end
$var wire 1 D@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 B@ in1 $end
$var wire 1 D@ in2 $end
$var wire 1 E@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 E@ in1 $end
$var wire 1 F@ out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 <@ s $end
$var wire 1 H@ c_out $end
$var wire 1 j9 a $end
$var wire 1 z9 b $end
$var wire 1 9@ c_in $end
$var wire 1 I@ xor_AB $end
$var wire 1 J@ xor_ABCin $end
$var wire 1 K@ NAND_AB $end
$var wire 1 L@ not_NAND_AB $end
$var wire 1 M@ NAND_Cin_xor_AB $end
$var wire 1 N@ not_NAND_Cin_xor_AB $end
$var wire 1 O@ NOR_2NAND $end
$var wire 1 P@ not_NOR_2NAND $end
$var wire 1 Q@ Cin $end

$scope module xor1 $end
$var wire 1 j9 in1 $end
$var wire 1 z9 in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 I@ in1 $end
$var wire 1 9@ in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 j9 in1 $end
$var wire 1 z9 in2 $end
$var wire 1 K@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 K@ in1 $end
$var wire 1 L@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q@ in1 $end
$var wire 1 I@ in2 $end
$var wire 1 M@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 M@ in1 $end
$var wire 1 N@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 L@ in1 $end
$var wire 1 N@ in2 $end
$var wire 1 O@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 O@ in1 $end
$var wire 1 P@ out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 ;@ s $end
$var wire 1 R@ c_out $end
$var wire 1 i9 a $end
$var wire 1 y9 b $end
$var wire 1 8@ c_in $end
$var wire 1 S@ xor_AB $end
$var wire 1 T@ xor_ABCin $end
$var wire 1 U@ NAND_AB $end
$var wire 1 V@ not_NAND_AB $end
$var wire 1 W@ NAND_Cin_xor_AB $end
$var wire 1 X@ not_NAND_Cin_xor_AB $end
$var wire 1 Y@ NOR_2NAND $end
$var wire 1 Z@ not_NOR_2NAND $end
$var wire 1 [@ Cin $end

$scope module xor1 $end
$var wire 1 i9 in1 $end
$var wire 1 y9 in2 $end
$var wire 1 S@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S@ in1 $end
$var wire 1 8@ in2 $end
$var wire 1 T@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 i9 in1 $end
$var wire 1 y9 in2 $end
$var wire 1 U@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 U@ in1 $end
$var wire 1 V@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [@ in1 $end
$var wire 1 S@ in2 $end
$var wire 1 W@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 W@ in1 $end
$var wire 1 X@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V@ in1 $end
$var wire 1 X@ in2 $end
$var wire 1 Y@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y@ in1 $end
$var wire 1 Z@ out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 :@ s $end
$var wire 1 \@ c_out $end
$var wire 1 h9 a $end
$var wire 1 x9 b $end
$var wire 1 7@ c_in $end
$var wire 1 ]@ xor_AB $end
$var wire 1 ^@ xor_ABCin $end
$var wire 1 _@ NAND_AB $end
$var wire 1 `@ not_NAND_AB $end
$var wire 1 a@ NAND_Cin_xor_AB $end
$var wire 1 b@ not_NAND_Cin_xor_AB $end
$var wire 1 c@ NOR_2NAND $end
$var wire 1 d@ not_NOR_2NAND $end
$var wire 1 e@ Cin $end

$scope module xor1 $end
$var wire 1 h9 in1 $end
$var wire 1 x9 in2 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]@ in1 $end
$var wire 1 7@ in2 $end
$var wire 1 ^@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 h9 in1 $end
$var wire 1 x9 in2 $end
$var wire 1 _@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 _@ in1 $end
$var wire 1 `@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e@ in1 $end
$var wire 1 ]@ in2 $end
$var wire 1 a@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 a@ in1 $end
$var wire 1 b@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `@ in1 $end
$var wire 1 b@ in2 $end
$var wire 1 c@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 c@ in1 $end
$var wire 1 d@ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 #5 InA [15] $end
$var wire 1 $5 InA [14] $end
$var wire 1 %5 InA [13] $end
$var wire 1 &5 InA [12] $end
$var wire 1 '5 InA [11] $end
$var wire 1 (5 InA [10] $end
$var wire 1 )5 InA [9] $end
$var wire 1 *5 InA [8] $end
$var wire 1 +5 InA [7] $end
$var wire 1 ,5 InA [6] $end
$var wire 1 -5 InA [5] $end
$var wire 1 .5 InA [4] $end
$var wire 1 /5 InA [3] $end
$var wire 1 05 InA [2] $end
$var wire 1 15 InA [1] $end
$var wire 1 25 InA [0] $end
$var wire 1 f@ InB [15] $end
$var wire 1 g@ InB [14] $end
$var wire 1 h@ InB [13] $end
$var wire 1 i@ InB [12] $end
$var wire 1 j@ InB [11] $end
$var wire 1 k@ InB [10] $end
$var wire 1 l@ InB [9] $end
$var wire 1 m@ InB [8] $end
$var wire 1 n@ InB [7] $end
$var wire 1 o@ InB [6] $end
$var wire 1 p@ InB [5] $end
$var wire 1 q@ InB [4] $end
$var wire 1 r@ InB [3] $end
$var wire 1 s@ InB [2] $end
$var wire 1 t@ InB [1] $end
$var wire 1 u@ InB [0] $end
$var wire 1 l: Out $end
$var wire 1 v@ difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 i" InA [15] $end
$var wire 1 j" InA [14] $end
$var wire 1 k" InA [13] $end
$var wire 1 l" InA [12] $end
$var wire 1 m" InA [11] $end
$var wire 1 n" InA [10] $end
$var wire 1 o" InA [9] $end
$var wire 1 p" InA [8] $end
$var wire 1 q" InA [7] $end
$var wire 1 r" InA [6] $end
$var wire 1 s" InA [5] $end
$var wire 1 t" InA [4] $end
$var wire 1 u" InA [3] $end
$var wire 1 v" InA [2] $end
$var wire 1 w" InA [1] $end
$var wire 1 x" InA [0] $end
$var wire 1 I% InB [15] $end
$var wire 1 J% InB [14] $end
$var wire 1 K% InB [13] $end
$var wire 1 L% InB [12] $end
$var wire 1 M% InB [11] $end
$var wire 1 N% InB [10] $end
$var wire 1 O% InB [9] $end
$var wire 1 P% InB [8] $end
$var wire 1 Q% InB [7] $end
$var wire 1 R% InB [6] $end
$var wire 1 S% InB [5] $end
$var wire 1 T% InB [4] $end
$var wire 1 U% InB [3] $end
$var wire 1 V% InB [2] $end
$var wire 1 W% InB [1] $end
$var wire 1 X% InB [0] $end
$var wire 1 [5 Out $end
$var wire 1 w@ difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 i" InA [15] $end
$var wire 1 j" InA [14] $end
$var wire 1 k" InA [13] $end
$var wire 1 l" InA [12] $end
$var wire 1 m" InA [11] $end
$var wire 1 n" InA [10] $end
$var wire 1 o" InA [9] $end
$var wire 1 p" InA [8] $end
$var wire 1 q" InA [7] $end
$var wire 1 r" InA [6] $end
$var wire 1 s" InA [5] $end
$var wire 1 t" InA [4] $end
$var wire 1 u" InA [3] $end
$var wire 1 v" InA [2] $end
$var wire 1 w" InA [1] $end
$var wire 1 x" InA [0] $end
$var wire 1 I% InB [15] $end
$var wire 1 J% InB [14] $end
$var wire 1 K% InB [13] $end
$var wire 1 L% InB [12] $end
$var wire 1 M% InB [11] $end
$var wire 1 N% InB [10] $end
$var wire 1 O% InB [9] $end
$var wire 1 P% InB [8] $end
$var wire 1 Q% InB [7] $end
$var wire 1 R% InB [6] $end
$var wire 1 S% InB [5] $end
$var wire 1 T% InB [4] $end
$var wire 1 U% InB [3] $end
$var wire 1 V% InB [2] $end
$var wire 1 W% InB [1] $end
$var wire 1 X% InB [0] $end
$var wire 1 L6 Out $end
$var wire 1 x@ difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T) mem_stall $end
$var wire 1 n( fetch_stall $end
$var wire 1 )% ALU_in [15] $end
$var wire 1 *% ALU_in [14] $end
$var wire 1 +% ALU_in [13] $end
$var wire 1 ,% ALU_in [12] $end
$var wire 1 -% ALU_in [11] $end
$var wire 1 .% ALU_in [10] $end
$var wire 1 /% ALU_in [9] $end
$var wire 1 0% ALU_in [8] $end
$var wire 1 1% ALU_in [7] $end
$var wire 1 2% ALU_in [6] $end
$var wire 1 3% ALU_in [5] $end
$var wire 1 4% ALU_in [4] $end
$var wire 1 5% ALU_in [3] $end
$var wire 1 6% ALU_in [2] $end
$var wire 1 7% ALU_in [1] $end
$var wire 1 8% ALU_in [0] $end
$var wire 1 9% ALU_out [15] $end
$var wire 1 :% ALU_out [14] $end
$var wire 1 ;% ALU_out [13] $end
$var wire 1 <% ALU_out [12] $end
$var wire 1 =% ALU_out [11] $end
$var wire 1 >% ALU_out [10] $end
$var wire 1 ?% ALU_out [9] $end
$var wire 1 @% ALU_out [8] $end
$var wire 1 A% ALU_out [7] $end
$var wire 1 B% ALU_out [6] $end
$var wire 1 C% ALU_out [5] $end
$var wire 1 D% ALU_out [4] $end
$var wire 1 E% ALU_out [3] $end
$var wire 1 F% ALU_out [2] $end
$var wire 1 G% ALU_out [1] $end
$var wire 1 H% ALU_out [0] $end
$var wire 1 I% BInput_in [15] $end
$var wire 1 J% BInput_in [14] $end
$var wire 1 K% BInput_in [13] $end
$var wire 1 L% BInput_in [12] $end
$var wire 1 M% BInput_in [11] $end
$var wire 1 N% BInput_in [10] $end
$var wire 1 O% BInput_in [9] $end
$var wire 1 P% BInput_in [8] $end
$var wire 1 Q% BInput_in [7] $end
$var wire 1 R% BInput_in [6] $end
$var wire 1 S% BInput_in [5] $end
$var wire 1 T% BInput_in [4] $end
$var wire 1 U% BInput_in [3] $end
$var wire 1 V% BInput_in [2] $end
$var wire 1 W% BInput_in [1] $end
$var wire 1 X% BInput_in [0] $end
$var wire 1 Y% BInput_out [15] $end
$var wire 1 Z% BInput_out [14] $end
$var wire 1 [% BInput_out [13] $end
$var wire 1 \% BInput_out [12] $end
$var wire 1 ]% BInput_out [11] $end
$var wire 1 ^% BInput_out [10] $end
$var wire 1 _% BInput_out [9] $end
$var wire 1 `% BInput_out [8] $end
$var wire 1 a% BInput_out [7] $end
$var wire 1 b% BInput_out [6] $end
$var wire 1 c% BInput_out [5] $end
$var wire 1 d% BInput_out [4] $end
$var wire 1 e% BInput_out [3] $end
$var wire 1 f% BInput_out [2] $end
$var wire 1 g% BInput_out [1] $end
$var wire 1 h% BInput_out [0] $end
$var wire 1 '% branchtake_in $end
$var wire 1 (% branchtake_out $end
$var wire 1 i% branch_out $end
$var wire 1 j$ branch_in $end
$var wire 1 v$ PC_or_add_in $end
$var wire 1 j% PC_or_add_out $end
$var wire 1 t$ ALUJmp_in $end
$var wire 1 k% ALUJmp_out $end
$var wire 1 d$ MemWrt_in $end
$var wire 1 l% MemWrt_out $end
$var wire 1 |$ halt_in $end
$var wire 1 m% halt_out $end
$var wire 1 -$ SgnExt_in [15] $end
$var wire 1 .$ SgnExt_in [14] $end
$var wire 1 /$ SgnExt_in [13] $end
$var wire 1 0$ SgnExt_in [12] $end
$var wire 1 1$ SgnExt_in [11] $end
$var wire 1 2$ SgnExt_in [10] $end
$var wire 1 3$ SgnExt_in [9] $end
$var wire 1 4$ SgnExt_in [8] $end
$var wire 1 5$ SgnExt_in [7] $end
$var wire 1 6$ SgnExt_in [6] $end
$var wire 1 7$ SgnExt_in [5] $end
$var wire 1 8$ SgnExt_in [4] $end
$var wire 1 9$ SgnExt_in [3] $end
$var wire 1 :$ SgnExt_in [2] $end
$var wire 1 ;$ SgnExt_in [1] $end
$var wire 1 <$ SgnExt_in [0] $end
$var wire 1 n% SgnExt_out [15] $end
$var wire 1 o% SgnExt_out [14] $end
$var wire 1 p% SgnExt_out [13] $end
$var wire 1 q% SgnExt_out [12] $end
$var wire 1 r% SgnExt_out [11] $end
$var wire 1 s% SgnExt_out [10] $end
$var wire 1 t% SgnExt_out [9] $end
$var wire 1 u% SgnExt_out [8] $end
$var wire 1 v% SgnExt_out [7] $end
$var wire 1 w% SgnExt_out [6] $end
$var wire 1 x% SgnExt_out [5] $end
$var wire 1 y% SgnExt_out [4] $end
$var wire 1 z% SgnExt_out [3] $end
$var wire 1 {% SgnExt_out [2] $end
$var wire 1 |% SgnExt_out [1] $end
$var wire 1 }% SgnExt_out [0] $end
$var wire 1 +# readData2_in [15] $end
$var wire 1 ,# readData2_in [14] $end
$var wire 1 -# readData2_in [13] $end
$var wire 1 .# readData2_in [12] $end
$var wire 1 /# readData2_in [11] $end
$var wire 1 0# readData2_in [10] $end
$var wire 1 1# readData2_in [9] $end
$var wire 1 2# readData2_in [8] $end
$var wire 1 3# readData2_in [7] $end
$var wire 1 4# readData2_in [6] $end
$var wire 1 5# readData2_in [5] $end
$var wire 1 6# readData2_in [4] $end
$var wire 1 7# readData2_in [3] $end
$var wire 1 8# readData2_in [2] $end
$var wire 1 9# readData2_in [1] $end
$var wire 1 :# readData2_in [0] $end
$var wire 1 ~% readData2_out [15] $end
$var wire 1 !& readData2_out [14] $end
$var wire 1 "& readData2_out [13] $end
$var wire 1 #& readData2_out [12] $end
$var wire 1 $& readData2_out [11] $end
$var wire 1 %& readData2_out [10] $end
$var wire 1 && readData2_out [9] $end
$var wire 1 '& readData2_out [8] $end
$var wire 1 (& readData2_out [7] $end
$var wire 1 )& readData2_out [6] $end
$var wire 1 *& readData2_out [5] $end
$var wire 1 +& readData2_out [4] $end
$var wire 1 ,& readData2_out [3] $end
$var wire 1 -& readData2_out [2] $end
$var wire 1 .& readData2_out [1] $end
$var wire 1 /& readData2_out [0] $end
$var wire 1 ?" pc2_in [15] $end
$var wire 1 @" pc2_in [14] $end
$var wire 1 A" pc2_in [13] $end
$var wire 1 B" pc2_in [12] $end
$var wire 1 C" pc2_in [11] $end
$var wire 1 D" pc2_in [10] $end
$var wire 1 E" pc2_in [9] $end
$var wire 1 F" pc2_in [8] $end
$var wire 1 G" pc2_in [7] $end
$var wire 1 H" pc2_in [6] $end
$var wire 1 I" pc2_in [5] $end
$var wire 1 J" pc2_in [4] $end
$var wire 1 K" pc2_in [3] $end
$var wire 1 L" pc2_in [2] $end
$var wire 1 M" pc2_in [1] $end
$var wire 1 N" pc2_in [0] $end
$var wire 1 0& pc2_out [15] $end
$var wire 1 1& pc2_out [14] $end
$var wire 1 2& pc2_out [13] $end
$var wire 1 3& pc2_out [12] $end
$var wire 1 4& pc2_out [11] $end
$var wire 1 5& pc2_out [10] $end
$var wire 1 6& pc2_out [9] $end
$var wire 1 7& pc2_out [8] $end
$var wire 1 8& pc2_out [7] $end
$var wire 1 9& pc2_out [6] $end
$var wire 1 :& pc2_out [5] $end
$var wire 1 ;& pc2_out [4] $end
$var wire 1 <& pc2_out [3] $end
$var wire 1 =& pc2_out [2] $end
$var wire 1 >& pc2_out [1] $end
$var wire 1 ?& pc2_out [0] $end
$var wire 1 k# sevenext_in [15] $end
$var wire 1 l# sevenext_in [14] $end
$var wire 1 m# sevenext_in [13] $end
$var wire 1 n# sevenext_in [12] $end
$var wire 1 o# sevenext_in [11] $end
$var wire 1 p# sevenext_in [10] $end
$var wire 1 q# sevenext_in [9] $end
$var wire 1 r# sevenext_in [8] $end
$var wire 1 s# sevenext_in [7] $end
$var wire 1 t# sevenext_in [6] $end
$var wire 1 u# sevenext_in [5] $end
$var wire 1 v# sevenext_in [4] $end
$var wire 1 w# sevenext_in [3] $end
$var wire 1 x# sevenext_in [2] $end
$var wire 1 y# sevenext_in [1] $end
$var wire 1 z# sevenext_in [0] $end
$var wire 1 @& sevenext_out [15] $end
$var wire 1 A& sevenext_out [14] $end
$var wire 1 B& sevenext_out [13] $end
$var wire 1 C& sevenext_out [12] $end
$var wire 1 D& sevenext_out [11] $end
$var wire 1 E& sevenext_out [10] $end
$var wire 1 F& sevenext_out [9] $end
$var wire 1 G& sevenext_out [8] $end
$var wire 1 H& sevenext_out [7] $end
$var wire 1 I& sevenext_out [6] $end
$var wire 1 J& sevenext_out [5] $end
$var wire 1 K& sevenext_out [4] $end
$var wire 1 L& sevenext_out [3] $end
$var wire 1 M& sevenext_out [2] $end
$var wire 1 N& sevenext_out [1] $end
$var wire 1 O& sevenext_out [0] $end
$var wire 1 ~$ RegWrt_in $end
$var wire 1 P& RegWrt_out $end
$var wire 1 B) SendNOP_In $end
$var wire 1 ?) SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 Q& RegSrc_out [1] $end
$var wire 1 R& RegSrc_out [0] $end
$var wire 1 $% write_reg_in [2] $end
$var wire 1 %% write_reg_in [1] $end
$var wire 1 &% write_reg_in [0] $end
$var wire 1 S& write_reg_out [2] $end
$var wire 1 T& write_reg_out [1] $end
$var wire 1 U& write_reg_out [0] $end
$var wire 1 c' MemRd_in $end
$var wire 1 d' MemRd_out $end

$scope module branchtake $end
$var wire 1 (% q $end
$var wire 1 y@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 z@ state $end
$upscope $end

$scope module branch $end
$var wire 1 i% q $end
$var wire 1 {@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |@ state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 j% q $end
$var wire 1 }@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~@ state $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 k% q $end
$var wire 1 !A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "A state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 l% q $end
$var wire 1 #A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $A state $end
$upscope $end

$scope module halt $end
$var wire 1 m% q $end
$var wire 1 %A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &A state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 P& q $end
$var wire 1 'A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (A state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 ?) q $end
$var wire 1 )A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *A state $end
$upscope $end

$scope module memrd $end
$var wire 1 d' q $end
$var wire 1 +A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,A state $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 9% q $end
$var wire 1 -A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .A state $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 :% q $end
$var wire 1 /A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0A state $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 ;% q $end
$var wire 1 1A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2A state $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 <% q $end
$var wire 1 3A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4A state $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 =% q $end
$var wire 1 5A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6A state $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 >% q $end
$var wire 1 7A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8A state $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 ?% q $end
$var wire 1 9A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :A state $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 @% q $end
$var wire 1 ;A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <A state $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 A% q $end
$var wire 1 =A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >A state $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 B% q $end
$var wire 1 ?A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @A state $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 C% q $end
$var wire 1 AA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 BA state $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 D% q $end
$var wire 1 CA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 DA state $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 E% q $end
$var wire 1 EA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 FA state $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 F% q $end
$var wire 1 GA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 HA state $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 G% q $end
$var wire 1 IA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 JA state $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 H% q $end
$var wire 1 KA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 LA state $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 Y% q $end
$var wire 1 MA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 NA state $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 Z% q $end
$var wire 1 OA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 PA state $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 [% q $end
$var wire 1 QA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 RA state $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 \% q $end
$var wire 1 SA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 TA state $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 ]% q $end
$var wire 1 UA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 VA state $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 ^% q $end
$var wire 1 WA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 XA state $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 _% q $end
$var wire 1 YA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ZA state $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 `% q $end
$var wire 1 [A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \A state $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 a% q $end
$var wire 1 ]A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^A state $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 b% q $end
$var wire 1 _A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `A state $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 c% q $end
$var wire 1 aA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 bA state $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 d% q $end
$var wire 1 cA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 dA state $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 e% q $end
$var wire 1 eA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 fA state $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 f% q $end
$var wire 1 gA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 hA state $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 g% q $end
$var wire 1 iA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 jA state $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 h% q $end
$var wire 1 kA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 lA state $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 n% q $end
$var wire 1 mA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 nA state $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 o% q $end
$var wire 1 oA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 pA state $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 p% q $end
$var wire 1 qA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 rA state $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 q% q $end
$var wire 1 sA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 tA state $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 r% q $end
$var wire 1 uA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 vA state $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 s% q $end
$var wire 1 wA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 xA state $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 t% q $end
$var wire 1 yA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 zA state $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 u% q $end
$var wire 1 {A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |A state $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 v% q $end
$var wire 1 }A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~A state $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 w% q $end
$var wire 1 !B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "B state $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 x% q $end
$var wire 1 #B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $B state $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 y% q $end
$var wire 1 %B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &B state $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 z% q $end
$var wire 1 'B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (B state $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 {% q $end
$var wire 1 )B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *B state $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 |% q $end
$var wire 1 +B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,B state $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 }% q $end
$var wire 1 -B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .B state $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 ~% q $end
$var wire 1 /B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0B state $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 !& q $end
$var wire 1 1B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2B state $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 "& q $end
$var wire 1 3B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4B state $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 #& q $end
$var wire 1 5B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6B state $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 $& q $end
$var wire 1 7B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8B state $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 %& q $end
$var wire 1 9B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :B state $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 && q $end
$var wire 1 ;B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 <B state $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 '& q $end
$var wire 1 =B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 >B state $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 (& q $end
$var wire 1 ?B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 @B state $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 )& q $end
$var wire 1 AB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 BB state $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 *& q $end
$var wire 1 CB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 DB state $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 +& q $end
$var wire 1 EB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 FB state $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 ,& q $end
$var wire 1 GB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 HB state $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 -& q $end
$var wire 1 IB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 JB state $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 .& q $end
$var wire 1 KB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 LB state $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 /& q $end
$var wire 1 MB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 NB state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 0& q $end
$var wire 1 OB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 PB state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 1& q $end
$var wire 1 QB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 RB state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 2& q $end
$var wire 1 SB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 TB state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 3& q $end
$var wire 1 UB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 VB state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 4& q $end
$var wire 1 WB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 XB state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 5& q $end
$var wire 1 YB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ZB state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 6& q $end
$var wire 1 [B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \B state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 7& q $end
$var wire 1 ]B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^B state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 8& q $end
$var wire 1 _B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `B state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 9& q $end
$var wire 1 aB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 bB state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 :& q $end
$var wire 1 cB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 dB state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 ;& q $end
$var wire 1 eB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 fB state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 <& q $end
$var wire 1 gB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 hB state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 =& q $end
$var wire 1 iB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 jB state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 >& q $end
$var wire 1 kB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 lB state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 ?& q $end
$var wire 1 mB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 nB state $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 @& q $end
$var wire 1 oB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 pB state $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 A& q $end
$var wire 1 qB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 rB state $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 B& q $end
$var wire 1 sB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 tB state $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 C& q $end
$var wire 1 uB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 vB state $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 D& q $end
$var wire 1 wB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 xB state $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 E& q $end
$var wire 1 yB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 zB state $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 F& q $end
$var wire 1 {B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |B state $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 G& q $end
$var wire 1 }B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~B state $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 H& q $end
$var wire 1 !C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "C state $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 I& q $end
$var wire 1 #C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $C state $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 J& q $end
$var wire 1 %C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &C state $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 K& q $end
$var wire 1 'C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (C state $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 L& q $end
$var wire 1 )C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *C state $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 M& q $end
$var wire 1 +C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,C state $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 N& q $end
$var wire 1 -C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .C state $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 O& q $end
$var wire 1 /C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0C state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 Q& q $end
$var wire 1 1C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2C state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 R& q $end
$var wire 1 3C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4C state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 S& q $end
$var wire 1 5C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6C state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 T& q $end
$var wire 1 7C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 8C state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 U& q $end
$var wire 1 9C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 :C state $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 (% branch $end
$var wire 1 j% PC_or_add $end
$var wire 1 9% alu [15] $end
$var wire 1 :% alu [14] $end
$var wire 1 ;% alu [13] $end
$var wire 1 <% alu [12] $end
$var wire 1 =% alu [11] $end
$var wire 1 >% alu [10] $end
$var wire 1 ?% alu [9] $end
$var wire 1 @% alu [8] $end
$var wire 1 A% alu [7] $end
$var wire 1 B% alu [6] $end
$var wire 1 C% alu [5] $end
$var wire 1 D% alu [4] $end
$var wire 1 E% alu [3] $end
$var wire 1 F% alu [2] $end
$var wire 1 G% alu [1] $end
$var wire 1 H% alu [0] $end
$var wire 1 n% SgnExt [15] $end
$var wire 1 o% SgnExt [14] $end
$var wire 1 p% SgnExt [13] $end
$var wire 1 q% SgnExt [12] $end
$var wire 1 r% SgnExt [11] $end
$var wire 1 s% SgnExt [10] $end
$var wire 1 t% SgnExt [9] $end
$var wire 1 u% SgnExt [8] $end
$var wire 1 v% SgnExt [7] $end
$var wire 1 w% SgnExt [6] $end
$var wire 1 x% SgnExt [5] $end
$var wire 1 y% SgnExt [4] $end
$var wire 1 z% SgnExt [3] $end
$var wire 1 {% SgnExt [2] $end
$var wire 1 |% SgnExt [1] $end
$var wire 1 }% SgnExt [0] $end
$var wire 1 ~% readData2 [15] $end
$var wire 1 !& readData2 [14] $end
$var wire 1 "& readData2 [13] $end
$var wire 1 #& readData2 [12] $end
$var wire 1 $& readData2 [11] $end
$var wire 1 %& readData2 [10] $end
$var wire 1 && readData2 [9] $end
$var wire 1 '& readData2 [8] $end
$var wire 1 (& readData2 [7] $end
$var wire 1 )& readData2 [6] $end
$var wire 1 *& readData2 [5] $end
$var wire 1 +& readData2 [4] $end
$var wire 1 ,& readData2 [3] $end
$var wire 1 -& readData2 [2] $end
$var wire 1 .& readData2 [1] $end
$var wire 1 /& readData2 [0] $end
$var wire 1 0& pc2 [15] $end
$var wire 1 1& pc2 [14] $end
$var wire 1 2& pc2 [13] $end
$var wire 1 3& pc2 [12] $end
$var wire 1 4& pc2 [11] $end
$var wire 1 5& pc2 [10] $end
$var wire 1 6& pc2 [9] $end
$var wire 1 7& pc2 [8] $end
$var wire 1 8& pc2 [7] $end
$var wire 1 9& pc2 [6] $end
$var wire 1 :& pc2 [5] $end
$var wire 1 ;& pc2 [4] $end
$var wire 1 <& pc2 [3] $end
$var wire 1 =& pc2 [2] $end
$var wire 1 >& pc2 [1] $end
$var wire 1 ?& pc2 [0] $end
$var wire 1 @& sevenext [15] $end
$var wire 1 A& sevenext [14] $end
$var wire 1 B& sevenext [13] $end
$var wire 1 C& sevenext [12] $end
$var wire 1 D& sevenext [11] $end
$var wire 1 E& sevenext [10] $end
$var wire 1 F& sevenext [9] $end
$var wire 1 G& sevenext [8] $end
$var wire 1 H& sevenext [7] $end
$var wire 1 I& sevenext [6] $end
$var wire 1 J& sevenext [5] $end
$var wire 1 K& sevenext [4] $end
$var wire 1 L& sevenext [3] $end
$var wire 1 M& sevenext [2] $end
$var wire 1 N& sevenext [1] $end
$var wire 1 O& sevenext [0] $end
$var wire 1 k% ALUJmp $end
$var wire 1 l% MemWrt $end
$var wire 1 m% halt $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 d' MemRd $end
$var wire 1 v& newPC [15] $end
$var wire 1 w& newPC [14] $end
$var wire 1 x& newPC [13] $end
$var wire 1 y& newPC [12] $end
$var wire 1 z& newPC [11] $end
$var wire 1 {& newPC [10] $end
$var wire 1 |& newPC [9] $end
$var wire 1 }& newPC [8] $end
$var wire 1 ~& newPC [7] $end
$var wire 1 !' newPC [6] $end
$var wire 1 "' newPC [5] $end
$var wire 1 #' newPC [4] $end
$var wire 1 $' newPC [3] $end
$var wire 1 %' newPC [2] $end
$var wire 1 &' newPC [1] $end
$var wire 1 '' newPC [0] $end
$var wire 1 V& MemRead [15] $end
$var wire 1 W& MemRead [14] $end
$var wire 1 X& MemRead [13] $end
$var wire 1 Y& MemRead [12] $end
$var wire 1 Z& MemRead [11] $end
$var wire 1 [& MemRead [10] $end
$var wire 1 \& MemRead [9] $end
$var wire 1 ]& MemRead [8] $end
$var wire 1 ^& MemRead [7] $end
$var wire 1 _& MemRead [6] $end
$var wire 1 `& MemRead [5] $end
$var wire 1 a& MemRead [4] $end
$var wire 1 b& MemRead [3] $end
$var wire 1 c& MemRead [2] $end
$var wire 1 d& MemRead [1] $end
$var wire 1 e& MemRead [0] $end
$var wire 1 U) mem_halt $end
$var wire 1 ;C MuxImmSrc [15] $end
$var wire 1 <C MuxImmSrc [14] $end
$var wire 1 =C MuxImmSrc [13] $end
$var wire 1 >C MuxImmSrc [12] $end
$var wire 1 ?C MuxImmSrc [11] $end
$var wire 1 @C MuxImmSrc [10] $end
$var wire 1 AC MuxImmSrc [9] $end
$var wire 1 BC MuxImmSrc [8] $end
$var wire 1 CC MuxImmSrc [7] $end
$var wire 1 DC MuxImmSrc [6] $end
$var wire 1 EC MuxImmSrc [5] $end
$var wire 1 FC MuxImmSrc [4] $end
$var wire 1 GC MuxImmSrc [3] $end
$var wire 1 HC MuxImmSrc [2] $end
$var wire 1 IC MuxImmSrc [1] $end
$var wire 1 JC MuxImmSrc [0] $end
$var wire 1 KC adderOut [15] $end
$var wire 1 LC adderOut [14] $end
$var wire 1 MC adderOut [13] $end
$var wire 1 NC adderOut [12] $end
$var wire 1 OC adderOut [11] $end
$var wire 1 PC adderOut [10] $end
$var wire 1 QC adderOut [9] $end
$var wire 1 RC adderOut [8] $end
$var wire 1 SC adderOut [7] $end
$var wire 1 TC adderOut [6] $end
$var wire 1 UC adderOut [5] $end
$var wire 1 VC adderOut [4] $end
$var wire 1 WC adderOut [3] $end
$var wire 1 XC adderOut [2] $end
$var wire 1 YC adderOut [1] $end
$var wire 1 ZC adderOut [0] $end
$var wire 1 [C MuxBranchSrc [15] $end
$var wire 1 \C MuxBranchSrc [14] $end
$var wire 1 ]C MuxBranchSrc [13] $end
$var wire 1 ^C MuxBranchSrc [12] $end
$var wire 1 _C MuxBranchSrc [11] $end
$var wire 1 `C MuxBranchSrc [10] $end
$var wire 1 aC MuxBranchSrc [9] $end
$var wire 1 bC MuxBranchSrc [8] $end
$var wire 1 cC MuxBranchSrc [7] $end
$var wire 1 dC MuxBranchSrc [6] $end
$var wire 1 eC MuxBranchSrc [5] $end
$var wire 1 fC MuxBranchSrc [4] $end
$var wire 1 gC MuxBranchSrc [3] $end
$var wire 1 hC MuxBranchSrc [2] $end
$var wire 1 iC MuxBranchSrc [1] $end
$var wire 1 jC MuxBranchSrc [0] $end
$var wire 1 T) mem_stall $end
$var wire 1 kC done $end
$var wire 1 lC stall $end
$var wire 1 mC cachehit $end
$var wire 1 nC write_done $end
$var wire 1 oC read_done $end

$scope module fa $end
$var wire 1 0& A [15] $end
$var wire 1 1& A [14] $end
$var wire 1 2& A [13] $end
$var wire 1 3& A [12] $end
$var wire 1 4& A [11] $end
$var wire 1 5& A [10] $end
$var wire 1 6& A [9] $end
$var wire 1 7& A [8] $end
$var wire 1 8& A [7] $end
$var wire 1 9& A [6] $end
$var wire 1 :& A [5] $end
$var wire 1 ;& A [4] $end
$var wire 1 <& A [3] $end
$var wire 1 =& A [2] $end
$var wire 1 >& A [1] $end
$var wire 1 ?& A [0] $end
$var wire 1 ;C B [15] $end
$var wire 1 <C B [14] $end
$var wire 1 =C B [13] $end
$var wire 1 >C B [12] $end
$var wire 1 ?C B [11] $end
$var wire 1 @C B [10] $end
$var wire 1 AC B [9] $end
$var wire 1 BC B [8] $end
$var wire 1 CC B [7] $end
$var wire 1 DC B [6] $end
$var wire 1 EC B [5] $end
$var wire 1 FC B [4] $end
$var wire 1 GC B [3] $end
$var wire 1 HC B [2] $end
$var wire 1 IC B [1] $end
$var wire 1 JC B [0] $end
$var wire 1 KC S [15] $end
$var wire 1 LC S [14] $end
$var wire 1 MC S [13] $end
$var wire 1 NC S [12] $end
$var wire 1 OC S [11] $end
$var wire 1 PC S [10] $end
$var wire 1 QC S [9] $end
$var wire 1 RC S [8] $end
$var wire 1 SC S [7] $end
$var wire 1 TC S [6] $end
$var wire 1 UC S [5] $end
$var wire 1 VC S [4] $end
$var wire 1 WC S [3] $end
$var wire 1 XC S [2] $end
$var wire 1 YC S [1] $end
$var wire 1 ZC S [0] $end
$var wire 1 pC Cout $end
$var wire 1 qC Cout0 $end
$var wire 1 rC Cout1 $end
$var wire 1 sC Cout2 $end
$var wire 1 tC Cin $end

$scope module f1 $end
$var wire 1 <& A [3] $end
$var wire 1 =& A [2] $end
$var wire 1 >& A [1] $end
$var wire 1 ?& A [0] $end
$var wire 1 GC B [3] $end
$var wire 1 HC B [2] $end
$var wire 1 IC B [1] $end
$var wire 1 JC B [0] $end
$var wire 1 tC Cin $end
$var wire 1 WC S [3] $end
$var wire 1 XC S [2] $end
$var wire 1 YC S [1] $end
$var wire 1 ZC S [0] $end
$var wire 1 qC Cout $end
$var wire 1 uC Cout0 $end
$var wire 1 vC Cout1 $end
$var wire 1 wC Cout2 $end

$scope module f1 $end
$var wire 1 ?& A $end
$var wire 1 JC B $end
$var wire 1 tC Cin $end
$var wire 1 ZC S $end
$var wire 1 uC Cout $end
$var wire 1 xC xor_AB $end
$var wire 1 yC xor_ABCin $end
$var wire 1 zC NAND_AB $end
$var wire 1 {C not_NAND_AB $end
$var wire 1 |C NAND_Cin_xor_AB $end
$var wire 1 }C not_NAND_Cin_xor_AB $end
$var wire 1 ~C NOR_2NAND $end
$var wire 1 !D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 JC in2 $end
$var wire 1 xC out $end
$upscope $end

$scope module xor2 $end
$var wire 1 xC in1 $end
$var wire 1 tC in2 $end
$var wire 1 yC out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 JC in2 $end
$var wire 1 zC out $end
$upscope $end

$scope module not1 $end
$var wire 1 zC in1 $end
$var wire 1 {C out $end
$upscope $end

$scope module nand2 $end
$var wire 1 tC in1 $end
$var wire 1 xC in2 $end
$var wire 1 |C out $end
$upscope $end

$scope module not2 $end
$var wire 1 |C in1 $end
$var wire 1 }C out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {C in1 $end
$var wire 1 }C in2 $end
$var wire 1 ~C out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~C in1 $end
$var wire 1 !D out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 >& A $end
$var wire 1 IC B $end
$var wire 1 uC Cin $end
$var wire 1 YC S $end
$var wire 1 vC Cout $end
$var wire 1 "D xor_AB $end
$var wire 1 #D xor_ABCin $end
$var wire 1 $D NAND_AB $end
$var wire 1 %D not_NAND_AB $end
$var wire 1 &D NAND_Cin_xor_AB $end
$var wire 1 'D not_NAND_Cin_xor_AB $end
$var wire 1 (D NOR_2NAND $end
$var wire 1 )D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 IC in2 $end
$var wire 1 "D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 "D in1 $end
$var wire 1 uC in2 $end
$var wire 1 #D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 IC in2 $end
$var wire 1 $D out $end
$upscope $end

$scope module not1 $end
$var wire 1 $D in1 $end
$var wire 1 %D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 uC in1 $end
$var wire 1 "D in2 $end
$var wire 1 &D out $end
$upscope $end

$scope module not2 $end
$var wire 1 &D in1 $end
$var wire 1 'D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 %D in1 $end
$var wire 1 'D in2 $end
$var wire 1 (D out $end
$upscope $end

$scope module not3 $end
$var wire 1 (D in1 $end
$var wire 1 )D out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 =& A $end
$var wire 1 HC B $end
$var wire 1 vC Cin $end
$var wire 1 XC S $end
$var wire 1 wC Cout $end
$var wire 1 *D xor_AB $end
$var wire 1 +D xor_ABCin $end
$var wire 1 ,D NAND_AB $end
$var wire 1 -D not_NAND_AB $end
$var wire 1 .D NAND_Cin_xor_AB $end
$var wire 1 /D not_NAND_Cin_xor_AB $end
$var wire 1 0D NOR_2NAND $end
$var wire 1 1D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 HC in2 $end
$var wire 1 *D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 *D in1 $end
$var wire 1 vC in2 $end
$var wire 1 +D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 HC in2 $end
$var wire 1 ,D out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,D in1 $end
$var wire 1 -D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 vC in1 $end
$var wire 1 *D in2 $end
$var wire 1 .D out $end
$upscope $end

$scope module not2 $end
$var wire 1 .D in1 $end
$var wire 1 /D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -D in1 $end
$var wire 1 /D in2 $end
$var wire 1 0D out $end
$upscope $end

$scope module not3 $end
$var wire 1 0D in1 $end
$var wire 1 1D out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 <& A $end
$var wire 1 GC B $end
$var wire 1 wC Cin $end
$var wire 1 WC S $end
$var wire 1 qC Cout $end
$var wire 1 2D xor_AB $end
$var wire 1 3D xor_ABCin $end
$var wire 1 4D NAND_AB $end
$var wire 1 5D not_NAND_AB $end
$var wire 1 6D NAND_Cin_xor_AB $end
$var wire 1 7D not_NAND_Cin_xor_AB $end
$var wire 1 8D NOR_2NAND $end
$var wire 1 9D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 GC in2 $end
$var wire 1 2D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 2D in1 $end
$var wire 1 wC in2 $end
$var wire 1 3D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 GC in2 $end
$var wire 1 4D out $end
$upscope $end

$scope module not1 $end
$var wire 1 4D in1 $end
$var wire 1 5D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 wC in1 $end
$var wire 1 2D in2 $end
$var wire 1 6D out $end
$upscope $end

$scope module not2 $end
$var wire 1 6D in1 $end
$var wire 1 7D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 5D in1 $end
$var wire 1 7D in2 $end
$var wire 1 8D out $end
$upscope $end

$scope module not3 $end
$var wire 1 8D in1 $end
$var wire 1 9D out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A [3] $end
$var wire 1 9& A [2] $end
$var wire 1 :& A [1] $end
$var wire 1 ;& A [0] $end
$var wire 1 CC B [3] $end
$var wire 1 DC B [2] $end
$var wire 1 EC B [1] $end
$var wire 1 FC B [0] $end
$var wire 1 qC Cin $end
$var wire 1 SC S [3] $end
$var wire 1 TC S [2] $end
$var wire 1 UC S [1] $end
$var wire 1 VC S [0] $end
$var wire 1 rC Cout $end
$var wire 1 :D Cout0 $end
$var wire 1 ;D Cout1 $end
$var wire 1 <D Cout2 $end

$scope module f1 $end
$var wire 1 ;& A $end
$var wire 1 FC B $end
$var wire 1 qC Cin $end
$var wire 1 VC S $end
$var wire 1 :D Cout $end
$var wire 1 =D xor_AB $end
$var wire 1 >D xor_ABCin $end
$var wire 1 ?D NAND_AB $end
$var wire 1 @D not_NAND_AB $end
$var wire 1 AD NAND_Cin_xor_AB $end
$var wire 1 BD not_NAND_Cin_xor_AB $end
$var wire 1 CD NOR_2NAND $end
$var wire 1 DD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 FC in2 $end
$var wire 1 =D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 =D in1 $end
$var wire 1 qC in2 $end
$var wire 1 >D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 FC in2 $end
$var wire 1 ?D out $end
$upscope $end

$scope module not1 $end
$var wire 1 ?D in1 $end
$var wire 1 @D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 qC in1 $end
$var wire 1 =D in2 $end
$var wire 1 AD out $end
$upscope $end

$scope module not2 $end
$var wire 1 AD in1 $end
$var wire 1 BD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 @D in1 $end
$var wire 1 BD in2 $end
$var wire 1 CD out $end
$upscope $end

$scope module not3 $end
$var wire 1 CD in1 $end
$var wire 1 DD out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A $end
$var wire 1 EC B $end
$var wire 1 :D Cin $end
$var wire 1 UC S $end
$var wire 1 ;D Cout $end
$var wire 1 ED xor_AB $end
$var wire 1 FD xor_ABCin $end
$var wire 1 GD NAND_AB $end
$var wire 1 HD not_NAND_AB $end
$var wire 1 ID NAND_Cin_xor_AB $end
$var wire 1 JD not_NAND_Cin_xor_AB $end
$var wire 1 KD NOR_2NAND $end
$var wire 1 LD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 EC in2 $end
$var wire 1 ED out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ED in1 $end
$var wire 1 :D in2 $end
$var wire 1 FD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 EC in2 $end
$var wire 1 GD out $end
$upscope $end

$scope module not1 $end
$var wire 1 GD in1 $end
$var wire 1 HD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :D in1 $end
$var wire 1 ED in2 $end
$var wire 1 ID out $end
$upscope $end

$scope module not2 $end
$var wire 1 ID in1 $end
$var wire 1 JD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 HD in1 $end
$var wire 1 JD in2 $end
$var wire 1 KD out $end
$upscope $end

$scope module not3 $end
$var wire 1 KD in1 $end
$var wire 1 LD out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 9& A $end
$var wire 1 DC B $end
$var wire 1 ;D Cin $end
$var wire 1 TC S $end
$var wire 1 <D Cout $end
$var wire 1 MD xor_AB $end
$var wire 1 ND xor_ABCin $end
$var wire 1 OD NAND_AB $end
$var wire 1 PD not_NAND_AB $end
$var wire 1 QD NAND_Cin_xor_AB $end
$var wire 1 RD not_NAND_Cin_xor_AB $end
$var wire 1 SD NOR_2NAND $end
$var wire 1 TD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 DC in2 $end
$var wire 1 MD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 MD in1 $end
$var wire 1 ;D in2 $end
$var wire 1 ND out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 DC in2 $end
$var wire 1 OD out $end
$upscope $end

$scope module not1 $end
$var wire 1 OD in1 $end
$var wire 1 PD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;D in1 $end
$var wire 1 MD in2 $end
$var wire 1 QD out $end
$upscope $end

$scope module not2 $end
$var wire 1 QD in1 $end
$var wire 1 RD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 PD in1 $end
$var wire 1 RD in2 $end
$var wire 1 SD out $end
$upscope $end

$scope module not3 $end
$var wire 1 SD in1 $end
$var wire 1 TD out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 8& A $end
$var wire 1 CC B $end
$var wire 1 <D Cin $end
$var wire 1 SC S $end
$var wire 1 rC Cout $end
$var wire 1 UD xor_AB $end
$var wire 1 VD xor_ABCin $end
$var wire 1 WD NAND_AB $end
$var wire 1 XD not_NAND_AB $end
$var wire 1 YD NAND_Cin_xor_AB $end
$var wire 1 ZD not_NAND_Cin_xor_AB $end
$var wire 1 [D NOR_2NAND $end
$var wire 1 \D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 CC in2 $end
$var wire 1 UD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 UD in1 $end
$var wire 1 <D in2 $end
$var wire 1 VD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 CC in2 $end
$var wire 1 WD out $end
$upscope $end

$scope module not1 $end
$var wire 1 WD in1 $end
$var wire 1 XD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 <D in1 $end
$var wire 1 UD in2 $end
$var wire 1 YD out $end
$upscope $end

$scope module not2 $end
$var wire 1 YD in1 $end
$var wire 1 ZD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 XD in1 $end
$var wire 1 ZD in2 $end
$var wire 1 [D out $end
$upscope $end

$scope module not3 $end
$var wire 1 [D in1 $end
$var wire 1 \D out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 4& A [3] $end
$var wire 1 5& A [2] $end
$var wire 1 6& A [1] $end
$var wire 1 7& A [0] $end
$var wire 1 ?C B [3] $end
$var wire 1 @C B [2] $end
$var wire 1 AC B [1] $end
$var wire 1 BC B [0] $end
$var wire 1 rC Cin $end
$var wire 1 OC S [3] $end
$var wire 1 PC S [2] $end
$var wire 1 QC S [1] $end
$var wire 1 RC S [0] $end
$var wire 1 sC Cout $end
$var wire 1 ]D Cout0 $end
$var wire 1 ^D Cout1 $end
$var wire 1 _D Cout2 $end

$scope module f1 $end
$var wire 1 7& A $end
$var wire 1 BC B $end
$var wire 1 rC Cin $end
$var wire 1 RC S $end
$var wire 1 ]D Cout $end
$var wire 1 `D xor_AB $end
$var wire 1 aD xor_ABCin $end
$var wire 1 bD NAND_AB $end
$var wire 1 cD not_NAND_AB $end
$var wire 1 dD NAND_Cin_xor_AB $end
$var wire 1 eD not_NAND_Cin_xor_AB $end
$var wire 1 fD NOR_2NAND $end
$var wire 1 gD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 BC in2 $end
$var wire 1 `D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 `D in1 $end
$var wire 1 rC in2 $end
$var wire 1 aD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 BC in2 $end
$var wire 1 bD out $end
$upscope $end

$scope module not1 $end
$var wire 1 bD in1 $end
$var wire 1 cD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 rC in1 $end
$var wire 1 `D in2 $end
$var wire 1 dD out $end
$upscope $end

$scope module not2 $end
$var wire 1 dD in1 $end
$var wire 1 eD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 cD in1 $end
$var wire 1 eD in2 $end
$var wire 1 fD out $end
$upscope $end

$scope module not3 $end
$var wire 1 fD in1 $end
$var wire 1 gD out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 6& A $end
$var wire 1 AC B $end
$var wire 1 ]D Cin $end
$var wire 1 QC S $end
$var wire 1 ^D Cout $end
$var wire 1 hD xor_AB $end
$var wire 1 iD xor_ABCin $end
$var wire 1 jD NAND_AB $end
$var wire 1 kD not_NAND_AB $end
$var wire 1 lD NAND_Cin_xor_AB $end
$var wire 1 mD not_NAND_Cin_xor_AB $end
$var wire 1 nD NOR_2NAND $end
$var wire 1 oD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 AC in2 $end
$var wire 1 hD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 hD in1 $end
$var wire 1 ]D in2 $end
$var wire 1 iD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 AC in2 $end
$var wire 1 jD out $end
$upscope $end

$scope module not1 $end
$var wire 1 jD in1 $end
$var wire 1 kD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]D in1 $end
$var wire 1 hD in2 $end
$var wire 1 lD out $end
$upscope $end

$scope module not2 $end
$var wire 1 lD in1 $end
$var wire 1 mD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 kD in1 $end
$var wire 1 mD in2 $end
$var wire 1 nD out $end
$upscope $end

$scope module not3 $end
$var wire 1 nD in1 $end
$var wire 1 oD out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 5& A $end
$var wire 1 @C B $end
$var wire 1 ^D Cin $end
$var wire 1 PC S $end
$var wire 1 _D Cout $end
$var wire 1 pD xor_AB $end
$var wire 1 qD xor_ABCin $end
$var wire 1 rD NAND_AB $end
$var wire 1 sD not_NAND_AB $end
$var wire 1 tD NAND_Cin_xor_AB $end
$var wire 1 uD not_NAND_Cin_xor_AB $end
$var wire 1 vD NOR_2NAND $end
$var wire 1 wD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 @C in2 $end
$var wire 1 pD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 pD in1 $end
$var wire 1 ^D in2 $end
$var wire 1 qD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 @C in2 $end
$var wire 1 rD out $end
$upscope $end

$scope module not1 $end
$var wire 1 rD in1 $end
$var wire 1 sD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^D in1 $end
$var wire 1 pD in2 $end
$var wire 1 tD out $end
$upscope $end

$scope module not2 $end
$var wire 1 tD in1 $end
$var wire 1 uD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 sD in1 $end
$var wire 1 uD in2 $end
$var wire 1 vD out $end
$upscope $end

$scope module not3 $end
$var wire 1 vD in1 $end
$var wire 1 wD out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 4& A $end
$var wire 1 ?C B $end
$var wire 1 _D Cin $end
$var wire 1 OC S $end
$var wire 1 sC Cout $end
$var wire 1 xD xor_AB $end
$var wire 1 yD xor_ABCin $end
$var wire 1 zD NAND_AB $end
$var wire 1 {D not_NAND_AB $end
$var wire 1 |D NAND_Cin_xor_AB $end
$var wire 1 }D not_NAND_Cin_xor_AB $end
$var wire 1 ~D NOR_2NAND $end
$var wire 1 !E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 ?C in2 $end
$var wire 1 xD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 xD in1 $end
$var wire 1 _D in2 $end
$var wire 1 yD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 ?C in2 $end
$var wire 1 zD out $end
$upscope $end

$scope module not1 $end
$var wire 1 zD in1 $end
$var wire 1 {D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 _D in1 $end
$var wire 1 xD in2 $end
$var wire 1 |D out $end
$upscope $end

$scope module not2 $end
$var wire 1 |D in1 $end
$var wire 1 }D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {D in1 $end
$var wire 1 }D in2 $end
$var wire 1 ~D out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~D in1 $end
$var wire 1 !E out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 0& A [3] $end
$var wire 1 1& A [2] $end
$var wire 1 2& A [1] $end
$var wire 1 3& A [0] $end
$var wire 1 ;C B [3] $end
$var wire 1 <C B [2] $end
$var wire 1 =C B [1] $end
$var wire 1 >C B [0] $end
$var wire 1 sC Cin $end
$var wire 1 KC S [3] $end
$var wire 1 LC S [2] $end
$var wire 1 MC S [1] $end
$var wire 1 NC S [0] $end
$var wire 1 pC Cout $end
$var wire 1 "E Cout0 $end
$var wire 1 #E Cout1 $end
$var wire 1 $E Cout2 $end

$scope module f1 $end
$var wire 1 3& A $end
$var wire 1 >C B $end
$var wire 1 sC Cin $end
$var wire 1 NC S $end
$var wire 1 "E Cout $end
$var wire 1 %E xor_AB $end
$var wire 1 &E xor_ABCin $end
$var wire 1 'E NAND_AB $end
$var wire 1 (E not_NAND_AB $end
$var wire 1 )E NAND_Cin_xor_AB $end
$var wire 1 *E not_NAND_Cin_xor_AB $end
$var wire 1 +E NOR_2NAND $end
$var wire 1 ,E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 >C in2 $end
$var wire 1 %E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %E in1 $end
$var wire 1 sC in2 $end
$var wire 1 &E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 >C in2 $end
$var wire 1 'E out $end
$upscope $end

$scope module not1 $end
$var wire 1 'E in1 $end
$var wire 1 (E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 sC in1 $end
$var wire 1 %E in2 $end
$var wire 1 )E out $end
$upscope $end

$scope module not2 $end
$var wire 1 )E in1 $end
$var wire 1 *E out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (E in1 $end
$var wire 1 *E in2 $end
$var wire 1 +E out $end
$upscope $end

$scope module not3 $end
$var wire 1 +E in1 $end
$var wire 1 ,E out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 2& A $end
$var wire 1 =C B $end
$var wire 1 "E Cin $end
$var wire 1 MC S $end
$var wire 1 #E Cout $end
$var wire 1 -E xor_AB $end
$var wire 1 .E xor_ABCin $end
$var wire 1 /E NAND_AB $end
$var wire 1 0E not_NAND_AB $end
$var wire 1 1E NAND_Cin_xor_AB $end
$var wire 1 2E not_NAND_Cin_xor_AB $end
$var wire 1 3E NOR_2NAND $end
$var wire 1 4E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 =C in2 $end
$var wire 1 -E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -E in1 $end
$var wire 1 "E in2 $end
$var wire 1 .E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 =C in2 $end
$var wire 1 /E out $end
$upscope $end

$scope module not1 $end
$var wire 1 /E in1 $end
$var wire 1 0E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "E in1 $end
$var wire 1 -E in2 $end
$var wire 1 1E out $end
$upscope $end

$scope module not2 $end
$var wire 1 1E in1 $end
$var wire 1 2E out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0E in1 $end
$var wire 1 2E in2 $end
$var wire 1 3E out $end
$upscope $end

$scope module not3 $end
$var wire 1 3E in1 $end
$var wire 1 4E out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 1& A $end
$var wire 1 <C B $end
$var wire 1 #E Cin $end
$var wire 1 LC S $end
$var wire 1 $E Cout $end
$var wire 1 5E xor_AB $end
$var wire 1 6E xor_ABCin $end
$var wire 1 7E NAND_AB $end
$var wire 1 8E not_NAND_AB $end
$var wire 1 9E NAND_Cin_xor_AB $end
$var wire 1 :E not_NAND_Cin_xor_AB $end
$var wire 1 ;E NOR_2NAND $end
$var wire 1 <E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 1& in1 $end
$var wire 1 <C in2 $end
$var wire 1 5E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5E in1 $end
$var wire 1 #E in2 $end
$var wire 1 6E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 1& in1 $end
$var wire 1 <C in2 $end
$var wire 1 7E out $end
$upscope $end

$scope module not1 $end
$var wire 1 7E in1 $end
$var wire 1 8E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #E in1 $end
$var wire 1 5E in2 $end
$var wire 1 9E out $end
$upscope $end

$scope module not2 $end
$var wire 1 9E in1 $end
$var wire 1 :E out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8E in1 $end
$var wire 1 :E in2 $end
$var wire 1 ;E out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;E in1 $end
$var wire 1 <E out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 0& A $end
$var wire 1 ;C B $end
$var wire 1 $E Cin $end
$var wire 1 KC S $end
$var wire 1 pC Cout $end
$var wire 1 =E xor_AB $end
$var wire 1 >E xor_ABCin $end
$var wire 1 ?E NAND_AB $end
$var wire 1 @E not_NAND_AB $end
$var wire 1 AE NAND_Cin_xor_AB $end
$var wire 1 BE not_NAND_Cin_xor_AB $end
$var wire 1 CE NOR_2NAND $end
$var wire 1 DE not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 0& in1 $end
$var wire 1 ;C in2 $end
$var wire 1 =E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 =E in1 $end
$var wire 1 $E in2 $end
$var wire 1 >E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 0& in1 $end
$var wire 1 ;C in2 $end
$var wire 1 ?E out $end
$upscope $end

$scope module not1 $end
$var wire 1 ?E in1 $end
$var wire 1 @E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 $E in1 $end
$var wire 1 =E in2 $end
$var wire 1 AE out $end
$upscope $end

$scope module not2 $end
$var wire 1 AE in1 $end
$var wire 1 BE out $end
$upscope $end

$scope module nor1 $end
$var wire 1 @E in1 $end
$var wire 1 BE in2 $end
$var wire 1 CE out $end
$upscope $end

$scope module not3 $end
$var wire 1 CE in1 $end
$var wire 1 DE out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 V& DataOut [15] $end
$var wire 1 W& DataOut [14] $end
$var wire 1 X& DataOut [13] $end
$var wire 1 Y& DataOut [12] $end
$var wire 1 Z& DataOut [11] $end
$var wire 1 [& DataOut [10] $end
$var wire 1 \& DataOut [9] $end
$var wire 1 ]& DataOut [8] $end
$var wire 1 ^& DataOut [7] $end
$var wire 1 _& DataOut [6] $end
$var wire 1 `& DataOut [5] $end
$var wire 1 a& DataOut [4] $end
$var wire 1 b& DataOut [3] $end
$var wire 1 c& DataOut [2] $end
$var wire 1 d& DataOut [1] $end
$var wire 1 e& DataOut [0] $end
$var wire 1 kC Done $end
$var wire 1 lC Stall $end
$var wire 1 mC CacheHit $end
$var wire 1 ~% DataIn [15] $end
$var wire 1 !& DataIn [14] $end
$var wire 1 "& DataIn [13] $end
$var wire 1 #& DataIn [12] $end
$var wire 1 $& DataIn [11] $end
$var wire 1 %& DataIn [10] $end
$var wire 1 && DataIn [9] $end
$var wire 1 '& DataIn [8] $end
$var wire 1 (& DataIn [7] $end
$var wire 1 )& DataIn [6] $end
$var wire 1 *& DataIn [5] $end
$var wire 1 +& DataIn [4] $end
$var wire 1 ,& DataIn [3] $end
$var wire 1 -& DataIn [2] $end
$var wire 1 .& DataIn [1] $end
$var wire 1 /& DataIn [0] $end
$var wire 1 9% Addr [15] $end
$var wire 1 :% Addr [14] $end
$var wire 1 ;% Addr [13] $end
$var wire 1 <% Addr [12] $end
$var wire 1 =% Addr [11] $end
$var wire 1 >% Addr [10] $end
$var wire 1 ?% Addr [9] $end
$var wire 1 @% Addr [8] $end
$var wire 1 A% Addr [7] $end
$var wire 1 B% Addr [6] $end
$var wire 1 C% Addr [5] $end
$var wire 1 D% Addr [4] $end
$var wire 1 E% Addr [3] $end
$var wire 1 F% Addr [2] $end
$var wire 1 G% Addr [1] $end
$var wire 1 H% Addr [0] $end
$var wire 1 l% Wr $end
$var wire 1 d' Rd $end
$var wire 1 m% createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U) err $end
$var reg 1 EE loaded $end
$var reg 17 FE largest [16:0] $end
$var reg 32 GE rand_pat [31:0] $end
$var wire 1 HE ready $end
$var integer 32 IE mcd $end
$var integer 32 JE i $end
$var integer 32 KE seed $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T) mem_stall $end
$var wire 1 n( fetch_stall $end
$var wire 1 V& MemRead_in [15] $end
$var wire 1 W& MemRead_in [14] $end
$var wire 1 X& MemRead_in [13] $end
$var wire 1 Y& MemRead_in [12] $end
$var wire 1 Z& MemRead_in [11] $end
$var wire 1 [& MemRead_in [10] $end
$var wire 1 \& MemRead_in [9] $end
$var wire 1 ]& MemRead_in [8] $end
$var wire 1 ^& MemRead_in [7] $end
$var wire 1 _& MemRead_in [6] $end
$var wire 1 `& MemRead_in [5] $end
$var wire 1 a& MemRead_in [4] $end
$var wire 1 b& MemRead_in [3] $end
$var wire 1 c& MemRead_in [2] $end
$var wire 1 d& MemRead_in [1] $end
$var wire 1 e& MemRead_in [0] $end
$var wire 1 f& mem_data_out [15] $end
$var wire 1 g& mem_data_out [14] $end
$var wire 1 h& mem_data_out [13] $end
$var wire 1 i& mem_data_out [12] $end
$var wire 1 j& mem_data_out [11] $end
$var wire 1 k& mem_data_out [10] $end
$var wire 1 l& mem_data_out [9] $end
$var wire 1 m& mem_data_out [8] $end
$var wire 1 n& mem_data_out [7] $end
$var wire 1 o& mem_data_out [6] $end
$var wire 1 p& mem_data_out [5] $end
$var wire 1 q& mem_data_out [4] $end
$var wire 1 r& mem_data_out [3] $end
$var wire 1 s& mem_data_out [2] $end
$var wire 1 t& mem_data_out [1] $end
$var wire 1 u& mem_data_out [0] $end
$var wire 1 Q& RegSrc_in [1] $end
$var wire 1 R& RegSrc_in [0] $end
$var wire 1 8' RegSrc_out [1] $end
$var wire 1 9' RegSrc_out [0] $end
$var wire 1 9% alu_data_in [15] $end
$var wire 1 :% alu_data_in [14] $end
$var wire 1 ;% alu_data_in [13] $end
$var wire 1 <% alu_data_in [12] $end
$var wire 1 =% alu_data_in [11] $end
$var wire 1 >% alu_data_in [10] $end
$var wire 1 ?% alu_data_in [9] $end
$var wire 1 @% alu_data_in [8] $end
$var wire 1 A% alu_data_in [7] $end
$var wire 1 B% alu_data_in [6] $end
$var wire 1 C% alu_data_in [5] $end
$var wire 1 D% alu_data_in [4] $end
$var wire 1 E% alu_data_in [3] $end
$var wire 1 F% alu_data_in [2] $end
$var wire 1 G% alu_data_in [1] $end
$var wire 1 H% alu_data_in [0] $end
$var wire 1 0& pc_data_in [15] $end
$var wire 1 1& pc_data_in [14] $end
$var wire 1 2& pc_data_in [13] $end
$var wire 1 3& pc_data_in [12] $end
$var wire 1 4& pc_data_in [11] $end
$var wire 1 5& pc_data_in [10] $end
$var wire 1 6& pc_data_in [9] $end
$var wire 1 7& pc_data_in [8] $end
$var wire 1 8& pc_data_in [7] $end
$var wire 1 9& pc_data_in [6] $end
$var wire 1 :& pc_data_in [5] $end
$var wire 1 ;& pc_data_in [4] $end
$var wire 1 <& pc_data_in [3] $end
$var wire 1 =& pc_data_in [2] $end
$var wire 1 >& pc_data_in [1] $end
$var wire 1 ?& pc_data_in [0] $end
$var wire 1 Y% Binput_in [15] $end
$var wire 1 Z% Binput_in [14] $end
$var wire 1 [% Binput_in [13] $end
$var wire 1 \% Binput_in [12] $end
$var wire 1 ]% Binput_in [11] $end
$var wire 1 ^% Binput_in [10] $end
$var wire 1 _% Binput_in [9] $end
$var wire 1 `% Binput_in [8] $end
$var wire 1 a% Binput_in [7] $end
$var wire 1 b% Binput_in [6] $end
$var wire 1 c% Binput_in [5] $end
$var wire 1 d% Binput_in [4] $end
$var wire 1 e% Binput_in [3] $end
$var wire 1 f% Binput_in [2] $end
$var wire 1 g% Binput_in [1] $end
$var wire 1 h% Binput_in [0] $end
$var wire 1 K' alu_data_out [15] $end
$var wire 1 L' alu_data_out [14] $end
$var wire 1 M' alu_data_out [13] $end
$var wire 1 N' alu_data_out [12] $end
$var wire 1 O' alu_data_out [11] $end
$var wire 1 P' alu_data_out [10] $end
$var wire 1 Q' alu_data_out [9] $end
$var wire 1 R' alu_data_out [8] $end
$var wire 1 S' alu_data_out [7] $end
$var wire 1 T' alu_data_out [6] $end
$var wire 1 U' alu_data_out [5] $end
$var wire 1 V' alu_data_out [4] $end
$var wire 1 W' alu_data_out [3] $end
$var wire 1 X' alu_data_out [2] $end
$var wire 1 Y' alu_data_out [1] $end
$var wire 1 Z' alu_data_out [0] $end
$var wire 1 (' pc_data_out [15] $end
$var wire 1 )' pc_data_out [14] $end
$var wire 1 *' pc_data_out [13] $end
$var wire 1 +' pc_data_out [12] $end
$var wire 1 ,' pc_data_out [11] $end
$var wire 1 -' pc_data_out [10] $end
$var wire 1 .' pc_data_out [9] $end
$var wire 1 /' pc_data_out [8] $end
$var wire 1 0' pc_data_out [7] $end
$var wire 1 1' pc_data_out [6] $end
$var wire 1 2' pc_data_out [5] $end
$var wire 1 3' pc_data_out [4] $end
$var wire 1 4' pc_data_out [3] $end
$var wire 1 5' pc_data_out [2] $end
$var wire 1 6' pc_data_out [1] $end
$var wire 1 7' pc_data_out [0] $end
$var wire 1 :' Binput_out [15] $end
$var wire 1 ;' Binput_out [14] $end
$var wire 1 <' Binput_out [13] $end
$var wire 1 =' Binput_out [12] $end
$var wire 1 >' Binput_out [11] $end
$var wire 1 ?' Binput_out [10] $end
$var wire 1 @' Binput_out [9] $end
$var wire 1 A' Binput_out [8] $end
$var wire 1 B' Binput_out [7] $end
$var wire 1 C' Binput_out [6] $end
$var wire 1 D' Binput_out [5] $end
$var wire 1 E' Binput_out [4] $end
$var wire 1 F' Binput_out [3] $end
$var wire 1 G' Binput_out [2] $end
$var wire 1 H' Binput_out [1] $end
$var wire 1 I' Binput_out [0] $end
$var wire 1 P& RegWrt_in $end
$var wire 1 J' RegWrt_out $end
$var wire 1 ?) SendNOP_In $end
$var wire 1 @) SendNOP_Out $end
$var wire 1 S& write_reg_in [2] $end
$var wire 1 T& write_reg_in [1] $end
$var wire 1 U& write_reg_in [0] $end
$var wire 1 [' write_reg_out [2] $end
$var wire 1 \' write_reg_out [1] $end
$var wire 1 ]' write_reg_out [0] $end
$var wire 1 i% b_in $end
$var wire 1 ^' b_out $end

$scope module RegWrt $end
$var wire 1 J' q $end
$var wire 1 LE d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ME state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 @) q $end
$var wire 1 ?) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 NE state $end
$upscope $end

$scope module branch $end
$var wire 1 ^' q $end
$var wire 1 i% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 OE state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 8' q $end
$var wire 1 Q& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 PE state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 9' q $end
$var wire 1 R& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 QE state $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 f& q $end
$var wire 1 V& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 RE state $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 g& q $end
$var wire 1 W& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 SE state $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 TE state $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 UE state $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 VE state $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 WE state $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 XE state $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 YE state $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ZE state $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 [E state $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 \E state $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ]E state $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ^E state $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 _E state $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 `E state $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 aE state $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 K' q $end
$var wire 1 9% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 bE state $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 L' q $end
$var wire 1 :% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 cE state $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 dE state $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 eE state $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 fE state $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 gE state $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 hE state $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 iE state $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 jE state $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 kE state $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 lE state $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 mE state $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 nE state $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 oE state $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 pE state $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 qE state $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 (' q $end
$var wire 1 0& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 rE state $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 )' q $end
$var wire 1 1& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 sE state $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 tE state $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 uE state $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 vE state $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 wE state $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 xE state $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 yE state $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 zE state $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 {E state $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 |E state $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 }E state $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ~E state $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 !F state $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 "F state $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 #F state $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 :' q $end
$var wire 1 Y% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 $F state $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 ;' q $end
$var wire 1 Z% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 %F state $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 &F state $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 'F state $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 (F state $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 )F state $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 *F state $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 +F state $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 ,F state $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 -F state $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 .F state $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 /F state $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 0F state $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 1F state $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 2F state $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 3F state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 [' q $end
$var wire 1 S& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 4F state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 \' q $end
$var wire 1 T& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 5F state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var reg 1 6F state $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 8' RegSrc [1] $end
$var wire 1 9' RegSrc [0] $end
$var wire 1 f& mem_data [15] $end
$var wire 1 g& mem_data [14] $end
$var wire 1 h& mem_data [13] $end
$var wire 1 i& mem_data [12] $end
$var wire 1 j& mem_data [11] $end
$var wire 1 k& mem_data [10] $end
$var wire 1 l& mem_data [9] $end
$var wire 1 m& mem_data [8] $end
$var wire 1 n& mem_data [7] $end
$var wire 1 o& mem_data [6] $end
$var wire 1 p& mem_data [5] $end
$var wire 1 q& mem_data [4] $end
$var wire 1 r& mem_data [3] $end
$var wire 1 s& mem_data [2] $end
$var wire 1 t& mem_data [1] $end
$var wire 1 u& mem_data [0] $end
$var wire 1 K' alu_data [15] $end
$var wire 1 L' alu_data [14] $end
$var wire 1 M' alu_data [13] $end
$var wire 1 N' alu_data [12] $end
$var wire 1 O' alu_data [11] $end
$var wire 1 P' alu_data [10] $end
$var wire 1 Q' alu_data [9] $end
$var wire 1 R' alu_data [8] $end
$var wire 1 S' alu_data [7] $end
$var wire 1 T' alu_data [6] $end
$var wire 1 U' alu_data [5] $end
$var wire 1 V' alu_data [4] $end
$var wire 1 W' alu_data [3] $end
$var wire 1 X' alu_data [2] $end
$var wire 1 Y' alu_data [1] $end
$var wire 1 Z' alu_data [0] $end
$var wire 1 (' pc_data [15] $end
$var wire 1 )' pc_data [14] $end
$var wire 1 *' pc_data [13] $end
$var wire 1 +' pc_data [12] $end
$var wire 1 ,' pc_data [11] $end
$var wire 1 -' pc_data [10] $end
$var wire 1 .' pc_data [9] $end
$var wire 1 /' pc_data [8] $end
$var wire 1 0' pc_data [7] $end
$var wire 1 1' pc_data [6] $end
$var wire 1 2' pc_data [5] $end
$var wire 1 3' pc_data [4] $end
$var wire 1 4' pc_data [3] $end
$var wire 1 5' pc_data [2] $end
$var wire 1 6' pc_data [1] $end
$var wire 1 7' pc_data [0] $end
$var wire 1 :' Binput [15] $end
$var wire 1 ;' Binput [14] $end
$var wire 1 <' Binput [13] $end
$var wire 1 =' Binput [12] $end
$var wire 1 >' Binput [11] $end
$var wire 1 ?' Binput [10] $end
$var wire 1 @' Binput [9] $end
$var wire 1 A' Binput [8] $end
$var wire 1 B' Binput [7] $end
$var wire 1 C' Binput [6] $end
$var wire 1 D' Binput [5] $end
$var wire 1 E' Binput [4] $end
$var wire 1 F' Binput [3] $end
$var wire 1 G' Binput [2] $end
$var wire 1 H' Binput [1] $end
$var wire 1 I' Binput [0] $end
$var wire 1 <! data_to_write [15] $end
$var wire 1 =! data_to_write [14] $end
$var wire 1 >! data_to_write [13] $end
$var wire 1 ?! data_to_write [12] $end
$var wire 1 @! data_to_write [11] $end
$var wire 1 A! data_to_write [10] $end
$var wire 1 B! data_to_write [9] $end
$var wire 1 C! data_to_write [8] $end
$var wire 1 D! data_to_write [7] $end
$var wire 1 E! data_to_write [6] $end
$var wire 1 F! data_to_write [5] $end
$var wire 1 G! data_to_write [4] $end
$var wire 1 H! data_to_write [3] $end
$var wire 1 I! data_to_write [2] $end
$var wire 1 J! data_to_write [1] $end
$var wire 1 K! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end

$scope module DUT $end
$var wire 1 5! clk $end
$var wire 1 6! err $end
$var wire 1 7! rst $end

$scope module c0 $end
$var wire 1 6! err $end
$upscope $end

$scope module p0 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 <! data_write [15] $end
$var wire 1 =! data_write [14] $end
$var wire 1 >! data_write [13] $end
$var wire 1 ?! data_write [12] $end
$var wire 1 @! data_write [11] $end
$var wire 1 A! data_write [10] $end
$var wire 1 B! data_write [9] $end
$var wire 1 C! data_write [8] $end
$var wire 1 D! data_write [7] $end
$var wire 1 E! data_write [6] $end
$var wire 1 F! data_write [5] $end
$var wire 1 G! data_write [4] $end
$var wire 1 H! data_write [3] $end
$var wire 1 I! data_write [2] $end
$var wire 1 J! data_write [1] $end
$var wire 1 K! data_write [0] $end
$var wire 1 L! ImmSrc $end
$var wire 1 M! temp [15] $end
$var wire 1 N! temp [14] $end
$var wire 1 O! temp [13] $end
$var wire 1 P! temp [12] $end
$var wire 1 Q! temp [11] $end
$var wire 1 R! temp [10] $end
$var wire 1 S! temp [9] $end
$var wire 1 T! temp [8] $end
$var wire 1 U! temp [7] $end
$var wire 1 V! temp [6] $end
$var wire 1 W! temp [5] $end
$var wire 1 X! temp [4] $end
$var wire 1 Y! temp [3] $end
$var wire 1 Z! temp [2] $end
$var wire 1 [! temp [1] $end
$var wire 1 \! temp [0] $end
$var wire 1 ]! instruction [15] $end
$var wire 1 ^! instruction [14] $end
$var wire 1 _! instruction [13] $end
$var wire 1 `! instruction [12] $end
$var wire 1 a! instruction [11] $end
$var wire 1 b! instruction [10] $end
$var wire 1 c! instruction [9] $end
$var wire 1 d! instruction [8] $end
$var wire 1 e! instruction [7] $end
$var wire 1 f! instruction [6] $end
$var wire 1 g! instruction [5] $end
$var wire 1 h! instruction [4] $end
$var wire 1 i! instruction [3] $end
$var wire 1 j! instruction [2] $end
$var wire 1 k! instruction [1] $end
$var wire 1 l! instruction [0] $end
$var wire 1 m! instruction_out_IF_ID [15] $end
$var wire 1 n! instruction_out_IF_ID [14] $end
$var wire 1 o! instruction_out_IF_ID [13] $end
$var wire 1 p! instruction_out_IF_ID [12] $end
$var wire 1 q! instruction_out_IF_ID [11] $end
$var wire 1 r! instruction_out_IF_ID [10] $end
$var wire 1 s! instruction_out_IF_ID [9] $end
$var wire 1 t! instruction_out_IF_ID [8] $end
$var wire 1 u! instruction_out_IF_ID [7] $end
$var wire 1 v! instruction_out_IF_ID [6] $end
$var wire 1 w! instruction_out_IF_ID [5] $end
$var wire 1 x! instruction_out_IF_ID [4] $end
$var wire 1 y! instruction_out_IF_ID [3] $end
$var wire 1 z! instruction_out_IF_ID [2] $end
$var wire 1 {! instruction_out_IF_ID [1] $end
$var wire 1 |! instruction_out_IF_ID [0] $end
$var wire 1 }! pc_next_to_IF_ID [15] $end
$var wire 1 ~! pc_next_to_IF_ID [14] $end
$var wire 1 !" pc_next_to_IF_ID [13] $end
$var wire 1 "" pc_next_to_IF_ID [12] $end
$var wire 1 #" pc_next_to_IF_ID [11] $end
$var wire 1 $" pc_next_to_IF_ID [10] $end
$var wire 1 %" pc_next_to_IF_ID [9] $end
$var wire 1 &" pc_next_to_IF_ID [8] $end
$var wire 1 '" pc_next_to_IF_ID [7] $end
$var wire 1 (" pc_next_to_IF_ID [6] $end
$var wire 1 )" pc_next_to_IF_ID [5] $end
$var wire 1 *" pc_next_to_IF_ID [4] $end
$var wire 1 +" pc_next_to_IF_ID [3] $end
$var wire 1 ," pc_next_to_IF_ID [2] $end
$var wire 1 -" pc_next_to_IF_ID [1] $end
$var wire 1 ." pc_next_to_IF_ID [0] $end
$var wire 1 /" pc_next_out_IF_ID [15] $end
$var wire 1 0" pc_next_out_IF_ID [14] $end
$var wire 1 1" pc_next_out_IF_ID [13] $end
$var wire 1 2" pc_next_out_IF_ID [12] $end
$var wire 1 3" pc_next_out_IF_ID [11] $end
$var wire 1 4" pc_next_out_IF_ID [10] $end
$var wire 1 5" pc_next_out_IF_ID [9] $end
$var wire 1 6" pc_next_out_IF_ID [8] $end
$var wire 1 7" pc_next_out_IF_ID [7] $end
$var wire 1 8" pc_next_out_IF_ID [6] $end
$var wire 1 9" pc_next_out_IF_ID [5] $end
$var wire 1 :" pc_next_out_IF_ID [4] $end
$var wire 1 ;" pc_next_out_IF_ID [3] $end
$var wire 1 <" pc_next_out_IF_ID [2] $end
$var wire 1 =" pc_next_out_IF_ID [1] $end
$var wire 1 >" pc_next_out_IF_ID [0] $end
$var wire 1 ?" pc_next_out_ID_EX [15] $end
$var wire 1 @" pc_next_out_ID_EX [14] $end
$var wire 1 A" pc_next_out_ID_EX [13] $end
$var wire 1 B" pc_next_out_ID_EX [12] $end
$var wire 1 C" pc_next_out_ID_EX [11] $end
$var wire 1 D" pc_next_out_ID_EX [10] $end
$var wire 1 E" pc_next_out_ID_EX [9] $end
$var wire 1 F" pc_next_out_ID_EX [8] $end
$var wire 1 G" pc_next_out_ID_EX [7] $end
$var wire 1 H" pc_next_out_ID_EX [6] $end
$var wire 1 I" pc_next_out_ID_EX [5] $end
$var wire 1 J" pc_next_out_ID_EX [4] $end
$var wire 1 K" pc_next_out_ID_EX [3] $end
$var wire 1 L" pc_next_out_ID_EX [2] $end
$var wire 1 M" pc_next_out_ID_EX [1] $end
$var wire 1 N" pc_next_out_ID_EX [0] $end
$var wire 1 O" BTR_to_ID_EX $end
$var wire 1 P" BTR_out_ID_EX $end
$var wire 1 Q" BSrc_to_ID_EX [1] $end
$var wire 1 R" BSrc_to_ID_EX [0] $end
$var wire 1 S" BSrc_out_ID_EX [1] $end
$var wire 1 T" BSrc_out_ID_EX [0] $end
$var wire 1 U" InvB_to_ID_EX $end
$var wire 1 V" InvB_out_ID_EX $end
$var wire 1 W" InvA_to_ID_EX $end
$var wire 1 X" InvA_out_ID_EX $end
$var wire 1 Y" read_data_1_to_ID_EX [15] $end
$var wire 1 Z" read_data_1_to_ID_EX [14] $end
$var wire 1 [" read_data_1_to_ID_EX [13] $end
$var wire 1 \" read_data_1_to_ID_EX [12] $end
$var wire 1 ]" read_data_1_to_ID_EX [11] $end
$var wire 1 ^" read_data_1_to_ID_EX [10] $end
$var wire 1 _" read_data_1_to_ID_EX [9] $end
$var wire 1 `" read_data_1_to_ID_EX [8] $end
$var wire 1 a" read_data_1_to_ID_EX [7] $end
$var wire 1 b" read_data_1_to_ID_EX [6] $end
$var wire 1 c" read_data_1_to_ID_EX [5] $end
$var wire 1 d" read_data_1_to_ID_EX [4] $end
$var wire 1 e" read_data_1_to_ID_EX [3] $end
$var wire 1 f" read_data_1_to_ID_EX [2] $end
$var wire 1 g" read_data_1_to_ID_EX [1] $end
$var wire 1 h" read_data_1_to_ID_EX [0] $end
$var wire 1 i" read_data_1_out_ID_EX [15] $end
$var wire 1 j" read_data_1_out_ID_EX [14] $end
$var wire 1 k" read_data_1_out_ID_EX [13] $end
$var wire 1 l" read_data_1_out_ID_EX [12] $end
$var wire 1 m" read_data_1_out_ID_EX [11] $end
$var wire 1 n" read_data_1_out_ID_EX [10] $end
$var wire 1 o" read_data_1_out_ID_EX [9] $end
$var wire 1 p" read_data_1_out_ID_EX [8] $end
$var wire 1 q" read_data_1_out_ID_EX [7] $end
$var wire 1 r" read_data_1_out_ID_EX [6] $end
$var wire 1 s" read_data_1_out_ID_EX [5] $end
$var wire 1 t" read_data_1_out_ID_EX [4] $end
$var wire 1 u" read_data_1_out_ID_EX [3] $end
$var wire 1 v" read_data_1_out_ID_EX [2] $end
$var wire 1 w" read_data_1_out_ID_EX [1] $end
$var wire 1 x" read_data_1_out_ID_EX [0] $end
$var wire 1 y" read_data_2_to_ID_EX [15] $end
$var wire 1 z" read_data_2_to_ID_EX [14] $end
$var wire 1 {" read_data_2_to_ID_EX [13] $end
$var wire 1 |" read_data_2_to_ID_EX [12] $end
$var wire 1 }" read_data_2_to_ID_EX [11] $end
$var wire 1 ~" read_data_2_to_ID_EX [10] $end
$var wire 1 !# read_data_2_to_ID_EX [9] $end
$var wire 1 "# read_data_2_to_ID_EX [8] $end
$var wire 1 ## read_data_2_to_ID_EX [7] $end
$var wire 1 $# read_data_2_to_ID_EX [6] $end
$var wire 1 %# read_data_2_to_ID_EX [5] $end
$var wire 1 &# read_data_2_to_ID_EX [4] $end
$var wire 1 '# read_data_2_to_ID_EX [3] $end
$var wire 1 (# read_data_2_to_ID_EX [2] $end
$var wire 1 )# read_data_2_to_ID_EX [1] $end
$var wire 1 *# read_data_2_to_ID_EX [0] $end
$var wire 1 +# read_data_2_out_ID_EX [15] $end
$var wire 1 ,# read_data_2_out_ID_EX [14] $end
$var wire 1 -# read_data_2_out_ID_EX [13] $end
$var wire 1 .# read_data_2_out_ID_EX [12] $end
$var wire 1 /# read_data_2_out_ID_EX [11] $end
$var wire 1 0# read_data_2_out_ID_EX [10] $end
$var wire 1 1# read_data_2_out_ID_EX [9] $end
$var wire 1 2# read_data_2_out_ID_EX [8] $end
$var wire 1 3# read_data_2_out_ID_EX [7] $end
$var wire 1 4# read_data_2_out_ID_EX [6] $end
$var wire 1 5# read_data_2_out_ID_EX [5] $end
$var wire 1 6# read_data_2_out_ID_EX [4] $end
$var wire 1 7# read_data_2_out_ID_EX [3] $end
$var wire 1 8# read_data_2_out_ID_EX [2] $end
$var wire 1 9# read_data_2_out_ID_EX [1] $end
$var wire 1 :# read_data_2_out_ID_EX [0] $end
$var wire 1 ;# i1_to_ID_EX [15] $end
$var wire 1 <# i1_to_ID_EX [14] $end
$var wire 1 =# i1_to_ID_EX [13] $end
$var wire 1 ># i1_to_ID_EX [12] $end
$var wire 1 ?# i1_to_ID_EX [11] $end
$var wire 1 @# i1_to_ID_EX [10] $end
$var wire 1 A# i1_to_ID_EX [9] $end
$var wire 1 B# i1_to_ID_EX [8] $end
$var wire 1 C# i1_to_ID_EX [7] $end
$var wire 1 D# i1_to_ID_EX [6] $end
$var wire 1 E# i1_to_ID_EX [5] $end
$var wire 1 F# i1_to_ID_EX [4] $end
$var wire 1 G# i1_to_ID_EX [3] $end
$var wire 1 H# i1_to_ID_EX [2] $end
$var wire 1 I# i1_to_ID_EX [1] $end
$var wire 1 J# i1_to_ID_EX [0] $end
$var wire 1 K# i1_out_ID_EX [15] $end
$var wire 1 L# i1_out_ID_EX [14] $end
$var wire 1 M# i1_out_ID_EX [13] $end
$var wire 1 N# i1_out_ID_EX [12] $end
$var wire 1 O# i1_out_ID_EX [11] $end
$var wire 1 P# i1_out_ID_EX [10] $end
$var wire 1 Q# i1_out_ID_EX [9] $end
$var wire 1 R# i1_out_ID_EX [8] $end
$var wire 1 S# i1_out_ID_EX [7] $end
$var wire 1 T# i1_out_ID_EX [6] $end
$var wire 1 U# i1_out_ID_EX [5] $end
$var wire 1 V# i1_out_ID_EX [4] $end
$var wire 1 W# i1_out_ID_EX [3] $end
$var wire 1 X# i1_out_ID_EX [2] $end
$var wire 1 Y# i1_out_ID_EX [1] $end
$var wire 1 Z# i1_out_ID_EX [0] $end
$var wire 1 [# i2_to_ID_EX [15] $end
$var wire 1 \# i2_to_ID_EX [14] $end
$var wire 1 ]# i2_to_ID_EX [13] $end
$var wire 1 ^# i2_to_ID_EX [12] $end
$var wire 1 _# i2_to_ID_EX [11] $end
$var wire 1 `# i2_to_ID_EX [10] $end
$var wire 1 a# i2_to_ID_EX [9] $end
$var wire 1 b# i2_to_ID_EX [8] $end
$var wire 1 c# i2_to_ID_EX [7] $end
$var wire 1 d# i2_to_ID_EX [6] $end
$var wire 1 e# i2_to_ID_EX [5] $end
$var wire 1 f# i2_to_ID_EX [4] $end
$var wire 1 g# i2_to_ID_EX [3] $end
$var wire 1 h# i2_to_ID_EX [2] $end
$var wire 1 i# i2_to_ID_EX [1] $end
$var wire 1 j# i2_to_ID_EX [0] $end
$var wire 1 k# i2_out_ID_EX [15] $end
$var wire 1 l# i2_out_ID_EX [14] $end
$var wire 1 m# i2_out_ID_EX [13] $end
$var wire 1 n# i2_out_ID_EX [12] $end
$var wire 1 o# i2_out_ID_EX [11] $end
$var wire 1 p# i2_out_ID_EX [10] $end
$var wire 1 q# i2_out_ID_EX [9] $end
$var wire 1 r# i2_out_ID_EX [8] $end
$var wire 1 s# i2_out_ID_EX [7] $end
$var wire 1 t# i2_out_ID_EX [6] $end
$var wire 1 u# i2_out_ID_EX [5] $end
$var wire 1 v# i2_out_ID_EX [4] $end
$var wire 1 w# i2_out_ID_EX [3] $end
$var wire 1 x# i2_out_ID_EX [2] $end
$var wire 1 y# i2_out_ID_EX [1] $end
$var wire 1 z# i2_out_ID_EX [0] $end
$var wire 1 {# word_align_jump_to_ID_EX [15] $end
$var wire 1 |# word_align_jump_to_ID_EX [14] $end
$var wire 1 }# word_align_jump_to_ID_EX [13] $end
$var wire 1 ~# word_align_jump_to_ID_EX [12] $end
$var wire 1 !$ word_align_jump_to_ID_EX [11] $end
$var wire 1 "$ word_align_jump_to_ID_EX [10] $end
$var wire 1 #$ word_align_jump_to_ID_EX [9] $end
$var wire 1 $$ word_align_jump_to_ID_EX [8] $end
$var wire 1 %$ word_align_jump_to_ID_EX [7] $end
$var wire 1 &$ word_align_jump_to_ID_EX [6] $end
$var wire 1 '$ word_align_jump_to_ID_EX [5] $end
$var wire 1 ($ word_align_jump_to_ID_EX [4] $end
$var wire 1 )$ word_align_jump_to_ID_EX [3] $end
$var wire 1 *$ word_align_jump_to_ID_EX [2] $end
$var wire 1 +$ word_align_jump_to_ID_EX [1] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [0] $end
$var wire 1 -$ word_align_jump_out_ID_EX [15] $end
$var wire 1 .$ word_align_jump_out_ID_EX [14] $end
$var wire 1 /$ word_align_jump_out_ID_EX [13] $end
$var wire 1 0$ word_align_jump_out_ID_EX [12] $end
$var wire 1 1$ word_align_jump_out_ID_EX [11] $end
$var wire 1 2$ word_align_jump_out_ID_EX [10] $end
$var wire 1 3$ word_align_jump_out_ID_EX [9] $end
$var wire 1 4$ word_align_jump_out_ID_EX [8] $end
$var wire 1 5$ word_align_jump_out_ID_EX [7] $end
$var wire 1 6$ word_align_jump_out_ID_EX [6] $end
$var wire 1 7$ word_align_jump_out_ID_EX [5] $end
$var wire 1 8$ word_align_jump_out_ID_EX [4] $end
$var wire 1 9$ word_align_jump_out_ID_EX [3] $end
$var wire 1 :$ word_align_jump_out_ID_EX [2] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [1] $end
$var wire 1 <$ word_align_jump_out_ID_EX [0] $end
$var wire 1 =$ to_shift_to_ID_EX [15] $end
$var wire 1 >$ to_shift_to_ID_EX [14] $end
$var wire 1 ?$ to_shift_to_ID_EX [13] $end
$var wire 1 @$ to_shift_to_ID_EX [12] $end
$var wire 1 A$ to_shift_to_ID_EX [11] $end
$var wire 1 B$ to_shift_to_ID_EX [10] $end
$var wire 1 C$ to_shift_to_ID_EX [9] $end
$var wire 1 D$ to_shift_to_ID_EX [8] $end
$var wire 1 E$ to_shift_to_ID_EX [7] $end
$var wire 1 F$ to_shift_to_ID_EX [6] $end
$var wire 1 G$ to_shift_to_ID_EX [5] $end
$var wire 1 H$ to_shift_to_ID_EX [4] $end
$var wire 1 I$ to_shift_to_ID_EX [3] $end
$var wire 1 J$ to_shift_to_ID_EX [2] $end
$var wire 1 K$ to_shift_to_ID_EX [1] $end
$var wire 1 L$ to_shift_to_ID_EX [0] $end
$var wire 1 M$ to_shift_out_ID_EX [15] $end
$var wire 1 N$ to_shift_out_ID_EX [14] $end
$var wire 1 O$ to_shift_out_ID_EX [13] $end
$var wire 1 P$ to_shift_out_ID_EX [12] $end
$var wire 1 Q$ to_shift_out_ID_EX [11] $end
$var wire 1 R$ to_shift_out_ID_EX [10] $end
$var wire 1 S$ to_shift_out_ID_EX [9] $end
$var wire 1 T$ to_shift_out_ID_EX [8] $end
$var wire 1 U$ to_shift_out_ID_EX [7] $end
$var wire 1 V$ to_shift_out_ID_EX [6] $end
$var wire 1 W$ to_shift_out_ID_EX [5] $end
$var wire 1 X$ to_shift_out_ID_EX [4] $end
$var wire 1 Y$ to_shift_out_ID_EX [3] $end
$var wire 1 Z$ to_shift_out_ID_EX [2] $end
$var wire 1 [$ to_shift_out_ID_EX [1] $end
$var wire 1 \$ to_shift_out_ID_EX [0] $end
$var wire 1 ]$ ALUOpr_to_ID_EX [2] $end
$var wire 1 ^$ ALUOpr_to_ID_EX [1] $end
$var wire 1 _$ ALUOpr_to_ID_EX [0] $end
$var wire 1 `$ ALUOpr_out_ID_EX [2] $end
$var wire 1 a$ ALUOpr_out_ID_EX [1] $end
$var wire 1 b$ ALUOpr_out_ID_EX [0] $end
$var wire 1 c$ MemWrt_to_ID_EX $end
$var wire 1 d$ MemWrt_out_ID_EX $end
$var wire 1 e$ branch_command_to_ID_EX [1] $end
$var wire 1 f$ branch_command_to_ID_EX [0] $end
$var wire 1 g$ branch_command_out_ID_EX [1] $end
$var wire 1 h$ branch_command_out_ID_EX [0] $end
$var wire 1 i$ branching_to_ID_EX $end
$var wire 1 j$ branching_out_ID_EX $end
$var wire 1 k$ SLBI_to_ID_EX $end
$var wire 1 l$ SLBI_out_ID_EX $end
$var wire 1 m$ SetCtrl_to_ID_EX [2] $end
$var wire 1 n$ SetCtrl_to_ID_EX [1] $end
$var wire 1 o$ SetCtrl_to_ID_EX [0] $end
$var wire 1 p$ SetCtrl_out_ID_EX [2] $end
$var wire 1 q$ SetCtrl_out_ID_EX [1] $end
$var wire 1 r$ SetCtrl_out_ID_EX [0] $end
$var wire 1 s$ ALUJMP_in_ID_EX $end
$var wire 1 t$ ALUJMP_out_ID_EX $end
$var wire 1 u$ PC_or_add_in_ID_EX $end
$var wire 1 v$ PC_or_add_out_ID_EX $end
$var wire 1 w$ RegSrc_to_ID_EX [1] $end
$var wire 1 x$ RegSrc_to_ID_EX [0] $end
$var wire 1 y$ RegSrc_out_ID_EX [1] $end
$var wire 1 z$ RegSrc_out_ID_EX [0] $end
$var wire 1 {$ halt_to_ID_EX $end
$var wire 1 |$ halt_out_ID_EX $end
$var wire 1 }$ RegWrt_to_ID_EX $end
$var wire 1 ~$ RegWrt_out_ID_EX $end
$var wire 1 !% write_reg_to_ID_EX [2] $end
$var wire 1 "% write_reg_to_ID_EX [1] $end
$var wire 1 #% write_reg_to_ID_EX [0] $end
$var wire 1 $% write_reg_out_ID_EX [2] $end
$var wire 1 %% write_reg_out_ID_EX [1] $end
$var wire 1 &% write_reg_out_ID_EX [0] $end
$var wire 1 '% branchtake_to_EX_MEM $end
$var wire 1 (% branchtake_out_EX_MEM $end
$var wire 1 )% Alu_result_to_EX_MEM [15] $end
$var wire 1 *% Alu_result_to_EX_MEM [14] $end
$var wire 1 +% Alu_result_to_EX_MEM [13] $end
$var wire 1 ,% Alu_result_to_EX_MEM [12] $end
$var wire 1 -% Alu_result_to_EX_MEM [11] $end
$var wire 1 .% Alu_result_to_EX_MEM [10] $end
$var wire 1 /% Alu_result_to_EX_MEM [9] $end
$var wire 1 0% Alu_result_to_EX_MEM [8] $end
$var wire 1 1% Alu_result_to_EX_MEM [7] $end
$var wire 1 2% Alu_result_to_EX_MEM [6] $end
$var wire 1 3% Alu_result_to_EX_MEM [5] $end
$var wire 1 4% Alu_result_to_EX_MEM [4] $end
$var wire 1 5% Alu_result_to_EX_MEM [3] $end
$var wire 1 6% Alu_result_to_EX_MEM [2] $end
$var wire 1 7% Alu_result_to_EX_MEM [1] $end
$var wire 1 8% Alu_result_to_EX_MEM [0] $end
$var wire 1 9% Alu_result_out_EX_MEM [15] $end
$var wire 1 :% Alu_result_out_EX_MEM [14] $end
$var wire 1 ;% Alu_result_out_EX_MEM [13] $end
$var wire 1 <% Alu_result_out_EX_MEM [12] $end
$var wire 1 =% Alu_result_out_EX_MEM [11] $end
$var wire 1 >% Alu_result_out_EX_MEM [10] $end
$var wire 1 ?% Alu_result_out_EX_MEM [9] $end
$var wire 1 @% Alu_result_out_EX_MEM [8] $end
$var wire 1 A% Alu_result_out_EX_MEM [7] $end
$var wire 1 B% Alu_result_out_EX_MEM [6] $end
$var wire 1 C% Alu_result_out_EX_MEM [5] $end
$var wire 1 D% Alu_result_out_EX_MEM [4] $end
$var wire 1 E% Alu_result_out_EX_MEM [3] $end
$var wire 1 F% Alu_result_out_EX_MEM [2] $end
$var wire 1 G% Alu_result_out_EX_MEM [1] $end
$var wire 1 H% Alu_result_out_EX_MEM [0] $end
$var wire 1 I% Binput_to_EX_MEM [15] $end
$var wire 1 J% Binput_to_EX_MEM [14] $end
$var wire 1 K% Binput_to_EX_MEM [13] $end
$var wire 1 L% Binput_to_EX_MEM [12] $end
$var wire 1 M% Binput_to_EX_MEM [11] $end
$var wire 1 N% Binput_to_EX_MEM [10] $end
$var wire 1 O% Binput_to_EX_MEM [9] $end
$var wire 1 P% Binput_to_EX_MEM [8] $end
$var wire 1 Q% Binput_to_EX_MEM [7] $end
$var wire 1 R% Binput_to_EX_MEM [6] $end
$var wire 1 S% Binput_to_EX_MEM [5] $end
$var wire 1 T% Binput_to_EX_MEM [4] $end
$var wire 1 U% Binput_to_EX_MEM [3] $end
$var wire 1 V% Binput_to_EX_MEM [2] $end
$var wire 1 W% Binput_to_EX_MEM [1] $end
$var wire 1 X% Binput_to_EX_MEM [0] $end
$var wire 1 Y% Binput_out_EX_MEM [15] $end
$var wire 1 Z% Binput_out_EX_MEM [14] $end
$var wire 1 [% Binput_out_EX_MEM [13] $end
$var wire 1 \% Binput_out_EX_MEM [12] $end
$var wire 1 ]% Binput_out_EX_MEM [11] $end
$var wire 1 ^% Binput_out_EX_MEM [10] $end
$var wire 1 _% Binput_out_EX_MEM [9] $end
$var wire 1 `% Binput_out_EX_MEM [8] $end
$var wire 1 a% Binput_out_EX_MEM [7] $end
$var wire 1 b% Binput_out_EX_MEM [6] $end
$var wire 1 c% Binput_out_EX_MEM [5] $end
$var wire 1 d% Binput_out_EX_MEM [4] $end
$var wire 1 e% Binput_out_EX_MEM [3] $end
$var wire 1 f% Binput_out_EX_MEM [2] $end
$var wire 1 g% Binput_out_EX_MEM [1] $end
$var wire 1 h% Binput_out_EX_MEM [0] $end
$var wire 1 i% branching_out_EX_MEM $end
$var wire 1 j% PC_or_add_out_EX_MEM $end
$var wire 1 k% ALUJMP_out_EX_MEM $end
$var wire 1 l% MemWrt_out_EX_MEM $end
$var wire 1 m% halt_out_EX_MEM $end
$var wire 1 n% word_align_jump_out_EX_MEM [15] $end
$var wire 1 o% word_align_jump_out_EX_MEM [14] $end
$var wire 1 p% word_align_jump_out_EX_MEM [13] $end
$var wire 1 q% word_align_jump_out_EX_MEM [12] $end
$var wire 1 r% word_align_jump_out_EX_MEM [11] $end
$var wire 1 s% word_align_jump_out_EX_MEM [10] $end
$var wire 1 t% word_align_jump_out_EX_MEM [9] $end
$var wire 1 u% word_align_jump_out_EX_MEM [8] $end
$var wire 1 v% word_align_jump_out_EX_MEM [7] $end
$var wire 1 w% word_align_jump_out_EX_MEM [6] $end
$var wire 1 x% word_align_jump_out_EX_MEM [5] $end
$var wire 1 y% word_align_jump_out_EX_MEM [4] $end
$var wire 1 z% word_align_jump_out_EX_MEM [3] $end
$var wire 1 {% word_align_jump_out_EX_MEM [2] $end
$var wire 1 |% word_align_jump_out_EX_MEM [1] $end
$var wire 1 }% word_align_jump_out_EX_MEM [0] $end
$var wire 1 ~% read_data_2_out_EX_MEM [15] $end
$var wire 1 !& read_data_2_out_EX_MEM [14] $end
$var wire 1 "& read_data_2_out_EX_MEM [13] $end
$var wire 1 #& read_data_2_out_EX_MEM [12] $end
$var wire 1 $& read_data_2_out_EX_MEM [11] $end
$var wire 1 %& read_data_2_out_EX_MEM [10] $end
$var wire 1 && read_data_2_out_EX_MEM [9] $end
$var wire 1 '& read_data_2_out_EX_MEM [8] $end
$var wire 1 (& read_data_2_out_EX_MEM [7] $end
$var wire 1 )& read_data_2_out_EX_MEM [6] $end
$var wire 1 *& read_data_2_out_EX_MEM [5] $end
$var wire 1 +& read_data_2_out_EX_MEM [4] $end
$var wire 1 ,& read_data_2_out_EX_MEM [3] $end
$var wire 1 -& read_data_2_out_EX_MEM [2] $end
$var wire 1 .& read_data_2_out_EX_MEM [1] $end
$var wire 1 /& read_data_2_out_EX_MEM [0] $end
$var wire 1 0& pc_next_out_EX_MEM [15] $end
$var wire 1 1& pc_next_out_EX_MEM [14] $end
$var wire 1 2& pc_next_out_EX_MEM [13] $end
$var wire 1 3& pc_next_out_EX_MEM [12] $end
$var wire 1 4& pc_next_out_EX_MEM [11] $end
$var wire 1 5& pc_next_out_EX_MEM [10] $end
$var wire 1 6& pc_next_out_EX_MEM [9] $end
$var wire 1 7& pc_next_out_EX_MEM [8] $end
$var wire 1 8& pc_next_out_EX_MEM [7] $end
$var wire 1 9& pc_next_out_EX_MEM [6] $end
$var wire 1 :& pc_next_out_EX_MEM [5] $end
$var wire 1 ;& pc_next_out_EX_MEM [4] $end
$var wire 1 <& pc_next_out_EX_MEM [3] $end
$var wire 1 =& pc_next_out_EX_MEM [2] $end
$var wire 1 >& pc_next_out_EX_MEM [1] $end
$var wire 1 ?& pc_next_out_EX_MEM [0] $end
$var wire 1 @& i2_out_EX_MEM [15] $end
$var wire 1 A& i2_out_EX_MEM [14] $end
$var wire 1 B& i2_out_EX_MEM [13] $end
$var wire 1 C& i2_out_EX_MEM [12] $end
$var wire 1 D& i2_out_EX_MEM [11] $end
$var wire 1 E& i2_out_EX_MEM [10] $end
$var wire 1 F& i2_out_EX_MEM [9] $end
$var wire 1 G& i2_out_EX_MEM [8] $end
$var wire 1 H& i2_out_EX_MEM [7] $end
$var wire 1 I& i2_out_EX_MEM [6] $end
$var wire 1 J& i2_out_EX_MEM [5] $end
$var wire 1 K& i2_out_EX_MEM [4] $end
$var wire 1 L& i2_out_EX_MEM [3] $end
$var wire 1 M& i2_out_EX_MEM [2] $end
$var wire 1 N& i2_out_EX_MEM [1] $end
$var wire 1 O& i2_out_EX_MEM [0] $end
$var wire 1 P& RegWrt_out_EX_MEM $end
$var wire 1 Q& RegSrc_out_EX_MEM [1] $end
$var wire 1 R& RegSrc_out_EX_MEM [0] $end
$var wire 1 S& write_reg_out_EX_MEM [2] $end
$var wire 1 T& write_reg_out_EX_MEM [1] $end
$var wire 1 U& write_reg_out_EX_MEM [0] $end
$var wire 1 V& memory_data_to_MEM_WB [15] $end
$var wire 1 W& memory_data_to_MEM_WB [14] $end
$var wire 1 X& memory_data_to_MEM_WB [13] $end
$var wire 1 Y& memory_data_to_MEM_WB [12] $end
$var wire 1 Z& memory_data_to_MEM_WB [11] $end
$var wire 1 [& memory_data_to_MEM_WB [10] $end
$var wire 1 \& memory_data_to_MEM_WB [9] $end
$var wire 1 ]& memory_data_to_MEM_WB [8] $end
$var wire 1 ^& memory_data_to_MEM_WB [7] $end
$var wire 1 _& memory_data_to_MEM_WB [6] $end
$var wire 1 `& memory_data_to_MEM_WB [5] $end
$var wire 1 a& memory_data_to_MEM_WB [4] $end
$var wire 1 b& memory_data_to_MEM_WB [3] $end
$var wire 1 c& memory_data_to_MEM_WB [2] $end
$var wire 1 d& memory_data_to_MEM_WB [1] $end
$var wire 1 e& memory_data_to_MEM_WB [0] $end
$var wire 1 f& memory_data_out_MEM_WB [15] $end
$var wire 1 g& memory_data_out_MEM_WB [14] $end
$var wire 1 h& memory_data_out_MEM_WB [13] $end
$var wire 1 i& memory_data_out_MEM_WB [12] $end
$var wire 1 j& memory_data_out_MEM_WB [11] $end
$var wire 1 k& memory_data_out_MEM_WB [10] $end
$var wire 1 l& memory_data_out_MEM_WB [9] $end
$var wire 1 m& memory_data_out_MEM_WB [8] $end
$var wire 1 n& memory_data_out_MEM_WB [7] $end
$var wire 1 o& memory_data_out_MEM_WB [6] $end
$var wire 1 p& memory_data_out_MEM_WB [5] $end
$var wire 1 q& memory_data_out_MEM_WB [4] $end
$var wire 1 r& memory_data_out_MEM_WB [3] $end
$var wire 1 s& memory_data_out_MEM_WB [2] $end
$var wire 1 t& memory_data_out_MEM_WB [1] $end
$var wire 1 u& memory_data_out_MEM_WB [0] $end
$var wire 1 v& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 w& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 (' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 )' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 8' RegSrc_out_MEM_WB [1] $end
$var wire 1 9' RegSrc_out_MEM_WB [0] $end
$var wire 1 :' Binput_out_MEM_WB [15] $end
$var wire 1 ;' Binput_out_MEM_WB [14] $end
$var wire 1 <' Binput_out_MEM_WB [13] $end
$var wire 1 =' Binput_out_MEM_WB [12] $end
$var wire 1 >' Binput_out_MEM_WB [11] $end
$var wire 1 ?' Binput_out_MEM_WB [10] $end
$var wire 1 @' Binput_out_MEM_WB [9] $end
$var wire 1 A' Binput_out_MEM_WB [8] $end
$var wire 1 B' Binput_out_MEM_WB [7] $end
$var wire 1 C' Binput_out_MEM_WB [6] $end
$var wire 1 D' Binput_out_MEM_WB [5] $end
$var wire 1 E' Binput_out_MEM_WB [4] $end
$var wire 1 F' Binput_out_MEM_WB [3] $end
$var wire 1 G' Binput_out_MEM_WB [2] $end
$var wire 1 H' Binput_out_MEM_WB [1] $end
$var wire 1 I' Binput_out_MEM_WB [0] $end
$var wire 1 J' RegWrt_out_MEM_WB $end
$var wire 1 K' Alu_result_out_MEM_WB [15] $end
$var wire 1 L' Alu_result_out_MEM_WB [14] $end
$var wire 1 M' Alu_result_out_MEM_WB [13] $end
$var wire 1 N' Alu_result_out_MEM_WB [12] $end
$var wire 1 O' Alu_result_out_MEM_WB [11] $end
$var wire 1 P' Alu_result_out_MEM_WB [10] $end
$var wire 1 Q' Alu_result_out_MEM_WB [9] $end
$var wire 1 R' Alu_result_out_MEM_WB [8] $end
$var wire 1 S' Alu_result_out_MEM_WB [7] $end
$var wire 1 T' Alu_result_out_MEM_WB [6] $end
$var wire 1 U' Alu_result_out_MEM_WB [5] $end
$var wire 1 V' Alu_result_out_MEM_WB [4] $end
$var wire 1 W' Alu_result_out_MEM_WB [3] $end
$var wire 1 X' Alu_result_out_MEM_WB [2] $end
$var wire 1 Y' Alu_result_out_MEM_WB [1] $end
$var wire 1 Z' Alu_result_out_MEM_WB [0] $end
$var wire 1 [' write_reg_out_MEM_WB [2] $end
$var wire 1 \' write_reg_out_MEM_WB [1] $end
$var wire 1 ]' write_reg_out_MEM_WB [0] $end
$var wire 1 ^' branching_out_MEM_WB $end
$var wire 1 _' err1 $end
$var wire 1 `' branchNOP $end
$var wire 1 a' jumpNOP $end
$var wire 1 b' memrd_to_ID_EX $end
$var wire 1 c' memrd_out_ID_EX $end
$var wire 1 d' memrd_to_mem $end
$var wire 1 e' btake $end
$var wire 1 f' MUXFOUR [15] $end
$var wire 1 g' MUXFOUR [14] $end
$var wire 1 h' MUXFOUR [13] $end
$var wire 1 i' MUXFOUR [12] $end
$var wire 1 j' MUXFOUR [11] $end
$var wire 1 k' MUXFOUR [10] $end
$var wire 1 l' MUXFOUR [9] $end
$var wire 1 m' MUXFOUR [8] $end
$var wire 1 n' MUXFOUR [7] $end
$var wire 1 o' MUXFOUR [6] $end
$var wire 1 p' MUXFOUR [5] $end
$var wire 1 q' MUXFOUR [4] $end
$var wire 1 r' MUXFOUR [3] $end
$var wire 1 s' MUXFOUR [2] $end
$var wire 1 t' MUXFOUR [1] $end
$var wire 1 u' MUXFOUR [0] $end
$var wire 1 v' jmpthng $end
$var wire 1 w' jmpthng2 $end
$var wire 1 x' MUX_OUT_ONE [15] $end
$var wire 1 y' MUX_OUT_ONE [14] $end
$var wire 1 z' MUX_OUT_ONE [13] $end
$var wire 1 {' MUX_OUT_ONE [12] $end
$var wire 1 |' MUX_OUT_ONE [11] $end
$var wire 1 }' MUX_OUT_ONE [10] $end
$var wire 1 ~' MUX_OUT_ONE [9] $end
$var wire 1 !( MUX_OUT_ONE [8] $end
$var wire 1 "( MUX_OUT_ONE [7] $end
$var wire 1 #( MUX_OUT_ONE [6] $end
$var wire 1 $( MUX_OUT_ONE [5] $end
$var wire 1 %( MUX_OUT_ONE [4] $end
$var wire 1 &( MUX_OUT_ONE [3] $end
$var wire 1 '( MUX_OUT_ONE [2] $end
$var wire 1 (( MUX_OUT_ONE [1] $end
$var wire 1 )( MUX_OUT_ONE [0] $end
$var wire 1 *( MUX_OUT_TWO [15] $end
$var wire 1 +( MUX_OUT_TWO [14] $end
$var wire 1 ,( MUX_OUT_TWO [13] $end
$var wire 1 -( MUX_OUT_TWO [12] $end
$var wire 1 .( MUX_OUT_TWO [11] $end
$var wire 1 /( MUX_OUT_TWO [10] $end
$var wire 1 0( MUX_OUT_TWO [9] $end
$var wire 1 1( MUX_OUT_TWO [8] $end
$var wire 1 2( MUX_OUT_TWO [7] $end
$var wire 1 3( MUX_OUT_TWO [6] $end
$var wire 1 4( MUX_OUT_TWO [5] $end
$var wire 1 5( MUX_OUT_TWO [4] $end
$var wire 1 6( MUX_OUT_TWO [3] $end
$var wire 1 7( MUX_OUT_TWO [2] $end
$var wire 1 8( MUX_OUT_TWO [1] $end
$var wire 1 9( MUX_OUT_TWO [0] $end
$var wire 1 :( MUXTHREE [15] $end
$var wire 1 ;( MUXTHREE [14] $end
$var wire 1 <( MUXTHREE [13] $end
$var wire 1 =( MUXTHREE [12] $end
$var wire 1 >( MUXTHREE [11] $end
$var wire 1 ?( MUXTHREE [10] $end
$var wire 1 @( MUXTHREE [9] $end
$var wire 1 A( MUXTHREE [8] $end
$var wire 1 B( MUXTHREE [7] $end
$var wire 1 C( MUXTHREE [6] $end
$var wire 1 D( MUXTHREE [5] $end
$var wire 1 E( MUXTHREE [4] $end
$var wire 1 F( MUXTHREE [3] $end
$var wire 1 G( MUXTHREE [2] $end
$var wire 1 H( MUXTHREE [1] $end
$var wire 1 I( MUXTHREE [0] $end
$var wire 1 J( PC_NO_PLUS_TWO [15] $end
$var wire 1 K( PC_NO_PLUS_TWO [14] $end
$var wire 1 L( PC_NO_PLUS_TWO [13] $end
$var wire 1 M( PC_NO_PLUS_TWO [12] $end
$var wire 1 N( PC_NO_PLUS_TWO [11] $end
$var wire 1 O( PC_NO_PLUS_TWO [10] $end
$var wire 1 P( PC_NO_PLUS_TWO [9] $end
$var wire 1 Q( PC_NO_PLUS_TWO [8] $end
$var wire 1 R( PC_NO_PLUS_TWO [7] $end
$var wire 1 S( PC_NO_PLUS_TWO [6] $end
$var wire 1 T( PC_NO_PLUS_TWO [5] $end
$var wire 1 U( PC_NO_PLUS_TWO [4] $end
$var wire 1 V( PC_NO_PLUS_TWO [3] $end
$var wire 1 W( PC_NO_PLUS_TWO [2] $end
$var wire 1 X( PC_NO_PLUS_TWO [1] $end
$var wire 1 Y( PC_NO_PLUS_TWO [0] $end
$var wire 1 Z( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 [( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 \( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 ]( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 ^( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 _( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 `( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 a( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 b( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 c( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 d( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 e( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 f( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 g( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 h( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 i( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 j( SendNop $end
$var wire 1 k( muxonecond $end
$var wire 1 l( branchfail $end
$var wire 1 m( bthng2 $end
$var wire 1 n( fetch_stall $end
$var wire 1 o( muxtwcond $end
$var wire 1 p( inst_again [15] $end
$var wire 1 q( inst_again [14] $end
$var wire 1 r( inst_again [13] $end
$var wire 1 s( inst_again [12] $end
$var wire 1 t( inst_again [11] $end
$var wire 1 u( inst_again [10] $end
$var wire 1 v( inst_again [9] $end
$var wire 1 w( inst_again [8] $end
$var wire 1 x( inst_again [7] $end
$var wire 1 y( inst_again [6] $end
$var wire 1 z( inst_again [5] $end
$var wire 1 {( inst_again [4] $end
$var wire 1 |( inst_again [3] $end
$var wire 1 }( inst_again [2] $end
$var wire 1 ~( inst_again [1] $end
$var wire 1 !) inst_again [0] $end
$var wire 1 ") jalinf $end
$var wire 1 #) jalind $end
$var wire 1 $) jaline $end
$var wire 1 %) jalinm $end
$var wire 1 &) jalinw $end
$var wire 1 ') instagaincnd $end
$var wire 1 () pcagaincnd $end
$var wire 1 )) pcagain [15] $end
$var wire 1 *) pcagain [14] $end
$var wire 1 +) pcagain [13] $end
$var wire 1 ,) pcagain [12] $end
$var wire 1 -) pcagain [11] $end
$var wire 1 .) pcagain [10] $end
$var wire 1 /) pcagain [9] $end
$var wire 1 0) pcagain [8] $end
$var wire 1 1) pcagain [7] $end
$var wire 1 2) pcagain [6] $end
$var wire 1 3) pcagain [5] $end
$var wire 1 4) pcagain [4] $end
$var wire 1 5) pcagain [3] $end
$var wire 1 6) pcagain [2] $end
$var wire 1 7) pcagain [1] $end
$var wire 1 8) pcagain [0] $end
$var wire 1 9) fetch_halt $end
$var wire 1 :) fetch_halt_to_decode $end
$var wire 1 ;) fetch_stall_to_decode $end
$var wire 1 <) MemWrt_Decode_Out $end
$var wire 1 =) RegWrt_Decode_Out $end
$var wire 1 >) NOP_Out_ID_EX $end
$var wire 1 ?) NOP_Out_ID_MEM $end
$var wire 1 @) NOP_Out_ID_WB $end
$var wire 1 A) branching_Decode_Out $end
$var wire 1 B) Nop_or_Branch $end
$var wire 1 C) bNOP_OUTIDEX $end
$var wire 1 D) nopmux [15] $end
$var wire 1 E) nopmux [14] $end
$var wire 1 F) nopmux [13] $end
$var wire 1 G) nopmux [12] $end
$var wire 1 H) nopmux [11] $end
$var wire 1 I) nopmux [10] $end
$var wire 1 J) nopmux [9] $end
$var wire 1 K) nopmux [8] $end
$var wire 1 L) nopmux [7] $end
$var wire 1 M) nopmux [6] $end
$var wire 1 N) nopmux [5] $end
$var wire 1 O) nopmux [4] $end
$var wire 1 P) nopmux [3] $end
$var wire 1 Q) nopmux [2] $end
$var wire 1 R) nopmux [1] $end
$var wire 1 S) nopmux [0] $end
$var wire 1 T) mem_stall $end
$var wire 1 U) temp_mem_halt $end

$scope module my_clkrst $end
$var wire 1 X) err $end
$upscope $end

$scope module btaken $end
$var wire 1 e' q $end
$var wire 1 (% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module jumper $end
$var wire 1 v' q $end
$var wire 1 k% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module jumper2 $end
$var wire 1 w' q $end
$var wire 1 j% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module bumper2 $end
$var wire 1 m( q $end
$var wire 1 l( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module jalthing $end
$var wire 1 #) q $end
$var wire 1 ") d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module jalthing2 $end
$var wire 1 $) q $end
$var wire 1 _) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module jalthing3 $end
$var wire 1 %) q $end
$var wire 1 $) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module jalthing4 $end
$var wire 1 &) q $end
$var wire 1 %) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 *( PC_in [15] $end
$var wire 1 +( PC_in [14] $end
$var wire 1 ,( PC_in [13] $end
$var wire 1 -( PC_in [12] $end
$var wire 1 .( PC_in [11] $end
$var wire 1 /( PC_in [10] $end
$var wire 1 0( PC_in [9] $end
$var wire 1 1( PC_in [8] $end
$var wire 1 2( PC_in [7] $end
$var wire 1 3( PC_in [6] $end
$var wire 1 4( PC_in [5] $end
$var wire 1 5( PC_in [4] $end
$var wire 1 6( PC_in [3] $end
$var wire 1 7( PC_in [2] $end
$var wire 1 8( PC_in [1] $end
$var wire 1 9( PC_in [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 }! PC_next [15] $end
$var wire 1 ~! PC_next [14] $end
$var wire 1 !" PC_next [13] $end
$var wire 1 "" PC_next [12] $end
$var wire 1 #" PC_next [11] $end
$var wire 1 $" PC_next [10] $end
$var wire 1 %" PC_next [9] $end
$var wire 1 &" PC_next [8] $end
$var wire 1 '" PC_next [7] $end
$var wire 1 (" PC_next [6] $end
$var wire 1 )" PC_next [5] $end
$var wire 1 *" PC_next [4] $end
$var wire 1 +" PC_next [3] $end
$var wire 1 ," PC_next [2] $end
$var wire 1 -" PC_next [1] $end
$var wire 1 ." PC_next [0] $end
$var wire 1 ]! instruction [15] $end
$var wire 1 ^! instruction [14] $end
$var wire 1 _! instruction [13] $end
$var wire 1 `! instruction [12] $end
$var wire 1 a! instruction [11] $end
$var wire 1 b! instruction [10] $end
$var wire 1 c! instruction [9] $end
$var wire 1 d! instruction [8] $end
$var wire 1 e! instruction [7] $end
$var wire 1 f! instruction [6] $end
$var wire 1 g! instruction [5] $end
$var wire 1 h! instruction [4] $end
$var wire 1 i! instruction [3] $end
$var wire 1 j! instruction [2] $end
$var wire 1 k! instruction [1] $end
$var wire 1 l! instruction [0] $end
$var wire 1 J( pc_temp [15] $end
$var wire 1 K( pc_temp [14] $end
$var wire 1 L( pc_temp [13] $end
$var wire 1 M( pc_temp [12] $end
$var wire 1 N( pc_temp [11] $end
$var wire 1 O( pc_temp [10] $end
$var wire 1 P( pc_temp [9] $end
$var wire 1 Q( pc_temp [8] $end
$var wire 1 R( pc_temp [7] $end
$var wire 1 S( pc_temp [6] $end
$var wire 1 T( pc_temp [5] $end
$var wire 1 U( pc_temp [4] $end
$var wire 1 V( pc_temp [3] $end
$var wire 1 W( pc_temp [2] $end
$var wire 1 X( pc_temp [1] $end
$var wire 1 Y( pc_temp [0] $end
$var wire 1 9) fetch_halt $end
$var wire 1 n( fetch_stall $end
$var wire 1 c) done $end
$var wire 1 d) stall $end
$var wire 1 e) cachehit $end

$scope module fa $end
$var wire 1 J( A [15] $end
$var wire 1 K( A [14] $end
$var wire 1 L( A [13] $end
$var wire 1 M( A [12] $end
$var wire 1 N( A [11] $end
$var wire 1 O( A [10] $end
$var wire 1 P( A [9] $end
$var wire 1 Q( A [8] $end
$var wire 1 R( A [7] $end
$var wire 1 S( A [6] $end
$var wire 1 T( A [5] $end
$var wire 1 U( A [4] $end
$var wire 1 V( A [3] $end
$var wire 1 W( A [2] $end
$var wire 1 X( A [1] $end
$var wire 1 Y( A [0] $end
$var wire 1 f) B [15] $end
$var wire 1 g) B [14] $end
$var wire 1 h) B [13] $end
$var wire 1 i) B [12] $end
$var wire 1 j) B [11] $end
$var wire 1 k) B [10] $end
$var wire 1 l) B [9] $end
$var wire 1 m) B [8] $end
$var wire 1 n) B [7] $end
$var wire 1 o) B [6] $end
$var wire 1 p) B [5] $end
$var wire 1 q) B [4] $end
$var wire 1 r) B [3] $end
$var wire 1 s) B [2] $end
$var wire 1 t) B [1] $end
$var wire 1 u) B [0] $end
$var wire 1 }! S [15] $end
$var wire 1 ~! S [14] $end
$var wire 1 !" S [13] $end
$var wire 1 "" S [12] $end
$var wire 1 #" S [11] $end
$var wire 1 $" S [10] $end
$var wire 1 %" S [9] $end
$var wire 1 &" S [8] $end
$var wire 1 '" S [7] $end
$var wire 1 (" S [6] $end
$var wire 1 )" S [5] $end
$var wire 1 *" S [4] $end
$var wire 1 +" S [3] $end
$var wire 1 ," S [2] $end
$var wire 1 -" S [1] $end
$var wire 1 ." S [0] $end
$var wire 1 v) Cout $end
$var wire 1 w) Cout0 $end
$var wire 1 x) Cout1 $end
$var wire 1 y) Cout2 $end
$var wire 1 z) Cin $end

$scope module f1 $end
$var wire 1 V( A [3] $end
$var wire 1 W( A [2] $end
$var wire 1 X( A [1] $end
$var wire 1 Y( A [0] $end
$var wire 1 r) B [3] $end
$var wire 1 s) B [2] $end
$var wire 1 t) B [1] $end
$var wire 1 u) B [0] $end
$var wire 1 z) Cin $end
$var wire 1 +" S [3] $end
$var wire 1 ," S [2] $end
$var wire 1 -" S [1] $end
$var wire 1 ." S [0] $end
$var wire 1 w) Cout $end
$var wire 1 {) Cout0 $end
$var wire 1 |) Cout1 $end
$var wire 1 }) Cout2 $end

$scope module f1 $end
$var wire 1 Y( A $end
$var wire 1 u) B $end
$var wire 1 z) Cin $end
$var wire 1 ." S $end
$var wire 1 {) Cout $end
$var wire 1 ~) xor_AB $end
$var wire 1 !* xor_ABCin $end
$var wire 1 "* NAND_AB $end
$var wire 1 #* not_NAND_AB $end
$var wire 1 $* NAND_Cin_xor_AB $end
$var wire 1 %* not_NAND_Cin_xor_AB $end
$var wire 1 &* NOR_2NAND $end
$var wire 1 '* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 Y( in1 $end
$var wire 1 u) in2 $end
$var wire 1 ~) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~) in1 $end
$var wire 1 z) in2 $end
$var wire 1 !* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Y( in1 $end
$var wire 1 u) in2 $end
$var wire 1 "* out $end
$upscope $end

$scope module not1 $end
$var wire 1 "* in1 $end
$var wire 1 #* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 z) in1 $end
$var wire 1 ~) in2 $end
$var wire 1 $* out $end
$upscope $end

$scope module not2 $end
$var wire 1 $* in1 $end
$var wire 1 %* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #* in1 $end
$var wire 1 %* in2 $end
$var wire 1 &* out $end
$upscope $end

$scope module not3 $end
$var wire 1 &* in1 $end
$var wire 1 '* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 X( A $end
$var wire 1 t) B $end
$var wire 1 {) Cin $end
$var wire 1 -" S $end
$var wire 1 |) Cout $end
$var wire 1 (* xor_AB $end
$var wire 1 )* xor_ABCin $end
$var wire 1 ** NAND_AB $end
$var wire 1 +* not_NAND_AB $end
$var wire 1 ,* NAND_Cin_xor_AB $end
$var wire 1 -* not_NAND_Cin_xor_AB $end
$var wire 1 .* NOR_2NAND $end
$var wire 1 /* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 X( in1 $end
$var wire 1 t) in2 $end
$var wire 1 (* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 (* in1 $end
$var wire 1 {) in2 $end
$var wire 1 )* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 X( in1 $end
$var wire 1 t) in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module not1 $end
$var wire 1 ** in1 $end
$var wire 1 +* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 {) in1 $end
$var wire 1 (* in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module not2 $end
$var wire 1 ,* in1 $end
$var wire 1 -* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 +* in1 $end
$var wire 1 -* in2 $end
$var wire 1 .* out $end
$upscope $end

$scope module not3 $end
$var wire 1 .* in1 $end
$var wire 1 /* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 W( A $end
$var wire 1 s) B $end
$var wire 1 |) Cin $end
$var wire 1 ," S $end
$var wire 1 }) Cout $end
$var wire 1 0* xor_AB $end
$var wire 1 1* xor_ABCin $end
$var wire 1 2* NAND_AB $end
$var wire 1 3* not_NAND_AB $end
$var wire 1 4* NAND_Cin_xor_AB $end
$var wire 1 5* not_NAND_Cin_xor_AB $end
$var wire 1 6* NOR_2NAND $end
$var wire 1 7* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 W( in1 $end
$var wire 1 s) in2 $end
$var wire 1 0* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 0* in1 $end
$var wire 1 |) in2 $end
$var wire 1 1* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 W( in1 $end
$var wire 1 s) in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module not1 $end
$var wire 1 2* in1 $end
$var wire 1 3* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 |) in1 $end
$var wire 1 0* in2 $end
$var wire 1 4* out $end
$upscope $end

$scope module not2 $end
$var wire 1 4* in1 $end
$var wire 1 5* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 3* in1 $end
$var wire 1 5* in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module not3 $end
$var wire 1 6* in1 $end
$var wire 1 7* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 V( A $end
$var wire 1 r) B $end
$var wire 1 }) Cin $end
$var wire 1 +" S $end
$var wire 1 w) Cout $end
$var wire 1 8* xor_AB $end
$var wire 1 9* xor_ABCin $end
$var wire 1 :* NAND_AB $end
$var wire 1 ;* not_NAND_AB $end
$var wire 1 <* NAND_Cin_xor_AB $end
$var wire 1 =* not_NAND_Cin_xor_AB $end
$var wire 1 >* NOR_2NAND $end
$var wire 1 ?* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 V( in1 $end
$var wire 1 r) in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8* in1 $end
$var wire 1 }) in2 $end
$var wire 1 9* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 V( in1 $end
$var wire 1 r) in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module not1 $end
$var wire 1 :* in1 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }) in1 $end
$var wire 1 8* in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not2 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;* in1 $end
$var wire 1 =* in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not3 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 R( A [3] $end
$var wire 1 S( A [2] $end
$var wire 1 T( A [1] $end
$var wire 1 U( A [0] $end
$var wire 1 n) B [3] $end
$var wire 1 o) B [2] $end
$var wire 1 p) B [1] $end
$var wire 1 q) B [0] $end
$var wire 1 w) Cin $end
$var wire 1 '" S [3] $end
$var wire 1 (" S [2] $end
$var wire 1 )" S [1] $end
$var wire 1 *" S [0] $end
$var wire 1 x) Cout $end
$var wire 1 @* Cout0 $end
$var wire 1 A* Cout1 $end
$var wire 1 B* Cout2 $end

$scope module f1 $end
$var wire 1 U( A $end
$var wire 1 q) B $end
$var wire 1 w) Cin $end
$var wire 1 *" S $end
$var wire 1 @* Cout $end
$var wire 1 C* xor_AB $end
$var wire 1 D* xor_ABCin $end
$var wire 1 E* NAND_AB $end
$var wire 1 F* not_NAND_AB $end
$var wire 1 G* NAND_Cin_xor_AB $end
$var wire 1 H* not_NAND_Cin_xor_AB $end
$var wire 1 I* NOR_2NAND $end
$var wire 1 J* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 U( in1 $end
$var wire 1 q) in2 $end
$var wire 1 C* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 C* in1 $end
$var wire 1 w) in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 U( in1 $end
$var wire 1 q) in2 $end
$var wire 1 E* out $end
$upscope $end

$scope module not1 $end
$var wire 1 E* in1 $end
$var wire 1 F* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 w) in1 $end
$var wire 1 C* in2 $end
$var wire 1 G* out $end
$upscope $end

$scope module not2 $end
$var wire 1 G* in1 $end
$var wire 1 H* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 F* in1 $end
$var wire 1 H* in2 $end
$var wire 1 I* out $end
$upscope $end

$scope module not3 $end
$var wire 1 I* in1 $end
$var wire 1 J* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 T( A $end
$var wire 1 p) B $end
$var wire 1 @* Cin $end
$var wire 1 )" S $end
$var wire 1 A* Cout $end
$var wire 1 K* xor_AB $end
$var wire 1 L* xor_ABCin $end
$var wire 1 M* NAND_AB $end
$var wire 1 N* not_NAND_AB $end
$var wire 1 O* NAND_Cin_xor_AB $end
$var wire 1 P* not_NAND_Cin_xor_AB $end
$var wire 1 Q* NOR_2NAND $end
$var wire 1 R* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 T( in1 $end
$var wire 1 p) in2 $end
$var wire 1 K* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 K* in1 $end
$var wire 1 @* in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 T( in1 $end
$var wire 1 p) in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module not1 $end
$var wire 1 M* in1 $end
$var wire 1 N* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @* in1 $end
$var wire 1 K* in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module not2 $end
$var wire 1 O* in1 $end
$var wire 1 P* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 N* in1 $end
$var wire 1 P* in2 $end
$var wire 1 Q* out $end
$upscope $end

$scope module not3 $end
$var wire 1 Q* in1 $end
$var wire 1 R* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 S( A $end
$var wire 1 o) B $end
$var wire 1 A* Cin $end
$var wire 1 (" S $end
$var wire 1 B* Cout $end
$var wire 1 S* xor_AB $end
$var wire 1 T* xor_ABCin $end
$var wire 1 U* NAND_AB $end
$var wire 1 V* not_NAND_AB $end
$var wire 1 W* NAND_Cin_xor_AB $end
$var wire 1 X* not_NAND_Cin_xor_AB $end
$var wire 1 Y* NOR_2NAND $end
$var wire 1 Z* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 S( in1 $end
$var wire 1 o) in2 $end
$var wire 1 S* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S* in1 $end
$var wire 1 A* in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 S( in1 $end
$var wire 1 o) in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module not1 $end
$var wire 1 U* in1 $end
$var wire 1 V* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 A* in1 $end
$var wire 1 S* in2 $end
$var wire 1 W* out $end
$upscope $end

$scope module not2 $end
$var wire 1 W* in1 $end
$var wire 1 X* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V* in1 $end
$var wire 1 X* in2 $end
$var wire 1 Y* out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y* in1 $end
$var wire 1 Z* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 R( A $end
$var wire 1 n) B $end
$var wire 1 B* Cin $end
$var wire 1 '" S $end
$var wire 1 x) Cout $end
$var wire 1 [* xor_AB $end
$var wire 1 \* xor_ABCin $end
$var wire 1 ]* NAND_AB $end
$var wire 1 ^* not_NAND_AB $end
$var wire 1 _* NAND_Cin_xor_AB $end
$var wire 1 `* not_NAND_Cin_xor_AB $end
$var wire 1 a* NOR_2NAND $end
$var wire 1 b* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 R( in1 $end
$var wire 1 n) in2 $end
$var wire 1 [* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 [* in1 $end
$var wire 1 B* in2 $end
$var wire 1 \* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 R( in1 $end
$var wire 1 n) in2 $end
$var wire 1 ]* out $end
$upscope $end

$scope module not1 $end
$var wire 1 ]* in1 $end
$var wire 1 ^* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 B* in1 $end
$var wire 1 [* in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module not2 $end
$var wire 1 _* in1 $end
$var wire 1 `* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ^* in1 $end
$var wire 1 `* in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module not3 $end
$var wire 1 a* in1 $end
$var wire 1 b* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 N( A [3] $end
$var wire 1 O( A [2] $end
$var wire 1 P( A [1] $end
$var wire 1 Q( A [0] $end
$var wire 1 j) B [3] $end
$var wire 1 k) B [2] $end
$var wire 1 l) B [1] $end
$var wire 1 m) B [0] $end
$var wire 1 x) Cin $end
$var wire 1 #" S [3] $end
$var wire 1 $" S [2] $end
$var wire 1 %" S [1] $end
$var wire 1 &" S [0] $end
$var wire 1 y) Cout $end
$var wire 1 c* Cout0 $end
$var wire 1 d* Cout1 $end
$var wire 1 e* Cout2 $end

$scope module f1 $end
$var wire 1 Q( A $end
$var wire 1 m) B $end
$var wire 1 x) Cin $end
$var wire 1 &" S $end
$var wire 1 c* Cout $end
$var wire 1 f* xor_AB $end
$var wire 1 g* xor_ABCin $end
$var wire 1 h* NAND_AB $end
$var wire 1 i* not_NAND_AB $end
$var wire 1 j* NAND_Cin_xor_AB $end
$var wire 1 k* not_NAND_Cin_xor_AB $end
$var wire 1 l* NOR_2NAND $end
$var wire 1 m* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 Q( in1 $end
$var wire 1 m) in2 $end
$var wire 1 f* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 f* in1 $end
$var wire 1 x) in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Q( in1 $end
$var wire 1 m) in2 $end
$var wire 1 h* out $end
$upscope $end

$scope module not1 $end
$var wire 1 h* in1 $end
$var wire 1 i* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 x) in1 $end
$var wire 1 f* in2 $end
$var wire 1 j* out $end
$upscope $end

$scope module not2 $end
$var wire 1 j* in1 $end
$var wire 1 k* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 i* in1 $end
$var wire 1 k* in2 $end
$var wire 1 l* out $end
$upscope $end

$scope module not3 $end
$var wire 1 l* in1 $end
$var wire 1 m* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 P( A $end
$var wire 1 l) B $end
$var wire 1 c* Cin $end
$var wire 1 %" S $end
$var wire 1 d* Cout $end
$var wire 1 n* xor_AB $end
$var wire 1 o* xor_ABCin $end
$var wire 1 p* NAND_AB $end
$var wire 1 q* not_NAND_AB $end
$var wire 1 r* NAND_Cin_xor_AB $end
$var wire 1 s* not_NAND_Cin_xor_AB $end
$var wire 1 t* NOR_2NAND $end
$var wire 1 u* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 P( in1 $end
$var wire 1 l) in2 $end
$var wire 1 n* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n* in1 $end
$var wire 1 c* in2 $end
$var wire 1 o* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 P( in1 $end
$var wire 1 l) in2 $end
$var wire 1 p* out $end
$upscope $end

$scope module not1 $end
$var wire 1 p* in1 $end
$var wire 1 q* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 c* in1 $end
$var wire 1 n* in2 $end
$var wire 1 r* out $end
$upscope $end

$scope module not2 $end
$var wire 1 r* in1 $end
$var wire 1 s* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q* in1 $end
$var wire 1 s* in2 $end
$var wire 1 t* out $end
$upscope $end

$scope module not3 $end
$var wire 1 t* in1 $end
$var wire 1 u* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 O( A $end
$var wire 1 k) B $end
$var wire 1 d* Cin $end
$var wire 1 $" S $end
$var wire 1 e* Cout $end
$var wire 1 v* xor_AB $end
$var wire 1 w* xor_ABCin $end
$var wire 1 x* NAND_AB $end
$var wire 1 y* not_NAND_AB $end
$var wire 1 z* NAND_Cin_xor_AB $end
$var wire 1 {* not_NAND_Cin_xor_AB $end
$var wire 1 |* NOR_2NAND $end
$var wire 1 }* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 O( in1 $end
$var wire 1 k) in2 $end
$var wire 1 v* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 v* in1 $end
$var wire 1 d* in2 $end
$var wire 1 w* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 O( in1 $end
$var wire 1 k) in2 $end
$var wire 1 x* out $end
$upscope $end

$scope module not1 $end
$var wire 1 x* in1 $end
$var wire 1 y* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 d* in1 $end
$var wire 1 v* in2 $end
$var wire 1 z* out $end
$upscope $end

$scope module not2 $end
$var wire 1 z* in1 $end
$var wire 1 {* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 y* in1 $end
$var wire 1 {* in2 $end
$var wire 1 |* out $end
$upscope $end

$scope module not3 $end
$var wire 1 |* in1 $end
$var wire 1 }* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 N( A $end
$var wire 1 j) B $end
$var wire 1 e* Cin $end
$var wire 1 #" S $end
$var wire 1 y) Cout $end
$var wire 1 ~* xor_AB $end
$var wire 1 !+ xor_ABCin $end
$var wire 1 "+ NAND_AB $end
$var wire 1 #+ not_NAND_AB $end
$var wire 1 $+ NAND_Cin_xor_AB $end
$var wire 1 %+ not_NAND_Cin_xor_AB $end
$var wire 1 &+ NOR_2NAND $end
$var wire 1 '+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 N( in1 $end
$var wire 1 j) in2 $end
$var wire 1 ~* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~* in1 $end
$var wire 1 e* in2 $end
$var wire 1 !+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 N( in1 $end
$var wire 1 j) in2 $end
$var wire 1 "+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 "+ in1 $end
$var wire 1 #+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e* in1 $end
$var wire 1 ~* in2 $end
$var wire 1 $+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 $+ in1 $end
$var wire 1 %+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #+ in1 $end
$var wire 1 %+ in2 $end
$var wire 1 &+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 &+ in1 $end
$var wire 1 '+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 J( A [3] $end
$var wire 1 K( A [2] $end
$var wire 1 L( A [1] $end
$var wire 1 M( A [0] $end
$var wire 1 f) B [3] $end
$var wire 1 g) B [2] $end
$var wire 1 h) B [1] $end
$var wire 1 i) B [0] $end
$var wire 1 y) Cin $end
$var wire 1 }! S [3] $end
$var wire 1 ~! S [2] $end
$var wire 1 !" S [1] $end
$var wire 1 "" S [0] $end
$var wire 1 v) Cout $end
$var wire 1 (+ Cout0 $end
$var wire 1 )+ Cout1 $end
$var wire 1 *+ Cout2 $end

$scope module f1 $end
$var wire 1 M( A $end
$var wire 1 i) B $end
$var wire 1 y) Cin $end
$var wire 1 "" S $end
$var wire 1 (+ Cout $end
$var wire 1 ++ xor_AB $end
$var wire 1 ,+ xor_ABCin $end
$var wire 1 -+ NAND_AB $end
$var wire 1 .+ not_NAND_AB $end
$var wire 1 /+ NAND_Cin_xor_AB $end
$var wire 1 0+ not_NAND_Cin_xor_AB $end
$var wire 1 1+ NOR_2NAND $end
$var wire 1 2+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 M( in1 $end
$var wire 1 i) in2 $end
$var wire 1 ++ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ++ in1 $end
$var wire 1 y) in2 $end
$var wire 1 ,+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 M( in1 $end
$var wire 1 i) in2 $end
$var wire 1 -+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 -+ in1 $end
$var wire 1 .+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 y) in1 $end
$var wire 1 ++ in2 $end
$var wire 1 /+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 /+ in1 $end
$var wire 1 0+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .+ in1 $end
$var wire 1 0+ in2 $end
$var wire 1 1+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 1+ in1 $end
$var wire 1 2+ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 L( A $end
$var wire 1 h) B $end
$var wire 1 (+ Cin $end
$var wire 1 !" S $end
$var wire 1 )+ Cout $end
$var wire 1 3+ xor_AB $end
$var wire 1 4+ xor_ABCin $end
$var wire 1 5+ NAND_AB $end
$var wire 1 6+ not_NAND_AB $end
$var wire 1 7+ NAND_Cin_xor_AB $end
$var wire 1 8+ not_NAND_Cin_xor_AB $end
$var wire 1 9+ NOR_2NAND $end
$var wire 1 :+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 L( in1 $end
$var wire 1 h) in2 $end
$var wire 1 3+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 3+ in1 $end
$var wire 1 (+ in2 $end
$var wire 1 4+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 L( in1 $end
$var wire 1 h) in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 5+ in1 $end
$var wire 1 6+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 (+ in1 $end
$var wire 1 3+ in2 $end
$var wire 1 7+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 7+ in1 $end
$var wire 1 8+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 6+ in1 $end
$var wire 1 8+ in2 $end
$var wire 1 9+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 9+ in1 $end
$var wire 1 :+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 K( A $end
$var wire 1 g) B $end
$var wire 1 )+ Cin $end
$var wire 1 ~! S $end
$var wire 1 *+ Cout $end
$var wire 1 ;+ xor_AB $end
$var wire 1 <+ xor_ABCin $end
$var wire 1 =+ NAND_AB $end
$var wire 1 >+ not_NAND_AB $end
$var wire 1 ?+ NAND_Cin_xor_AB $end
$var wire 1 @+ not_NAND_Cin_xor_AB $end
$var wire 1 A+ NOR_2NAND $end
$var wire 1 B+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 K( in1 $end
$var wire 1 g) in2 $end
$var wire 1 ;+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;+ in1 $end
$var wire 1 )+ in2 $end
$var wire 1 <+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 K( in1 $end
$var wire 1 g) in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 =+ in1 $end
$var wire 1 >+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )+ in1 $end
$var wire 1 ;+ in2 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?+ in1 $end
$var wire 1 @+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >+ in1 $end
$var wire 1 @+ in2 $end
$var wire 1 A+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 A+ in1 $end
$var wire 1 B+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 J( A $end
$var wire 1 f) B $end
$var wire 1 *+ Cin $end
$var wire 1 }! S $end
$var wire 1 v) Cout $end
$var wire 1 C+ xor_AB $end
$var wire 1 D+ xor_ABCin $end
$var wire 1 E+ NAND_AB $end
$var wire 1 F+ not_NAND_AB $end
$var wire 1 G+ NAND_Cin_xor_AB $end
$var wire 1 H+ not_NAND_Cin_xor_AB $end
$var wire 1 I+ NOR_2NAND $end
$var wire 1 J+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 J( in1 $end
$var wire 1 f) in2 $end
$var wire 1 C+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 C+ in1 $end
$var wire 1 *+ in2 $end
$var wire 1 D+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 J( in1 $end
$var wire 1 f) in2 $end
$var wire 1 E+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 E+ in1 $end
$var wire 1 F+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 *+ in1 $end
$var wire 1 C+ in2 $end
$var wire 1 G+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 G+ in1 $end
$var wire 1 H+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 F+ in1 $end
$var wire 1 H+ in2 $end
$var wire 1 I+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 I+ in1 $end
$var wire 1 J+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 ]! DataOut [15] $end
$var wire 1 ^! DataOut [14] $end
$var wire 1 _! DataOut [13] $end
$var wire 1 `! DataOut [12] $end
$var wire 1 a! DataOut [11] $end
$var wire 1 b! DataOut [10] $end
$var wire 1 c! DataOut [9] $end
$var wire 1 d! DataOut [8] $end
$var wire 1 e! DataOut [7] $end
$var wire 1 f! DataOut [6] $end
$var wire 1 g! DataOut [5] $end
$var wire 1 h! DataOut [4] $end
$var wire 1 i! DataOut [3] $end
$var wire 1 j! DataOut [2] $end
$var wire 1 k! DataOut [1] $end
$var wire 1 l! DataOut [0] $end
$var wire 1 c) Done $end
$var wire 1 d) Stall $end
$var wire 1 e) CacheHit $end
$var wire 1 K+ DataIn [15] $end
$var wire 1 L+ DataIn [14] $end
$var wire 1 M+ DataIn [13] $end
$var wire 1 N+ DataIn [12] $end
$var wire 1 O+ DataIn [11] $end
$var wire 1 P+ DataIn [10] $end
$var wire 1 Q+ DataIn [9] $end
$var wire 1 R+ DataIn [8] $end
$var wire 1 S+ DataIn [7] $end
$var wire 1 T+ DataIn [6] $end
$var wire 1 U+ DataIn [5] $end
$var wire 1 V+ DataIn [4] $end
$var wire 1 W+ DataIn [3] $end
$var wire 1 X+ DataIn [2] $end
$var wire 1 Y+ DataIn [1] $end
$var wire 1 Z+ DataIn [0] $end
$var wire 1 J( Addr [15] $end
$var wire 1 K( Addr [14] $end
$var wire 1 L( Addr [13] $end
$var wire 1 M( Addr [12] $end
$var wire 1 N( Addr [11] $end
$var wire 1 O( Addr [10] $end
$var wire 1 P( Addr [9] $end
$var wire 1 Q( Addr [8] $end
$var wire 1 R( Addr [7] $end
$var wire 1 S( Addr [6] $end
$var wire 1 T( Addr [5] $end
$var wire 1 U( Addr [4] $end
$var wire 1 V( Addr [3] $end
$var wire 1 W( Addr [2] $end
$var wire 1 X( Addr [1] $end
$var wire 1 Y( Addr [0] $end
$var wire 1 [+ Wr $end
$var wire 1 \+ Rd $end
$var wire 1 ]+ createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 9) err $end
$var wire 1 a+ ready $end
$upscope $end

$scope module pc[15] $end
$var wire 1 J( q $end
$var wire 1 *( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 K( q $end
$var wire 1 +( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 L( q $end
$var wire 1 ,( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 M( q $end
$var wire 1 -( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 N( q $end
$var wire 1 .( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 O( q $end
$var wire 1 /( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 P( q $end
$var wire 1 0( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 Q( q $end
$var wire 1 1( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 R( q $end
$var wire 1 2( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 S( q $end
$var wire 1 3( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 T( q $end
$var wire 1 4( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 U( q $end
$var wire 1 5( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 V( q $end
$var wire 1 6( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 W( q $end
$var wire 1 7( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 X( q $end
$var wire 1 8( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 Y( q $end
$var wire 1 9( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 )) PC_next_in [15] $end
$var wire 1 *) PC_next_in [14] $end
$var wire 1 +) PC_next_in [13] $end
$var wire 1 ,) PC_next_in [12] $end
$var wire 1 -) PC_next_in [11] $end
$var wire 1 .) PC_next_in [10] $end
$var wire 1 /) PC_next_in [9] $end
$var wire 1 0) PC_next_in [8] $end
$var wire 1 1) PC_next_in [7] $end
$var wire 1 2) PC_next_in [6] $end
$var wire 1 3) PC_next_in [5] $end
$var wire 1 4) PC_next_in [4] $end
$var wire 1 5) PC_next_in [3] $end
$var wire 1 6) PC_next_in [2] $end
$var wire 1 7) PC_next_in [1] $end
$var wire 1 8) PC_next_in [0] $end
$var wire 1 p( instruction_in [15] $end
$var wire 1 q( instruction_in [14] $end
$var wire 1 r( instruction_in [13] $end
$var wire 1 s( instruction_in [12] $end
$var wire 1 t( instruction_in [11] $end
$var wire 1 u( instruction_in [10] $end
$var wire 1 v( instruction_in [9] $end
$var wire 1 w( instruction_in [8] $end
$var wire 1 x( instruction_in [7] $end
$var wire 1 y( instruction_in [6] $end
$var wire 1 z( instruction_in [5] $end
$var wire 1 {( instruction_in [4] $end
$var wire 1 |( instruction_in [3] $end
$var wire 1 }( instruction_in [2] $end
$var wire 1 ~( instruction_in [1] $end
$var wire 1 !) instruction_in [0] $end
$var wire 1 J( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 K( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 L( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 M( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 N( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 O( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 P( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 Q( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 R( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 S( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 T( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 U( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 V( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 W( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 X( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 Y( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 Z( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 [( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 \( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 ]( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 ^( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 _( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 `( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 a( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 b( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 c( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 d( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 e( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 f( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 g( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 h( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 i( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 /" PC_next_in_out [15] $end
$var wire 1 0" PC_next_in_out [14] $end
$var wire 1 1" PC_next_in_out [13] $end
$var wire 1 2" PC_next_in_out [12] $end
$var wire 1 3" PC_next_in_out [11] $end
$var wire 1 4" PC_next_in_out [10] $end
$var wire 1 5" PC_next_in_out [9] $end
$var wire 1 6" PC_next_in_out [8] $end
$var wire 1 7" PC_next_in_out [7] $end
$var wire 1 8" PC_next_in_out [6] $end
$var wire 1 9" PC_next_in_out [5] $end
$var wire 1 :" PC_next_in_out [4] $end
$var wire 1 ;" PC_next_in_out [3] $end
$var wire 1 <" PC_next_in_out [2] $end
$var wire 1 =" PC_next_in_out [1] $end
$var wire 1 >" PC_next_in_out [0] $end
$var wire 1 m! instruction_out [15] $end
$var wire 1 n! instruction_out [14] $end
$var wire 1 o! instruction_out [13] $end
$var wire 1 p! instruction_out [12] $end
$var wire 1 q! instruction_out [11] $end
$var wire 1 r! instruction_out [10] $end
$var wire 1 s! instruction_out [9] $end
$var wire 1 t! instruction_out [8] $end
$var wire 1 u! instruction_out [7] $end
$var wire 1 v! instruction_out [6] $end
$var wire 1 w! instruction_out [5] $end
$var wire 1 x! instruction_out [4] $end
$var wire 1 y! instruction_out [3] $end
$var wire 1 z! instruction_out [2] $end
$var wire 1 {! instruction_out [1] $end
$var wire 1 |! instruction_out [0] $end
$var wire 1 9) HALT_IN $end
$var wire 1 :) HALT_OUT $end
$var wire 1 n( STALL_IN $end
$var wire 1 ;) STALL_OUT $end

$scope module pc[15] $end
$var wire 1 /" q $end
$var wire 1 )) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 0" q $end
$var wire 1 *) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 1" q $end
$var wire 1 +) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 2" q $end
$var wire 1 ,) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 3" q $end
$var wire 1 -) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 4" q $end
$var wire 1 .) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 5" q $end
$var wire 1 /) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 6" q $end
$var wire 1 0) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 7" q $end
$var wire 1 1) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 8" q $end
$var wire 1 2) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 9" q $end
$var wire 1 3) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 :" q $end
$var wire 1 4) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 ;" q $end
$var wire 1 5) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 <" q $end
$var wire 1 6) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 =" q $end
$var wire 1 7) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 >" q $end
$var wire 1 8) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 m! q [15] $end
$var wire 1 n! q [14] $end
$var wire 1 o! q [13] $end
$var wire 1 p! q [12] $end
$var wire 1 q! q [11] $end
$var wire 1 r! q [10] $end
$var wire 1 s! q [9] $end
$var wire 1 t! q [8] $end
$var wire 1 u! q [7] $end
$var wire 1 v! q [6] $end
$var wire 1 w! q [5] $end
$var wire 1 x! q [4] $end
$var wire 1 y! q [3] $end
$var wire 1 z! q [2] $end
$var wire 1 {! q [1] $end
$var wire 1 |! q [0] $end
$var wire 1 p( d [15] $end
$var wire 1 q( d [14] $end
$var wire 1 r( d [13] $end
$var wire 1 s( d [12] $end
$var wire 1 t( d [11] $end
$var wire 1 u( d [10] $end
$var wire 1 v( d [9] $end
$var wire 1 w( d [8] $end
$var wire 1 x( d [7] $end
$var wire 1 y( d [6] $end
$var wire 1 z( d [5] $end
$var wire 1 {( d [4] $end
$var wire 1 |( d [3] $end
$var wire 1 }( d [2] $end
$var wire 1 ~( d [1] $end
$var wire 1 !) d [0] $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 Z( q $end
$var wire 1 J( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 [( q $end
$var wire 1 K( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 \( q $end
$var wire 1 L( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 ]( q $end
$var wire 1 M( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 ^( q $end
$var wire 1 N( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 _( q $end
$var wire 1 O( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 `( q $end
$var wire 1 P( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 a( q $end
$var wire 1 Q( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 b( q $end
$var wire 1 R( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 c( q $end
$var wire 1 S( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 d( q $end
$var wire 1 T( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 e( q $end
$var wire 1 U( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 f( q $end
$var wire 1 V( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 g( q $end
$var wire 1 W( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 h( q $end
$var wire 1 X( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 i( q $end
$var wire 1 Y( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[15] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[14] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[13] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[12] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[11] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[10] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[9] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[8] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[7] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[6] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[5] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[4] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[3] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[2] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[1] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module HALT[0] $end
$var wire 1 :) q $end
$var wire 1 9) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[15] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[14] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[13] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[12] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[11] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[10] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[9] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[8] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[7] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[6] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[5] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[4] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[3] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[2] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[1] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module STALL[0] $end
$var wire 1 ;) q $end
$var wire 1 n( d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 _' err $end
$var wire 1 D) instruction [15] $end
$var wire 1 E) instruction [14] $end
$var wire 1 F) instruction [13] $end
$var wire 1 G) instruction [12] $end
$var wire 1 H) instruction [11] $end
$var wire 1 I) instruction [10] $end
$var wire 1 J) instruction [9] $end
$var wire 1 K) instruction [8] $end
$var wire 1 L) instruction [7] $end
$var wire 1 M) instruction [6] $end
$var wire 1 N) instruction [5] $end
$var wire 1 O) instruction [4] $end
$var wire 1 P) instruction [3] $end
$var wire 1 Q) instruction [2] $end
$var wire 1 R) instruction [1] $end
$var wire 1 S) instruction [0] $end
$var wire 1 <! data_write [15] $end
$var wire 1 =! data_write [14] $end
$var wire 1 >! data_write [13] $end
$var wire 1 ?! data_write [12] $end
$var wire 1 @! data_write [11] $end
$var wire 1 A! data_write [10] $end
$var wire 1 B! data_write [9] $end
$var wire 1 C! data_write [8] $end
$var wire 1 D! data_write [7] $end
$var wire 1 E! data_write [6] $end
$var wire 1 F! data_write [5] $end
$var wire 1 G! data_write [4] $end
$var wire 1 H! data_write [3] $end
$var wire 1 I! data_write [2] $end
$var wire 1 J! data_write [1] $end
$var wire 1 K! data_write [0] $end
$var wire 1 Y" read_data_1 [15] $end
$var wire 1 Z" read_data_1 [14] $end
$var wire 1 [" read_data_1 [13] $end
$var wire 1 \" read_data_1 [12] $end
$var wire 1 ]" read_data_1 [11] $end
$var wire 1 ^" read_data_1 [10] $end
$var wire 1 _" read_data_1 [9] $end
$var wire 1 `" read_data_1 [8] $end
$var wire 1 a" read_data_1 [7] $end
$var wire 1 b" read_data_1 [6] $end
$var wire 1 c" read_data_1 [5] $end
$var wire 1 d" read_data_1 [4] $end
$var wire 1 e" read_data_1 [3] $end
$var wire 1 f" read_data_1 [2] $end
$var wire 1 g" read_data_1 [1] $end
$var wire 1 h" read_data_1 [0] $end
$var wire 1 y" read_data_2 [15] $end
$var wire 1 z" read_data_2 [14] $end
$var wire 1 {" read_data_2 [13] $end
$var wire 1 |" read_data_2 [12] $end
$var wire 1 }" read_data_2 [11] $end
$var wire 1 ~" read_data_2 [10] $end
$var wire 1 !# read_data_2 [9] $end
$var wire 1 "# read_data_2 [8] $end
$var wire 1 ## read_data_2 [7] $end
$var wire 1 $# read_data_2 [6] $end
$var wire 1 %# read_data_2 [5] $end
$var wire 1 &# read_data_2 [4] $end
$var wire 1 '# read_data_2 [3] $end
$var wire 1 (# read_data_2 [2] $end
$var wire 1 )# read_data_2 [1] $end
$var wire 1 *# read_data_2 [0] $end
$var wire 1 =$ to_shift [15] $end
$var wire 1 >$ to_shift [14] $end
$var wire 1 ?$ to_shift [13] $end
$var wire 1 @$ to_shift [12] $end
$var wire 1 A$ to_shift [11] $end
$var wire 1 B$ to_shift [10] $end
$var wire 1 C$ to_shift [9] $end
$var wire 1 D$ to_shift [8] $end
$var wire 1 E$ to_shift [7] $end
$var wire 1 F$ to_shift [6] $end
$var wire 1 G$ to_shift [5] $end
$var wire 1 H$ to_shift [4] $end
$var wire 1 I$ to_shift [3] $end
$var wire 1 J$ to_shift [2] $end
$var wire 1 K$ to_shift [1] $end
$var wire 1 L$ to_shift [0] $end
$var wire 1 ;# i_1 [15] $end
$var wire 1 <# i_1 [14] $end
$var wire 1 =# i_1 [13] $end
$var wire 1 ># i_1 [12] $end
$var wire 1 ?# i_1 [11] $end
$var wire 1 @# i_1 [10] $end
$var wire 1 A# i_1 [9] $end
$var wire 1 B# i_1 [8] $end
$var wire 1 C# i_1 [7] $end
$var wire 1 D# i_1 [6] $end
$var wire 1 E# i_1 [5] $end
$var wire 1 F# i_1 [4] $end
$var wire 1 G# i_1 [3] $end
$var wire 1 H# i_1 [2] $end
$var wire 1 I# i_1 [1] $end
$var wire 1 J# i_1 [0] $end
$var wire 1 [# i_2 [15] $end
$var wire 1 \# i_2 [14] $end
$var wire 1 ]# i_2 [13] $end
$var wire 1 ^# i_2 [12] $end
$var wire 1 _# i_2 [11] $end
$var wire 1 `# i_2 [10] $end
$var wire 1 a# i_2 [9] $end
$var wire 1 b# i_2 [8] $end
$var wire 1 c# i_2 [7] $end
$var wire 1 d# i_2 [6] $end
$var wire 1 e# i_2 [5] $end
$var wire 1 f# i_2 [4] $end
$var wire 1 g# i_2 [3] $end
$var wire 1 h# i_2 [2] $end
$var wire 1 i# i_2 [1] $end
$var wire 1 j# i_2 [0] $end
$var wire 1 {# word_align_jump [15] $end
$var wire 1 |# word_align_jump [14] $end
$var wire 1 }# word_align_jump [13] $end
$var wire 1 ~# word_align_jump [12] $end
$var wire 1 !$ word_align_jump [11] $end
$var wire 1 "$ word_align_jump [10] $end
$var wire 1 #$ word_align_jump [9] $end
$var wire 1 $$ word_align_jump [8] $end
$var wire 1 %$ word_align_jump [7] $end
$var wire 1 &$ word_align_jump [6] $end
$var wire 1 '$ word_align_jump [5] $end
$var wire 1 ($ word_align_jump [4] $end
$var wire 1 )$ word_align_jump [3] $end
$var wire 1 *$ word_align_jump [2] $end
$var wire 1 +$ word_align_jump [1] $end
$var wire 1 ,$ word_align_jump [0] $end
$var wire 1 g, signed_i_1 [15] $end
$var wire 1 h, signed_i_1 [14] $end
$var wire 1 i, signed_i_1 [13] $end
$var wire 1 j, signed_i_1 [12] $end
$var wire 1 k, signed_i_1 [11] $end
$var wire 1 l, signed_i_1 [10] $end
$var wire 1 m, signed_i_1 [9] $end
$var wire 1 n, signed_i_1 [8] $end
$var wire 1 o, signed_i_1 [7] $end
$var wire 1 p, signed_i_1 [6] $end
$var wire 1 q, signed_i_1 [5] $end
$var wire 1 r, signed_i_1 [4] $end
$var wire 1 s, signed_i_1 [3] $end
$var wire 1 t, signed_i_1 [2] $end
$var wire 1 u, signed_i_1 [1] $end
$var wire 1 v, signed_i_1 [0] $end
$var wire 1 w, zero_i_1 [15] $end
$var wire 1 x, zero_i_1 [14] $end
$var wire 1 y, zero_i_1 [13] $end
$var wire 1 z, zero_i_1 [12] $end
$var wire 1 {, zero_i_1 [11] $end
$var wire 1 |, zero_i_1 [10] $end
$var wire 1 }, zero_i_1 [9] $end
$var wire 1 ~, zero_i_1 [8] $end
$var wire 1 !- zero_i_1 [7] $end
$var wire 1 "- zero_i_1 [6] $end
$var wire 1 #- zero_i_1 [5] $end
$var wire 1 $- zero_i_1 [4] $end
$var wire 1 %- zero_i_1 [3] $end
$var wire 1 &- zero_i_1 [2] $end
$var wire 1 '- zero_i_1 [1] $end
$var wire 1 (- zero_i_1 [0] $end
$var wire 1 )- signed_i_2 [15] $end
$var wire 1 *- signed_i_2 [14] $end
$var wire 1 +- signed_i_2 [13] $end
$var wire 1 ,- signed_i_2 [12] $end
$var wire 1 -- signed_i_2 [11] $end
$var wire 1 .- signed_i_2 [10] $end
$var wire 1 /- signed_i_2 [9] $end
$var wire 1 0- signed_i_2 [8] $end
$var wire 1 1- signed_i_2 [7] $end
$var wire 1 2- signed_i_2 [6] $end
$var wire 1 3- signed_i_2 [5] $end
$var wire 1 4- signed_i_2 [4] $end
$var wire 1 5- signed_i_2 [3] $end
$var wire 1 6- signed_i_2 [2] $end
$var wire 1 7- signed_i_2 [1] $end
$var wire 1 8- signed_i_2 [0] $end
$var wire 1 9- zero_i_2 [15] $end
$var wire 1 :- zero_i_2 [14] $end
$var wire 1 ;- zero_i_2 [13] $end
$var wire 1 <- zero_i_2 [12] $end
$var wire 1 =- zero_i_2 [11] $end
$var wire 1 >- zero_i_2 [10] $end
$var wire 1 ?- zero_i_2 [9] $end
$var wire 1 @- zero_i_2 [8] $end
$var wire 1 A- zero_i_2 [7] $end
$var wire 1 B- zero_i_2 [6] $end
$var wire 1 C- zero_i_2 [5] $end
$var wire 1 D- zero_i_2 [4] $end
$var wire 1 E- zero_i_2 [3] $end
$var wire 1 F- zero_i_2 [2] $end
$var wire 1 G- zero_i_2 [1] $end
$var wire 1 H- zero_i_2 [0] $end
$var wire 1 !% write_reg_out [2] $end
$var wire 1 "% write_reg_out [1] $end
$var wire 1 #% write_reg_out [0] $end
$var wire 1 [' write_reg_from_wb [2] $end
$var wire 1 \' write_reg_from_wb [1] $end
$var wire 1 ]' write_reg_from_wb [0] $end
$var wire 1 J' RegWrt_from_wb $end
$var wire 1 :) fetch_halt $end
$var wire 1 ;) fetch_stall $end

$scope module registerfile $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 I) read1RegSel [2] $end
$var wire 1 J) read1RegSel [1] $end
$var wire 1 K) read1RegSel [0] $end
$var wire 1 L) read2RegSel [2] $end
$var wire 1 M) read2RegSel [1] $end
$var wire 1 N) read2RegSel [0] $end
$var wire 1 [' writeRegSel [2] $end
$var wire 1 \' writeRegSel [1] $end
$var wire 1 ]' writeRegSel [0] $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 J' writeEn $end
$var wire 1 Y" read1Data [15] $end
$var wire 1 Z" read1Data [14] $end
$var wire 1 [" read1Data [13] $end
$var wire 1 \" read1Data [12] $end
$var wire 1 ]" read1Data [11] $end
$var wire 1 ^" read1Data [10] $end
$var wire 1 _" read1Data [9] $end
$var wire 1 `" read1Data [8] $end
$var wire 1 a" read1Data [7] $end
$var wire 1 b" read1Data [6] $end
$var wire 1 c" read1Data [5] $end
$var wire 1 d" read1Data [4] $end
$var wire 1 e" read1Data [3] $end
$var wire 1 f" read1Data [2] $end
$var wire 1 g" read1Data [1] $end
$var wire 1 h" read1Data [0] $end
$var wire 1 y" read2Data [15] $end
$var wire 1 z" read2Data [14] $end
$var wire 1 {" read2Data [13] $end
$var wire 1 |" read2Data [12] $end
$var wire 1 }" read2Data [11] $end
$var wire 1 ~" read2Data [10] $end
$var wire 1 !# read2Data [9] $end
$var wire 1 "# read2Data [8] $end
$var wire 1 ## read2Data [7] $end
$var wire 1 $# read2Data [6] $end
$var wire 1 %# read2Data [5] $end
$var wire 1 &# read2Data [4] $end
$var wire 1 '# read2Data [3] $end
$var wire 1 (# read2Data [2] $end
$var wire 1 )# read2Data [1] $end
$var wire 1 *# read2Data [0] $end
$var wire 1 _' err $end
$var wire 1 ]- registers [0] $end
$var wire 1 ^- registers [1] $end
$var wire 1 _- registers [2] $end
$var wire 1 `- registers [3] $end
$var wire 1 a- registers [4] $end
$var wire 1 b- registers [5] $end
$var wire 1 c- registers [6] $end
$var wire 1 d- registers [7] $end
$var wire 1 e- registers [8] $end
$var wire 1 f- registers [9] $end
$var wire 1 g- registers [10] $end
$var wire 1 h- registers [11] $end
$var wire 1 i- registers [12] $end
$var wire 1 j- registers [13] $end
$var wire 1 k- registers [14] $end
$var wire 1 l- registers [15] $end
$var wire 1 m- registers [16] $end
$var wire 1 n- registers [17] $end
$var wire 1 o- registers [18] $end
$var wire 1 p- registers [19] $end
$var wire 1 q- registers [20] $end
$var wire 1 r- registers [21] $end
$var wire 1 s- registers [22] $end
$var wire 1 t- registers [23] $end
$var wire 1 u- registers [24] $end
$var wire 1 v- registers [25] $end
$var wire 1 w- registers [26] $end
$var wire 1 x- registers [27] $end
$var wire 1 y- registers [28] $end
$var wire 1 z- registers [29] $end
$var wire 1 {- registers [30] $end
$var wire 1 |- registers [31] $end
$var wire 1 }- registers [32] $end
$var wire 1 ~- registers [33] $end
$var wire 1 !. registers [34] $end
$var wire 1 ". registers [35] $end
$var wire 1 #. registers [36] $end
$var wire 1 $. registers [37] $end
$var wire 1 %. registers [38] $end
$var wire 1 &. registers [39] $end
$var wire 1 '. registers [40] $end
$var wire 1 (. registers [41] $end
$var wire 1 ). registers [42] $end
$var wire 1 *. registers [43] $end
$var wire 1 +. registers [44] $end
$var wire 1 ,. registers [45] $end
$var wire 1 -. registers [46] $end
$var wire 1 .. registers [47] $end
$var wire 1 /. registers [48] $end
$var wire 1 0. registers [49] $end
$var wire 1 1. registers [50] $end
$var wire 1 2. registers [51] $end
$var wire 1 3. registers [52] $end
$var wire 1 4. registers [53] $end
$var wire 1 5. registers [54] $end
$var wire 1 6. registers [55] $end
$var wire 1 7. registers [56] $end
$var wire 1 8. registers [57] $end
$var wire 1 9. registers [58] $end
$var wire 1 :. registers [59] $end
$var wire 1 ;. registers [60] $end
$var wire 1 <. registers [61] $end
$var wire 1 =. registers [62] $end
$var wire 1 >. registers [63] $end
$var wire 1 ?. registers [64] $end
$var wire 1 @. registers [65] $end
$var wire 1 A. registers [66] $end
$var wire 1 B. registers [67] $end
$var wire 1 C. registers [68] $end
$var wire 1 D. registers [69] $end
$var wire 1 E. registers [70] $end
$var wire 1 F. registers [71] $end
$var wire 1 G. registers [72] $end
$var wire 1 H. registers [73] $end
$var wire 1 I. registers [74] $end
$var wire 1 J. registers [75] $end
$var wire 1 K. registers [76] $end
$var wire 1 L. registers [77] $end
$var wire 1 M. registers [78] $end
$var wire 1 N. registers [79] $end
$var wire 1 O. registers [80] $end
$var wire 1 P. registers [81] $end
$var wire 1 Q. registers [82] $end
$var wire 1 R. registers [83] $end
$var wire 1 S. registers [84] $end
$var wire 1 T. registers [85] $end
$var wire 1 U. registers [86] $end
$var wire 1 V. registers [87] $end
$var wire 1 W. registers [88] $end
$var wire 1 X. registers [89] $end
$var wire 1 Y. registers [90] $end
$var wire 1 Z. registers [91] $end
$var wire 1 [. registers [92] $end
$var wire 1 \. registers [93] $end
$var wire 1 ]. registers [94] $end
$var wire 1 ^. registers [95] $end
$var wire 1 _. registers [96] $end
$var wire 1 `. registers [97] $end
$var wire 1 a. registers [98] $end
$var wire 1 b. registers [99] $end
$var wire 1 c. registers [100] $end
$var wire 1 d. registers [101] $end
$var wire 1 e. registers [102] $end
$var wire 1 f. registers [103] $end
$var wire 1 g. registers [104] $end
$var wire 1 h. registers [105] $end
$var wire 1 i. registers [106] $end
$var wire 1 j. registers [107] $end
$var wire 1 k. registers [108] $end
$var wire 1 l. registers [109] $end
$var wire 1 m. registers [110] $end
$var wire 1 n. registers [111] $end
$var wire 1 o. registers [112] $end
$var wire 1 p. registers [113] $end
$var wire 1 q. registers [114] $end
$var wire 1 r. registers [115] $end
$var wire 1 s. registers [116] $end
$var wire 1 t. registers [117] $end
$var wire 1 u. registers [118] $end
$var wire 1 v. registers [119] $end
$var wire 1 w. registers [120] $end
$var wire 1 x. registers [121] $end
$var wire 1 y. registers [122] $end
$var wire 1 z. registers [123] $end
$var wire 1 {. registers [124] $end
$var wire 1 |. registers [125] $end
$var wire 1 }. registers [126] $end
$var wire 1 ~. registers [127] $end
$var wire 1 !/ mask_1 [0] $end
$var wire 1 "/ mask_1 [1] $end
$var wire 1 #/ mask_1 [2] $end
$var wire 1 $/ mask_1 [3] $end
$var wire 1 %/ mask_1 [4] $end
$var wire 1 &/ mask_1 [5] $end
$var wire 1 '/ mask_1 [6] $end
$var wire 1 (/ mask_1 [7] $end

$scope module ind_reg1 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 (/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 ~. read [15] $end
$var wire 1 }. read [14] $end
$var wire 1 |. read [13] $end
$var wire 1 {. read [12] $end
$var wire 1 z. read [11] $end
$var wire 1 y. read [10] $end
$var wire 1 x. read [9] $end
$var wire 1 w. read [8] $end
$var wire 1 v. read [7] $end
$var wire 1 u. read [6] $end
$var wire 1 t. read [5] $end
$var wire 1 s. read [4] $end
$var wire 1 r. read [3] $end
$var wire 1 q. read [2] $end
$var wire 1 p. read [1] $end
$var wire 1 o. read [0] $end

$scope module flop[15] $end
$var wire 1 ~. q $end
$var wire 1 */ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 }. q $end
$var wire 1 ,/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 |. q $end
$var wire 1 ./ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 {. q $end
$var wire 1 0/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 z. q $end
$var wire 1 2/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 y. q $end
$var wire 1 4/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 x. q $end
$var wire 1 6/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 w. q $end
$var wire 1 8/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 v. q $end
$var wire 1 :/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 u. q $end
$var wire 1 </ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 t. q $end
$var wire 1 >/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 s. q $end
$var wire 1 @/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 r. q $end
$var wire 1 B/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 q. q $end
$var wire 1 D/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 p. q $end
$var wire 1 F/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 o. q $end
$var wire 1 H/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 '/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 n. read [15] $end
$var wire 1 m. read [14] $end
$var wire 1 l. read [13] $end
$var wire 1 k. read [12] $end
$var wire 1 j. read [11] $end
$var wire 1 i. read [10] $end
$var wire 1 h. read [9] $end
$var wire 1 g. read [8] $end
$var wire 1 f. read [7] $end
$var wire 1 e. read [6] $end
$var wire 1 d. read [5] $end
$var wire 1 c. read [4] $end
$var wire 1 b. read [3] $end
$var wire 1 a. read [2] $end
$var wire 1 `. read [1] $end
$var wire 1 _. read [0] $end

$scope module flop[15] $end
$var wire 1 n. q $end
$var wire 1 K/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 m. q $end
$var wire 1 M/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 l. q $end
$var wire 1 O/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 k. q $end
$var wire 1 Q/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 j. q $end
$var wire 1 S/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 i. q $end
$var wire 1 U/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 h. q $end
$var wire 1 W/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 g. q $end
$var wire 1 Y/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 f. q $end
$var wire 1 [/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 e. q $end
$var wire 1 ]/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 d. q $end
$var wire 1 _/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 c. q $end
$var wire 1 a/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 b. q $end
$var wire 1 c/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 a. q $end
$var wire 1 e/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 `. q $end
$var wire 1 g/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 _. q $end
$var wire 1 i/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 &/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 ^. read [15] $end
$var wire 1 ]. read [14] $end
$var wire 1 \. read [13] $end
$var wire 1 [. read [12] $end
$var wire 1 Z. read [11] $end
$var wire 1 Y. read [10] $end
$var wire 1 X. read [9] $end
$var wire 1 W. read [8] $end
$var wire 1 V. read [7] $end
$var wire 1 U. read [6] $end
$var wire 1 T. read [5] $end
$var wire 1 S. read [4] $end
$var wire 1 R. read [3] $end
$var wire 1 Q. read [2] $end
$var wire 1 P. read [1] $end
$var wire 1 O. read [0] $end

$scope module flop[15] $end
$var wire 1 ^. q $end
$var wire 1 l/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 ]. q $end
$var wire 1 n/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 \. q $end
$var wire 1 p/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 [. q $end
$var wire 1 r/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 Z. q $end
$var wire 1 t/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 Y. q $end
$var wire 1 v/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 X. q $end
$var wire 1 x/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 W. q $end
$var wire 1 z/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 V. q $end
$var wire 1 |/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 U. q $end
$var wire 1 ~/ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 T. q $end
$var wire 1 "0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 S. q $end
$var wire 1 $0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 R. q $end
$var wire 1 &0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 Q. q $end
$var wire 1 (0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 P. q $end
$var wire 1 *0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 O. q $end
$var wire 1 ,0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 %/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 N. read [15] $end
$var wire 1 M. read [14] $end
$var wire 1 L. read [13] $end
$var wire 1 K. read [12] $end
$var wire 1 J. read [11] $end
$var wire 1 I. read [10] $end
$var wire 1 H. read [9] $end
$var wire 1 G. read [8] $end
$var wire 1 F. read [7] $end
$var wire 1 E. read [6] $end
$var wire 1 D. read [5] $end
$var wire 1 C. read [4] $end
$var wire 1 B. read [3] $end
$var wire 1 A. read [2] $end
$var wire 1 @. read [1] $end
$var wire 1 ?. read [0] $end

$scope module flop[15] $end
$var wire 1 N. q $end
$var wire 1 /0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 M. q $end
$var wire 1 10 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 L. q $end
$var wire 1 30 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 K. q $end
$var wire 1 50 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 J. q $end
$var wire 1 70 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 I. q $end
$var wire 1 90 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 H. q $end
$var wire 1 ;0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 G. q $end
$var wire 1 =0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 F. q $end
$var wire 1 ?0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 E. q $end
$var wire 1 A0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 D. q $end
$var wire 1 C0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 C. q $end
$var wire 1 E0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 B. q $end
$var wire 1 G0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 A. q $end
$var wire 1 I0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 @. q $end
$var wire 1 K0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 ?. q $end
$var wire 1 M0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 $/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 >. read [15] $end
$var wire 1 =. read [14] $end
$var wire 1 <. read [13] $end
$var wire 1 ;. read [12] $end
$var wire 1 :. read [11] $end
$var wire 1 9. read [10] $end
$var wire 1 8. read [9] $end
$var wire 1 7. read [8] $end
$var wire 1 6. read [7] $end
$var wire 1 5. read [6] $end
$var wire 1 4. read [5] $end
$var wire 1 3. read [4] $end
$var wire 1 2. read [3] $end
$var wire 1 1. read [2] $end
$var wire 1 0. read [1] $end
$var wire 1 /. read [0] $end

$scope module flop[15] $end
$var wire 1 >. q $end
$var wire 1 P0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 =. q $end
$var wire 1 R0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 <. q $end
$var wire 1 T0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ;. q $end
$var wire 1 V0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 :. q $end
$var wire 1 X0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 9. q $end
$var wire 1 Z0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 8. q $end
$var wire 1 \0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 7. q $end
$var wire 1 ^0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 6. q $end
$var wire 1 `0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 5. q $end
$var wire 1 b0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 4. q $end
$var wire 1 d0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 3. q $end
$var wire 1 f0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 2. q $end
$var wire 1 h0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 1. q $end
$var wire 1 j0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 0. q $end
$var wire 1 l0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 /. q $end
$var wire 1 n0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 #/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 .. read [15] $end
$var wire 1 -. read [14] $end
$var wire 1 ,. read [13] $end
$var wire 1 +. read [12] $end
$var wire 1 *. read [11] $end
$var wire 1 ). read [10] $end
$var wire 1 (. read [9] $end
$var wire 1 '. read [8] $end
$var wire 1 &. read [7] $end
$var wire 1 %. read [6] $end
$var wire 1 $. read [5] $end
$var wire 1 #. read [4] $end
$var wire 1 ". read [3] $end
$var wire 1 !. read [2] $end
$var wire 1 ~- read [1] $end
$var wire 1 }- read [0] $end

$scope module flop[15] $end
$var wire 1 .. q $end
$var wire 1 q0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 -. q $end
$var wire 1 s0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ,. q $end
$var wire 1 u0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 +. q $end
$var wire 1 w0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 *. q $end
$var wire 1 y0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ). q $end
$var wire 1 {0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 (. q $end
$var wire 1 }0 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 '. q $end
$var wire 1 !1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 &. q $end
$var wire 1 #1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 %. q $end
$var wire 1 %1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 $. q $end
$var wire 1 '1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 #. q $end
$var wire 1 )1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 ". q $end
$var wire 1 +1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 !. q $end
$var wire 1 -1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 ~- q $end
$var wire 1 /1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 }- q $end
$var wire 1 11 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 "/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 |- read [15] $end
$var wire 1 {- read [14] $end
$var wire 1 z- read [13] $end
$var wire 1 y- read [12] $end
$var wire 1 x- read [11] $end
$var wire 1 w- read [10] $end
$var wire 1 v- read [9] $end
$var wire 1 u- read [8] $end
$var wire 1 t- read [7] $end
$var wire 1 s- read [6] $end
$var wire 1 r- read [5] $end
$var wire 1 q- read [4] $end
$var wire 1 p- read [3] $end
$var wire 1 o- read [2] $end
$var wire 1 n- read [1] $end
$var wire 1 m- read [0] $end

$scope module flop[15] $end
$var wire 1 |- q $end
$var wire 1 41 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 {- q $end
$var wire 1 61 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 z- q $end
$var wire 1 81 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 y- q $end
$var wire 1 :1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 x- q $end
$var wire 1 <1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 w- q $end
$var wire 1 >1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 v- q $end
$var wire 1 @1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 u- q $end
$var wire 1 B1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 t- q $end
$var wire 1 D1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 s- q $end
$var wire 1 F1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 r- q $end
$var wire 1 H1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 q- q $end
$var wire 1 J1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 p- q $end
$var wire 1 L1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 o- q $end
$var wire 1 N1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 n- q $end
$var wire 1 P1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 m- q $end
$var wire 1 R1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 !/ writeEn $end
$var wire 1 <! writeData [15] $end
$var wire 1 =! writeData [14] $end
$var wire 1 >! writeData [13] $end
$var wire 1 ?! writeData [12] $end
$var wire 1 @! writeData [11] $end
$var wire 1 A! writeData [10] $end
$var wire 1 B! writeData [9] $end
$var wire 1 C! writeData [8] $end
$var wire 1 D! writeData [7] $end
$var wire 1 E! writeData [6] $end
$var wire 1 F! writeData [5] $end
$var wire 1 G! writeData [4] $end
$var wire 1 H! writeData [3] $end
$var wire 1 I! writeData [2] $end
$var wire 1 J! writeData [1] $end
$var wire 1 K! writeData [0] $end
$var wire 1 l- read [15] $end
$var wire 1 k- read [14] $end
$var wire 1 j- read [13] $end
$var wire 1 i- read [12] $end
$var wire 1 h- read [11] $end
$var wire 1 g- read [10] $end
$var wire 1 f- read [9] $end
$var wire 1 e- read [8] $end
$var wire 1 d- read [7] $end
$var wire 1 c- read [6] $end
$var wire 1 b- read [5] $end
$var wire 1 a- read [4] $end
$var wire 1 `- read [3] $end
$var wire 1 _- read [2] $end
$var wire 1 ^- read [1] $end
$var wire 1 ]- read [0] $end

$scope module flop[15] $end
$var wire 1 l- q $end
$var wire 1 U1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 k- q $end
$var wire 1 W1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 j- q $end
$var wire 1 Y1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 i- q $end
$var wire 1 [1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 h- q $end
$var wire 1 ]1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 g- q $end
$var wire 1 _1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 f- q $end
$var wire 1 a1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 e- q $end
$var wire 1 c1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 d- q $end
$var wire 1 e1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 c- q $end
$var wire 1 g1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 b- q $end
$var wire 1 i1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 a- q $end
$var wire 1 k1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 `- q $end
$var wire 1 m1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 _- q $end
$var wire 1 o1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 ^- q $end
$var wire 1 q1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 ]- q $end
$var wire 1 s1 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 m! inst [15] $end
$var wire 1 n! inst [14] $end
$var wire 1 o! inst [13] $end
$var wire 1 p! inst [12] $end
$var wire 1 q! inst [11] $end
$var wire 1 r! inst [10] $end
$var wire 1 s! inst [9] $end
$var wire 1 t! inst [8] $end
$var wire 1 u! inst [7] $end
$var wire 1 v! inst [6] $end
$var wire 1 w! inst [5] $end
$var wire 1 x! inst [4] $end
$var wire 1 y! inst [3] $end
$var wire 1 z! inst [2] $end
$var wire 1 {! inst [1] $end
$var wire 1 |! inst [0] $end
$var wire 1 $% execute [2] $end
$var wire 1 %% execute [1] $end
$var wire 1 &% execute [0] $end
$var wire 1 S& memory [2] $end
$var wire 1 T& memory [1] $end
$var wire 1 U& memory [0] $end
$var wire 1 [' writeback [2] $end
$var wire 1 \' writeback [1] $end
$var wire 1 ]' writeback [0] $end
$var wire 1 Q" BSrc [1] $end
$var wire 1 R" BSrc [0] $end
$var wire 1 i$ Branch $end
$var wire 1 j$ BranchEx $end
$var wire 1 B) NOPEx $end
$var wire 1 ?) NOPMem $end
$var wire 1 @) NOPWB $end
$var wire 1 n( fetch_stall $end
$var wire 1 T) mem_stall $end
$var wire 1 j( sendNOP $end
$var wire 1 u1 regEqual $end
$var wire 1 v1 regEqual2 $end
$var wire 1 w1 sendNOP_not_st $end
$var wire 1 x1 sendnopout $end
$var wire 1 y1 stinstthing $end
$var wire 1 z1 oneops $end
$var wire 1 {1 RegS [2] $end
$var wire 1 |1 RegS [1] $end
$var wire 1 }1 RegS [0] $end
$var wire 1 ~1 RegT [2] $end
$var wire 1 !2 RegT [1] $end
$var wire 1 "2 RegT [0] $end
$var wire 1 P& WRMEM $end
$var wire 1 J' WRWB $end
$var wire 1 #2 compEx $end
$var wire 1 $2 compMem $end
$var wire 1 %2 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T) mem_stall $end
$var wire 1 n( fetch_stall $end
$var wire 1 Q" BSrc_in [1] $end
$var wire 1 R" BSrc_in [0] $end
$var wire 1 S" BSrc_out [1] $end
$var wire 1 T" BSrc_out [0] $end
$var wire 1 U" InvB_in $end
$var wire 1 V" InvB_out $end
$var wire 1 W" InvA_in $end
$var wire 1 X" InvA_out $end
$var wire 1 ]$ ALUCtrl_in [2] $end
$var wire 1 ^$ ALUCtrl_in [1] $end
$var wire 1 _$ ALUCtrl_in [0] $end
$var wire 1 `$ ALUCtrl_out [2] $end
$var wire 1 a$ ALUCtrl_out [1] $end
$var wire 1 b$ ALUCtrl_out [0] $end
$var wire 1 e$ BranchCtrl_in [1] $end
$var wire 1 f$ BranchCtrl_in [0] $end
$var wire 1 g$ BranchCtrl_out [1] $end
$var wire 1 h$ BranchCtrl_out [0] $end
$var wire 1 i$ branch_in $end
$var wire 1 j$ branch_out $end
$var wire 1 k$ SLBI_in $end
$var wire 1 l$ SLBI_out $end
$var wire 1 m$ SetCtrl3_in [2] $end
$var wire 1 n$ SetCtrl3_in [1] $end
$var wire 1 o$ SetCtrl3_in [0] $end
$var wire 1 p$ SetCtrl3_out [2] $end
$var wire 1 q$ SetCtrl3_out [1] $end
$var wire 1 r$ SetCtrl3_out [0] $end
$var wire 1 O" BTR_in $end
$var wire 1 P" BTR_out $end
$var wire 1 Y" ReadData1_in [15] $end
$var wire 1 Z" ReadData1_in [14] $end
$var wire 1 [" ReadData1_in [13] $end
$var wire 1 \" ReadData1_in [12] $end
$var wire 1 ]" ReadData1_in [11] $end
$var wire 1 ^" ReadData1_in [10] $end
$var wire 1 _" ReadData1_in [9] $end
$var wire 1 `" ReadData1_in [8] $end
$var wire 1 a" ReadData1_in [7] $end
$var wire 1 b" ReadData1_in [6] $end
$var wire 1 c" ReadData1_in [5] $end
$var wire 1 d" ReadData1_in [4] $end
$var wire 1 e" ReadData1_in [3] $end
$var wire 1 f" ReadData1_in [2] $end
$var wire 1 g" ReadData1_in [1] $end
$var wire 1 h" ReadData1_in [0] $end
$var wire 1 i" ReadData1_out [15] $end
$var wire 1 j" ReadData1_out [14] $end
$var wire 1 k" ReadData1_out [13] $end
$var wire 1 l" ReadData1_out [12] $end
$var wire 1 m" ReadData1_out [11] $end
$var wire 1 n" ReadData1_out [10] $end
$var wire 1 o" ReadData1_out [9] $end
$var wire 1 p" ReadData1_out [8] $end
$var wire 1 q" ReadData1_out [7] $end
$var wire 1 r" ReadData1_out [6] $end
$var wire 1 s" ReadData1_out [5] $end
$var wire 1 t" ReadData1_out [4] $end
$var wire 1 u" ReadData1_out [3] $end
$var wire 1 v" ReadData1_out [2] $end
$var wire 1 w" ReadData1_out [1] $end
$var wire 1 x" ReadData1_out [0] $end
$var wire 1 y" ReadData2_in [15] $end
$var wire 1 z" ReadData2_in [14] $end
$var wire 1 {" ReadData2_in [13] $end
$var wire 1 |" ReadData2_in [12] $end
$var wire 1 }" ReadData2_in [11] $end
$var wire 1 ~" ReadData2_in [10] $end
$var wire 1 !# ReadData2_in [9] $end
$var wire 1 "# ReadData2_in [8] $end
$var wire 1 ## ReadData2_in [7] $end
$var wire 1 $# ReadData2_in [6] $end
$var wire 1 %# ReadData2_in [5] $end
$var wire 1 &# ReadData2_in [4] $end
$var wire 1 '# ReadData2_in [3] $end
$var wire 1 (# ReadData2_in [2] $end
$var wire 1 )# ReadData2_in [1] $end
$var wire 1 *# ReadData2_in [0] $end
$var wire 1 +# ReadData2_out [15] $end
$var wire 1 ,# ReadData2_out [14] $end
$var wire 1 -# ReadData2_out [13] $end
$var wire 1 .# ReadData2_out [12] $end
$var wire 1 /# ReadData2_out [11] $end
$var wire 1 0# ReadData2_out [10] $end
$var wire 1 1# ReadData2_out [9] $end
$var wire 1 2# ReadData2_out [8] $end
$var wire 1 3# ReadData2_out [7] $end
$var wire 1 4# ReadData2_out [6] $end
$var wire 1 5# ReadData2_out [5] $end
$var wire 1 6# ReadData2_out [4] $end
$var wire 1 7# ReadData2_out [3] $end
$var wire 1 8# ReadData2_out [2] $end
$var wire 1 9# ReadData2_out [1] $end
$var wire 1 :# ReadData2_out [0] $end
$var wire 1 ;# fourExtend_in [15] $end
$var wire 1 <# fourExtend_in [14] $end
$var wire 1 =# fourExtend_in [13] $end
$var wire 1 ># fourExtend_in [12] $end
$var wire 1 ?# fourExtend_in [11] $end
$var wire 1 @# fourExtend_in [10] $end
$var wire 1 A# fourExtend_in [9] $end
$var wire 1 B# fourExtend_in [8] $end
$var wire 1 C# fourExtend_in [7] $end
$var wire 1 D# fourExtend_in [6] $end
$var wire 1 E# fourExtend_in [5] $end
$var wire 1 F# fourExtend_in [4] $end
$var wire 1 G# fourExtend_in [3] $end
$var wire 1 H# fourExtend_in [2] $end
$var wire 1 I# fourExtend_in [1] $end
$var wire 1 J# fourExtend_in [0] $end
$var wire 1 K# fourExtend_out [15] $end
$var wire 1 L# fourExtend_out [14] $end
$var wire 1 M# fourExtend_out [13] $end
$var wire 1 N# fourExtend_out [12] $end
$var wire 1 O# fourExtend_out [11] $end
$var wire 1 P# fourExtend_out [10] $end
$var wire 1 Q# fourExtend_out [9] $end
$var wire 1 R# fourExtend_out [8] $end
$var wire 1 S# fourExtend_out [7] $end
$var wire 1 T# fourExtend_out [6] $end
$var wire 1 U# fourExtend_out [5] $end
$var wire 1 V# fourExtend_out [4] $end
$var wire 1 W# fourExtend_out [3] $end
$var wire 1 X# fourExtend_out [2] $end
$var wire 1 Y# fourExtend_out [1] $end
$var wire 1 Z# fourExtend_out [0] $end
$var wire 1 [# sevenExtend_in [15] $end
$var wire 1 \# sevenExtend_in [14] $end
$var wire 1 ]# sevenExtend_in [13] $end
$var wire 1 ^# sevenExtend_in [12] $end
$var wire 1 _# sevenExtend_in [11] $end
$var wire 1 `# sevenExtend_in [10] $end
$var wire 1 a# sevenExtend_in [9] $end
$var wire 1 b# sevenExtend_in [8] $end
$var wire 1 c# sevenExtend_in [7] $end
$var wire 1 d# sevenExtend_in [6] $end
$var wire 1 e# sevenExtend_in [5] $end
$var wire 1 f# sevenExtend_in [4] $end
$var wire 1 g# sevenExtend_in [3] $end
$var wire 1 h# sevenExtend_in [2] $end
$var wire 1 i# sevenExtend_in [1] $end
$var wire 1 j# sevenExtend_in [0] $end
$var wire 1 k# sevenExtend_out [15] $end
$var wire 1 l# sevenExtend_out [14] $end
$var wire 1 m# sevenExtend_out [13] $end
$var wire 1 n# sevenExtend_out [12] $end
$var wire 1 o# sevenExtend_out [11] $end
$var wire 1 p# sevenExtend_out [10] $end
$var wire 1 q# sevenExtend_out [9] $end
$var wire 1 r# sevenExtend_out [8] $end
$var wire 1 s# sevenExtend_out [7] $end
$var wire 1 t# sevenExtend_out [6] $end
$var wire 1 u# sevenExtend_out [5] $end
$var wire 1 v# sevenExtend_out [4] $end
$var wire 1 w# sevenExtend_out [3] $end
$var wire 1 x# sevenExtend_out [2] $end
$var wire 1 y# sevenExtend_out [1] $end
$var wire 1 z# sevenExtend_out [0] $end
$var wire 1 =$ shifted_in [15] $end
$var wire 1 >$ shifted_in [14] $end
$var wire 1 ?$ shifted_in [13] $end
$var wire 1 @$ shifted_in [12] $end
$var wire 1 A$ shifted_in [11] $end
$var wire 1 B$ shifted_in [10] $end
$var wire 1 C$ shifted_in [9] $end
$var wire 1 D$ shifted_in [8] $end
$var wire 1 E$ shifted_in [7] $end
$var wire 1 F$ shifted_in [6] $end
$var wire 1 G$ shifted_in [5] $end
$var wire 1 H$ shifted_in [4] $end
$var wire 1 I$ shifted_in [3] $end
$var wire 1 J$ shifted_in [2] $end
$var wire 1 K$ shifted_in [1] $end
$var wire 1 L$ shifted_in [0] $end
$var wire 1 M$ shifted_out [15] $end
$var wire 1 N$ shifted_out [14] $end
$var wire 1 O$ shifted_out [13] $end
$var wire 1 P$ shifted_out [12] $end
$var wire 1 Q$ shifted_out [11] $end
$var wire 1 R$ shifted_out [10] $end
$var wire 1 S$ shifted_out [9] $end
$var wire 1 T$ shifted_out [8] $end
$var wire 1 U$ shifted_out [7] $end
$var wire 1 V$ shifted_out [6] $end
$var wire 1 W$ shifted_out [5] $end
$var wire 1 X$ shifted_out [4] $end
$var wire 1 Y$ shifted_out [3] $end
$var wire 1 Z$ shifted_out [2] $end
$var wire 1 [$ shifted_out [1] $end
$var wire 1 \$ shifted_out [0] $end
$var wire 1 c$ MemWrt_in $end
$var wire 1 d$ MemWrt_out $end
$var wire 1 s$ ALUJMP_in $end
$var wire 1 t$ ALUJMP_out $end
$var wire 1 u$ PC_or_add_in $end
$var wire 1 v$ PC_or_add_out $end
$var wire 1 &2 halt_in $end
$var wire 1 |$ halt_out $end
$var wire 1 {# word_align_jump_in [15] $end
$var wire 1 |# word_align_jump_in [14] $end
$var wire 1 }# word_align_jump_in [13] $end
$var wire 1 ~# word_align_jump_in [12] $end
$var wire 1 !$ word_align_jump_in [11] $end
$var wire 1 "$ word_align_jump_in [10] $end
$var wire 1 #$ word_align_jump_in [9] $end
$var wire 1 $$ word_align_jump_in [8] $end
$var wire 1 %$ word_align_jump_in [7] $end
$var wire 1 &$ word_align_jump_in [6] $end
$var wire 1 '$ word_align_jump_in [5] $end
$var wire 1 ($ word_align_jump_in [4] $end
$var wire 1 )$ word_align_jump_in [3] $end
$var wire 1 *$ word_align_jump_in [2] $end
$var wire 1 +$ word_align_jump_in [1] $end
$var wire 1 ,$ word_align_jump_in [0] $end
$var wire 1 -$ word_align_jump_out [15] $end
$var wire 1 .$ word_align_jump_out [14] $end
$var wire 1 /$ word_align_jump_out [13] $end
$var wire 1 0$ word_align_jump_out [12] $end
$var wire 1 1$ word_align_jump_out [11] $end
$var wire 1 2$ word_align_jump_out [10] $end
$var wire 1 3$ word_align_jump_out [9] $end
$var wire 1 4$ word_align_jump_out [8] $end
$var wire 1 5$ word_align_jump_out [7] $end
$var wire 1 6$ word_align_jump_out [6] $end
$var wire 1 7$ word_align_jump_out [5] $end
$var wire 1 8$ word_align_jump_out [4] $end
$var wire 1 9$ word_align_jump_out [3] $end
$var wire 1 :$ word_align_jump_out [2] $end
$var wire 1 ;$ word_align_jump_out [1] $end
$var wire 1 <$ word_align_jump_out [0] $end
$var wire 1 }$ RegWrt_in $end
$var wire 1 ~$ RegWrt_out $end
$var wire 1 C) SendNOP_In $end
$var wire 1 >) SendNOP_Out $end
$var wire 1 b' MemRd_in $end
$var wire 1 c' MemRd_out $end
$var wire 1 w$ RegSrc_in [1] $end
$var wire 1 x$ RegSrc_in [0] $end
$var wire 1 y$ RegSrc_out [1] $end
$var wire 1 z$ RegSrc_out [0] $end
$var wire 1 /" pc2_in [15] $end
$var wire 1 0" pc2_in [14] $end
$var wire 1 1" pc2_in [13] $end
$var wire 1 2" pc2_in [12] $end
$var wire 1 3" pc2_in [11] $end
$var wire 1 4" pc2_in [10] $end
$var wire 1 5" pc2_in [9] $end
$var wire 1 6" pc2_in [8] $end
$var wire 1 7" pc2_in [7] $end
$var wire 1 8" pc2_in [6] $end
$var wire 1 9" pc2_in [5] $end
$var wire 1 :" pc2_in [4] $end
$var wire 1 ;" pc2_in [3] $end
$var wire 1 <" pc2_in [2] $end
$var wire 1 =" pc2_in [1] $end
$var wire 1 >" pc2_in [0] $end
$var wire 1 ?" pc2_out [15] $end
$var wire 1 @" pc2_out [14] $end
$var wire 1 A" pc2_out [13] $end
$var wire 1 B" pc2_out [12] $end
$var wire 1 C" pc2_out [11] $end
$var wire 1 D" pc2_out [10] $end
$var wire 1 E" pc2_out [9] $end
$var wire 1 F" pc2_out [8] $end
$var wire 1 G" pc2_out [7] $end
$var wire 1 H" pc2_out [6] $end
$var wire 1 I" pc2_out [5] $end
$var wire 1 J" pc2_out [4] $end
$var wire 1 K" pc2_out [3] $end
$var wire 1 L" pc2_out [2] $end
$var wire 1 M" pc2_out [1] $end
$var wire 1 N" pc2_out [0] $end
$var wire 1 !% write_reg_in [2] $end
$var wire 1 "% write_reg_in [1] $end
$var wire 1 #% write_reg_in [0] $end
$var wire 1 $% write_reg_out [2] $end
$var wire 1 %% write_reg_out [1] $end
$var wire 1 &% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 V" q $end
$var wire 1 '2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module InvA $end
$var wire 1 X" q $end
$var wire 1 )2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module branch $end
$var wire 1 j$ q $end
$var wire 1 +2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SLBI $end
$var wire 1 l$ q $end
$var wire 1 -2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BTR $end
$var wire 1 P" q $end
$var wire 1 /2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 d$ q $end
$var wire 1 12 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 t$ q $end
$var wire 1 32 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 v$ q $end
$var wire 1 52 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module halt $end
$var wire 1 |$ q $end
$var wire 1 72 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 ~$ q $end
$var wire 1 92 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 >) q $end
$var wire 1 ;2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module memrd $end
$var wire 1 c' q $end
$var wire 1 =2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 S" q $end
$var wire 1 ?2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 T" q $end
$var wire 1 A2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 `$ q $end
$var wire 1 C2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 a$ q $end
$var wire 1 E2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 b$ q $end
$var wire 1 G2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 g$ q $end
$var wire 1 I2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 h$ q $end
$var wire 1 K2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 p$ q $end
$var wire 1 M2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 q$ q $end
$var wire 1 O2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 r$ q $end
$var wire 1 Q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 i" q $end
$var wire 1 S2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 j" q $end
$var wire 1 U2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 k" q $end
$var wire 1 W2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 l" q $end
$var wire 1 Y2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 m" q $end
$var wire 1 [2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 n" q $end
$var wire 1 ]2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 o" q $end
$var wire 1 _2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 p" q $end
$var wire 1 a2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 q" q $end
$var wire 1 c2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 r" q $end
$var wire 1 e2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 s" q $end
$var wire 1 g2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 t" q $end
$var wire 1 i2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 u" q $end
$var wire 1 k2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 v" q $end
$var wire 1 m2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 w" q $end
$var wire 1 o2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 x" q $end
$var wire 1 q2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 +# q $end
$var wire 1 s2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 ,# q $end
$var wire 1 u2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 -# q $end
$var wire 1 w2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 .# q $end
$var wire 1 y2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 /# q $end
$var wire 1 {2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 0# q $end
$var wire 1 }2 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 1# q $end
$var wire 1 !3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 2# q $end
$var wire 1 #3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 3# q $end
$var wire 1 %3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 4# q $end
$var wire 1 '3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 5# q $end
$var wire 1 )3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 6# q $end
$var wire 1 +3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 7# q $end
$var wire 1 -3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 8# q $end
$var wire 1 /3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 9# q $end
$var wire 1 13 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 :# q $end
$var wire 1 33 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 K# q $end
$var wire 1 53 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 L# q $end
$var wire 1 73 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 M# q $end
$var wire 1 93 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 N# q $end
$var wire 1 ;3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 O# q $end
$var wire 1 =3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 P# q $end
$var wire 1 ?3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 Q# q $end
$var wire 1 A3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 R# q $end
$var wire 1 C3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 S# q $end
$var wire 1 E3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 T# q $end
$var wire 1 G3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 U# q $end
$var wire 1 I3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 V# q $end
$var wire 1 K3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 W# q $end
$var wire 1 M3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 X# q $end
$var wire 1 O3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 Y# q $end
$var wire 1 Q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 Z# q $end
$var wire 1 S3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 k# q $end
$var wire 1 U3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 l# q $end
$var wire 1 W3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 m# q $end
$var wire 1 Y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 n# q $end
$var wire 1 [3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 o# q $end
$var wire 1 ]3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 p# q $end
$var wire 1 _3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 q# q $end
$var wire 1 a3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 r# q $end
$var wire 1 c3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 s# q $end
$var wire 1 e3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 t# q $end
$var wire 1 g3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 u# q $end
$var wire 1 i3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 v# q $end
$var wire 1 k3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 w# q $end
$var wire 1 m3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 x# q $end
$var wire 1 o3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 y# q $end
$var wire 1 q3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 z# q $end
$var wire 1 s3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 M$ q $end
$var wire 1 u3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 N$ q $end
$var wire 1 w3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 O$ q $end
$var wire 1 y3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 P$ q $end
$var wire 1 {3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 Q$ q $end
$var wire 1 }3 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 R$ q $end
$var wire 1 !4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 S$ q $end
$var wire 1 #4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 T$ q $end
$var wire 1 %4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 U$ q $end
$var wire 1 '4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 V$ q $end
$var wire 1 )4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 W$ q $end
$var wire 1 +4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 X$ q $end
$var wire 1 -4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 Y$ q $end
$var wire 1 /4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 Z$ q $end
$var wire 1 14 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 [$ q $end
$var wire 1 34 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 \$ q $end
$var wire 1 54 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 -$ q $end
$var wire 1 74 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 .$ q $end
$var wire 1 94 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 /$ q $end
$var wire 1 ;4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 0$ q $end
$var wire 1 =4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 1$ q $end
$var wire 1 ?4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 2$ q $end
$var wire 1 A4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 3$ q $end
$var wire 1 C4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 4$ q $end
$var wire 1 E4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 5$ q $end
$var wire 1 G4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 6$ q $end
$var wire 1 I4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 7$ q $end
$var wire 1 K4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 8$ q $end
$var wire 1 M4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 9$ q $end
$var wire 1 O4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 :$ q $end
$var wire 1 Q4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 ;$ q $end
$var wire 1 S4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 <$ q $end
$var wire 1 U4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 y$ q $end
$var wire 1 W4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 z$ q $end
$var wire 1 Y4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 ?" q $end
$var wire 1 [4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 @" q $end
$var wire 1 ]4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 A" q $end
$var wire 1 _4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 B" q $end
$var wire 1 a4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 C" q $end
$var wire 1 c4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 D" q $end
$var wire 1 e4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 E" q $end
$var wire 1 g4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 F" q $end
$var wire 1 i4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 G" q $end
$var wire 1 k4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 H" q $end
$var wire 1 m4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 I" q $end
$var wire 1 o4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 J" q $end
$var wire 1 q4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 K" q $end
$var wire 1 s4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 L" q $end
$var wire 1 u4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 M" q $end
$var wire 1 w4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 N" q $end
$var wire 1 y4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 $% q $end
$var wire 1 {4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 %% q $end
$var wire 1 }4 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 &% q $end
$var wire 1 !5 d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 V" InvB $end
$var wire 1 X" InvA $end
$var wire 1 `$ ALUCtrl [2] $end
$var wire 1 a$ ALUCtrl [1] $end
$var wire 1 b$ ALUCtrl [0] $end
$var wire 1 i" ReadData1 [15] $end
$var wire 1 j" ReadData1 [14] $end
$var wire 1 k" ReadData1 [13] $end
$var wire 1 l" ReadData1 [12] $end
$var wire 1 m" ReadData1 [11] $end
$var wire 1 n" ReadData1 [10] $end
$var wire 1 o" ReadData1 [9] $end
$var wire 1 p" ReadData1 [8] $end
$var wire 1 q" ReadData1 [7] $end
$var wire 1 r" ReadData1 [6] $end
$var wire 1 s" ReadData1 [5] $end
$var wire 1 t" ReadData1 [4] $end
$var wire 1 u" ReadData1 [3] $end
$var wire 1 v" ReadData1 [2] $end
$var wire 1 w" ReadData1 [1] $end
$var wire 1 x" ReadData1 [0] $end
$var wire 1 +# ReadData2 [15] $end
$var wire 1 ,# ReadData2 [14] $end
$var wire 1 -# ReadData2 [13] $end
$var wire 1 .# ReadData2 [12] $end
$var wire 1 /# ReadData2 [11] $end
$var wire 1 0# ReadData2 [10] $end
$var wire 1 1# ReadData2 [9] $end
$var wire 1 2# ReadData2 [8] $end
$var wire 1 3# ReadData2 [7] $end
$var wire 1 4# ReadData2 [6] $end
$var wire 1 5# ReadData2 [5] $end
$var wire 1 6# ReadData2 [4] $end
$var wire 1 7# ReadData2 [3] $end
$var wire 1 8# ReadData2 [2] $end
$var wire 1 9# ReadData2 [1] $end
$var wire 1 :# ReadData2 [0] $end
$var wire 1 K# fourExtend [15] $end
$var wire 1 L# fourExtend [14] $end
$var wire 1 M# fourExtend [13] $end
$var wire 1 N# fourExtend [12] $end
$var wire 1 O# fourExtend [11] $end
$var wire 1 P# fourExtend [10] $end
$var wire 1 Q# fourExtend [9] $end
$var wire 1 R# fourExtend [8] $end
$var wire 1 S# fourExtend [7] $end
$var wire 1 T# fourExtend [6] $end
$var wire 1 U# fourExtend [5] $end
$var wire 1 V# fourExtend [4] $end
$var wire 1 W# fourExtend [3] $end
$var wire 1 X# fourExtend [2] $end
$var wire 1 Y# fourExtend [1] $end
$var wire 1 Z# fourExtend [0] $end
$var wire 1 k# sevenExtend [15] $end
$var wire 1 l# sevenExtend [14] $end
$var wire 1 m# sevenExtend [13] $end
$var wire 1 n# sevenExtend [12] $end
$var wire 1 o# sevenExtend [11] $end
$var wire 1 p# sevenExtend [10] $end
$var wire 1 q# sevenExtend [9] $end
$var wire 1 r# sevenExtend [8] $end
$var wire 1 s# sevenExtend [7] $end
$var wire 1 t# sevenExtend [6] $end
$var wire 1 u# sevenExtend [5] $end
$var wire 1 v# sevenExtend [4] $end
$var wire 1 w# sevenExtend [3] $end
$var wire 1 x# sevenExtend [2] $end
$var wire 1 y# sevenExtend [1] $end
$var wire 1 z# sevenExtend [0] $end
$var wire 1 M$ shifted [15] $end
$var wire 1 N$ shifted [14] $end
$var wire 1 O$ shifted [13] $end
$var wire 1 P$ shifted [12] $end
$var wire 1 Q$ shifted [11] $end
$var wire 1 R$ shifted [10] $end
$var wire 1 S$ shifted [9] $end
$var wire 1 T$ shifted [8] $end
$var wire 1 U$ shifted [7] $end
$var wire 1 V$ shifted [6] $end
$var wire 1 W$ shifted [5] $end
$var wire 1 X$ shifted [4] $end
$var wire 1 Y$ shifted [3] $end
$var wire 1 Z$ shifted [2] $end
$var wire 1 [$ shifted [1] $end
$var wire 1 \$ shifted [0] $end
$var wire 1 g$ BranchCtrl [1] $end
$var wire 1 h$ BranchCtrl [0] $end
$var wire 1 j$ branch $end
$var wire 1 l$ SLBI $end
$var wire 1 p$ SetCtrl3 [2] $end
$var wire 1 q$ SetCtrl3 [1] $end
$var wire 1 r$ SetCtrl3 [0] $end
$var wire 1 P" BTR $end
$var wire 1 )% ALU [15] $end
$var wire 1 *% ALU [14] $end
$var wire 1 +% ALU [13] $end
$var wire 1 ,% ALU [12] $end
$var wire 1 -% ALU [11] $end
$var wire 1 .% ALU [10] $end
$var wire 1 /% ALU [9] $end
$var wire 1 0% ALU [8] $end
$var wire 1 1% ALU [7] $end
$var wire 1 2% ALU [6] $end
$var wire 1 3% ALU [5] $end
$var wire 1 4% ALU [4] $end
$var wire 1 5% ALU [3] $end
$var wire 1 6% ALU [2] $end
$var wire 1 7% ALU [1] $end
$var wire 1 8% ALU [0] $end
$var wire 1 I% BInput [15] $end
$var wire 1 J% BInput [14] $end
$var wire 1 K% BInput [13] $end
$var wire 1 L% BInput [12] $end
$var wire 1 M% BInput [11] $end
$var wire 1 N% BInput [10] $end
$var wire 1 O% BInput [9] $end
$var wire 1 P% BInput [8] $end
$var wire 1 Q% BInput [7] $end
$var wire 1 R% BInput [6] $end
$var wire 1 S% BInput [5] $end
$var wire 1 T% BInput [4] $end
$var wire 1 U% BInput [3] $end
$var wire 1 V% BInput [2] $end
$var wire 1 W% BInput [1] $end
$var wire 1 X% BInput [0] $end
$var wire 1 '% branchtake $end
$var wire 1 #5 possibleslbi [15] $end
$var wire 1 $5 possibleslbi [14] $end
$var wire 1 %5 possibleslbi [13] $end
$var wire 1 &5 possibleslbi [12] $end
$var wire 1 '5 possibleslbi [11] $end
$var wire 1 (5 possibleslbi [10] $end
$var wire 1 )5 possibleslbi [9] $end
$var wire 1 *5 possibleslbi [8] $end
$var wire 1 +5 possibleslbi [7] $end
$var wire 1 ,5 possibleslbi [6] $end
$var wire 1 -5 possibleslbi [5] $end
$var wire 1 .5 possibleslbi [4] $end
$var wire 1 /5 possibleslbi [3] $end
$var wire 1 05 possibleslbi [2] $end
$var wire 1 15 possibleslbi [1] $end
$var wire 1 25 possibleslbi [0] $end
$var wire 1 35 shiftedA [15] $end
$var wire 1 45 shiftedA [14] $end
$var wire 1 55 shiftedA [13] $end
$var wire 1 65 shiftedA [12] $end
$var wire 1 75 shiftedA [11] $end
$var wire 1 85 shiftedA [10] $end
$var wire 1 95 shiftedA [9] $end
$var wire 1 :5 shiftedA [8] $end
$var wire 1 ;5 shiftedA [7] $end
$var wire 1 <5 shiftedA [6] $end
$var wire 1 =5 shiftedA [5] $end
$var wire 1 >5 shiftedA [4] $end
$var wire 1 ?5 shiftedA [3] $end
$var wire 1 @5 shiftedA [2] $end
$var wire 1 A5 shiftedA [1] $end
$var wire 1 B5 shiftedA [0] $end
$var wire 1 C5 slbiOper $end
$var wire 1 D5 aluout [15] $end
$var wire 1 E5 aluout [14] $end
$var wire 1 F5 aluout [13] $end
$var wire 1 G5 aluout [12] $end
$var wire 1 H5 aluout [11] $end
$var wire 1 I5 aluout [10] $end
$var wire 1 J5 aluout [9] $end
$var wire 1 K5 aluout [8] $end
$var wire 1 L5 aluout [7] $end
$var wire 1 M5 aluout [6] $end
$var wire 1 N5 aluout [5] $end
$var wire 1 O5 aluout [4] $end
$var wire 1 P5 aluout [3] $end
$var wire 1 Q5 aluout [2] $end
$var wire 1 R5 aluout [1] $end
$var wire 1 S5 aluout [0] $end
$var wire 1 T5 conditional $end
$var wire 1 U5 CF $end
$var wire 1 V5 Zero $end
$var wire 1 W5 Overflow $end
$var wire 1 X5 Brchcnd $end
$var wire 1 Y5 Oper [1] $end
$var wire 1 Z5 Oper [0] $end
$var wire 1 [5 altb $end
$var wire 1 \5 coout [15] $end
$var wire 1 ]5 coout [14] $end
$var wire 1 ^5 coout [13] $end
$var wire 1 _5 coout [12] $end
$var wire 1 `5 coout [11] $end
$var wire 1 a5 coout [10] $end
$var wire 1 b5 coout [9] $end
$var wire 1 c5 coout [8] $end
$var wire 1 d5 coout [7] $end
$var wire 1 e5 coout [6] $end
$var wire 1 f5 coout [5] $end
$var wire 1 g5 coout [4] $end
$var wire 1 h5 coout [3] $end
$var wire 1 i5 coout [2] $end
$var wire 1 j5 coout [1] $end
$var wire 1 k5 coout [0] $end
$var wire 1 l5 sltoper [1] $end
$var wire 1 m5 sltoper [0] $end
$var wire 1 n5 ltout [15] $end
$var wire 1 o5 ltout [14] $end
$var wire 1 p5 ltout [13] $end
$var wire 1 q5 ltout [12] $end
$var wire 1 r5 ltout [11] $end
$var wire 1 s5 ltout [10] $end
$var wire 1 t5 ltout [9] $end
$var wire 1 u5 ltout [8] $end
$var wire 1 v5 ltout [7] $end
$var wire 1 w5 ltout [6] $end
$var wire 1 x5 ltout [5] $end
$var wire 1 y5 ltout [4] $end
$var wire 1 z5 ltout [3] $end
$var wire 1 {5 ltout [2] $end
$var wire 1 |5 ltout [1] $end
$var wire 1 }5 ltout [0] $end
$var wire 1 ~5 seqoper [1] $end
$var wire 1 !6 seqoper [0] $end
$var wire 1 "6 aeqb $end
$var wire 1 #6 seqout [15] $end
$var wire 1 $6 seqout [14] $end
$var wire 1 %6 seqout [13] $end
$var wire 1 &6 seqout [12] $end
$var wire 1 '6 seqout [11] $end
$var wire 1 (6 seqout [10] $end
$var wire 1 )6 seqout [9] $end
$var wire 1 *6 seqout [8] $end
$var wire 1 +6 seqout [7] $end
$var wire 1 ,6 seqout [6] $end
$var wire 1 -6 seqout [5] $end
$var wire 1 .6 seqout [4] $end
$var wire 1 /6 seqout [3] $end
$var wire 1 06 seqout [2] $end
$var wire 1 16 seqout [1] $end
$var wire 1 26 seqout [0] $end
$var wire 1 36 alteb $end
$var wire 1 46 sleoper [1] $end
$var wire 1 56 sleoper [0] $end
$var wire 1 66 sleout [15] $end
$var wire 1 76 sleout [14] $end
$var wire 1 86 sleout [13] $end
$var wire 1 96 sleout [12] $end
$var wire 1 :6 sleout [11] $end
$var wire 1 ;6 sleout [10] $end
$var wire 1 <6 sleout [9] $end
$var wire 1 =6 sleout [8] $end
$var wire 1 >6 sleout [7] $end
$var wire 1 ?6 sleout [6] $end
$var wire 1 @6 sleout [5] $end
$var wire 1 A6 sleout [4] $end
$var wire 1 B6 sleout [3] $end
$var wire 1 C6 sleout [2] $end
$var wire 1 D6 sleout [1] $end
$var wire 1 E6 sleout [0] $end
$var wire 1 F6 SetCtrl [1] $end
$var wire 1 G6 SetCtrl [0] $end
$var wire 1 H6 carry $end
$var wire 1 I6 SLT $end
$var wire 1 J6 SEQ $end
$var wire 1 K6 SLE $end
$var wire 1 L6 greater $end
$var wire 1 M6 ReverseOut [15] $end
$var wire 1 N6 ReverseOut [14] $end
$var wire 1 O6 ReverseOut [13] $end
$var wire 1 P6 ReverseOut [12] $end
$var wire 1 Q6 ReverseOut [11] $end
$var wire 1 R6 ReverseOut [10] $end
$var wire 1 S6 ReverseOut [9] $end
$var wire 1 T6 ReverseOut [8] $end
$var wire 1 U6 ReverseOut [7] $end
$var wire 1 V6 ReverseOut [6] $end
$var wire 1 W6 ReverseOut [5] $end
$var wire 1 X6 ReverseOut [4] $end
$var wire 1 Y6 ReverseOut [3] $end
$var wire 1 Z6 ReverseOut [2] $end
$var wire 1 [6 ReverseOut [1] $end
$var wire 1 \6 ReverseOut [0] $end
$var wire 1 ]6 reverse [15] $end
$var wire 1 ^6 reverse [14] $end
$var wire 1 _6 reverse [13] $end
$var wire 1 `6 reverse [12] $end
$var wire 1 a6 reverse [11] $end
$var wire 1 b6 reverse [10] $end
$var wire 1 c6 reverse [9] $end
$var wire 1 d6 reverse [8] $end
$var wire 1 e6 reverse [7] $end
$var wire 1 f6 reverse [6] $end
$var wire 1 g6 reverse [5] $end
$var wire 1 h6 reverse [4] $end
$var wire 1 i6 reverse [3] $end
$var wire 1 j6 reverse [2] $end
$var wire 1 k6 reverse [1] $end
$var wire 1 l6 reverse [0] $end

$scope module shift $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 t6 Oper [1] $end
$var wire 1 u6 Oper [0] $end
$var wire 1 35 Out [15] $end
$var wire 1 45 Out [14] $end
$var wire 1 55 Out [13] $end
$var wire 1 65 Out [12] $end
$var wire 1 75 Out [11] $end
$var wire 1 85 Out [10] $end
$var wire 1 95 Out [9] $end
$var wire 1 :5 Out [8] $end
$var wire 1 ;5 Out [7] $end
$var wire 1 <5 Out [6] $end
$var wire 1 =5 Out [5] $end
$var wire 1 >5 Out [4] $end
$var wire 1 ?5 Out [3] $end
$var wire 1 @5 Out [2] $end
$var wire 1 A5 Out [1] $end
$var wire 1 B5 Out [0] $end
$var wire 1 v6 shift_left_r [15] $end
$var wire 1 w6 shift_left_r [14] $end
$var wire 1 x6 shift_left_r [13] $end
$var wire 1 y6 shift_left_r [12] $end
$var wire 1 z6 shift_left_r [11] $end
$var wire 1 {6 shift_left_r [10] $end
$var wire 1 |6 shift_left_r [9] $end
$var wire 1 }6 shift_left_r [8] $end
$var wire 1 ~6 shift_left_r [7] $end
$var wire 1 !7 shift_left_r [6] $end
$var wire 1 "7 shift_left_r [5] $end
$var wire 1 #7 shift_left_r [4] $end
$var wire 1 $7 shift_left_r [3] $end
$var wire 1 %7 shift_left_r [2] $end
$var wire 1 &7 shift_left_r [1] $end
$var wire 1 '7 shift_left_r [0] $end
$var wire 1 (7 rotate_left_r [15] $end
$var wire 1 )7 rotate_left_r [14] $end
$var wire 1 *7 rotate_left_r [13] $end
$var wire 1 +7 rotate_left_r [12] $end
$var wire 1 ,7 rotate_left_r [11] $end
$var wire 1 -7 rotate_left_r [10] $end
$var wire 1 .7 rotate_left_r [9] $end
$var wire 1 /7 rotate_left_r [8] $end
$var wire 1 07 rotate_left_r [7] $end
$var wire 1 17 rotate_left_r [6] $end
$var wire 1 27 rotate_left_r [5] $end
$var wire 1 37 rotate_left_r [4] $end
$var wire 1 47 rotate_left_r [3] $end
$var wire 1 57 rotate_left_r [2] $end
$var wire 1 67 rotate_left_r [1] $end
$var wire 1 77 rotate_left_r [0] $end
$var wire 1 87 shift_right_l_r [15] $end
$var wire 1 97 shift_right_l_r [14] $end
$var wire 1 :7 shift_right_l_r [13] $end
$var wire 1 ;7 shift_right_l_r [12] $end
$var wire 1 <7 shift_right_l_r [11] $end
$var wire 1 =7 shift_right_l_r [10] $end
$var wire 1 >7 shift_right_l_r [9] $end
$var wire 1 ?7 shift_right_l_r [8] $end
$var wire 1 @7 shift_right_l_r [7] $end
$var wire 1 A7 shift_right_l_r [6] $end
$var wire 1 B7 shift_right_l_r [5] $end
$var wire 1 C7 shift_right_l_r [4] $end
$var wire 1 D7 shift_right_l_r [3] $end
$var wire 1 E7 shift_right_l_r [2] $end
$var wire 1 F7 shift_right_l_r [1] $end
$var wire 1 G7 shift_right_l_r [0] $end
$var wire 1 H7 rotate_right_r [15] $end
$var wire 1 I7 rotate_right_r [14] $end
$var wire 1 J7 rotate_right_r [13] $end
$var wire 1 K7 rotate_right_r [12] $end
$var wire 1 L7 rotate_right_r [11] $end
$var wire 1 M7 rotate_right_r [10] $end
$var wire 1 N7 rotate_right_r [9] $end
$var wire 1 O7 rotate_right_r [8] $end
$var wire 1 P7 rotate_right_r [7] $end
$var wire 1 Q7 rotate_right_r [6] $end
$var wire 1 R7 rotate_right_r [5] $end
$var wire 1 S7 rotate_right_r [4] $end
$var wire 1 T7 rotate_right_r [3] $end
$var wire 1 U7 rotate_right_r [2] $end
$var wire 1 V7 rotate_right_r [1] $end
$var wire 1 W7 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 v6 result [15] $end
$var wire 1 w6 result [14] $end
$var wire 1 x6 result [13] $end
$var wire 1 y6 result [12] $end
$var wire 1 z6 result [11] $end
$var wire 1 {6 result [10] $end
$var wire 1 |6 result [9] $end
$var wire 1 }6 result [8] $end
$var wire 1 ~6 result [7] $end
$var wire 1 !7 result [6] $end
$var wire 1 "7 result [5] $end
$var wire 1 #7 result [4] $end
$var wire 1 $7 result [3] $end
$var wire 1 %7 result [2] $end
$var wire 1 &7 result [1] $end
$var wire 1 '7 result [0] $end
$var wire 1 Z7 temp1 [15] $end
$var wire 1 [7 temp1 [14] $end
$var wire 1 \7 temp1 [13] $end
$var wire 1 ]7 temp1 [12] $end
$var wire 1 ^7 temp1 [11] $end
$var wire 1 _7 temp1 [10] $end
$var wire 1 `7 temp1 [9] $end
$var wire 1 a7 temp1 [8] $end
$var wire 1 b7 temp1 [7] $end
$var wire 1 c7 temp1 [6] $end
$var wire 1 d7 temp1 [5] $end
$var wire 1 e7 temp1 [4] $end
$var wire 1 f7 temp1 [3] $end
$var wire 1 g7 temp1 [2] $end
$var wire 1 h7 temp1 [1] $end
$var wire 1 i7 temp1 [0] $end
$var wire 1 j7 temp2 [15] $end
$var wire 1 k7 temp2 [14] $end
$var wire 1 l7 temp2 [13] $end
$var wire 1 m7 temp2 [12] $end
$var wire 1 n7 temp2 [11] $end
$var wire 1 o7 temp2 [10] $end
$var wire 1 p7 temp2 [9] $end
$var wire 1 q7 temp2 [8] $end
$var wire 1 r7 temp2 [7] $end
$var wire 1 s7 temp2 [6] $end
$var wire 1 t7 temp2 [5] $end
$var wire 1 u7 temp2 [4] $end
$var wire 1 v7 temp2 [3] $end
$var wire 1 w7 temp2 [2] $end
$var wire 1 x7 temp2 [1] $end
$var wire 1 y7 temp2 [0] $end
$var wire 1 z7 temp3 [15] $end
$var wire 1 {7 temp3 [14] $end
$var wire 1 |7 temp3 [13] $end
$var wire 1 }7 temp3 [12] $end
$var wire 1 ~7 temp3 [11] $end
$var wire 1 !8 temp3 [10] $end
$var wire 1 "8 temp3 [9] $end
$var wire 1 #8 temp3 [8] $end
$var wire 1 $8 temp3 [7] $end
$var wire 1 %8 temp3 [6] $end
$var wire 1 &8 temp3 [5] $end
$var wire 1 '8 temp3 [4] $end
$var wire 1 (8 temp3 [3] $end
$var wire 1 )8 temp3 [2] $end
$var wire 1 *8 temp3 [1] $end
$var wire 1 +8 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 (7 result [15] $end
$var wire 1 )7 result [14] $end
$var wire 1 *7 result [13] $end
$var wire 1 +7 result [12] $end
$var wire 1 ,7 result [11] $end
$var wire 1 -7 result [10] $end
$var wire 1 .7 result [9] $end
$var wire 1 /7 result [8] $end
$var wire 1 07 result [7] $end
$var wire 1 17 result [6] $end
$var wire 1 27 result [5] $end
$var wire 1 37 result [4] $end
$var wire 1 47 result [3] $end
$var wire 1 57 result [2] $end
$var wire 1 67 result [1] $end
$var wire 1 77 result [0] $end
$var wire 1 .8 temp1 [15] $end
$var wire 1 /8 temp1 [14] $end
$var wire 1 08 temp1 [13] $end
$var wire 1 18 temp1 [12] $end
$var wire 1 28 temp1 [11] $end
$var wire 1 38 temp1 [10] $end
$var wire 1 48 temp1 [9] $end
$var wire 1 58 temp1 [8] $end
$var wire 1 68 temp1 [7] $end
$var wire 1 78 temp1 [6] $end
$var wire 1 88 temp1 [5] $end
$var wire 1 98 temp1 [4] $end
$var wire 1 :8 temp1 [3] $end
$var wire 1 ;8 temp1 [2] $end
$var wire 1 <8 temp1 [1] $end
$var wire 1 =8 temp1 [0] $end
$var wire 1 >8 temp2 [15] $end
$var wire 1 ?8 temp2 [14] $end
$var wire 1 @8 temp2 [13] $end
$var wire 1 A8 temp2 [12] $end
$var wire 1 B8 temp2 [11] $end
$var wire 1 C8 temp2 [10] $end
$var wire 1 D8 temp2 [9] $end
$var wire 1 E8 temp2 [8] $end
$var wire 1 F8 temp2 [7] $end
$var wire 1 G8 temp2 [6] $end
$var wire 1 H8 temp2 [5] $end
$var wire 1 I8 temp2 [4] $end
$var wire 1 J8 temp2 [3] $end
$var wire 1 K8 temp2 [2] $end
$var wire 1 L8 temp2 [1] $end
$var wire 1 M8 temp2 [0] $end
$var wire 1 N8 temp3 [15] $end
$var wire 1 O8 temp3 [14] $end
$var wire 1 P8 temp3 [13] $end
$var wire 1 Q8 temp3 [12] $end
$var wire 1 R8 temp3 [11] $end
$var wire 1 S8 temp3 [10] $end
$var wire 1 T8 temp3 [9] $end
$var wire 1 U8 temp3 [8] $end
$var wire 1 V8 temp3 [7] $end
$var wire 1 W8 temp3 [6] $end
$var wire 1 X8 temp3 [5] $end
$var wire 1 Y8 temp3 [4] $end
$var wire 1 Z8 temp3 [3] $end
$var wire 1 [8 temp3 [2] $end
$var wire 1 \8 temp3 [1] $end
$var wire 1 ]8 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 87 result [15] $end
$var wire 1 97 result [14] $end
$var wire 1 :7 result [13] $end
$var wire 1 ;7 result [12] $end
$var wire 1 <7 result [11] $end
$var wire 1 =7 result [10] $end
$var wire 1 >7 result [9] $end
$var wire 1 ?7 result [8] $end
$var wire 1 @7 result [7] $end
$var wire 1 A7 result [6] $end
$var wire 1 B7 result [5] $end
$var wire 1 C7 result [4] $end
$var wire 1 D7 result [3] $end
$var wire 1 E7 result [2] $end
$var wire 1 F7 result [1] $end
$var wire 1 G7 result [0] $end
$var wire 1 `8 temp1 [15] $end
$var wire 1 a8 temp1 [14] $end
$var wire 1 b8 temp1 [13] $end
$var wire 1 c8 temp1 [12] $end
$var wire 1 d8 temp1 [11] $end
$var wire 1 e8 temp1 [10] $end
$var wire 1 f8 temp1 [9] $end
$var wire 1 g8 temp1 [8] $end
$var wire 1 h8 temp1 [7] $end
$var wire 1 i8 temp1 [6] $end
$var wire 1 j8 temp1 [5] $end
$var wire 1 k8 temp1 [4] $end
$var wire 1 l8 temp1 [3] $end
$var wire 1 m8 temp1 [2] $end
$var wire 1 n8 temp1 [1] $end
$var wire 1 o8 temp1 [0] $end
$var wire 1 p8 temp2 [15] $end
$var wire 1 q8 temp2 [14] $end
$var wire 1 r8 temp2 [13] $end
$var wire 1 s8 temp2 [12] $end
$var wire 1 t8 temp2 [11] $end
$var wire 1 u8 temp2 [10] $end
$var wire 1 v8 temp2 [9] $end
$var wire 1 w8 temp2 [8] $end
$var wire 1 x8 temp2 [7] $end
$var wire 1 y8 temp2 [6] $end
$var wire 1 z8 temp2 [5] $end
$var wire 1 {8 temp2 [4] $end
$var wire 1 |8 temp2 [3] $end
$var wire 1 }8 temp2 [2] $end
$var wire 1 ~8 temp2 [1] $end
$var wire 1 !9 temp2 [0] $end
$var wire 1 "9 temp3 [15] $end
$var wire 1 #9 temp3 [14] $end
$var wire 1 $9 temp3 [13] $end
$var wire 1 %9 temp3 [12] $end
$var wire 1 &9 temp3 [11] $end
$var wire 1 '9 temp3 [10] $end
$var wire 1 (9 temp3 [9] $end
$var wire 1 )9 temp3 [8] $end
$var wire 1 *9 temp3 [7] $end
$var wire 1 +9 temp3 [6] $end
$var wire 1 ,9 temp3 [5] $end
$var wire 1 -9 temp3 [4] $end
$var wire 1 .9 temp3 [3] $end
$var wire 1 /9 temp3 [2] $end
$var wire 1 09 temp3 [1] $end
$var wire 1 19 temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 i" In [15] $end
$var wire 1 j" In [14] $end
$var wire 1 k" In [13] $end
$var wire 1 l" In [12] $end
$var wire 1 m" In [11] $end
$var wire 1 n" In [10] $end
$var wire 1 o" In [9] $end
$var wire 1 p" In [8] $end
$var wire 1 q" In [7] $end
$var wire 1 r" In [6] $end
$var wire 1 s" In [5] $end
$var wire 1 t" In [4] $end
$var wire 1 u" In [3] $end
$var wire 1 v" In [2] $end
$var wire 1 w" In [1] $end
$var wire 1 x" In [0] $end
$var wire 1 p6 ShAmt [3] $end
$var wire 1 q6 ShAmt [2] $end
$var wire 1 r6 ShAmt [1] $end
$var wire 1 s6 ShAmt [0] $end
$var wire 1 H7 result [15] $end
$var wire 1 I7 result [14] $end
$var wire 1 J7 result [13] $end
$var wire 1 K7 result [12] $end
$var wire 1 L7 result [11] $end
$var wire 1 M7 result [10] $end
$var wire 1 N7 result [9] $end
$var wire 1 O7 result [8] $end
$var wire 1 P7 result [7] $end
$var wire 1 Q7 result [6] $end
$var wire 1 R7 result [5] $end
$var wire 1 S7 result [4] $end
$var wire 1 T7 result [3] $end
$var wire 1 U7 result [2] $end
$var wire 1 V7 result [1] $end
$var wire 1 W7 result [0] $end
$var wire 1 49 temp1 [15] $end
$var wire 1 59 temp1 [14] $end
$var wire 1 69 temp1 [13] $end
$var wire 1 79 temp1 [12] $end
$var wire 1 89 temp1 [11] $end
$var wire 1 99 temp1 [10] $end
$var wire 1 :9 temp1 [9] $end
$var wire 1 ;9 temp1 [8] $end
$var wire 1 <9 temp1 [7] $end
$var wire 1 =9 temp1 [6] $end
$var wire 1 >9 temp1 [5] $end
$var wire 1 ?9 temp1 [4] $end
$var wire 1 @9 temp1 [3] $end
$var wire 1 A9 temp1 [2] $end
$var wire 1 B9 temp1 [1] $end
$var wire 1 C9 temp1 [0] $end
$var wire 1 D9 temp2 [15] $end
$var wire 1 E9 temp2 [14] $end
$var wire 1 F9 temp2 [13] $end
$var wire 1 G9 temp2 [12] $end
$var wire 1 H9 temp2 [11] $end
$var wire 1 I9 temp2 [10] $end
$var wire 1 J9 temp2 [9] $end
$var wire 1 K9 temp2 [8] $end
$var wire 1 L9 temp2 [7] $end
$var wire 1 M9 temp2 [6] $end
$var wire 1 N9 temp2 [5] $end
$var wire 1 O9 temp2 [4] $end
$var wire 1 P9 temp2 [3] $end
$var wire 1 Q9 temp2 [2] $end
$var wire 1 R9 temp2 [1] $end
$var wire 1 S9 temp2 [0] $end
$var wire 1 T9 temp3 [15] $end
$var wire 1 U9 temp3 [14] $end
$var wire 1 V9 temp3 [13] $end
$var wire 1 W9 temp3 [12] $end
$var wire 1 X9 temp3 [11] $end
$var wire 1 Y9 temp3 [10] $end
$var wire 1 Z9 temp3 [9] $end
$var wire 1 [9 temp3 [8] $end
$var wire 1 \9 temp3 [7] $end
$var wire 1 ]9 temp3 [6] $end
$var wire 1 ^9 temp3 [5] $end
$var wire 1 _9 temp3 [4] $end
$var wire 1 `9 temp3 [3] $end
$var wire 1 a9 temp3 [2] $end
$var wire 1 b9 temp3 [1] $end
$var wire 1 c9 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var wire 1 #5 InA [15] $end
$var wire 1 $5 InA [14] $end
$var wire 1 %5 InA [13] $end
$var wire 1 &5 InA [12] $end
$var wire 1 '5 InA [11] $end
$var wire 1 (5 InA [10] $end
$var wire 1 )5 InA [9] $end
$var wire 1 *5 InA [8] $end
$var wire 1 +5 InA [7] $end
$var wire 1 ,5 InA [6] $end
$var wire 1 -5 InA [5] $end
$var wire 1 .5 InA [4] $end
$var wire 1 /5 InA [3] $end
$var wire 1 05 InA [2] $end
$var wire 1 15 InA [1] $end
$var wire 1 25 InA [0] $end
$var wire 1 I% InB [15] $end
$var wire 1 J% InB [14] $end
$var wire 1 K% InB [13] $end
$var wire 1 L% InB [12] $end
$var wire 1 M% InB [11] $end
$var wire 1 N% InB [10] $end
$var wire 1 O% InB [9] $end
$var wire 1 P% InB [8] $end
$var wire 1 Q% InB [7] $end
$var wire 1 R% InB [6] $end
$var wire 1 S% InB [5] $end
$var wire 1 T% InB [4] $end
$var wire 1 U% InB [3] $end
$var wire 1 V% InB [2] $end
$var wire 1 W% InB [1] $end
$var wire 1 X% InB [0] $end
$var wire 1 f9 Cin $end
$var wire 1 `$ Oper [2] $end
$var wire 1 a$ Oper [1] $end
$var wire 1 b$ Oper [0] $end
$var wire 1 X" invA $end
$var wire 1 V" invB $end
$var wire 1 g9 sign $end
$var wire 1 D5 Out [15] $end
$var wire 1 E5 Out [14] $end
$var wire 1 F5 Out [13] $end
$var wire 1 G5 Out [12] $end
$var wire 1 H5 Out [11] $end
$var wire 1 I5 Out [10] $end
$var wire 1 J5 Out [9] $end
$var wire 1 K5 Out [8] $end
$var wire 1 L5 Out [7] $end
$var wire 1 M5 Out [6] $end
$var wire 1 N5 Out [5] $end
$var wire 1 O5 Out [4] $end
$var wire 1 P5 Out [3] $end
$var wire 1 Q5 Out [2] $end
$var wire 1 R5 Out [1] $end
$var wire 1 S5 Out [0] $end
$var wire 1 T5 signOut $end
$var wire 1 W5 Ofl $end
$var wire 1 V5 Zero $end
$var wire 1 U5 carryFlag $end
$var wire 1 h9 InA_invA [15] $end
$var wire 1 i9 InA_invA [14] $end
$var wire 1 j9 InA_invA [13] $end
$var wire 1 k9 InA_invA [12] $end
$var wire 1 l9 InA_invA [11] $end
$var wire 1 m9 InA_invA [10] $end
$var wire 1 n9 InA_invA [9] $end
$var wire 1 o9 InA_invA [8] $end
$var wire 1 p9 InA_invA [7] $end
$var wire 1 q9 InA_invA [6] $end
$var wire 1 r9 InA_invA [5] $end
$var wire 1 s9 InA_invA [4] $end
$var wire 1 t9 InA_invA [3] $end
$var wire 1 u9 InA_invA [2] $end
$var wire 1 v9 InA_invA [1] $end
$var wire 1 w9 InA_invA [0] $end
$var wire 1 x9 InB_invB [15] $end
$var wire 1 y9 InB_invB [14] $end
$var wire 1 z9 InB_invB [13] $end
$var wire 1 {9 InB_invB [12] $end
$var wire 1 |9 InB_invB [11] $end
$var wire 1 }9 InB_invB [10] $end
$var wire 1 ~9 InB_invB [9] $end
$var wire 1 !: InB_invB [8] $end
$var wire 1 ": InB_invB [7] $end
$var wire 1 #: InB_invB [6] $end
$var wire 1 $: InB_invB [5] $end
$var wire 1 %: InB_invB [4] $end
$var wire 1 &: InB_invB [3] $end
$var wire 1 ': InB_invB [2] $end
$var wire 1 (: InB_invB [1] $end
$var wire 1 ): InB_invB [0] $end
$var wire 1 *: barrel [15] $end
$var wire 1 +: barrel [14] $end
$var wire 1 ,: barrel [13] $end
$var wire 1 -: barrel [12] $end
$var wire 1 .: barrel [11] $end
$var wire 1 /: barrel [10] $end
$var wire 1 0: barrel [9] $end
$var wire 1 1: barrel [8] $end
$var wire 1 2: barrel [7] $end
$var wire 1 3: barrel [6] $end
$var wire 1 4: barrel [5] $end
$var wire 1 5: barrel [4] $end
$var wire 1 6: barrel [3] $end
$var wire 1 7: barrel [2] $end
$var wire 1 8: barrel [1] $end
$var wire 1 9: barrel [0] $end
$var wire 1 :: logic_gates_r [15] $end
$var wire 1 ;: logic_gates_r [14] $end
$var wire 1 <: logic_gates_r [13] $end
$var wire 1 =: logic_gates_r [12] $end
$var wire 1 >: logic_gates_r [11] $end
$var wire 1 ?: logic_gates_r [10] $end
$var wire 1 @: logic_gates_r [9] $end
$var wire 1 A: logic_gates_r [8] $end
$var wire 1 B: logic_gates_r [7] $end
$var wire 1 C: logic_gates_r [6] $end
$var wire 1 D: logic_gates_r [5] $end
$var wire 1 E: logic_gates_r [4] $end
$var wire 1 F: logic_gates_r [3] $end
$var wire 1 G: logic_gates_r [2] $end
$var wire 1 H: logic_gates_r [1] $end
$var wire 1 I: logic_gates_r [0] $end
$var wire 1 J: addition [15] $end
$var wire 1 K: addition [14] $end
$var wire 1 L: addition [13] $end
$var wire 1 M: addition [12] $end
$var wire 1 N: addition [11] $end
$var wire 1 O: addition [10] $end
$var wire 1 P: addition [9] $end
$var wire 1 Q: addition [8] $end
$var wire 1 R: addition [7] $end
$var wire 1 S: addition [6] $end
$var wire 1 T: addition [5] $end
$var wire 1 U: addition [4] $end
$var wire 1 V: addition [3] $end
$var wire 1 W: addition [2] $end
$var wire 1 X: addition [1] $end
$var wire 1 Y: addition [0] $end
$var wire 1 Z: addition_logic [15] $end
$var wire 1 [: addition_logic [14] $end
$var wire 1 \: addition_logic [13] $end
$var wire 1 ]: addition_logic [12] $end
$var wire 1 ^: addition_logic [11] $end
$var wire 1 _: addition_logic [10] $end
$var wire 1 `: addition_logic [9] $end
$var wire 1 a: addition_logic [8] $end
$var wire 1 b: addition_logic [7] $end
$var wire 1 c: addition_logic [6] $end
$var wire 1 d: addition_logic [5] $end
$var wire 1 e: addition_logic [4] $end
$var wire 1 f: addition_logic [3] $end
$var wire 1 g: addition_logic [2] $end
$var wire 1 h: addition_logic [1] $end
$var wire 1 i: addition_logic [0] $end
$var wire 1 j: carry $end
$var wire 1 k: signed_over $end
$var wire 1 l: less $end

$scope module shift $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 a$ Oper [1] $end
$var wire 1 b$ Oper [0] $end
$var wire 1 *: Out [15] $end
$var wire 1 +: Out [14] $end
$var wire 1 ,: Out [13] $end
$var wire 1 -: Out [12] $end
$var wire 1 .: Out [11] $end
$var wire 1 /: Out [10] $end
$var wire 1 0: Out [9] $end
$var wire 1 1: Out [8] $end
$var wire 1 2: Out [7] $end
$var wire 1 3: Out [6] $end
$var wire 1 4: Out [5] $end
$var wire 1 5: Out [4] $end
$var wire 1 6: Out [3] $end
$var wire 1 7: Out [2] $end
$var wire 1 8: Out [1] $end
$var wire 1 9: Out [0] $end
$var wire 1 p: shift_left_r [15] $end
$var wire 1 q: shift_left_r [14] $end
$var wire 1 r: shift_left_r [13] $end
$var wire 1 s: shift_left_r [12] $end
$var wire 1 t: shift_left_r [11] $end
$var wire 1 u: shift_left_r [10] $end
$var wire 1 v: shift_left_r [9] $end
$var wire 1 w: shift_left_r [8] $end
$var wire 1 x: shift_left_r [7] $end
$var wire 1 y: shift_left_r [6] $end
$var wire 1 z: shift_left_r [5] $end
$var wire 1 {: shift_left_r [4] $end
$var wire 1 |: shift_left_r [3] $end
$var wire 1 }: shift_left_r [2] $end
$var wire 1 ~: shift_left_r [1] $end
$var wire 1 !; shift_left_r [0] $end
$var wire 1 "; rotate_left_r [15] $end
$var wire 1 #; rotate_left_r [14] $end
$var wire 1 $; rotate_left_r [13] $end
$var wire 1 %; rotate_left_r [12] $end
$var wire 1 &; rotate_left_r [11] $end
$var wire 1 '; rotate_left_r [10] $end
$var wire 1 (; rotate_left_r [9] $end
$var wire 1 ); rotate_left_r [8] $end
$var wire 1 *; rotate_left_r [7] $end
$var wire 1 +; rotate_left_r [6] $end
$var wire 1 ,; rotate_left_r [5] $end
$var wire 1 -; rotate_left_r [4] $end
$var wire 1 .; rotate_left_r [3] $end
$var wire 1 /; rotate_left_r [2] $end
$var wire 1 0; rotate_left_r [1] $end
$var wire 1 1; rotate_left_r [0] $end
$var wire 1 2; shift_right_l_r [15] $end
$var wire 1 3; shift_right_l_r [14] $end
$var wire 1 4; shift_right_l_r [13] $end
$var wire 1 5; shift_right_l_r [12] $end
$var wire 1 6; shift_right_l_r [11] $end
$var wire 1 7; shift_right_l_r [10] $end
$var wire 1 8; shift_right_l_r [9] $end
$var wire 1 9; shift_right_l_r [8] $end
$var wire 1 :; shift_right_l_r [7] $end
$var wire 1 ;; shift_right_l_r [6] $end
$var wire 1 <; shift_right_l_r [5] $end
$var wire 1 =; shift_right_l_r [4] $end
$var wire 1 >; shift_right_l_r [3] $end
$var wire 1 ?; shift_right_l_r [2] $end
$var wire 1 @; shift_right_l_r [1] $end
$var wire 1 A; shift_right_l_r [0] $end
$var wire 1 B; rotate_right_r [15] $end
$var wire 1 C; rotate_right_r [14] $end
$var wire 1 D; rotate_right_r [13] $end
$var wire 1 E; rotate_right_r [12] $end
$var wire 1 F; rotate_right_r [11] $end
$var wire 1 G; rotate_right_r [10] $end
$var wire 1 H; rotate_right_r [9] $end
$var wire 1 I; rotate_right_r [8] $end
$var wire 1 J; rotate_right_r [7] $end
$var wire 1 K; rotate_right_r [6] $end
$var wire 1 L; rotate_right_r [5] $end
$var wire 1 M; rotate_right_r [4] $end
$var wire 1 N; rotate_right_r [3] $end
$var wire 1 O; rotate_right_r [2] $end
$var wire 1 P; rotate_right_r [1] $end
$var wire 1 Q; rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 p: result [15] $end
$var wire 1 q: result [14] $end
$var wire 1 r: result [13] $end
$var wire 1 s: result [12] $end
$var wire 1 t: result [11] $end
$var wire 1 u: result [10] $end
$var wire 1 v: result [9] $end
$var wire 1 w: result [8] $end
$var wire 1 x: result [7] $end
$var wire 1 y: result [6] $end
$var wire 1 z: result [5] $end
$var wire 1 {: result [4] $end
$var wire 1 |: result [3] $end
$var wire 1 }: result [2] $end
$var wire 1 ~: result [1] $end
$var wire 1 !; result [0] $end
$var wire 1 T; temp1 [15] $end
$var wire 1 U; temp1 [14] $end
$var wire 1 V; temp1 [13] $end
$var wire 1 W; temp1 [12] $end
$var wire 1 X; temp1 [11] $end
$var wire 1 Y; temp1 [10] $end
$var wire 1 Z; temp1 [9] $end
$var wire 1 [; temp1 [8] $end
$var wire 1 \; temp1 [7] $end
$var wire 1 ]; temp1 [6] $end
$var wire 1 ^; temp1 [5] $end
$var wire 1 _; temp1 [4] $end
$var wire 1 `; temp1 [3] $end
$var wire 1 a; temp1 [2] $end
$var wire 1 b; temp1 [1] $end
$var wire 1 c; temp1 [0] $end
$var wire 1 d; temp2 [15] $end
$var wire 1 e; temp2 [14] $end
$var wire 1 f; temp2 [13] $end
$var wire 1 g; temp2 [12] $end
$var wire 1 h; temp2 [11] $end
$var wire 1 i; temp2 [10] $end
$var wire 1 j; temp2 [9] $end
$var wire 1 k; temp2 [8] $end
$var wire 1 l; temp2 [7] $end
$var wire 1 m; temp2 [6] $end
$var wire 1 n; temp2 [5] $end
$var wire 1 o; temp2 [4] $end
$var wire 1 p; temp2 [3] $end
$var wire 1 q; temp2 [2] $end
$var wire 1 r; temp2 [1] $end
$var wire 1 s; temp2 [0] $end
$var wire 1 t; temp3 [15] $end
$var wire 1 u; temp3 [14] $end
$var wire 1 v; temp3 [13] $end
$var wire 1 w; temp3 [12] $end
$var wire 1 x; temp3 [11] $end
$var wire 1 y; temp3 [10] $end
$var wire 1 z; temp3 [9] $end
$var wire 1 {; temp3 [8] $end
$var wire 1 |; temp3 [7] $end
$var wire 1 }; temp3 [6] $end
$var wire 1 ~; temp3 [5] $end
$var wire 1 !< temp3 [4] $end
$var wire 1 "< temp3 [3] $end
$var wire 1 #< temp3 [2] $end
$var wire 1 $< temp3 [1] $end
$var wire 1 %< temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 "; result [15] $end
$var wire 1 #; result [14] $end
$var wire 1 $; result [13] $end
$var wire 1 %; result [12] $end
$var wire 1 &; result [11] $end
$var wire 1 '; result [10] $end
$var wire 1 (; result [9] $end
$var wire 1 ); result [8] $end
$var wire 1 *; result [7] $end
$var wire 1 +; result [6] $end
$var wire 1 ,; result [5] $end
$var wire 1 -; result [4] $end
$var wire 1 .; result [3] $end
$var wire 1 /; result [2] $end
$var wire 1 0; result [1] $end
$var wire 1 1; result [0] $end
$var wire 1 (< temp1 [15] $end
$var wire 1 )< temp1 [14] $end
$var wire 1 *< temp1 [13] $end
$var wire 1 +< temp1 [12] $end
$var wire 1 ,< temp1 [11] $end
$var wire 1 -< temp1 [10] $end
$var wire 1 .< temp1 [9] $end
$var wire 1 /< temp1 [8] $end
$var wire 1 0< temp1 [7] $end
$var wire 1 1< temp1 [6] $end
$var wire 1 2< temp1 [5] $end
$var wire 1 3< temp1 [4] $end
$var wire 1 4< temp1 [3] $end
$var wire 1 5< temp1 [2] $end
$var wire 1 6< temp1 [1] $end
$var wire 1 7< temp1 [0] $end
$var wire 1 8< temp2 [15] $end
$var wire 1 9< temp2 [14] $end
$var wire 1 :< temp2 [13] $end
$var wire 1 ;< temp2 [12] $end
$var wire 1 << temp2 [11] $end
$var wire 1 =< temp2 [10] $end
$var wire 1 >< temp2 [9] $end
$var wire 1 ?< temp2 [8] $end
$var wire 1 @< temp2 [7] $end
$var wire 1 A< temp2 [6] $end
$var wire 1 B< temp2 [5] $end
$var wire 1 C< temp2 [4] $end
$var wire 1 D< temp2 [3] $end
$var wire 1 E< temp2 [2] $end
$var wire 1 F< temp2 [1] $end
$var wire 1 G< temp2 [0] $end
$var wire 1 H< temp3 [15] $end
$var wire 1 I< temp3 [14] $end
$var wire 1 J< temp3 [13] $end
$var wire 1 K< temp3 [12] $end
$var wire 1 L< temp3 [11] $end
$var wire 1 M< temp3 [10] $end
$var wire 1 N< temp3 [9] $end
$var wire 1 O< temp3 [8] $end
$var wire 1 P< temp3 [7] $end
$var wire 1 Q< temp3 [6] $end
$var wire 1 R< temp3 [5] $end
$var wire 1 S< temp3 [4] $end
$var wire 1 T< temp3 [3] $end
$var wire 1 U< temp3 [2] $end
$var wire 1 V< temp3 [1] $end
$var wire 1 W< temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 2; result [15] $end
$var wire 1 3; result [14] $end
$var wire 1 4; result [13] $end
$var wire 1 5; result [12] $end
$var wire 1 6; result [11] $end
$var wire 1 7; result [10] $end
$var wire 1 8; result [9] $end
$var wire 1 9; result [8] $end
$var wire 1 :; result [7] $end
$var wire 1 ;; result [6] $end
$var wire 1 <; result [5] $end
$var wire 1 =; result [4] $end
$var wire 1 >; result [3] $end
$var wire 1 ?; result [2] $end
$var wire 1 @; result [1] $end
$var wire 1 A; result [0] $end
$var wire 1 Z< temp1 [15] $end
$var wire 1 [< temp1 [14] $end
$var wire 1 \< temp1 [13] $end
$var wire 1 ]< temp1 [12] $end
$var wire 1 ^< temp1 [11] $end
$var wire 1 _< temp1 [10] $end
$var wire 1 `< temp1 [9] $end
$var wire 1 a< temp1 [8] $end
$var wire 1 b< temp1 [7] $end
$var wire 1 c< temp1 [6] $end
$var wire 1 d< temp1 [5] $end
$var wire 1 e< temp1 [4] $end
$var wire 1 f< temp1 [3] $end
$var wire 1 g< temp1 [2] $end
$var wire 1 h< temp1 [1] $end
$var wire 1 i< temp1 [0] $end
$var wire 1 j< temp2 [15] $end
$var wire 1 k< temp2 [14] $end
$var wire 1 l< temp2 [13] $end
$var wire 1 m< temp2 [12] $end
$var wire 1 n< temp2 [11] $end
$var wire 1 o< temp2 [10] $end
$var wire 1 p< temp2 [9] $end
$var wire 1 q< temp2 [8] $end
$var wire 1 r< temp2 [7] $end
$var wire 1 s< temp2 [6] $end
$var wire 1 t< temp2 [5] $end
$var wire 1 u< temp2 [4] $end
$var wire 1 v< temp2 [3] $end
$var wire 1 w< temp2 [2] $end
$var wire 1 x< temp2 [1] $end
$var wire 1 y< temp2 [0] $end
$var wire 1 z< temp3 [15] $end
$var wire 1 {< temp3 [14] $end
$var wire 1 |< temp3 [13] $end
$var wire 1 }< temp3 [12] $end
$var wire 1 ~< temp3 [11] $end
$var wire 1 != temp3 [10] $end
$var wire 1 "= temp3 [9] $end
$var wire 1 #= temp3 [8] $end
$var wire 1 $= temp3 [7] $end
$var wire 1 %= temp3 [6] $end
$var wire 1 &= temp3 [5] $end
$var wire 1 '= temp3 [4] $end
$var wire 1 (= temp3 [3] $end
$var wire 1 )= temp3 [2] $end
$var wire 1 *= temp3 [1] $end
$var wire 1 += temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 h9 In [15] $end
$var wire 1 i9 In [14] $end
$var wire 1 j9 In [13] $end
$var wire 1 k9 In [12] $end
$var wire 1 l9 In [11] $end
$var wire 1 m9 In [10] $end
$var wire 1 n9 In [9] $end
$var wire 1 o9 In [8] $end
$var wire 1 p9 In [7] $end
$var wire 1 q9 In [6] $end
$var wire 1 r9 In [5] $end
$var wire 1 s9 In [4] $end
$var wire 1 t9 In [3] $end
$var wire 1 u9 In [2] $end
$var wire 1 v9 In [1] $end
$var wire 1 w9 In [0] $end
$var wire 1 &: ShAmt [3] $end
$var wire 1 ': ShAmt [2] $end
$var wire 1 (: ShAmt [1] $end
$var wire 1 ): ShAmt [0] $end
$var wire 1 B; result [15] $end
$var wire 1 C; result [14] $end
$var wire 1 D; result [13] $end
$var wire 1 E; result [12] $end
$var wire 1 F; result [11] $end
$var wire 1 G; result [10] $end
$var wire 1 H; result [9] $end
$var wire 1 I; result [8] $end
$var wire 1 J; result [7] $end
$var wire 1 K; result [6] $end
$var wire 1 L; result [5] $end
$var wire 1 M; result [4] $end
$var wire 1 N; result [3] $end
$var wire 1 O; result [2] $end
$var wire 1 P; result [1] $end
$var wire 1 Q; result [0] $end
$var wire 1 .= temp1 [15] $end
$var wire 1 /= temp1 [14] $end
$var wire 1 0= temp1 [13] $end
$var wire 1 1= temp1 [12] $end
$var wire 1 2= temp1 [11] $end
$var wire 1 3= temp1 [10] $end
$var wire 1 4= temp1 [9] $end
$var wire 1 5= temp1 [8] $end
$var wire 1 6= temp1 [7] $end
$var wire 1 7= temp1 [6] $end
$var wire 1 8= temp1 [5] $end
$var wire 1 9= temp1 [4] $end
$var wire 1 := temp1 [3] $end
$var wire 1 ;= temp1 [2] $end
$var wire 1 <= temp1 [1] $end
$var wire 1 == temp1 [0] $end
$var wire 1 >= temp2 [15] $end
$var wire 1 ?= temp2 [14] $end
$var wire 1 @= temp2 [13] $end
$var wire 1 A= temp2 [12] $end
$var wire 1 B= temp2 [11] $end
$var wire 1 C= temp2 [10] $end
$var wire 1 D= temp2 [9] $end
$var wire 1 E= temp2 [8] $end
$var wire 1 F= temp2 [7] $end
$var wire 1 G= temp2 [6] $end
$var wire 1 H= temp2 [5] $end
$var wire 1 I= temp2 [4] $end
$var wire 1 J= temp2 [3] $end
$var wire 1 K= temp2 [2] $end
$var wire 1 L= temp2 [1] $end
$var wire 1 M= temp2 [0] $end
$var wire 1 N= temp3 [15] $end
$var wire 1 O= temp3 [14] $end
$var wire 1 P= temp3 [13] $end
$var wire 1 Q= temp3 [12] $end
$var wire 1 R= temp3 [11] $end
$var wire 1 S= temp3 [10] $end
$var wire 1 T= temp3 [9] $end
$var wire 1 U= temp3 [8] $end
$var wire 1 V= temp3 [7] $end
$var wire 1 W= temp3 [6] $end
$var wire 1 X= temp3 [5] $end
$var wire 1 Y= temp3 [4] $end
$var wire 1 Z= temp3 [3] $end
$var wire 1 [= temp3 [2] $end
$var wire 1 \= temp3 [1] $end
$var wire 1 ]= temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var wire 1 h9 A [15] $end
$var wire 1 i9 A [14] $end
$var wire 1 j9 A [13] $end
$var wire 1 k9 A [12] $end
$var wire 1 l9 A [11] $end
$var wire 1 m9 A [10] $end
$var wire 1 n9 A [9] $end
$var wire 1 o9 A [8] $end
$var wire 1 p9 A [7] $end
$var wire 1 q9 A [6] $end
$var wire 1 r9 A [5] $end
$var wire 1 s9 A [4] $end
$var wire 1 t9 A [3] $end
$var wire 1 u9 A [2] $end
$var wire 1 v9 A [1] $end
$var wire 1 w9 A [0] $end
$var wire 1 x9 B [15] $end
$var wire 1 y9 B [14] $end
$var wire 1 z9 B [13] $end
$var wire 1 {9 B [12] $end
$var wire 1 |9 B [11] $end
$var wire 1 }9 B [10] $end
$var wire 1 ~9 B [9] $end
$var wire 1 !: B [8] $end
$var wire 1 ": B [7] $end
$var wire 1 #: B [6] $end
$var wire 1 $: B [5] $end
$var wire 1 %: B [4] $end
$var wire 1 &: B [3] $end
$var wire 1 ': B [2] $end
$var wire 1 (: B [1] $end
$var wire 1 ): B [0] $end
$var wire 1 a$ Oper [1] $end
$var wire 1 b$ Oper [0] $end
$var wire 1 :: Result [15] $end
$var wire 1 ;: Result [14] $end
$var wire 1 <: Result [13] $end
$var wire 1 =: Result [12] $end
$var wire 1 >: Result [11] $end
$var wire 1 ?: Result [10] $end
$var wire 1 @: Result [9] $end
$var wire 1 A: Result [8] $end
$var wire 1 B: Result [7] $end
$var wire 1 C: Result [6] $end
$var wire 1 D: Result [5] $end
$var wire 1 E: Result [4] $end
$var wire 1 F: Result [3] $end
$var wire 1 G: Result [2] $end
$var wire 1 H: Result [1] $end
$var wire 1 I: Result [0] $end
$upscope $end

$scope module adding $end
$var wire 1 J: sum [15] $end
$var wire 1 K: sum [14] $end
$var wire 1 L: sum [13] $end
$var wire 1 M: sum [12] $end
$var wire 1 N: sum [11] $end
$var wire 1 O: sum [10] $end
$var wire 1 P: sum [9] $end
$var wire 1 Q: sum [8] $end
$var wire 1 R: sum [7] $end
$var wire 1 S: sum [6] $end
$var wire 1 T: sum [5] $end
$var wire 1 U: sum [4] $end
$var wire 1 V: sum [3] $end
$var wire 1 W: sum [2] $end
$var wire 1 X: sum [1] $end
$var wire 1 Y: sum [0] $end
$var wire 1 j: c_out $end
$var wire 1 h9 a [15] $end
$var wire 1 i9 a [14] $end
$var wire 1 j9 a [13] $end
$var wire 1 k9 a [12] $end
$var wire 1 l9 a [11] $end
$var wire 1 m9 a [10] $end
$var wire 1 n9 a [9] $end
$var wire 1 o9 a [8] $end
$var wire 1 p9 a [7] $end
$var wire 1 q9 a [6] $end
$var wire 1 r9 a [5] $end
$var wire 1 s9 a [4] $end
$var wire 1 t9 a [3] $end
$var wire 1 u9 a [2] $end
$var wire 1 v9 a [1] $end
$var wire 1 w9 a [0] $end
$var wire 1 x9 b [15] $end
$var wire 1 y9 b [14] $end
$var wire 1 z9 b [13] $end
$var wire 1 {9 b [12] $end
$var wire 1 |9 b [11] $end
$var wire 1 }9 b [10] $end
$var wire 1 ~9 b [9] $end
$var wire 1 !: b [8] $end
$var wire 1 ": b [7] $end
$var wire 1 #: b [6] $end
$var wire 1 $: b [5] $end
$var wire 1 %: b [4] $end
$var wire 1 &: b [3] $end
$var wire 1 ': b [2] $end
$var wire 1 (: b [1] $end
$var wire 1 ): b [0] $end
$var wire 1 f9 c_in $end
$var wire 1 a= gen [15] $end
$var wire 1 b= gen [14] $end
$var wire 1 c= gen [13] $end
$var wire 1 d= gen [12] $end
$var wire 1 e= gen [11] $end
$var wire 1 f= gen [10] $end
$var wire 1 g= gen [9] $end
$var wire 1 h= gen [8] $end
$var wire 1 i= gen [7] $end
$var wire 1 j= gen [6] $end
$var wire 1 k= gen [5] $end
$var wire 1 l= gen [4] $end
$var wire 1 m= gen [3] $end
$var wire 1 n= gen [2] $end
$var wire 1 o= gen [1] $end
$var wire 1 p= gen [0] $end
$var wire 1 q= four_gen [3] $end
$var wire 1 r= four_gen [2] $end
$var wire 1 s= four_gen [1] $end
$var wire 1 t= four_gen [0] $end
$var wire 1 u= prop [15] $end
$var wire 1 v= prop [14] $end
$var wire 1 w= prop [13] $end
$var wire 1 x= prop [12] $end
$var wire 1 y= prop [11] $end
$var wire 1 z= prop [10] $end
$var wire 1 {= prop [9] $end
$var wire 1 |= prop [8] $end
$var wire 1 }= prop [7] $end
$var wire 1 ~= prop [6] $end
$var wire 1 !> prop [5] $end
$var wire 1 "> prop [4] $end
$var wire 1 #> prop [3] $end
$var wire 1 $> prop [2] $end
$var wire 1 %> prop [1] $end
$var wire 1 &> prop [0] $end
$var wire 1 '> four_prop [3] $end
$var wire 1 (> four_prop [2] $end
$var wire 1 )> four_prop [1] $end
$var wire 1 *> four_prop [0] $end
$var wire 1 +> carry [2] $end
$var wire 1 ,> carry [1] $end
$var wire 1 -> carry [0] $end
$var wire 1 .> fa_sum [15] $end
$var wire 1 /> fa_sum [14] $end
$var wire 1 0> fa_sum [13] $end
$var wire 1 1> fa_sum [12] $end
$var wire 1 2> fa_sum [11] $end
$var wire 1 3> fa_sum [10] $end
$var wire 1 4> fa_sum [9] $end
$var wire 1 5> fa_sum [8] $end
$var wire 1 6> fa_sum [7] $end
$var wire 1 7> fa_sum [6] $end
$var wire 1 8> fa_sum [5] $end
$var wire 1 9> fa_sum [4] $end
$var wire 1 :> fa_sum [3] $end
$var wire 1 ;> fa_sum [2] $end
$var wire 1 <> fa_sum [1] $end
$var wire 1 => fa_sum [0] $end

$scope module cla1 $end
$var wire 1 :> sum [3] $end
$var wire 1 ;> sum [2] $end
$var wire 1 <> sum [1] $end
$var wire 1 => sum [0] $end
$var wire 1 ?> c_out $end
$var wire 1 t9 a [3] $end
$var wire 1 u9 a [2] $end
$var wire 1 v9 a [1] $end
$var wire 1 w9 a [0] $end
$var wire 1 &: b [3] $end
$var wire 1 ': b [2] $end
$var wire 1 (: b [1] $end
$var wire 1 ): b [0] $end
$var wire 1 f9 c_in $end
$var wire 1 @> gen [3] $end
$var wire 1 A> gen [2] $end
$var wire 1 B> gen [1] $end
$var wire 1 C> gen [0] $end
$var wire 1 D> prop [3] $end
$var wire 1 E> prop [2] $end
$var wire 1 F> prop [1] $end
$var wire 1 G> prop [0] $end
$var wire 1 H> carry [2] $end
$var wire 1 I> carry [1] $end
$var wire 1 J> carry [0] $end
$var wire 1 K> fa_sum [3] $end
$var wire 1 L> fa_sum [2] $end
$var wire 1 M> fa_sum [1] $end
$var wire 1 N> fa_sum [0] $end

$scope module fa1 $end
$var wire 1 N> s $end
$var wire 1 O> c_out $end
$var wire 1 w9 a $end
$var wire 1 ): b $end
$var wire 1 f9 c_in $end
$var wire 1 P> xor_AB $end
$var wire 1 Q> xor_ABCin $end
$var wire 1 R> NAND_AB $end
$var wire 1 S> not_NAND_AB $end
$var wire 1 T> NAND_Cin_xor_AB $end
$var wire 1 U> not_NAND_Cin_xor_AB $end
$var wire 1 V> NOR_2NAND $end
$var wire 1 W> not_NOR_2NAND $end
$var wire 1 X> Cin $end

$scope module xor1 $end
$var wire 1 w9 in1 $end
$var wire 1 ): in2 $end
$var wire 1 P> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P> in1 $end
$var wire 1 f9 in2 $end
$var wire 1 Q> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 w9 in1 $end
$var wire 1 ): in2 $end
$var wire 1 R> out $end
$upscope $end

$scope module not1 $end
$var wire 1 R> in1 $end
$var wire 1 S> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X> in1 $end
$var wire 1 P> in2 $end
$var wire 1 T> out $end
$upscope $end

$scope module not2 $end
$var wire 1 T> in1 $end
$var wire 1 U> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S> in1 $end
$var wire 1 U> in2 $end
$var wire 1 V> out $end
$upscope $end

$scope module not3 $end
$var wire 1 V> in1 $end
$var wire 1 W> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 M> s $end
$var wire 1 Y> c_out $end
$var wire 1 v9 a $end
$var wire 1 (: b $end
$var wire 1 J> c_in $end
$var wire 1 Z> xor_AB $end
$var wire 1 [> xor_ABCin $end
$var wire 1 \> NAND_AB $end
$var wire 1 ]> not_NAND_AB $end
$var wire 1 ^> NAND_Cin_xor_AB $end
$var wire 1 _> not_NAND_Cin_xor_AB $end
$var wire 1 `> NOR_2NAND $end
$var wire 1 a> not_NOR_2NAND $end
$var wire 1 b> Cin $end

$scope module xor1 $end
$var wire 1 v9 in1 $end
$var wire 1 (: in2 $end
$var wire 1 Z> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 Z> in1 $end
$var wire 1 J> in2 $end
$var wire 1 [> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 v9 in1 $end
$var wire 1 (: in2 $end
$var wire 1 \> out $end
$upscope $end

$scope module not1 $end
$var wire 1 \> in1 $end
$var wire 1 ]> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 b> in1 $end
$var wire 1 Z> in2 $end
$var wire 1 ^> out $end
$upscope $end

$scope module not2 $end
$var wire 1 ^> in1 $end
$var wire 1 _> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ]> in1 $end
$var wire 1 _> in2 $end
$var wire 1 `> out $end
$upscope $end

$scope module not3 $end
$var wire 1 `> in1 $end
$var wire 1 a> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 L> s $end
$var wire 1 c> c_out $end
$var wire 1 u9 a $end
$var wire 1 ': b $end
$var wire 1 I> c_in $end
$var wire 1 d> xor_AB $end
$var wire 1 e> xor_ABCin $end
$var wire 1 f> NAND_AB $end
$var wire 1 g> not_NAND_AB $end
$var wire 1 h> NAND_Cin_xor_AB $end
$var wire 1 i> not_NAND_Cin_xor_AB $end
$var wire 1 j> NOR_2NAND $end
$var wire 1 k> not_NOR_2NAND $end
$var wire 1 l> Cin $end

$scope module xor1 $end
$var wire 1 u9 in1 $end
$var wire 1 ': in2 $end
$var wire 1 d> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d> in1 $end
$var wire 1 I> in2 $end
$var wire 1 e> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 u9 in1 $end
$var wire 1 ': in2 $end
$var wire 1 f> out $end
$upscope $end

$scope module not1 $end
$var wire 1 f> in1 $end
$var wire 1 g> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l> in1 $end
$var wire 1 d> in2 $end
$var wire 1 h> out $end
$upscope $end

$scope module not2 $end
$var wire 1 h> in1 $end
$var wire 1 i> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g> in1 $end
$var wire 1 i> in2 $end
$var wire 1 j> out $end
$upscope $end

$scope module not3 $end
$var wire 1 j> in1 $end
$var wire 1 k> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 K> s $end
$var wire 1 m> c_out $end
$var wire 1 t9 a $end
$var wire 1 &: b $end
$var wire 1 H> c_in $end
$var wire 1 n> xor_AB $end
$var wire 1 o> xor_ABCin $end
$var wire 1 p> NAND_AB $end
$var wire 1 q> not_NAND_AB $end
$var wire 1 r> NAND_Cin_xor_AB $end
$var wire 1 s> not_NAND_Cin_xor_AB $end
$var wire 1 t> NOR_2NAND $end
$var wire 1 u> not_NOR_2NAND $end
$var wire 1 v> Cin $end

$scope module xor1 $end
$var wire 1 t9 in1 $end
$var wire 1 &: in2 $end
$var wire 1 n> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n> in1 $end
$var wire 1 H> in2 $end
$var wire 1 o> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 t9 in1 $end
$var wire 1 &: in2 $end
$var wire 1 p> out $end
$upscope $end

$scope module not1 $end
$var wire 1 p> in1 $end
$var wire 1 q> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v> in1 $end
$var wire 1 n> in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module not2 $end
$var wire 1 r> in1 $end
$var wire 1 s> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q> in1 $end
$var wire 1 s> in2 $end
$var wire 1 t> out $end
$upscope $end

$scope module not3 $end
$var wire 1 t> in1 $end
$var wire 1 u> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var wire 1 6> sum [3] $end
$var wire 1 7> sum [2] $end
$var wire 1 8> sum [1] $end
$var wire 1 9> sum [0] $end
$var wire 1 x> c_out $end
$var wire 1 p9 a [3] $end
$var wire 1 q9 a [2] $end
$var wire 1 r9 a [1] $end
$var wire 1 s9 a [0] $end
$var wire 1 ": b [3] $end
$var wire 1 #: b [2] $end
$var wire 1 $: b [1] $end
$var wire 1 %: b [0] $end
$var wire 1 -> c_in $end
$var wire 1 y> gen [3] $end
$var wire 1 z> gen [2] $end
$var wire 1 {> gen [1] $end
$var wire 1 |> gen [0] $end
$var wire 1 }> prop [3] $end
$var wire 1 ~> prop [2] $end
$var wire 1 !? prop [1] $end
$var wire 1 "? prop [0] $end
$var wire 1 #? carry [2] $end
$var wire 1 $? carry [1] $end
$var wire 1 %? carry [0] $end
$var wire 1 &? fa_sum [3] $end
$var wire 1 '? fa_sum [2] $end
$var wire 1 (? fa_sum [1] $end
$var wire 1 )? fa_sum [0] $end

$scope module fa1 $end
$var wire 1 )? s $end
$var wire 1 *? c_out $end
$var wire 1 s9 a $end
$var wire 1 %: b $end
$var wire 1 -> c_in $end
$var wire 1 +? xor_AB $end
$var wire 1 ,? xor_ABCin $end
$var wire 1 -? NAND_AB $end
$var wire 1 .? not_NAND_AB $end
$var wire 1 /? NAND_Cin_xor_AB $end
$var wire 1 0? not_NAND_Cin_xor_AB $end
$var wire 1 1? NOR_2NAND $end
$var wire 1 2? not_NOR_2NAND $end
$var wire 1 3? Cin $end

$scope module xor1 $end
$var wire 1 s9 in1 $end
$var wire 1 %: in2 $end
$var wire 1 +? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +? in1 $end
$var wire 1 -> in2 $end
$var wire 1 ,? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 s9 in1 $end
$var wire 1 %: in2 $end
$var wire 1 -? out $end
$upscope $end

$scope module not1 $end
$var wire 1 -? in1 $end
$var wire 1 .? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3? in1 $end
$var wire 1 +? in2 $end
$var wire 1 /? out $end
$upscope $end

$scope module not2 $end
$var wire 1 /? in1 $end
$var wire 1 0? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .? in1 $end
$var wire 1 0? in2 $end
$var wire 1 1? out $end
$upscope $end

$scope module not3 $end
$var wire 1 1? in1 $end
$var wire 1 2? out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 (? s $end
$var wire 1 4? c_out $end
$var wire 1 r9 a $end
$var wire 1 $: b $end
$var wire 1 %? c_in $end
$var wire 1 5? xor_AB $end
$var wire 1 6? xor_ABCin $end
$var wire 1 7? NAND_AB $end
$var wire 1 8? not_NAND_AB $end
$var wire 1 9? NAND_Cin_xor_AB $end
$var wire 1 :? not_NAND_Cin_xor_AB $end
$var wire 1 ;? NOR_2NAND $end
$var wire 1 <? not_NOR_2NAND $end
$var wire 1 =? Cin $end

$scope module xor1 $end
$var wire 1 r9 in1 $end
$var wire 1 $: in2 $end
$var wire 1 5? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5? in1 $end
$var wire 1 %? in2 $end
$var wire 1 6? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 r9 in1 $end
$var wire 1 $: in2 $end
$var wire 1 7? out $end
$upscope $end

$scope module not1 $end
$var wire 1 7? in1 $end
$var wire 1 8? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 =? in1 $end
$var wire 1 5? in2 $end
$var wire 1 9? out $end
$upscope $end

$scope module not2 $end
$var wire 1 9? in1 $end
$var wire 1 :? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8? in1 $end
$var wire 1 :? in2 $end
$var wire 1 ;? out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;? in1 $end
$var wire 1 <? out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 '? s $end
$var wire 1 >? c_out $end
$var wire 1 q9 a $end
$var wire 1 #: b $end
$var wire 1 $? c_in $end
$var wire 1 ?? xor_AB $end
$var wire 1 @? xor_ABCin $end
$var wire 1 A? NAND_AB $end
$var wire 1 B? not_NAND_AB $end
$var wire 1 C? NAND_Cin_xor_AB $end
$var wire 1 D? not_NAND_Cin_xor_AB $end
$var wire 1 E? NOR_2NAND $end
$var wire 1 F? not_NOR_2NAND $end
$var wire 1 G? Cin $end

$scope module xor1 $end
$var wire 1 q9 in1 $end
$var wire 1 #: in2 $end
$var wire 1 ?? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ?? in1 $end
$var wire 1 $? in2 $end
$var wire 1 @? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 q9 in1 $end
$var wire 1 #: in2 $end
$var wire 1 A? out $end
$upscope $end

$scope module not1 $end
$var wire 1 A? in1 $end
$var wire 1 B? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G? in1 $end
$var wire 1 ?? in2 $end
$var wire 1 C? out $end
$upscope $end

$scope module not2 $end
$var wire 1 C? in1 $end
$var wire 1 D? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 B? in1 $end
$var wire 1 D? in2 $end
$var wire 1 E? out $end
$upscope $end

$scope module not3 $end
$var wire 1 E? in1 $end
$var wire 1 F? out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 &? s $end
$var wire 1 H? c_out $end
$var wire 1 p9 a $end
$var wire 1 ": b $end
$var wire 1 #? c_in $end
$var wire 1 I? xor_AB $end
$var wire 1 J? xor_ABCin $end
$var wire 1 K? NAND_AB $end
$var wire 1 L? not_NAND_AB $end
$var wire 1 M? NAND_Cin_xor_AB $end
$var wire 1 N? not_NAND_Cin_xor_AB $end
$var wire 1 O? NOR_2NAND $end
$var wire 1 P? not_NOR_2NAND $end
$var wire 1 Q? Cin $end

$scope module xor1 $end
$var wire 1 p9 in1 $end
$var wire 1 ": in2 $end
$var wire 1 I? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 I? in1 $end
$var wire 1 #? in2 $end
$var wire 1 J? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 p9 in1 $end
$var wire 1 ": in2 $end
$var wire 1 K? out $end
$upscope $end

$scope module not1 $end
$var wire 1 K? in1 $end
$var wire 1 L? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q? in1 $end
$var wire 1 I? in2 $end
$var wire 1 M? out $end
$upscope $end

$scope module not2 $end
$var wire 1 M? in1 $end
$var wire 1 N? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 L? in1 $end
$var wire 1 N? in2 $end
$var wire 1 O? out $end
$upscope $end

$scope module not3 $end
$var wire 1 O? in1 $end
$var wire 1 P? out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var wire 1 2> sum [3] $end
$var wire 1 3> sum [2] $end
$var wire 1 4> sum [1] $end
$var wire 1 5> sum [0] $end
$var wire 1 S? c_out $end
$var wire 1 l9 a [3] $end
$var wire 1 m9 a [2] $end
$var wire 1 n9 a [1] $end
$var wire 1 o9 a [0] $end
$var wire 1 |9 b [3] $end
$var wire 1 }9 b [2] $end
$var wire 1 ~9 b [1] $end
$var wire 1 !: b [0] $end
$var wire 1 ,> c_in $end
$var wire 1 T? gen [3] $end
$var wire 1 U? gen [2] $end
$var wire 1 V? gen [1] $end
$var wire 1 W? gen [0] $end
$var wire 1 X? prop [3] $end
$var wire 1 Y? prop [2] $end
$var wire 1 Z? prop [1] $end
$var wire 1 [? prop [0] $end
$var wire 1 \? carry [2] $end
$var wire 1 ]? carry [1] $end
$var wire 1 ^? carry [0] $end
$var wire 1 _? fa_sum [3] $end
$var wire 1 `? fa_sum [2] $end
$var wire 1 a? fa_sum [1] $end
$var wire 1 b? fa_sum [0] $end

$scope module fa1 $end
$var wire 1 b? s $end
$var wire 1 c? c_out $end
$var wire 1 o9 a $end
$var wire 1 !: b $end
$var wire 1 ,> c_in $end
$var wire 1 d? xor_AB $end
$var wire 1 e? xor_ABCin $end
$var wire 1 f? NAND_AB $end
$var wire 1 g? not_NAND_AB $end
$var wire 1 h? NAND_Cin_xor_AB $end
$var wire 1 i? not_NAND_Cin_xor_AB $end
$var wire 1 j? NOR_2NAND $end
$var wire 1 k? not_NOR_2NAND $end
$var wire 1 l? Cin $end

$scope module xor1 $end
$var wire 1 o9 in1 $end
$var wire 1 !: in2 $end
$var wire 1 d? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d? in1 $end
$var wire 1 ,> in2 $end
$var wire 1 e? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 o9 in1 $end
$var wire 1 !: in2 $end
$var wire 1 f? out $end
$upscope $end

$scope module not1 $end
$var wire 1 f? in1 $end
$var wire 1 g? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l? in1 $end
$var wire 1 d? in2 $end
$var wire 1 h? out $end
$upscope $end

$scope module not2 $end
$var wire 1 h? in1 $end
$var wire 1 i? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g? in1 $end
$var wire 1 i? in2 $end
$var wire 1 j? out $end
$upscope $end

$scope module not3 $end
$var wire 1 j? in1 $end
$var wire 1 k? out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 a? s $end
$var wire 1 m? c_out $end
$var wire 1 n9 a $end
$var wire 1 ~9 b $end
$var wire 1 ^? c_in $end
$var wire 1 n? xor_AB $end
$var wire 1 o? xor_ABCin $end
$var wire 1 p? NAND_AB $end
$var wire 1 q? not_NAND_AB $end
$var wire 1 r? NAND_Cin_xor_AB $end
$var wire 1 s? not_NAND_Cin_xor_AB $end
$var wire 1 t? NOR_2NAND $end
$var wire 1 u? not_NOR_2NAND $end
$var wire 1 v? Cin $end

$scope module xor1 $end
$var wire 1 n9 in1 $end
$var wire 1 ~9 in2 $end
$var wire 1 n? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n? in1 $end
$var wire 1 ^? in2 $end
$var wire 1 o? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 n9 in1 $end
$var wire 1 ~9 in2 $end
$var wire 1 p? out $end
$upscope $end

$scope module not1 $end
$var wire 1 p? in1 $end
$var wire 1 q? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v? in1 $end
$var wire 1 n? in2 $end
$var wire 1 r? out $end
$upscope $end

$scope module not2 $end
$var wire 1 r? in1 $end
$var wire 1 s? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q? in1 $end
$var wire 1 s? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module not3 $end
$var wire 1 t? in1 $end
$var wire 1 u? out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 `? s $end
$var wire 1 w? c_out $end
$var wire 1 m9 a $end
$var wire 1 }9 b $end
$var wire 1 ]? c_in $end
$var wire 1 x? xor_AB $end
$var wire 1 y? xor_ABCin $end
$var wire 1 z? NAND_AB $end
$var wire 1 {? not_NAND_AB $end
$var wire 1 |? NAND_Cin_xor_AB $end
$var wire 1 }? not_NAND_Cin_xor_AB $end
$var wire 1 ~? NOR_2NAND $end
$var wire 1 !@ not_NOR_2NAND $end
$var wire 1 "@ Cin $end

$scope module xor1 $end
$var wire 1 m9 in1 $end
$var wire 1 }9 in2 $end
$var wire 1 x? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x? in1 $end
$var wire 1 ]? in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 m9 in1 $end
$var wire 1 }9 in2 $end
$var wire 1 z? out $end
$upscope $end

$scope module not1 $end
$var wire 1 z? in1 $end
$var wire 1 {? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "@ in1 $end
$var wire 1 x? in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module not2 $end
$var wire 1 |? in1 $end
$var wire 1 }? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {? in1 $end
$var wire 1 }? in2 $end
$var wire 1 ~? out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~? in1 $end
$var wire 1 !@ out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 _? s $end
$var wire 1 #@ c_out $end
$var wire 1 l9 a $end
$var wire 1 |9 b $end
$var wire 1 \? c_in $end
$var wire 1 $@ xor_AB $end
$var wire 1 %@ xor_ABCin $end
$var wire 1 &@ NAND_AB $end
$var wire 1 '@ not_NAND_AB $end
$var wire 1 (@ NAND_Cin_xor_AB $end
$var wire 1 )@ not_NAND_Cin_xor_AB $end
$var wire 1 *@ NOR_2NAND $end
$var wire 1 +@ not_NOR_2NAND $end
$var wire 1 ,@ Cin $end

$scope module xor1 $end
$var wire 1 l9 in1 $end
$var wire 1 |9 in2 $end
$var wire 1 $@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $@ in1 $end
$var wire 1 \? in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 l9 in1 $end
$var wire 1 |9 in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 &@ in1 $end
$var wire 1 '@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ,@ in1 $end
$var wire 1 $@ in2 $end
$var wire 1 (@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 (@ in1 $end
$var wire 1 )@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '@ in1 $end
$var wire 1 )@ in2 $end
$var wire 1 *@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 *@ in1 $end
$var wire 1 +@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var wire 1 .> sum [3] $end
$var wire 1 /> sum [2] $end
$var wire 1 0> sum [1] $end
$var wire 1 1> sum [0] $end
$var wire 1 .@ c_out $end
$var wire 1 h9 a [3] $end
$var wire 1 i9 a [2] $end
$var wire 1 j9 a [1] $end
$var wire 1 k9 a [0] $end
$var wire 1 x9 b [3] $end
$var wire 1 y9 b [2] $end
$var wire 1 z9 b [1] $end
$var wire 1 {9 b [0] $end
$var wire 1 +> c_in $end
$var wire 1 /@ gen [3] $end
$var wire 1 0@ gen [2] $end
$var wire 1 1@ gen [1] $end
$var wire 1 2@ gen [0] $end
$var wire 1 3@ prop [3] $end
$var wire 1 4@ prop [2] $end
$var wire 1 5@ prop [1] $end
$var wire 1 6@ prop [0] $end
$var wire 1 7@ carry [2] $end
$var wire 1 8@ carry [1] $end
$var wire 1 9@ carry [0] $end
$var wire 1 :@ fa_sum [3] $end
$var wire 1 ;@ fa_sum [2] $end
$var wire 1 <@ fa_sum [1] $end
$var wire 1 =@ fa_sum [0] $end

$scope module fa1 $end
$var wire 1 =@ s $end
$var wire 1 >@ c_out $end
$var wire 1 k9 a $end
$var wire 1 {9 b $end
$var wire 1 +> c_in $end
$var wire 1 ?@ xor_AB $end
$var wire 1 @@ xor_ABCin $end
$var wire 1 A@ NAND_AB $end
$var wire 1 B@ not_NAND_AB $end
$var wire 1 C@ NAND_Cin_xor_AB $end
$var wire 1 D@ not_NAND_Cin_xor_AB $end
$var wire 1 E@ NOR_2NAND $end
$var wire 1 F@ not_NOR_2NAND $end
$var wire 1 G@ Cin $end

$scope module xor1 $end
$var wire 1 k9 in1 $end
$var wire 1 {9 in2 $end
$var wire 1 ?@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ?@ in1 $end
$var wire 1 +> in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 k9 in1 $end
$var wire 1 {9 in2 $end
$var wire 1 A@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 A@ in1 $end
$var wire 1 B@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G@ in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 C@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 C@ in1 $end
$var wire 1 D@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 B@ in1 $end
$var wire 1 D@ in2 $end
$var wire 1 E@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 E@ in1 $end
$var wire 1 F@ out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 <@ s $end
$var wire 1 H@ c_out $end
$var wire 1 j9 a $end
$var wire 1 z9 b $end
$var wire 1 9@ c_in $end
$var wire 1 I@ xor_AB $end
$var wire 1 J@ xor_ABCin $end
$var wire 1 K@ NAND_AB $end
$var wire 1 L@ not_NAND_AB $end
$var wire 1 M@ NAND_Cin_xor_AB $end
$var wire 1 N@ not_NAND_Cin_xor_AB $end
$var wire 1 O@ NOR_2NAND $end
$var wire 1 P@ not_NOR_2NAND $end
$var wire 1 Q@ Cin $end

$scope module xor1 $end
$var wire 1 j9 in1 $end
$var wire 1 z9 in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 I@ in1 $end
$var wire 1 9@ in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 j9 in1 $end
$var wire 1 z9 in2 $end
$var wire 1 K@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 K@ in1 $end
$var wire 1 L@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q@ in1 $end
$var wire 1 I@ in2 $end
$var wire 1 M@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 M@ in1 $end
$var wire 1 N@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 L@ in1 $end
$var wire 1 N@ in2 $end
$var wire 1 O@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 O@ in1 $end
$var wire 1 P@ out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 ;@ s $end
$var wire 1 R@ c_out $end
$var wire 1 i9 a $end
$var wire 1 y9 b $end
$var wire 1 8@ c_in $end
$var wire 1 S@ xor_AB $end
$var wire 1 T@ xor_ABCin $end
$var wire 1 U@ NAND_AB $end
$var wire 1 V@ not_NAND_AB $end
$var wire 1 W@ NAND_Cin_xor_AB $end
$var wire 1 X@ not_NAND_Cin_xor_AB $end
$var wire 1 Y@ NOR_2NAND $end
$var wire 1 Z@ not_NOR_2NAND $end
$var wire 1 [@ Cin $end

$scope module xor1 $end
$var wire 1 i9 in1 $end
$var wire 1 y9 in2 $end
$var wire 1 S@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S@ in1 $end
$var wire 1 8@ in2 $end
$var wire 1 T@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 i9 in1 $end
$var wire 1 y9 in2 $end
$var wire 1 U@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 U@ in1 $end
$var wire 1 V@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [@ in1 $end
$var wire 1 S@ in2 $end
$var wire 1 W@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 W@ in1 $end
$var wire 1 X@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V@ in1 $end
$var wire 1 X@ in2 $end
$var wire 1 Y@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y@ in1 $end
$var wire 1 Z@ out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 :@ s $end
$var wire 1 \@ c_out $end
$var wire 1 h9 a $end
$var wire 1 x9 b $end
$var wire 1 7@ c_in $end
$var wire 1 ]@ xor_AB $end
$var wire 1 ^@ xor_ABCin $end
$var wire 1 _@ NAND_AB $end
$var wire 1 `@ not_NAND_AB $end
$var wire 1 a@ NAND_Cin_xor_AB $end
$var wire 1 b@ not_NAND_Cin_xor_AB $end
$var wire 1 c@ NOR_2NAND $end
$var wire 1 d@ not_NOR_2NAND $end
$var wire 1 e@ Cin $end

$scope module xor1 $end
$var wire 1 h9 in1 $end
$var wire 1 x9 in2 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]@ in1 $end
$var wire 1 7@ in2 $end
$var wire 1 ^@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 h9 in1 $end
$var wire 1 x9 in2 $end
$var wire 1 _@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 _@ in1 $end
$var wire 1 `@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e@ in1 $end
$var wire 1 ]@ in2 $end
$var wire 1 a@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 a@ in1 $end
$var wire 1 b@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `@ in1 $end
$var wire 1 b@ in2 $end
$var wire 1 c@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 c@ in1 $end
$var wire 1 d@ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 #5 InA [15] $end
$var wire 1 $5 InA [14] $end
$var wire 1 %5 InA [13] $end
$var wire 1 &5 InA [12] $end
$var wire 1 '5 InA [11] $end
$var wire 1 (5 InA [10] $end
$var wire 1 )5 InA [9] $end
$var wire 1 *5 InA [8] $end
$var wire 1 +5 InA [7] $end
$var wire 1 ,5 InA [6] $end
$var wire 1 -5 InA [5] $end
$var wire 1 .5 InA [4] $end
$var wire 1 /5 InA [3] $end
$var wire 1 05 InA [2] $end
$var wire 1 15 InA [1] $end
$var wire 1 25 InA [0] $end
$var wire 1 f@ InB [15] $end
$var wire 1 g@ InB [14] $end
$var wire 1 h@ InB [13] $end
$var wire 1 i@ InB [12] $end
$var wire 1 j@ InB [11] $end
$var wire 1 k@ InB [10] $end
$var wire 1 l@ InB [9] $end
$var wire 1 m@ InB [8] $end
$var wire 1 n@ InB [7] $end
$var wire 1 o@ InB [6] $end
$var wire 1 p@ InB [5] $end
$var wire 1 q@ InB [4] $end
$var wire 1 r@ InB [3] $end
$var wire 1 s@ InB [2] $end
$var wire 1 t@ InB [1] $end
$var wire 1 u@ InB [0] $end
$var wire 1 l: Out $end
$var wire 1 v@ difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 i" InA [15] $end
$var wire 1 j" InA [14] $end
$var wire 1 k" InA [13] $end
$var wire 1 l" InA [12] $end
$var wire 1 m" InA [11] $end
$var wire 1 n" InA [10] $end
$var wire 1 o" InA [9] $end
$var wire 1 p" InA [8] $end
$var wire 1 q" InA [7] $end
$var wire 1 r" InA [6] $end
$var wire 1 s" InA [5] $end
$var wire 1 t" InA [4] $end
$var wire 1 u" InA [3] $end
$var wire 1 v" InA [2] $end
$var wire 1 w" InA [1] $end
$var wire 1 x" InA [0] $end
$var wire 1 I% InB [15] $end
$var wire 1 J% InB [14] $end
$var wire 1 K% InB [13] $end
$var wire 1 L% InB [12] $end
$var wire 1 M% InB [11] $end
$var wire 1 N% InB [10] $end
$var wire 1 O% InB [9] $end
$var wire 1 P% InB [8] $end
$var wire 1 Q% InB [7] $end
$var wire 1 R% InB [6] $end
$var wire 1 S% InB [5] $end
$var wire 1 T% InB [4] $end
$var wire 1 U% InB [3] $end
$var wire 1 V% InB [2] $end
$var wire 1 W% InB [1] $end
$var wire 1 X% InB [0] $end
$var wire 1 [5 Out $end
$var wire 1 w@ difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 i" InA [15] $end
$var wire 1 j" InA [14] $end
$var wire 1 k" InA [13] $end
$var wire 1 l" InA [12] $end
$var wire 1 m" InA [11] $end
$var wire 1 n" InA [10] $end
$var wire 1 o" InA [9] $end
$var wire 1 p" InA [8] $end
$var wire 1 q" InA [7] $end
$var wire 1 r" InA [6] $end
$var wire 1 s" InA [5] $end
$var wire 1 t" InA [4] $end
$var wire 1 u" InA [3] $end
$var wire 1 v" InA [2] $end
$var wire 1 w" InA [1] $end
$var wire 1 x" InA [0] $end
$var wire 1 I% InB [15] $end
$var wire 1 J% InB [14] $end
$var wire 1 K% InB [13] $end
$var wire 1 L% InB [12] $end
$var wire 1 M% InB [11] $end
$var wire 1 N% InB [10] $end
$var wire 1 O% InB [9] $end
$var wire 1 P% InB [8] $end
$var wire 1 Q% InB [7] $end
$var wire 1 R% InB [6] $end
$var wire 1 S% InB [5] $end
$var wire 1 T% InB [4] $end
$var wire 1 U% InB [3] $end
$var wire 1 V% InB [2] $end
$var wire 1 W% InB [1] $end
$var wire 1 X% InB [0] $end
$var wire 1 L6 Out $end
$var wire 1 x@ difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T) mem_stall $end
$var wire 1 n( fetch_stall $end
$var wire 1 )% ALU_in [15] $end
$var wire 1 *% ALU_in [14] $end
$var wire 1 +% ALU_in [13] $end
$var wire 1 ,% ALU_in [12] $end
$var wire 1 -% ALU_in [11] $end
$var wire 1 .% ALU_in [10] $end
$var wire 1 /% ALU_in [9] $end
$var wire 1 0% ALU_in [8] $end
$var wire 1 1% ALU_in [7] $end
$var wire 1 2% ALU_in [6] $end
$var wire 1 3% ALU_in [5] $end
$var wire 1 4% ALU_in [4] $end
$var wire 1 5% ALU_in [3] $end
$var wire 1 6% ALU_in [2] $end
$var wire 1 7% ALU_in [1] $end
$var wire 1 8% ALU_in [0] $end
$var wire 1 9% ALU_out [15] $end
$var wire 1 :% ALU_out [14] $end
$var wire 1 ;% ALU_out [13] $end
$var wire 1 <% ALU_out [12] $end
$var wire 1 =% ALU_out [11] $end
$var wire 1 >% ALU_out [10] $end
$var wire 1 ?% ALU_out [9] $end
$var wire 1 @% ALU_out [8] $end
$var wire 1 A% ALU_out [7] $end
$var wire 1 B% ALU_out [6] $end
$var wire 1 C% ALU_out [5] $end
$var wire 1 D% ALU_out [4] $end
$var wire 1 E% ALU_out [3] $end
$var wire 1 F% ALU_out [2] $end
$var wire 1 G% ALU_out [1] $end
$var wire 1 H% ALU_out [0] $end
$var wire 1 I% BInput_in [15] $end
$var wire 1 J% BInput_in [14] $end
$var wire 1 K% BInput_in [13] $end
$var wire 1 L% BInput_in [12] $end
$var wire 1 M% BInput_in [11] $end
$var wire 1 N% BInput_in [10] $end
$var wire 1 O% BInput_in [9] $end
$var wire 1 P% BInput_in [8] $end
$var wire 1 Q% BInput_in [7] $end
$var wire 1 R% BInput_in [6] $end
$var wire 1 S% BInput_in [5] $end
$var wire 1 T% BInput_in [4] $end
$var wire 1 U% BInput_in [3] $end
$var wire 1 V% BInput_in [2] $end
$var wire 1 W% BInput_in [1] $end
$var wire 1 X% BInput_in [0] $end
$var wire 1 Y% BInput_out [15] $end
$var wire 1 Z% BInput_out [14] $end
$var wire 1 [% BInput_out [13] $end
$var wire 1 \% BInput_out [12] $end
$var wire 1 ]% BInput_out [11] $end
$var wire 1 ^% BInput_out [10] $end
$var wire 1 _% BInput_out [9] $end
$var wire 1 `% BInput_out [8] $end
$var wire 1 a% BInput_out [7] $end
$var wire 1 b% BInput_out [6] $end
$var wire 1 c% BInput_out [5] $end
$var wire 1 d% BInput_out [4] $end
$var wire 1 e% BInput_out [3] $end
$var wire 1 f% BInput_out [2] $end
$var wire 1 g% BInput_out [1] $end
$var wire 1 h% BInput_out [0] $end
$var wire 1 '% branchtake_in $end
$var wire 1 (% branchtake_out $end
$var wire 1 i% branch_out $end
$var wire 1 j$ branch_in $end
$var wire 1 v$ PC_or_add_in $end
$var wire 1 j% PC_or_add_out $end
$var wire 1 t$ ALUJmp_in $end
$var wire 1 k% ALUJmp_out $end
$var wire 1 d$ MemWrt_in $end
$var wire 1 l% MemWrt_out $end
$var wire 1 |$ halt_in $end
$var wire 1 m% halt_out $end
$var wire 1 -$ SgnExt_in [15] $end
$var wire 1 .$ SgnExt_in [14] $end
$var wire 1 /$ SgnExt_in [13] $end
$var wire 1 0$ SgnExt_in [12] $end
$var wire 1 1$ SgnExt_in [11] $end
$var wire 1 2$ SgnExt_in [10] $end
$var wire 1 3$ SgnExt_in [9] $end
$var wire 1 4$ SgnExt_in [8] $end
$var wire 1 5$ SgnExt_in [7] $end
$var wire 1 6$ SgnExt_in [6] $end
$var wire 1 7$ SgnExt_in [5] $end
$var wire 1 8$ SgnExt_in [4] $end
$var wire 1 9$ SgnExt_in [3] $end
$var wire 1 :$ SgnExt_in [2] $end
$var wire 1 ;$ SgnExt_in [1] $end
$var wire 1 <$ SgnExt_in [0] $end
$var wire 1 n% SgnExt_out [15] $end
$var wire 1 o% SgnExt_out [14] $end
$var wire 1 p% SgnExt_out [13] $end
$var wire 1 q% SgnExt_out [12] $end
$var wire 1 r% SgnExt_out [11] $end
$var wire 1 s% SgnExt_out [10] $end
$var wire 1 t% SgnExt_out [9] $end
$var wire 1 u% SgnExt_out [8] $end
$var wire 1 v% SgnExt_out [7] $end
$var wire 1 w% SgnExt_out [6] $end
$var wire 1 x% SgnExt_out [5] $end
$var wire 1 y% SgnExt_out [4] $end
$var wire 1 z% SgnExt_out [3] $end
$var wire 1 {% SgnExt_out [2] $end
$var wire 1 |% SgnExt_out [1] $end
$var wire 1 }% SgnExt_out [0] $end
$var wire 1 +# readData2_in [15] $end
$var wire 1 ,# readData2_in [14] $end
$var wire 1 -# readData2_in [13] $end
$var wire 1 .# readData2_in [12] $end
$var wire 1 /# readData2_in [11] $end
$var wire 1 0# readData2_in [10] $end
$var wire 1 1# readData2_in [9] $end
$var wire 1 2# readData2_in [8] $end
$var wire 1 3# readData2_in [7] $end
$var wire 1 4# readData2_in [6] $end
$var wire 1 5# readData2_in [5] $end
$var wire 1 6# readData2_in [4] $end
$var wire 1 7# readData2_in [3] $end
$var wire 1 8# readData2_in [2] $end
$var wire 1 9# readData2_in [1] $end
$var wire 1 :# readData2_in [0] $end
$var wire 1 ~% readData2_out [15] $end
$var wire 1 !& readData2_out [14] $end
$var wire 1 "& readData2_out [13] $end
$var wire 1 #& readData2_out [12] $end
$var wire 1 $& readData2_out [11] $end
$var wire 1 %& readData2_out [10] $end
$var wire 1 && readData2_out [9] $end
$var wire 1 '& readData2_out [8] $end
$var wire 1 (& readData2_out [7] $end
$var wire 1 )& readData2_out [6] $end
$var wire 1 *& readData2_out [5] $end
$var wire 1 +& readData2_out [4] $end
$var wire 1 ,& readData2_out [3] $end
$var wire 1 -& readData2_out [2] $end
$var wire 1 .& readData2_out [1] $end
$var wire 1 /& readData2_out [0] $end
$var wire 1 ?" pc2_in [15] $end
$var wire 1 @" pc2_in [14] $end
$var wire 1 A" pc2_in [13] $end
$var wire 1 B" pc2_in [12] $end
$var wire 1 C" pc2_in [11] $end
$var wire 1 D" pc2_in [10] $end
$var wire 1 E" pc2_in [9] $end
$var wire 1 F" pc2_in [8] $end
$var wire 1 G" pc2_in [7] $end
$var wire 1 H" pc2_in [6] $end
$var wire 1 I" pc2_in [5] $end
$var wire 1 J" pc2_in [4] $end
$var wire 1 K" pc2_in [3] $end
$var wire 1 L" pc2_in [2] $end
$var wire 1 M" pc2_in [1] $end
$var wire 1 N" pc2_in [0] $end
$var wire 1 0& pc2_out [15] $end
$var wire 1 1& pc2_out [14] $end
$var wire 1 2& pc2_out [13] $end
$var wire 1 3& pc2_out [12] $end
$var wire 1 4& pc2_out [11] $end
$var wire 1 5& pc2_out [10] $end
$var wire 1 6& pc2_out [9] $end
$var wire 1 7& pc2_out [8] $end
$var wire 1 8& pc2_out [7] $end
$var wire 1 9& pc2_out [6] $end
$var wire 1 :& pc2_out [5] $end
$var wire 1 ;& pc2_out [4] $end
$var wire 1 <& pc2_out [3] $end
$var wire 1 =& pc2_out [2] $end
$var wire 1 >& pc2_out [1] $end
$var wire 1 ?& pc2_out [0] $end
$var wire 1 k# sevenext_in [15] $end
$var wire 1 l# sevenext_in [14] $end
$var wire 1 m# sevenext_in [13] $end
$var wire 1 n# sevenext_in [12] $end
$var wire 1 o# sevenext_in [11] $end
$var wire 1 p# sevenext_in [10] $end
$var wire 1 q# sevenext_in [9] $end
$var wire 1 r# sevenext_in [8] $end
$var wire 1 s# sevenext_in [7] $end
$var wire 1 t# sevenext_in [6] $end
$var wire 1 u# sevenext_in [5] $end
$var wire 1 v# sevenext_in [4] $end
$var wire 1 w# sevenext_in [3] $end
$var wire 1 x# sevenext_in [2] $end
$var wire 1 y# sevenext_in [1] $end
$var wire 1 z# sevenext_in [0] $end
$var wire 1 @& sevenext_out [15] $end
$var wire 1 A& sevenext_out [14] $end
$var wire 1 B& sevenext_out [13] $end
$var wire 1 C& sevenext_out [12] $end
$var wire 1 D& sevenext_out [11] $end
$var wire 1 E& sevenext_out [10] $end
$var wire 1 F& sevenext_out [9] $end
$var wire 1 G& sevenext_out [8] $end
$var wire 1 H& sevenext_out [7] $end
$var wire 1 I& sevenext_out [6] $end
$var wire 1 J& sevenext_out [5] $end
$var wire 1 K& sevenext_out [4] $end
$var wire 1 L& sevenext_out [3] $end
$var wire 1 M& sevenext_out [2] $end
$var wire 1 N& sevenext_out [1] $end
$var wire 1 O& sevenext_out [0] $end
$var wire 1 ~$ RegWrt_in $end
$var wire 1 P& RegWrt_out $end
$var wire 1 B) SendNOP_In $end
$var wire 1 ?) SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 Q& RegSrc_out [1] $end
$var wire 1 R& RegSrc_out [0] $end
$var wire 1 $% write_reg_in [2] $end
$var wire 1 %% write_reg_in [1] $end
$var wire 1 &% write_reg_in [0] $end
$var wire 1 S& write_reg_out [2] $end
$var wire 1 T& write_reg_out [1] $end
$var wire 1 U& write_reg_out [0] $end
$var wire 1 c' MemRd_in $end
$var wire 1 d' MemRd_out $end

$scope module branchtake $end
$var wire 1 (% q $end
$var wire 1 y@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module branch $end
$var wire 1 i% q $end
$var wire 1 {@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 j% q $end
$var wire 1 }@ d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 k% q $end
$var wire 1 !A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 l% q $end
$var wire 1 #A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module halt $end
$var wire 1 m% q $end
$var wire 1 %A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 P& q $end
$var wire 1 'A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 ?) q $end
$var wire 1 )A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module memrd $end
$var wire 1 d' q $end
$var wire 1 +A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 9% q $end
$var wire 1 -A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 :% q $end
$var wire 1 /A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 ;% q $end
$var wire 1 1A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 <% q $end
$var wire 1 3A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 =% q $end
$var wire 1 5A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 >% q $end
$var wire 1 7A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 ?% q $end
$var wire 1 9A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 @% q $end
$var wire 1 ;A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 A% q $end
$var wire 1 =A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 B% q $end
$var wire 1 ?A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 C% q $end
$var wire 1 AA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 D% q $end
$var wire 1 CA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 E% q $end
$var wire 1 EA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 F% q $end
$var wire 1 GA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 G% q $end
$var wire 1 IA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 H% q $end
$var wire 1 KA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 Y% q $end
$var wire 1 MA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 Z% q $end
$var wire 1 OA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 [% q $end
$var wire 1 QA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 \% q $end
$var wire 1 SA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 ]% q $end
$var wire 1 UA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 ^% q $end
$var wire 1 WA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 _% q $end
$var wire 1 YA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 `% q $end
$var wire 1 [A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 a% q $end
$var wire 1 ]A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 b% q $end
$var wire 1 _A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 c% q $end
$var wire 1 aA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 d% q $end
$var wire 1 cA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 e% q $end
$var wire 1 eA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 f% q $end
$var wire 1 gA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 g% q $end
$var wire 1 iA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 h% q $end
$var wire 1 kA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 n% q $end
$var wire 1 mA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 o% q $end
$var wire 1 oA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 p% q $end
$var wire 1 qA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 q% q $end
$var wire 1 sA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 r% q $end
$var wire 1 uA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 s% q $end
$var wire 1 wA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 t% q $end
$var wire 1 yA d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 u% q $end
$var wire 1 {A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 v% q $end
$var wire 1 }A d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 w% q $end
$var wire 1 !B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 x% q $end
$var wire 1 #B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 y% q $end
$var wire 1 %B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 z% q $end
$var wire 1 'B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 {% q $end
$var wire 1 )B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 |% q $end
$var wire 1 +B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 }% q $end
$var wire 1 -B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 ~% q $end
$var wire 1 /B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 !& q $end
$var wire 1 1B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 "& q $end
$var wire 1 3B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 #& q $end
$var wire 1 5B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 $& q $end
$var wire 1 7B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 %& q $end
$var wire 1 9B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 && q $end
$var wire 1 ;B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 '& q $end
$var wire 1 =B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 (& q $end
$var wire 1 ?B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 )& q $end
$var wire 1 AB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 *& q $end
$var wire 1 CB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 +& q $end
$var wire 1 EB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 ,& q $end
$var wire 1 GB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 -& q $end
$var wire 1 IB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 .& q $end
$var wire 1 KB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 /& q $end
$var wire 1 MB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 0& q $end
$var wire 1 OB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 1& q $end
$var wire 1 QB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 2& q $end
$var wire 1 SB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 3& q $end
$var wire 1 UB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 4& q $end
$var wire 1 WB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 5& q $end
$var wire 1 YB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 6& q $end
$var wire 1 [B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 7& q $end
$var wire 1 ]B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 8& q $end
$var wire 1 _B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 9& q $end
$var wire 1 aB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 :& q $end
$var wire 1 cB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 ;& q $end
$var wire 1 eB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 <& q $end
$var wire 1 gB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 =& q $end
$var wire 1 iB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 >& q $end
$var wire 1 kB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 ?& q $end
$var wire 1 mB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 @& q $end
$var wire 1 oB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 A& q $end
$var wire 1 qB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 B& q $end
$var wire 1 sB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 C& q $end
$var wire 1 uB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 D& q $end
$var wire 1 wB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 E& q $end
$var wire 1 yB d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 F& q $end
$var wire 1 {B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 G& q $end
$var wire 1 }B d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 H& q $end
$var wire 1 !C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 I& q $end
$var wire 1 #C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 J& q $end
$var wire 1 %C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 K& q $end
$var wire 1 'C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 L& q $end
$var wire 1 )C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 M& q $end
$var wire 1 +C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 N& q $end
$var wire 1 -C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 O& q $end
$var wire 1 /C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 Q& q $end
$var wire 1 1C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 R& q $end
$var wire 1 3C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 S& q $end
$var wire 1 5C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 T& q $end
$var wire 1 7C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 U& q $end
$var wire 1 9C d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 (% branch $end
$var wire 1 j% PC_or_add $end
$var wire 1 9% alu [15] $end
$var wire 1 :% alu [14] $end
$var wire 1 ;% alu [13] $end
$var wire 1 <% alu [12] $end
$var wire 1 =% alu [11] $end
$var wire 1 >% alu [10] $end
$var wire 1 ?% alu [9] $end
$var wire 1 @% alu [8] $end
$var wire 1 A% alu [7] $end
$var wire 1 B% alu [6] $end
$var wire 1 C% alu [5] $end
$var wire 1 D% alu [4] $end
$var wire 1 E% alu [3] $end
$var wire 1 F% alu [2] $end
$var wire 1 G% alu [1] $end
$var wire 1 H% alu [0] $end
$var wire 1 n% SgnExt [15] $end
$var wire 1 o% SgnExt [14] $end
$var wire 1 p% SgnExt [13] $end
$var wire 1 q% SgnExt [12] $end
$var wire 1 r% SgnExt [11] $end
$var wire 1 s% SgnExt [10] $end
$var wire 1 t% SgnExt [9] $end
$var wire 1 u% SgnExt [8] $end
$var wire 1 v% SgnExt [7] $end
$var wire 1 w% SgnExt [6] $end
$var wire 1 x% SgnExt [5] $end
$var wire 1 y% SgnExt [4] $end
$var wire 1 z% SgnExt [3] $end
$var wire 1 {% SgnExt [2] $end
$var wire 1 |% SgnExt [1] $end
$var wire 1 }% SgnExt [0] $end
$var wire 1 ~% readData2 [15] $end
$var wire 1 !& readData2 [14] $end
$var wire 1 "& readData2 [13] $end
$var wire 1 #& readData2 [12] $end
$var wire 1 $& readData2 [11] $end
$var wire 1 %& readData2 [10] $end
$var wire 1 && readData2 [9] $end
$var wire 1 '& readData2 [8] $end
$var wire 1 (& readData2 [7] $end
$var wire 1 )& readData2 [6] $end
$var wire 1 *& readData2 [5] $end
$var wire 1 +& readData2 [4] $end
$var wire 1 ,& readData2 [3] $end
$var wire 1 -& readData2 [2] $end
$var wire 1 .& readData2 [1] $end
$var wire 1 /& readData2 [0] $end
$var wire 1 0& pc2 [15] $end
$var wire 1 1& pc2 [14] $end
$var wire 1 2& pc2 [13] $end
$var wire 1 3& pc2 [12] $end
$var wire 1 4& pc2 [11] $end
$var wire 1 5& pc2 [10] $end
$var wire 1 6& pc2 [9] $end
$var wire 1 7& pc2 [8] $end
$var wire 1 8& pc2 [7] $end
$var wire 1 9& pc2 [6] $end
$var wire 1 :& pc2 [5] $end
$var wire 1 ;& pc2 [4] $end
$var wire 1 <& pc2 [3] $end
$var wire 1 =& pc2 [2] $end
$var wire 1 >& pc2 [1] $end
$var wire 1 ?& pc2 [0] $end
$var wire 1 @& sevenext [15] $end
$var wire 1 A& sevenext [14] $end
$var wire 1 B& sevenext [13] $end
$var wire 1 C& sevenext [12] $end
$var wire 1 D& sevenext [11] $end
$var wire 1 E& sevenext [10] $end
$var wire 1 F& sevenext [9] $end
$var wire 1 G& sevenext [8] $end
$var wire 1 H& sevenext [7] $end
$var wire 1 I& sevenext [6] $end
$var wire 1 J& sevenext [5] $end
$var wire 1 K& sevenext [4] $end
$var wire 1 L& sevenext [3] $end
$var wire 1 M& sevenext [2] $end
$var wire 1 N& sevenext [1] $end
$var wire 1 O& sevenext [0] $end
$var wire 1 k% ALUJmp $end
$var wire 1 l% MemWrt $end
$var wire 1 m% halt $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 d' MemRd $end
$var wire 1 v& newPC [15] $end
$var wire 1 w& newPC [14] $end
$var wire 1 x& newPC [13] $end
$var wire 1 y& newPC [12] $end
$var wire 1 z& newPC [11] $end
$var wire 1 {& newPC [10] $end
$var wire 1 |& newPC [9] $end
$var wire 1 }& newPC [8] $end
$var wire 1 ~& newPC [7] $end
$var wire 1 !' newPC [6] $end
$var wire 1 "' newPC [5] $end
$var wire 1 #' newPC [4] $end
$var wire 1 $' newPC [3] $end
$var wire 1 %' newPC [2] $end
$var wire 1 &' newPC [1] $end
$var wire 1 '' newPC [0] $end
$var wire 1 V& MemRead [15] $end
$var wire 1 W& MemRead [14] $end
$var wire 1 X& MemRead [13] $end
$var wire 1 Y& MemRead [12] $end
$var wire 1 Z& MemRead [11] $end
$var wire 1 [& MemRead [10] $end
$var wire 1 \& MemRead [9] $end
$var wire 1 ]& MemRead [8] $end
$var wire 1 ^& MemRead [7] $end
$var wire 1 _& MemRead [6] $end
$var wire 1 `& MemRead [5] $end
$var wire 1 a& MemRead [4] $end
$var wire 1 b& MemRead [3] $end
$var wire 1 c& MemRead [2] $end
$var wire 1 d& MemRead [1] $end
$var wire 1 e& MemRead [0] $end
$var wire 1 U) mem_halt $end
$var wire 1 ;C MuxImmSrc [15] $end
$var wire 1 <C MuxImmSrc [14] $end
$var wire 1 =C MuxImmSrc [13] $end
$var wire 1 >C MuxImmSrc [12] $end
$var wire 1 ?C MuxImmSrc [11] $end
$var wire 1 @C MuxImmSrc [10] $end
$var wire 1 AC MuxImmSrc [9] $end
$var wire 1 BC MuxImmSrc [8] $end
$var wire 1 CC MuxImmSrc [7] $end
$var wire 1 DC MuxImmSrc [6] $end
$var wire 1 EC MuxImmSrc [5] $end
$var wire 1 FC MuxImmSrc [4] $end
$var wire 1 GC MuxImmSrc [3] $end
$var wire 1 HC MuxImmSrc [2] $end
$var wire 1 IC MuxImmSrc [1] $end
$var wire 1 JC MuxImmSrc [0] $end
$var wire 1 KC adderOut [15] $end
$var wire 1 LC adderOut [14] $end
$var wire 1 MC adderOut [13] $end
$var wire 1 NC adderOut [12] $end
$var wire 1 OC adderOut [11] $end
$var wire 1 PC adderOut [10] $end
$var wire 1 QC adderOut [9] $end
$var wire 1 RC adderOut [8] $end
$var wire 1 SC adderOut [7] $end
$var wire 1 TC adderOut [6] $end
$var wire 1 UC adderOut [5] $end
$var wire 1 VC adderOut [4] $end
$var wire 1 WC adderOut [3] $end
$var wire 1 XC adderOut [2] $end
$var wire 1 YC adderOut [1] $end
$var wire 1 ZC adderOut [0] $end
$var wire 1 [C MuxBranchSrc [15] $end
$var wire 1 \C MuxBranchSrc [14] $end
$var wire 1 ]C MuxBranchSrc [13] $end
$var wire 1 ^C MuxBranchSrc [12] $end
$var wire 1 _C MuxBranchSrc [11] $end
$var wire 1 `C MuxBranchSrc [10] $end
$var wire 1 aC MuxBranchSrc [9] $end
$var wire 1 bC MuxBranchSrc [8] $end
$var wire 1 cC MuxBranchSrc [7] $end
$var wire 1 dC MuxBranchSrc [6] $end
$var wire 1 eC MuxBranchSrc [5] $end
$var wire 1 fC MuxBranchSrc [4] $end
$var wire 1 gC MuxBranchSrc [3] $end
$var wire 1 hC MuxBranchSrc [2] $end
$var wire 1 iC MuxBranchSrc [1] $end
$var wire 1 jC MuxBranchSrc [0] $end
$var wire 1 T) mem_stall $end
$var wire 1 kC done $end
$var wire 1 lC stall $end
$var wire 1 mC cachehit $end
$var wire 1 nC write_done $end
$var wire 1 oC read_done $end

$scope module fa $end
$var wire 1 0& A [15] $end
$var wire 1 1& A [14] $end
$var wire 1 2& A [13] $end
$var wire 1 3& A [12] $end
$var wire 1 4& A [11] $end
$var wire 1 5& A [10] $end
$var wire 1 6& A [9] $end
$var wire 1 7& A [8] $end
$var wire 1 8& A [7] $end
$var wire 1 9& A [6] $end
$var wire 1 :& A [5] $end
$var wire 1 ;& A [4] $end
$var wire 1 <& A [3] $end
$var wire 1 =& A [2] $end
$var wire 1 >& A [1] $end
$var wire 1 ?& A [0] $end
$var wire 1 ;C B [15] $end
$var wire 1 <C B [14] $end
$var wire 1 =C B [13] $end
$var wire 1 >C B [12] $end
$var wire 1 ?C B [11] $end
$var wire 1 @C B [10] $end
$var wire 1 AC B [9] $end
$var wire 1 BC B [8] $end
$var wire 1 CC B [7] $end
$var wire 1 DC B [6] $end
$var wire 1 EC B [5] $end
$var wire 1 FC B [4] $end
$var wire 1 GC B [3] $end
$var wire 1 HC B [2] $end
$var wire 1 IC B [1] $end
$var wire 1 JC B [0] $end
$var wire 1 KC S [15] $end
$var wire 1 LC S [14] $end
$var wire 1 MC S [13] $end
$var wire 1 NC S [12] $end
$var wire 1 OC S [11] $end
$var wire 1 PC S [10] $end
$var wire 1 QC S [9] $end
$var wire 1 RC S [8] $end
$var wire 1 SC S [7] $end
$var wire 1 TC S [6] $end
$var wire 1 UC S [5] $end
$var wire 1 VC S [4] $end
$var wire 1 WC S [3] $end
$var wire 1 XC S [2] $end
$var wire 1 YC S [1] $end
$var wire 1 ZC S [0] $end
$var wire 1 pC Cout $end
$var wire 1 qC Cout0 $end
$var wire 1 rC Cout1 $end
$var wire 1 sC Cout2 $end
$var wire 1 tC Cin $end

$scope module f1 $end
$var wire 1 <& A [3] $end
$var wire 1 =& A [2] $end
$var wire 1 >& A [1] $end
$var wire 1 ?& A [0] $end
$var wire 1 GC B [3] $end
$var wire 1 HC B [2] $end
$var wire 1 IC B [1] $end
$var wire 1 JC B [0] $end
$var wire 1 tC Cin $end
$var wire 1 WC S [3] $end
$var wire 1 XC S [2] $end
$var wire 1 YC S [1] $end
$var wire 1 ZC S [0] $end
$var wire 1 qC Cout $end
$var wire 1 uC Cout0 $end
$var wire 1 vC Cout1 $end
$var wire 1 wC Cout2 $end

$scope module f1 $end
$var wire 1 ?& A $end
$var wire 1 JC B $end
$var wire 1 tC Cin $end
$var wire 1 ZC S $end
$var wire 1 uC Cout $end
$var wire 1 xC xor_AB $end
$var wire 1 yC xor_ABCin $end
$var wire 1 zC NAND_AB $end
$var wire 1 {C not_NAND_AB $end
$var wire 1 |C NAND_Cin_xor_AB $end
$var wire 1 }C not_NAND_Cin_xor_AB $end
$var wire 1 ~C NOR_2NAND $end
$var wire 1 !D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 JC in2 $end
$var wire 1 xC out $end
$upscope $end

$scope module xor2 $end
$var wire 1 xC in1 $end
$var wire 1 tC in2 $end
$var wire 1 yC out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 JC in2 $end
$var wire 1 zC out $end
$upscope $end

$scope module not1 $end
$var wire 1 zC in1 $end
$var wire 1 {C out $end
$upscope $end

$scope module nand2 $end
$var wire 1 tC in1 $end
$var wire 1 xC in2 $end
$var wire 1 |C out $end
$upscope $end

$scope module not2 $end
$var wire 1 |C in1 $end
$var wire 1 }C out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {C in1 $end
$var wire 1 }C in2 $end
$var wire 1 ~C out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~C in1 $end
$var wire 1 !D out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 >& A $end
$var wire 1 IC B $end
$var wire 1 uC Cin $end
$var wire 1 YC S $end
$var wire 1 vC Cout $end
$var wire 1 "D xor_AB $end
$var wire 1 #D xor_ABCin $end
$var wire 1 $D NAND_AB $end
$var wire 1 %D not_NAND_AB $end
$var wire 1 &D NAND_Cin_xor_AB $end
$var wire 1 'D not_NAND_Cin_xor_AB $end
$var wire 1 (D NOR_2NAND $end
$var wire 1 )D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 IC in2 $end
$var wire 1 "D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 "D in1 $end
$var wire 1 uC in2 $end
$var wire 1 #D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 IC in2 $end
$var wire 1 $D out $end
$upscope $end

$scope module not1 $end
$var wire 1 $D in1 $end
$var wire 1 %D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 uC in1 $end
$var wire 1 "D in2 $end
$var wire 1 &D out $end
$upscope $end

$scope module not2 $end
$var wire 1 &D in1 $end
$var wire 1 'D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 %D in1 $end
$var wire 1 'D in2 $end
$var wire 1 (D out $end
$upscope $end

$scope module not3 $end
$var wire 1 (D in1 $end
$var wire 1 )D out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 =& A $end
$var wire 1 HC B $end
$var wire 1 vC Cin $end
$var wire 1 XC S $end
$var wire 1 wC Cout $end
$var wire 1 *D xor_AB $end
$var wire 1 +D xor_ABCin $end
$var wire 1 ,D NAND_AB $end
$var wire 1 -D not_NAND_AB $end
$var wire 1 .D NAND_Cin_xor_AB $end
$var wire 1 /D not_NAND_Cin_xor_AB $end
$var wire 1 0D NOR_2NAND $end
$var wire 1 1D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 HC in2 $end
$var wire 1 *D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 *D in1 $end
$var wire 1 vC in2 $end
$var wire 1 +D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 HC in2 $end
$var wire 1 ,D out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,D in1 $end
$var wire 1 -D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 vC in1 $end
$var wire 1 *D in2 $end
$var wire 1 .D out $end
$upscope $end

$scope module not2 $end
$var wire 1 .D in1 $end
$var wire 1 /D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -D in1 $end
$var wire 1 /D in2 $end
$var wire 1 0D out $end
$upscope $end

$scope module not3 $end
$var wire 1 0D in1 $end
$var wire 1 1D out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 <& A $end
$var wire 1 GC B $end
$var wire 1 wC Cin $end
$var wire 1 WC S $end
$var wire 1 qC Cout $end
$var wire 1 2D xor_AB $end
$var wire 1 3D xor_ABCin $end
$var wire 1 4D NAND_AB $end
$var wire 1 5D not_NAND_AB $end
$var wire 1 6D NAND_Cin_xor_AB $end
$var wire 1 7D not_NAND_Cin_xor_AB $end
$var wire 1 8D NOR_2NAND $end
$var wire 1 9D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 GC in2 $end
$var wire 1 2D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 2D in1 $end
$var wire 1 wC in2 $end
$var wire 1 3D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 GC in2 $end
$var wire 1 4D out $end
$upscope $end

$scope module not1 $end
$var wire 1 4D in1 $end
$var wire 1 5D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 wC in1 $end
$var wire 1 2D in2 $end
$var wire 1 6D out $end
$upscope $end

$scope module not2 $end
$var wire 1 6D in1 $end
$var wire 1 7D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 5D in1 $end
$var wire 1 7D in2 $end
$var wire 1 8D out $end
$upscope $end

$scope module not3 $end
$var wire 1 8D in1 $end
$var wire 1 9D out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A [3] $end
$var wire 1 9& A [2] $end
$var wire 1 :& A [1] $end
$var wire 1 ;& A [0] $end
$var wire 1 CC B [3] $end
$var wire 1 DC B [2] $end
$var wire 1 EC B [1] $end
$var wire 1 FC B [0] $end
$var wire 1 qC Cin $end
$var wire 1 SC S [3] $end
$var wire 1 TC S [2] $end
$var wire 1 UC S [1] $end
$var wire 1 VC S [0] $end
$var wire 1 rC Cout $end
$var wire 1 :D Cout0 $end
$var wire 1 ;D Cout1 $end
$var wire 1 <D Cout2 $end

$scope module f1 $end
$var wire 1 ;& A $end
$var wire 1 FC B $end
$var wire 1 qC Cin $end
$var wire 1 VC S $end
$var wire 1 :D Cout $end
$var wire 1 =D xor_AB $end
$var wire 1 >D xor_ABCin $end
$var wire 1 ?D NAND_AB $end
$var wire 1 @D not_NAND_AB $end
$var wire 1 AD NAND_Cin_xor_AB $end
$var wire 1 BD not_NAND_Cin_xor_AB $end
$var wire 1 CD NOR_2NAND $end
$var wire 1 DD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 FC in2 $end
$var wire 1 =D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 =D in1 $end
$var wire 1 qC in2 $end
$var wire 1 >D out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 FC in2 $end
$var wire 1 ?D out $end
$upscope $end

$scope module not1 $end
$var wire 1 ?D in1 $end
$var wire 1 @D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 qC in1 $end
$var wire 1 =D in2 $end
$var wire 1 AD out $end
$upscope $end

$scope module not2 $end
$var wire 1 AD in1 $end
$var wire 1 BD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 @D in1 $end
$var wire 1 BD in2 $end
$var wire 1 CD out $end
$upscope $end

$scope module not3 $end
$var wire 1 CD in1 $end
$var wire 1 DD out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A $end
$var wire 1 EC B $end
$var wire 1 :D Cin $end
$var wire 1 UC S $end
$var wire 1 ;D Cout $end
$var wire 1 ED xor_AB $end
$var wire 1 FD xor_ABCin $end
$var wire 1 GD NAND_AB $end
$var wire 1 HD not_NAND_AB $end
$var wire 1 ID NAND_Cin_xor_AB $end
$var wire 1 JD not_NAND_Cin_xor_AB $end
$var wire 1 KD NOR_2NAND $end
$var wire 1 LD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 EC in2 $end
$var wire 1 ED out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ED in1 $end
$var wire 1 :D in2 $end
$var wire 1 FD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 EC in2 $end
$var wire 1 GD out $end
$upscope $end

$scope module not1 $end
$var wire 1 GD in1 $end
$var wire 1 HD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :D in1 $end
$var wire 1 ED in2 $end
$var wire 1 ID out $end
$upscope $end

$scope module not2 $end
$var wire 1 ID in1 $end
$var wire 1 JD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 HD in1 $end
$var wire 1 JD in2 $end
$var wire 1 KD out $end
$upscope $end

$scope module not3 $end
$var wire 1 KD in1 $end
$var wire 1 LD out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 9& A $end
$var wire 1 DC B $end
$var wire 1 ;D Cin $end
$var wire 1 TC S $end
$var wire 1 <D Cout $end
$var wire 1 MD xor_AB $end
$var wire 1 ND xor_ABCin $end
$var wire 1 OD NAND_AB $end
$var wire 1 PD not_NAND_AB $end
$var wire 1 QD NAND_Cin_xor_AB $end
$var wire 1 RD not_NAND_Cin_xor_AB $end
$var wire 1 SD NOR_2NAND $end
$var wire 1 TD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 DC in2 $end
$var wire 1 MD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 MD in1 $end
$var wire 1 ;D in2 $end
$var wire 1 ND out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 DC in2 $end
$var wire 1 OD out $end
$upscope $end

$scope module not1 $end
$var wire 1 OD in1 $end
$var wire 1 PD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ;D in1 $end
$var wire 1 MD in2 $end
$var wire 1 QD out $end
$upscope $end

$scope module not2 $end
$var wire 1 QD in1 $end
$var wire 1 RD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 PD in1 $end
$var wire 1 RD in2 $end
$var wire 1 SD out $end
$upscope $end

$scope module not3 $end
$var wire 1 SD in1 $end
$var wire 1 TD out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 8& A $end
$var wire 1 CC B $end
$var wire 1 <D Cin $end
$var wire 1 SC S $end
$var wire 1 rC Cout $end
$var wire 1 UD xor_AB $end
$var wire 1 VD xor_ABCin $end
$var wire 1 WD NAND_AB $end
$var wire 1 XD not_NAND_AB $end
$var wire 1 YD NAND_Cin_xor_AB $end
$var wire 1 ZD not_NAND_Cin_xor_AB $end
$var wire 1 [D NOR_2NAND $end
$var wire 1 \D not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 CC in2 $end
$var wire 1 UD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 UD in1 $end
$var wire 1 <D in2 $end
$var wire 1 VD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 CC in2 $end
$var wire 1 WD out $end
$upscope $end

$scope module not1 $end
$var wire 1 WD in1 $end
$var wire 1 XD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 <D in1 $end
$var wire 1 UD in2 $end
$var wire 1 YD out $end
$upscope $end

$scope module not2 $end
$var wire 1 YD in1 $end
$var wire 1 ZD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 XD in1 $end
$var wire 1 ZD in2 $end
$var wire 1 [D out $end
$upscope $end

$scope module not3 $end
$var wire 1 [D in1 $end
$var wire 1 \D out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 4& A [3] $end
$var wire 1 5& A [2] $end
$var wire 1 6& A [1] $end
$var wire 1 7& A [0] $end
$var wire 1 ?C B [3] $end
$var wire 1 @C B [2] $end
$var wire 1 AC B [1] $end
$var wire 1 BC B [0] $end
$var wire 1 rC Cin $end
$var wire 1 OC S [3] $end
$var wire 1 PC S [2] $end
$var wire 1 QC S [1] $end
$var wire 1 RC S [0] $end
$var wire 1 sC Cout $end
$var wire 1 ]D Cout0 $end
$var wire 1 ^D Cout1 $end
$var wire 1 _D Cout2 $end

$scope module f1 $end
$var wire 1 7& A $end
$var wire 1 BC B $end
$var wire 1 rC Cin $end
$var wire 1 RC S $end
$var wire 1 ]D Cout $end
$var wire 1 `D xor_AB $end
$var wire 1 aD xor_ABCin $end
$var wire 1 bD NAND_AB $end
$var wire 1 cD not_NAND_AB $end
$var wire 1 dD NAND_Cin_xor_AB $end
$var wire 1 eD not_NAND_Cin_xor_AB $end
$var wire 1 fD NOR_2NAND $end
$var wire 1 gD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 BC in2 $end
$var wire 1 `D out $end
$upscope $end

$scope module xor2 $end
$var wire 1 `D in1 $end
$var wire 1 rC in2 $end
$var wire 1 aD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 BC in2 $end
$var wire 1 bD out $end
$upscope $end

$scope module not1 $end
$var wire 1 bD in1 $end
$var wire 1 cD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 rC in1 $end
$var wire 1 `D in2 $end
$var wire 1 dD out $end
$upscope $end

$scope module not2 $end
$var wire 1 dD in1 $end
$var wire 1 eD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 cD in1 $end
$var wire 1 eD in2 $end
$var wire 1 fD out $end
$upscope $end

$scope module not3 $end
$var wire 1 fD in1 $end
$var wire 1 gD out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 6& A $end
$var wire 1 AC B $end
$var wire 1 ]D Cin $end
$var wire 1 QC S $end
$var wire 1 ^D Cout $end
$var wire 1 hD xor_AB $end
$var wire 1 iD xor_ABCin $end
$var wire 1 jD NAND_AB $end
$var wire 1 kD not_NAND_AB $end
$var wire 1 lD NAND_Cin_xor_AB $end
$var wire 1 mD not_NAND_Cin_xor_AB $end
$var wire 1 nD NOR_2NAND $end
$var wire 1 oD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 AC in2 $end
$var wire 1 hD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 hD in1 $end
$var wire 1 ]D in2 $end
$var wire 1 iD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 AC in2 $end
$var wire 1 jD out $end
$upscope $end

$scope module not1 $end
$var wire 1 jD in1 $end
$var wire 1 kD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]D in1 $end
$var wire 1 hD in2 $end
$var wire 1 lD out $end
$upscope $end

$scope module not2 $end
$var wire 1 lD in1 $end
$var wire 1 mD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 kD in1 $end
$var wire 1 mD in2 $end
$var wire 1 nD out $end
$upscope $end

$scope module not3 $end
$var wire 1 nD in1 $end
$var wire 1 oD out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 5& A $end
$var wire 1 @C B $end
$var wire 1 ^D Cin $end
$var wire 1 PC S $end
$var wire 1 _D Cout $end
$var wire 1 pD xor_AB $end
$var wire 1 qD xor_ABCin $end
$var wire 1 rD NAND_AB $end
$var wire 1 sD not_NAND_AB $end
$var wire 1 tD NAND_Cin_xor_AB $end
$var wire 1 uD not_NAND_Cin_xor_AB $end
$var wire 1 vD NOR_2NAND $end
$var wire 1 wD not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 @C in2 $end
$var wire 1 pD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 pD in1 $end
$var wire 1 ^D in2 $end
$var wire 1 qD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 @C in2 $end
$var wire 1 rD out $end
$upscope $end

$scope module not1 $end
$var wire 1 rD in1 $end
$var wire 1 sD out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ^D in1 $end
$var wire 1 pD in2 $end
$var wire 1 tD out $end
$upscope $end

$scope module not2 $end
$var wire 1 tD in1 $end
$var wire 1 uD out $end
$upscope $end

$scope module nor1 $end
$var wire 1 sD in1 $end
$var wire 1 uD in2 $end
$var wire 1 vD out $end
$upscope $end

$scope module not3 $end
$var wire 1 vD in1 $end
$var wire 1 wD out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 4& A $end
$var wire 1 ?C B $end
$var wire 1 _D Cin $end
$var wire 1 OC S $end
$var wire 1 sC Cout $end
$var wire 1 xD xor_AB $end
$var wire 1 yD xor_ABCin $end
$var wire 1 zD NAND_AB $end
$var wire 1 {D not_NAND_AB $end
$var wire 1 |D NAND_Cin_xor_AB $end
$var wire 1 }D not_NAND_Cin_xor_AB $end
$var wire 1 ~D NOR_2NAND $end
$var wire 1 !E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 ?C in2 $end
$var wire 1 xD out $end
$upscope $end

$scope module xor2 $end
$var wire 1 xD in1 $end
$var wire 1 _D in2 $end
$var wire 1 yD out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 ?C in2 $end
$var wire 1 zD out $end
$upscope $end

$scope module not1 $end
$var wire 1 zD in1 $end
$var wire 1 {D out $end
$upscope $end

$scope module nand2 $end
$var wire 1 _D in1 $end
$var wire 1 xD in2 $end
$var wire 1 |D out $end
$upscope $end

$scope module not2 $end
$var wire 1 |D in1 $end
$var wire 1 }D out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {D in1 $end
$var wire 1 }D in2 $end
$var wire 1 ~D out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~D in1 $end
$var wire 1 !E out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 0& A [3] $end
$var wire 1 1& A [2] $end
$var wire 1 2& A [1] $end
$var wire 1 3& A [0] $end
$var wire 1 ;C B [3] $end
$var wire 1 <C B [2] $end
$var wire 1 =C B [1] $end
$var wire 1 >C B [0] $end
$var wire 1 sC Cin $end
$var wire 1 KC S [3] $end
$var wire 1 LC S [2] $end
$var wire 1 MC S [1] $end
$var wire 1 NC S [0] $end
$var wire 1 pC Cout $end
$var wire 1 "E Cout0 $end
$var wire 1 #E Cout1 $end
$var wire 1 $E Cout2 $end

$scope module f1 $end
$var wire 1 3& A $end
$var wire 1 >C B $end
$var wire 1 sC Cin $end
$var wire 1 NC S $end
$var wire 1 "E Cout $end
$var wire 1 %E xor_AB $end
$var wire 1 &E xor_ABCin $end
$var wire 1 'E NAND_AB $end
$var wire 1 (E not_NAND_AB $end
$var wire 1 )E NAND_Cin_xor_AB $end
$var wire 1 *E not_NAND_Cin_xor_AB $end
$var wire 1 +E NOR_2NAND $end
$var wire 1 ,E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 >C in2 $end
$var wire 1 %E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %E in1 $end
$var wire 1 sC in2 $end
$var wire 1 &E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 >C in2 $end
$var wire 1 'E out $end
$upscope $end

$scope module not1 $end
$var wire 1 'E in1 $end
$var wire 1 (E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 sC in1 $end
$var wire 1 %E in2 $end
$var wire 1 )E out $end
$upscope $end

$scope module not2 $end
$var wire 1 )E in1 $end
$var wire 1 *E out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (E in1 $end
$var wire 1 *E in2 $end
$var wire 1 +E out $end
$upscope $end

$scope module not3 $end
$var wire 1 +E in1 $end
$var wire 1 ,E out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 2& A $end
$var wire 1 =C B $end
$var wire 1 "E Cin $end
$var wire 1 MC S $end
$var wire 1 #E Cout $end
$var wire 1 -E xor_AB $end
$var wire 1 .E xor_ABCin $end
$var wire 1 /E NAND_AB $end
$var wire 1 0E not_NAND_AB $end
$var wire 1 1E NAND_Cin_xor_AB $end
$var wire 1 2E not_NAND_Cin_xor_AB $end
$var wire 1 3E NOR_2NAND $end
$var wire 1 4E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 =C in2 $end
$var wire 1 -E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -E in1 $end
$var wire 1 "E in2 $end
$var wire 1 .E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 =C in2 $end
$var wire 1 /E out $end
$upscope $end

$scope module not1 $end
$var wire 1 /E in1 $end
$var wire 1 0E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "E in1 $end
$var wire 1 -E in2 $end
$var wire 1 1E out $end
$upscope $end

$scope module not2 $end
$var wire 1 1E in1 $end
$var wire 1 2E out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0E in1 $end
$var wire 1 2E in2 $end
$var wire 1 3E out $end
$upscope $end

$scope module not3 $end
$var wire 1 3E in1 $end
$var wire 1 4E out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 1& A $end
$var wire 1 <C B $end
$var wire 1 #E Cin $end
$var wire 1 LC S $end
$var wire 1 $E Cout $end
$var wire 1 5E xor_AB $end
$var wire 1 6E xor_ABCin $end
$var wire 1 7E NAND_AB $end
$var wire 1 8E not_NAND_AB $end
$var wire 1 9E NAND_Cin_xor_AB $end
$var wire 1 :E not_NAND_Cin_xor_AB $end
$var wire 1 ;E NOR_2NAND $end
$var wire 1 <E not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 1& in1 $end
$var wire 1 <C in2 $end
$var wire 1 5E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5E in1 $end
$var wire 1 #E in2 $end
$var wire 1 6E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 1& in1 $end
$var wire 1 <C in2 $end
$var wire 1 7E out $end
$upscope $end

$scope module not1 $end
$var wire 1 7E in1 $end
$var wire 1 8E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #E in1 $end
$var wire 1 5E in2 $end
$var wire 1 9E out $end
$upscope $end

$scope module not2 $end
$var wire 1 9E in1 $end
$var wire 1 :E out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8E in1 $end
$var wire 1 :E in2 $end
$var wire 1 ;E out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;E in1 $end
$var wire 1 <E out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 0& A $end
$var wire 1 ;C B $end
$var wire 1 $E Cin $end
$var wire 1 KC S $end
$var wire 1 pC Cout $end
$var wire 1 =E xor_AB $end
$var wire 1 >E xor_ABCin $end
$var wire 1 ?E NAND_AB $end
$var wire 1 @E not_NAND_AB $end
$var wire 1 AE NAND_Cin_xor_AB $end
$var wire 1 BE not_NAND_Cin_xor_AB $end
$var wire 1 CE NOR_2NAND $end
$var wire 1 DE not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 0& in1 $end
$var wire 1 ;C in2 $end
$var wire 1 =E out $end
$upscope $end

$scope module xor2 $end
$var wire 1 =E in1 $end
$var wire 1 $E in2 $end
$var wire 1 >E out $end
$upscope $end

$scope module nand1 $end
$var wire 1 0& in1 $end
$var wire 1 ;C in2 $end
$var wire 1 ?E out $end
$upscope $end

$scope module not1 $end
$var wire 1 ?E in1 $end
$var wire 1 @E out $end
$upscope $end

$scope module nand2 $end
$var wire 1 $E in1 $end
$var wire 1 =E in2 $end
$var wire 1 AE out $end
$upscope $end

$scope module not2 $end
$var wire 1 AE in1 $end
$var wire 1 BE out $end
$upscope $end

$scope module nor1 $end
$var wire 1 @E in1 $end
$var wire 1 BE in2 $end
$var wire 1 CE out $end
$upscope $end

$scope module not3 $end
$var wire 1 CE in1 $end
$var wire 1 DE out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 V& DataOut [15] $end
$var wire 1 W& DataOut [14] $end
$var wire 1 X& DataOut [13] $end
$var wire 1 Y& DataOut [12] $end
$var wire 1 Z& DataOut [11] $end
$var wire 1 [& DataOut [10] $end
$var wire 1 \& DataOut [9] $end
$var wire 1 ]& DataOut [8] $end
$var wire 1 ^& DataOut [7] $end
$var wire 1 _& DataOut [6] $end
$var wire 1 `& DataOut [5] $end
$var wire 1 a& DataOut [4] $end
$var wire 1 b& DataOut [3] $end
$var wire 1 c& DataOut [2] $end
$var wire 1 d& DataOut [1] $end
$var wire 1 e& DataOut [0] $end
$var wire 1 kC Done $end
$var wire 1 lC Stall $end
$var wire 1 mC CacheHit $end
$var wire 1 ~% DataIn [15] $end
$var wire 1 !& DataIn [14] $end
$var wire 1 "& DataIn [13] $end
$var wire 1 #& DataIn [12] $end
$var wire 1 $& DataIn [11] $end
$var wire 1 %& DataIn [10] $end
$var wire 1 && DataIn [9] $end
$var wire 1 '& DataIn [8] $end
$var wire 1 (& DataIn [7] $end
$var wire 1 )& DataIn [6] $end
$var wire 1 *& DataIn [5] $end
$var wire 1 +& DataIn [4] $end
$var wire 1 ,& DataIn [3] $end
$var wire 1 -& DataIn [2] $end
$var wire 1 .& DataIn [1] $end
$var wire 1 /& DataIn [0] $end
$var wire 1 9% Addr [15] $end
$var wire 1 :% Addr [14] $end
$var wire 1 ;% Addr [13] $end
$var wire 1 <% Addr [12] $end
$var wire 1 =% Addr [11] $end
$var wire 1 >% Addr [10] $end
$var wire 1 ?% Addr [9] $end
$var wire 1 @% Addr [8] $end
$var wire 1 A% Addr [7] $end
$var wire 1 B% Addr [6] $end
$var wire 1 C% Addr [5] $end
$var wire 1 D% Addr [4] $end
$var wire 1 E% Addr [3] $end
$var wire 1 F% Addr [2] $end
$var wire 1 G% Addr [1] $end
$var wire 1 H% Addr [0] $end
$var wire 1 l% Wr $end
$var wire 1 d' Rd $end
$var wire 1 m% createdump $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 U) err $end
$var wire 1 HE ready $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$var wire 1 T) mem_stall $end
$var wire 1 n( fetch_stall $end
$var wire 1 V& MemRead_in [15] $end
$var wire 1 W& MemRead_in [14] $end
$var wire 1 X& MemRead_in [13] $end
$var wire 1 Y& MemRead_in [12] $end
$var wire 1 Z& MemRead_in [11] $end
$var wire 1 [& MemRead_in [10] $end
$var wire 1 \& MemRead_in [9] $end
$var wire 1 ]& MemRead_in [8] $end
$var wire 1 ^& MemRead_in [7] $end
$var wire 1 _& MemRead_in [6] $end
$var wire 1 `& MemRead_in [5] $end
$var wire 1 a& MemRead_in [4] $end
$var wire 1 b& MemRead_in [3] $end
$var wire 1 c& MemRead_in [2] $end
$var wire 1 d& MemRead_in [1] $end
$var wire 1 e& MemRead_in [0] $end
$var wire 1 f& mem_data_out [15] $end
$var wire 1 g& mem_data_out [14] $end
$var wire 1 h& mem_data_out [13] $end
$var wire 1 i& mem_data_out [12] $end
$var wire 1 j& mem_data_out [11] $end
$var wire 1 k& mem_data_out [10] $end
$var wire 1 l& mem_data_out [9] $end
$var wire 1 m& mem_data_out [8] $end
$var wire 1 n& mem_data_out [7] $end
$var wire 1 o& mem_data_out [6] $end
$var wire 1 p& mem_data_out [5] $end
$var wire 1 q& mem_data_out [4] $end
$var wire 1 r& mem_data_out [3] $end
$var wire 1 s& mem_data_out [2] $end
$var wire 1 t& mem_data_out [1] $end
$var wire 1 u& mem_data_out [0] $end
$var wire 1 Q& RegSrc_in [1] $end
$var wire 1 R& RegSrc_in [0] $end
$var wire 1 8' RegSrc_out [1] $end
$var wire 1 9' RegSrc_out [0] $end
$var wire 1 9% alu_data_in [15] $end
$var wire 1 :% alu_data_in [14] $end
$var wire 1 ;% alu_data_in [13] $end
$var wire 1 <% alu_data_in [12] $end
$var wire 1 =% alu_data_in [11] $end
$var wire 1 >% alu_data_in [10] $end
$var wire 1 ?% alu_data_in [9] $end
$var wire 1 @% alu_data_in [8] $end
$var wire 1 A% alu_data_in [7] $end
$var wire 1 B% alu_data_in [6] $end
$var wire 1 C% alu_data_in [5] $end
$var wire 1 D% alu_data_in [4] $end
$var wire 1 E% alu_data_in [3] $end
$var wire 1 F% alu_data_in [2] $end
$var wire 1 G% alu_data_in [1] $end
$var wire 1 H% alu_data_in [0] $end
$var wire 1 0& pc_data_in [15] $end
$var wire 1 1& pc_data_in [14] $end
$var wire 1 2& pc_data_in [13] $end
$var wire 1 3& pc_data_in [12] $end
$var wire 1 4& pc_data_in [11] $end
$var wire 1 5& pc_data_in [10] $end
$var wire 1 6& pc_data_in [9] $end
$var wire 1 7& pc_data_in [8] $end
$var wire 1 8& pc_data_in [7] $end
$var wire 1 9& pc_data_in [6] $end
$var wire 1 :& pc_data_in [5] $end
$var wire 1 ;& pc_data_in [4] $end
$var wire 1 <& pc_data_in [3] $end
$var wire 1 =& pc_data_in [2] $end
$var wire 1 >& pc_data_in [1] $end
$var wire 1 ?& pc_data_in [0] $end
$var wire 1 Y% Binput_in [15] $end
$var wire 1 Z% Binput_in [14] $end
$var wire 1 [% Binput_in [13] $end
$var wire 1 \% Binput_in [12] $end
$var wire 1 ]% Binput_in [11] $end
$var wire 1 ^% Binput_in [10] $end
$var wire 1 _% Binput_in [9] $end
$var wire 1 `% Binput_in [8] $end
$var wire 1 a% Binput_in [7] $end
$var wire 1 b% Binput_in [6] $end
$var wire 1 c% Binput_in [5] $end
$var wire 1 d% Binput_in [4] $end
$var wire 1 e% Binput_in [3] $end
$var wire 1 f% Binput_in [2] $end
$var wire 1 g% Binput_in [1] $end
$var wire 1 h% Binput_in [0] $end
$var wire 1 K' alu_data_out [15] $end
$var wire 1 L' alu_data_out [14] $end
$var wire 1 M' alu_data_out [13] $end
$var wire 1 N' alu_data_out [12] $end
$var wire 1 O' alu_data_out [11] $end
$var wire 1 P' alu_data_out [10] $end
$var wire 1 Q' alu_data_out [9] $end
$var wire 1 R' alu_data_out [8] $end
$var wire 1 S' alu_data_out [7] $end
$var wire 1 T' alu_data_out [6] $end
$var wire 1 U' alu_data_out [5] $end
$var wire 1 V' alu_data_out [4] $end
$var wire 1 W' alu_data_out [3] $end
$var wire 1 X' alu_data_out [2] $end
$var wire 1 Y' alu_data_out [1] $end
$var wire 1 Z' alu_data_out [0] $end
$var wire 1 (' pc_data_out [15] $end
$var wire 1 )' pc_data_out [14] $end
$var wire 1 *' pc_data_out [13] $end
$var wire 1 +' pc_data_out [12] $end
$var wire 1 ,' pc_data_out [11] $end
$var wire 1 -' pc_data_out [10] $end
$var wire 1 .' pc_data_out [9] $end
$var wire 1 /' pc_data_out [8] $end
$var wire 1 0' pc_data_out [7] $end
$var wire 1 1' pc_data_out [6] $end
$var wire 1 2' pc_data_out [5] $end
$var wire 1 3' pc_data_out [4] $end
$var wire 1 4' pc_data_out [3] $end
$var wire 1 5' pc_data_out [2] $end
$var wire 1 6' pc_data_out [1] $end
$var wire 1 7' pc_data_out [0] $end
$var wire 1 :' Binput_out [15] $end
$var wire 1 ;' Binput_out [14] $end
$var wire 1 <' Binput_out [13] $end
$var wire 1 =' Binput_out [12] $end
$var wire 1 >' Binput_out [11] $end
$var wire 1 ?' Binput_out [10] $end
$var wire 1 @' Binput_out [9] $end
$var wire 1 A' Binput_out [8] $end
$var wire 1 B' Binput_out [7] $end
$var wire 1 C' Binput_out [6] $end
$var wire 1 D' Binput_out [5] $end
$var wire 1 E' Binput_out [4] $end
$var wire 1 F' Binput_out [3] $end
$var wire 1 G' Binput_out [2] $end
$var wire 1 H' Binput_out [1] $end
$var wire 1 I' Binput_out [0] $end
$var wire 1 P& RegWrt_in $end
$var wire 1 J' RegWrt_out $end
$var wire 1 ?) SendNOP_In $end
$var wire 1 @) SendNOP_Out $end
$var wire 1 S& write_reg_in [2] $end
$var wire 1 T& write_reg_in [1] $end
$var wire 1 U& write_reg_in [0] $end
$var wire 1 [' write_reg_out [2] $end
$var wire 1 \' write_reg_out [1] $end
$var wire 1 ]' write_reg_out [0] $end
$var wire 1 i% b_in $end
$var wire 1 ^' b_out $end

$scope module RegWrt $end
$var wire 1 J' q $end
$var wire 1 LE d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 @) q $end
$var wire 1 ?) d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module branch $end
$var wire 1 ^' q $end
$var wire 1 i% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 8' q $end
$var wire 1 Q& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 9' q $end
$var wire 1 R& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 f& q $end
$var wire 1 V& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 g& q $end
$var wire 1 W& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 K' q $end
$var wire 1 9% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 L' q $end
$var wire 1 :% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 (' q $end
$var wire 1 0& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 )' q $end
$var wire 1 1& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 :' q $end
$var wire 1 Y% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 ;' q $end
$var wire 1 Z% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 [' q $end
$var wire 1 S& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 \' q $end
$var wire 1 T& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 5! clk $end
$var wire 1 7! rst $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 8' RegSrc [1] $end
$var wire 1 9' RegSrc [0] $end
$var wire 1 f& mem_data [15] $end
$var wire 1 g& mem_data [14] $end
$var wire 1 h& mem_data [13] $end
$var wire 1 i& mem_data [12] $end
$var wire 1 j& mem_data [11] $end
$var wire 1 k& mem_data [10] $end
$var wire 1 l& mem_data [9] $end
$var wire 1 m& mem_data [8] $end
$var wire 1 n& mem_data [7] $end
$var wire 1 o& mem_data [6] $end
$var wire 1 p& mem_data [5] $end
$var wire 1 q& mem_data [4] $end
$var wire 1 r& mem_data [3] $end
$var wire 1 s& mem_data [2] $end
$var wire 1 t& mem_data [1] $end
$var wire 1 u& mem_data [0] $end
$var wire 1 K' alu_data [15] $end
$var wire 1 L' alu_data [14] $end
$var wire 1 M' alu_data [13] $end
$var wire 1 N' alu_data [12] $end
$var wire 1 O' alu_data [11] $end
$var wire 1 P' alu_data [10] $end
$var wire 1 Q' alu_data [9] $end
$var wire 1 R' alu_data [8] $end
$var wire 1 S' alu_data [7] $end
$var wire 1 T' alu_data [6] $end
$var wire 1 U' alu_data [5] $end
$var wire 1 V' alu_data [4] $end
$var wire 1 W' alu_data [3] $end
$var wire 1 X' alu_data [2] $end
$var wire 1 Y' alu_data [1] $end
$var wire 1 Z' alu_data [0] $end
$var wire 1 (' pc_data [15] $end
$var wire 1 )' pc_data [14] $end
$var wire 1 *' pc_data [13] $end
$var wire 1 +' pc_data [12] $end
$var wire 1 ,' pc_data [11] $end
$var wire 1 -' pc_data [10] $end
$var wire 1 .' pc_data [9] $end
$var wire 1 /' pc_data [8] $end
$var wire 1 0' pc_data [7] $end
$var wire 1 1' pc_data [6] $end
$var wire 1 2' pc_data [5] $end
$var wire 1 3' pc_data [4] $end
$var wire 1 4' pc_data [3] $end
$var wire 1 5' pc_data [2] $end
$var wire 1 6' pc_data [1] $end
$var wire 1 7' pc_data [0] $end
$var wire 1 :' Binput [15] $end
$var wire 1 ;' Binput [14] $end
$var wire 1 <' Binput [13] $end
$var wire 1 =' Binput [12] $end
$var wire 1 >' Binput [11] $end
$var wire 1 ?' Binput [10] $end
$var wire 1 @' Binput [9] $end
$var wire 1 A' Binput [8] $end
$var wire 1 B' Binput [7] $end
$var wire 1 C' Binput [6] $end
$var wire 1 D' Binput [5] $end
$var wire 1 E' Binput [4] $end
$var wire 1 F' Binput [3] $end
$var wire 1 G' Binput [2] $end
$var wire 1 H' Binput [1] $end
$var wire 1 I' Binput [0] $end
$var wire 1 <! data_to_write [15] $end
$var wire 1 =! data_to_write [14] $end
$var wire 1 >! data_to_write [13] $end
$var wire 1 ?! data_to_write [12] $end
$var wire 1 @! data_to_write [11] $end
$var wire 1 A! data_to_write [10] $end
$var wire 1 B! data_to_write [9] $end
$var wire 1 C! data_to_write [8] $end
$var wire 1 D! data_to_write [7] $end
$var wire 1 E! data_to_write [6] $end
$var wire 1 F! data_to_write [5] $end
$var wire 1 G! data_to_write [4] $end
$var wire 1 H! data_to_write [3] $end
$var wire 1 I! data_to_write [2] $end
$var wire 1 J! data_to_write [1] $end
$var wire 1 K! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
18!
19!
x;!
1V)
1W)
0Z)
0[)
0\)
0])
0^)
0`)
0a)
0b)
0t+
0s+
0r+
0q+
0p+
0o+
0n+
0m+
0l+
0k+
0j+
0i+
0h+
0g+
0f+
0e+
1^+
b0 _+
b10000000001011110110111000000000 `+
0&,
0%,
0$,
0#,
0",
0!,
0~+
0}+
0|+
0{+
0z+
0y+
0x+
0w+
0v+
0u+
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
0F,
0E,
0D,
0C,
0B,
0A,
0@,
0?,
0>,
0=,
0<,
0;,
0:,
09,
08,
07,
0V,
0U,
0T,
0S,
0R,
0Q,
0P,
0O,
0N,
0M,
0L,
0K,
0J,
0I,
0H,
0G,
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
xI-
xJ-
bx K-
xL-
xM-
bx N-
bx O-
xP-
xQ-
xR-
xS-
xT-
xU-
bx V-
xW-
xX-
bx Y-
bx Z-
x[-
0I/
0G/
0E/
0C/
0A/
0?/
0=/
0;/
09/
07/
05/
03/
01/
0//
0-/
0+/
0j/
0h/
0f/
0d/
0b/
0`/
0^/
0\/
0Z/
0X/
0V/
0T/
0R/
0P/
0N/
0L/
0-0
0+0
0)0
0'0
0%0
0#0
0!0
0}/
0{/
0y/
0w/
0u/
0s/
0q/
0o/
0m/
0N0
0L0
0J0
0H0
0F0
0D0
0B0
0@0
0>0
0<0
0:0
080
060
040
020
000
0o0
0m0
0k0
0i0
0g0
0e0
0c0
0a0
0_0
0]0
0[0
0Y0
0W0
0U0
0S0
0Q0
021
001
0.1
0,1
0*1
0(1
0&1
0$1
0"1
0~0
0|0
0z0
0x0
0v0
0t0
0r0
0S1
0Q1
0O1
0M1
0K1
0I1
0G1
0E1
0C1
0A1
0?1
0=1
0;1
091
071
051
0t1
0r1
0p1
0n1
0l1
0j1
0h1
0f1
0d1
0b1
0`1
0^1
0\1
0Z1
0X1
0V1
0B2
0@2
0(2
0*2
0H2
0F2
0D2
0L2
0J2
0,2
0.2
0R2
0P2
0N2
002
0r2
0p2
0n2
0l2
0j2
0h2
0f2
0d2
0b2
0`2
0^2
0\2
0Z2
0X2
0V2
0T2
043
023
003
0.3
0,3
0*3
0(3
0&3
0$3
0"3
0~2
0|2
0z2
0x2
0v2
0t2
0T3
0R3
0P3
0N3
0L3
0J3
0H3
0F3
0D3
0B3
0@3
0>3
0<3
0:3
083
063
0t3
0r3
0p3
0n3
0l3
0j3
0h3
0f3
0d3
0b3
0`3
0^3
0\3
0Z3
0X3
0V3
064
044
024
004
0.4
0,4
0*4
0(4
0&4
0$4
0"4
0~3
0|3
0z3
0x3
0v3
022
042
062
082
0V4
0T4
0R4
0P4
0N4
0L4
0J4
0H4
0F4
0D4
0B4
0@4
0>4
0<4
0:4
084
0:2
0<2
0Z4
0X4
0z4
0x4
0v4
0t4
0r4
0p4
0n4
0l4
0j4
0h4
0f4
0d4
0b4
0`4
0^4
0\4
0"5
0~4
0|4
0>2
0LA
0JA
0HA
0FA
0DA
0BA
0@A
0>A
0<A
0:A
08A
06A
04A
02A
00A
0.A
0lA
0jA
0hA
0fA
0dA
0bA
0`A
0^A
0\A
0ZA
0XA
0VA
0TA
0RA
0PA
0NA
0z@
0|@
0~@
0"A
0$A
0&A
0.B
0,B
0*B
0(B
0&B
0$B
0"B
0~A
0|A
0zA
0xA
0vA
0tA
0rA
0pA
0nA
0NB
0LB
0JB
0HB
0FB
0DB
0BB
0@B
0>B
0<B
0:B
08B
06B
04B
02B
00B
0nB
0lB
0jB
0hB
0fB
0dB
0bB
0`B
0^B
0\B
0ZB
0XB
0VB
0TB
0RB
0PB
00C
0.C
0,C
0*C
0(C
0&C
0$C
0"C
0~B
0|B
0zB
0xB
0vB
0tB
0rB
0pB
0(A
0*A
04C
02C
0:C
08C
06C
0,A
1EE
b0 FE
b10000000001011110110111000000000 GE
0QE
0PE
0aE
0`E
0_E
0^E
0]E
0\E
0[E
0ZE
0YE
0XE
0WE
0VE
0UE
0TE
0SE
0RE
0qE
0pE
0oE
0nE
0mE
0lE
0kE
0jE
0iE
0hE
0gE
0fE
0eE
0dE
0cE
0bE
0#F
0"F
0!F
0~E
0}E
0|E
0{E
0zE
0yE
0xE
0wE
0vE
0uE
0tE
0sE
0rE
03F
02F
01F
00F
0/F
0.F
0-F
0,F
0+F
0*F
0)F
0(F
0'F
0&F
0%F
0$F
0ME
0NE
06F
05F
04F
0OE
b10000 \-
b10000 )/
b10000 J/
b10000 k/
b10000 .0
b10000 O0
b10000 p0
b10000 31
b10000 T1
b10000 m6
b100 n6
b10 o6
b10000 X7
b100 Y7
b10000 ,8
b100 -8
b10000 ^8
b100 _8
b10000 29
b100 39
b10000 d9
b11 e9
b10000 m:
b100 n:
b10 o:
b10000 R;
b100 S;
b10000 &<
b100 '<
b10000 X<
b100 Y<
b10000 ,=
b100 -=
b10000 ^=
b10 _=
b10000 `=
b100 >>
b100 w>
b100 R?
b100 -@
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 :!
b1 Y)
bx b+
b10000000000000000 c+
b1011110110110100001010 d+
bx IE
b10000000000000000 JE
b1011110110110100001010 KE
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
0U
0V
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
0(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0)!
0*!
0+!
0,!
x-!
15!
x6!
17!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
xL!
z\!
z[!
zZ!
zY!
zX!
zW!
zV!
zU!
zT!
zS!
zR!
zQ!
zP!
zO!
zN!
zM!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
xO"
xP"
xR"
xQ"
xT"
xS"
xU"
xV"
xW"
xX"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
x_$
x^$
x]$
xb$
xa$
x`$
xc$
xd$
xf$
xe$
xh$
xg$
xi$
xj$
xk$
xl$
xo$
xn$
xm$
xr$
xq$
xp$
xs$
xt$
xu$
xv$
xx$
xw$
xz$
xy$
x{$
x|$
x}$
x~$
x#%
x"%
x!%
x&%
x%%
x$%
x'%
x(%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xi%
xj%
xk%
xl%
xm%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
xP&
xR&
xQ&
xU&
xT&
xS&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
0Z&
0Y&
0X&
0W&
0V&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
x9'
x8'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
xJ'
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
xL'
xK'
x]'
x\'
x['
x^'
1_'
x`'
xa'
xb'
xc'
xd'
xe'
zu'
zt'
zs'
zr'
zq'
zp'
zo'
zn'
zm'
zl'
zk'
zj'
zi'
zh'
zg'
zf'
xv'
xw'
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
x9(
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
zI(
zH(
zG(
zF(
zE(
zD(
zC(
zB(
zA(
z@(
z?(
z>(
z=(
z<(
z;(
z:(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xi(
xh(
xg(
xf(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xj(
xk(
xl(
xm(
1n(
xo(
x!)
x~(
x}(
x|(
x{(
xz(
xy(
xx(
xw(
xv(
xu(
xt(
xs(
xr(
xq(
xp(
x")
x#)
x$)
x%)
x&)
x')
z()
x8)
x7)
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x/)
x.)
x-)
x,)
x+)
x*)
x))
09)
x:)
x;)
xw)
xx)
xy)
0z)
0{)
x|)
x})
x~)
x!*
1"*
0#*
1$*
0%*
1&*
0'*
x(*
x)*
x**
x+*
1,*
0-*
x.*
x/*
x0*
x1*
12*
03*
x4*
x5*
x6*
x7*
x8*
x9*
1:*
0;*
x<*
x=*
x>*
x?*
x@*
xA*
xB*
xC*
xD*
1E*
0F*
xG*
xH*
xI*
xJ*
xK*
xL*
1M*
0N*
xO*
xP*
xQ*
xR*
xS*
xT*
1U*
0V*
xW*
xX*
xY*
xZ*
x[*
x\*
1]*
0^*
x_*
x`*
xa*
xb*
xc*
xd*
xe*
xf*
xg*
1h*
0i*
xj*
xk*
xl*
xm*
xn*
xo*
1p*
0q*
xr*
xs*
xt*
xu*
xv*
xw*
1x*
0y*
xz*
x{*
x|*
x}*
x~*
x!+
1"+
0#+
x$+
x%+
x&+
x'+
x(+
x)+
x*+
x++
x,+
1-+
0.+
x/+
x0+
x1+
x2+
x3+
x4+
15+
06+
x7+
x8+
x9+
x:+
x;+
x<+
1=+
0>+
x?+
x@+
xA+
xB+
xC+
xD+
1E+
0F+
xG+
xH+
xI+
xJ+
0c)
1d)
0e)
0a+
x<)
x=)
x>)
x?)
x@)
xA)
xB)
xC)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
xl,
xk,
xj,
xi,
xh,
xg,
x(-
x'-
x&-
x%-
x$-
0#-
0"-
0!-
0~,
0},
0|,
0{,
0z,
0y,
0x,
0w,
x8-
x7-
x6-
x5-
x4-
x3-
x2-
x1-
x0-
x/-
x.-
x--
x,-
x+-
x*-
x)-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
0@-
0?-
0>-
0=-
0<-
0;-
0:-
09-
x]-
x^-
x_-
x`-
xa-
xb-
xc-
xd-
xe-
xf-
xg-
xh-
xi-
xj-
xk-
xl-
xm-
xn-
xo-
xp-
xq-
xr-
xs-
xt-
xu-
xv-
xw-
xx-
xy-
xz-
x{-
x|-
x}-
x~-
x!.
x".
x#.
x$.
x%.
x&.
x'.
x(.
x).
x*.
x+.
x,.
x-.
x..
x/.
x0.
x1.
x2.
x3.
x4.
x5.
x6.
x7.
x8.
x9.
x:.
x;.
x<.
x=.
x>.
x?.
x@.
xA.
xB.
xC.
xD.
xE.
xF.
xG.
xH.
xI.
xJ.
xK.
xL.
xM.
xN.
xO.
xP.
xQ.
xR.
xS.
xT.
xU.
xV.
xW.
xX.
xY.
xZ.
x[.
x\.
x].
x^.
x_.
x`.
xa.
xb.
xc.
xd.
xe.
xf.
xg.
xh.
xi.
xj.
xk.
xl.
xm.
xn.
xo.
xp.
xq.
xr.
xs.
xt.
xu.
xv.
xw.
xx.
xy.
xz.
x{.
x|.
x}.
x~.
x!/
x"/
x#/
x$/
x%/
x&/
x'/
x(/
xT)
xu1
zv1
xw1
xx1
xy1
zz1
x}1
x|1
x{1
x"2
x!2
x~1
x#2
x$2
x%2
x25
x15
x05
x/5
x.5
x-5
x,5
x+5
x*5
x)5
x(5
x'5
x&5
x%5
x$5
x#5
0B5
0A5
0@5
0?5
0>5
0=5
0<5
0;5
x:5
x95
x85
x75
x65
x55
x45
x35
xC5
0'7
0&7
0%7
0$7
0#7
0"7
0!7
0~6
x}6
x|6
x{6
xz6
xy6
xx6
xw6
xv6
x77
x67
x57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
x*7
x)7
x(7
xG7
xF7
xE7
xD7
xC7
xB7
xA7
x@7
0?7
0>7
0=7
0<7
0;7
0:7
097
087
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xJ7
xI7
xH7
xi7
xh7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xy7
xx7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
x+8
x*8
x)8
x(8
x'8
x&8
x%8
x$8
x#8
x"8
x!8
x~7
x}7
x|7
x{7
xz7
x=8
x<8
x;8
x:8
x98
x88
x78
x68
x58
x48
x38
x28
x18
x08
x/8
x.8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xA8
x@8
x?8
x>8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xQ8
xP8
xO8
xN8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
xa8
x`8
x!9
x~8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
xt8
xs8
xr8
xq8
xp8
x19
x09
x/9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
x&9
x%9
x$9
x#9
x"9
xC9
xB9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
x89
x79
x69
x59
x49
xS9
xR9
xQ9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
xI9
xH9
xG9
xF9
xE9
xD9
xc9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
xY9
xX9
xW9
xV9
xU9
xT9
xS5
xR5
xQ5
xP5
xO5
xN5
xM5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xT5
xU5
xV5
xW5
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
xj9
xi9
xh9
x):
x(:
x':
x&:
x%:
x$:
x#:
x":
x!:
x~9
x}9
x|9
x{9
xz9
xy9
xx9
x9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
x/:
x.:
x-:
x,:
x+:
x*:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
x?:
x>:
x=:
x<:
x;:
x::
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xN:
xM:
xL:
xK:
xJ:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x^:
x]:
x\:
x[:
xZ:
x!;
x~:
x}:
x|:
x{:
xz:
xy:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
x1;
x0;
x/;
x.;
x-;
x,;
x+;
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
xA;
x@;
x?;
x>;
x=;
x<;
x;;
x:;
x9;
x8;
x7;
x6;
x5;
x4;
x3;
x2;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
xC;
xB;
xc;
xb;
xa;
x`;
x_;
x^;
x];
x\;
x[;
xZ;
xY;
xX;
xW;
xV;
xU;
xT;
xs;
xr;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
xe;
xd;
x%<
x$<
x#<
x"<
x!<
x~;
x};
x|;
x{;
xz;
xy;
xx;
xw;
xv;
xu;
xt;
x7<
x6<
x5<
x4<
x3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x+<
x*<
x)<
x(<
xG<
xF<
xE<
xD<
xC<
xB<
xA<
x@<
x?<
x><
x=<
x<<
x;<
x:<
x9<
x8<
xW<
xV<
xU<
xT<
xS<
xR<
xQ<
xP<
xO<
xN<
xM<
xL<
xK<
xJ<
xI<
xH<
xi<
xh<
xg<
xf<
xe<
xd<
xc<
xb<
xa<
x`<
x_<
x^<
x]<
x\<
x[<
xZ<
xy<
xx<
xw<
xv<
xu<
xt<
xs<
xr<
xq<
xp<
xo<
xn<
xm<
xl<
xk<
xj<
x+=
x*=
x)=
x(=
x'=
x&=
x%=
x$=
x#=
x"=
x!=
x~<
x}<
x|<
x{<
xz<
x==
x<=
x;=
x:=
x9=
x8=
x7=
x6=
x5=
x4=
x3=
x2=
x1=
x0=
x/=
x.=
xM=
xL=
xK=
xJ=
xI=
xH=
xG=
xF=
xE=
xD=
xC=
xB=
xA=
x@=
x?=
x>=
x]=
x\=
x[=
xZ=
xY=
xX=
xW=
xV=
xU=
xT=
xS=
xR=
xQ=
xP=
xO=
xN=
xj:
xk:
xp=
xo=
xn=
xm=
xl=
xk=
xj=
xi=
xh=
xg=
xf=
xe=
xd=
xc=
xb=
xa=
xt=
xs=
xr=
xq=
x&>
x%>
x$>
x#>
x">
x!>
x~=
x}=
x|=
x{=
xz=
xy=
xx=
xw=
xv=
xu=
x*>
x)>
x(>
x'>
x->
x,>
x+>
x=>
x<>
x;>
x:>
x9>
x8>
x7>
x6>
x5>
x4>
x3>
x2>
x1>
x0>
x/>
x.>
xC>
xB>
xA>
x@>
xG>
xF>
xE>
xD>
xJ>
xI>
xH>
xN>
xM>
xL>
xK>
xP>
xQ>
xR>
xS>
xT>
xU>
xV>
xW>
zX>
xZ>
x[>
x\>
x]>
x^>
x_>
x`>
xa>
zb>
xd>
xe>
xf>
xg>
xh>
xi>
xj>
xk>
zl>
xn>
xo>
xp>
xq>
xr>
xs>
xt>
xu>
zv>
x|>
x{>
xz>
xy>
x"?
x!?
x~>
x}>
x%?
x$?
x#?
x)?
x(?
x'?
x&?
x+?
x,?
x-?
x.?
x/?
x0?
x1?
x2?
z3?
x5?
x6?
x7?
x8?
x9?
x:?
x;?
x<?
z=?
x??
x@?
xA?
xB?
xC?
xD?
xE?
xF?
zG?
xI?
xJ?
xK?
xL?
xM?
xN?
xO?
xP?
zQ?
xW?
xV?
xU?
xT?
x[?
xZ?
xY?
xX?
x^?
x]?
x\?
xb?
xa?
x`?
x_?
xd?
xe?
xf?
xg?
xh?
xi?
xj?
xk?
zl?
xn?
xo?
xp?
xq?
xr?
xs?
xt?
xu?
zv?
xx?
xy?
xz?
x{?
x|?
x}?
x~?
x!@
z"@
x$@
x%@
x&@
x'@
x(@
x)@
x*@
x+@
z,@
x2@
x1@
x0@
x/@
x6@
x5@
x4@
x3@
x9@
x8@
x7@
x=@
x<@
x;@
x:@
x?@
x@@
xA@
xB@
xC@
xD@
xE@
xF@
zG@
xI@
xJ@
xK@
xL@
xM@
xN@
xO@
xP@
zQ@
xS@
xT@
xU@
xV@
xW@
xX@
xY@
xZ@
z[@
x]@
x^@
x_@
x`@
xa@
xb@
xc@
xd@
ze@
xl:
xv@
xX5
xZ5
xY5
x[5
xk5
0j5
0i5
0h5
0g5
0f5
0e5
0d5
0c5
0b5
0a5
0`5
0_5
0^5
0]5
0\5
xm5
xl5
x}5
0|5
0{5
0z5
0y5
0x5
0w5
0v5
0u5
0t5
0s5
0r5
0q5
0p5
0o5
0n5
x!6
x~5
x"6
x26
016
006
0/6
0.6
0-6
0,6
0+6
0*6
0)6
0(6
0'6
0&6
0%6
0$6
0#6
x36
x56
x46
xE6
0D6
0C6
0B6
0A6
0@6
0?6
0>6
0=6
0<6
0;6
0:6
096
086
076
066
xG6
xF6
xH6
xI6
xJ6
xK6
xw@
xL6
xx@
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xT6
xS6
xR6
xQ6
xP6
xO6
xN6
xM6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
xe6
xd6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
0U)
xJC
xIC
xHC
xGC
xFC
xEC
xDC
xCC
xBC
xAC
x@C
x?C
x>C
x=C
x<C
x;C
xZC
xYC
xXC
xWC
xVC
xUC
xTC
xSC
xRC
xQC
xPC
xOC
xNC
xMC
xLC
xKC
xqC
xrC
xsC
0tC
xuC
xvC
xwC
xxC
xyC
xzC
x{C
1|C
0}C
x~C
x!D
x"D
x#D
x$D
x%D
x&D
x'D
x(D
x)D
x*D
x+D
x,D
x-D
x.D
x/D
x0D
x1D
x2D
x3D
x4D
x5D
x6D
x7D
x8D
x9D
x:D
x;D
x<D
x=D
x>D
x?D
x@D
xAD
xBD
xCD
xDD
xED
xFD
xGD
xHD
xID
xJD
xKD
xLD
xMD
xND
xOD
xPD
xQD
xRD
xSD
xTD
xUD
xVD
xWD
xXD
xYD
xZD
x[D
x\D
x]D
x^D
x_D
x`D
xaD
xbD
xcD
xdD
xeD
xfD
xgD
xhD
xiD
xjD
xkD
xlD
xmD
xnD
xoD
xpD
xqD
xrD
xsD
xtD
xuD
xvD
xwD
xxD
xyD
xzD
x{D
x|D
x}D
x~D
x!E
x"E
x#E
x$E
x%E
x&E
x'E
x(E
x)E
x*E
x+E
x,E
x-E
x.E
x/E
x0E
x1E
x2E
x3E
x4E
x5E
x6E
x7E
x8E
x9E
x:E
x;E
x<E
x=E
x>E
x?E
x@E
xAE
xBE
xCE
xDE
xjC
xiC
xhC
xgC
xfC
xeC
xdC
xcC
xbC
xaC
x`C
x_C
x^C
x]C
x\C
x[C
0kC
xlC
0mC
0HE
0nC
0oC
x&2
x_)
xX)
0]+
0[+
1\+
0Z+
0Y+
0X+
0W+
0V+
0U+
0T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0K+
0u)
1t)
0s)
0r)
0q)
0p)
0o)
0n)
0m)
0l)
0k)
0j)
0i)
0h)
0g)
0f)
xv)
xH/
xF/
xD/
xB/
x@/
x>/
x</
x:/
x8/
x6/
x4/
x2/
x0/
x./
x,/
x*/
xi/
xg/
xe/
xc/
xa/
x_/
x]/
x[/
xY/
xW/
xU/
xS/
xQ/
xO/
xM/
xK/
x,0
x*0
x(0
x&0
x$0
x"0
x~/
x|/
xz/
xx/
xv/
xt/
xr/
xp/
xn/
xl/
xM0
xK0
xI0
xG0
xE0
xC0
xA0
x?0
x=0
x;0
x90
x70
x50
x30
x10
x/0
xn0
xl0
xj0
xh0
xf0
xd0
xb0
x`0
x^0
x\0
xZ0
xX0
xV0
xT0
xR0
xP0
x11
x/1
x-1
x+1
x)1
x'1
x%1
x#1
x!1
x}0
x{0
xy0
xw0
xu0
xs0
xq0
xR1
xP1
xN1
xL1
xJ1
xH1
xF1
xD1
xB1
x@1
x>1
x<1
x:1
x81
x61
x41
xs1
xq1
xo1
xm1
xk1
xi1
xg1
xe1
xc1
xa1
x_1
x]1
x[1
xY1
xW1
xU1
x=2
x!5
x}4
x{4
xy4
xw4
xu4
xs4
xq4
xo4
xm4
xk4
xi4
xg4
xe4
xc4
xa4
x_4
x]4
x[4
xY4
xW4
x;2
x92
xU4
xS4
xQ4
xO4
xM4
xK4
xI4
xG4
xE4
xC4
xA4
x?4
x=4
x;4
x94
x74
x72
x52
x32
x12
x54
x34
x14
x/4
x-4
x+4
x)4
x'4
x%4
x#4
x!4
x}3
x{3
xy3
xw3
xu3
xs3
xq3
xo3
xm3
xk3
xi3
xg3
xe3
xc3
xa3
x_3
x]3
x[3
xY3
xW3
xU3
xS3
xQ3
xO3
xM3
xK3
xI3
xG3
xE3
xC3
xA3
x?3
x=3
x;3
x93
x73
x53
x33
x13
x/3
x-3
x+3
x)3
x'3
x%3
x#3
x!3
x}2
x{2
xy2
xw2
xu2
xs2
xq2
xo2
xm2
xk2
xi2
xg2
xe2
xc2
xa2
x_2
x]2
x[2
xY2
xW2
xU2
xS2
x/2
xQ2
xO2
xM2
x-2
x+2
xK2
xI2
xG2
xE2
xC2
x)2
x'2
xA2
x?2
xg9
xf9
1u6
0t6
0s6
0r6
0q6
1p6
0u@
0t@
0s@
0r@
0q@
0p@
0o@
0n@
0m@
0l@
0k@
0j@
0i@
0h@
0g@
0f@
x?>
xO>
xY>
xc>
xm>
xx>
x*?
x4?
x>?
xH?
xS?
xc?
xm?
xw?
x#@
x.@
x>@
xH@
xR@
x\@
x+A
x9C
x7C
x5C
x3C
x1C
x)A
x'A
x/C
x-C
x+C
x)C
x'C
x%C
x#C
x!C
x}B
x{B
xyB
xwB
xuB
xsB
xqB
xoB
xmB
xkB
xiB
xgB
xeB
xcB
xaB
x_B
x]B
x[B
xYB
xWB
xUB
xSB
xQB
xOB
xMB
xKB
xIB
xGB
xEB
xCB
xAB
x?B
x=B
x;B
x9B
x7B
x5B
x3B
x1B
x/B
x-B
x+B
x)B
x'B
x%B
x#B
x!B
x}A
x{A
xyA
xwA
xuA
xsA
xqA
xoA
xmA
x%A
x#A
x!A
x}@
x{@
xy@
xkA
xiA
xgA
xeA
xcA
xaA
x_A
x]A
x[A
xYA
xWA
xUA
xSA
xQA
xOA
xMA
xKA
xIA
xGA
xEA
xCA
xAA
x?A
x=A
x;A
x9A
x7A
x5A
x3A
x1A
x/A
x-A
xpC
0LE
$end
#1
0^'
0['
0\'
0]'
0@)
0J'
0:'
0;'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0('
0)'
0*'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
0K'
0L'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0f&
0g&
0h&
0i&
0j&
0k&
0l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
08'
09'
0d'
0S&
0T&
0U&
0Q&
0R&
0?)
0P&
0@&
0A&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
00&
01&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
0~%
0!&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
0n%
0o%
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0m%
0l%
0k%
0j%
0i%
0(%
0Y%
0Z%
0[%
0\%
0]%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
09%
0:%
0;%
0<%
0=%
0>%
0?%
0@%
0A%
0B%
0C%
0D%
0E%
0F%
0G%
0H%
0c'
0$%
0%%
0&%
0?"
0@"
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0y$
0z$
0>)
0~$
0-$
0.$
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0|$
0v$
0t$
0d$
0M$
0N$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0k#
0l#
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0K#
0L#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0+#
0,#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0i"
0j"
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0P"
0p$
0q$
0r$
0l$
0j$
0g$
0h$
0`$
0a$
0b$
0X"
0V"
0S"
0T"
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0b-
0a-
0`-
0_-
0^-
0]-
0|-
0{-
0z-
0y-
0x-
0w-
0v-
0u-
0t-
0s-
0r-
0q-
0p-
0o-
0n-
0m-
0..
0-.
0,.
0+.
0*.
0).
0(.
0'.
0&.
0%.
0$.
0#.
0".
0!.
0~-
0}-
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
04.
03.
02.
01.
00.
0/.
0N.
0M.
0L.
0K.
0J.
0I.
0H.
0G.
0F.
0E.
0D.
0C.
0B.
0A.
0@.
0?.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0T.
0S.
0R.
0Q.
0P.
0O.
0n.
0m.
0l.
0k.
0j.
0i.
0h.
0g.
0f.
0e.
0d.
0c.
0b.
0a.
0`.
0_.
0~.
0}.
0|.
0{.
0z.
0y.
0x.
0w.
0v.
0u.
0t.
0s.
0r.
0q.
0p.
0o.
0Z(
0[(
0\(
0](
0^(
0_(
0`(
0a(
0b(
0c(
0d(
0e(
0f(
0g(
0h(
0i(
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0J(
0K(
0L(
0M(
0N(
0O(
0P(
0Q(
0R(
0S(
0T(
0U(
0V(
0W(
0X(
0Y(
0&)
0%)
0$)
0#)
0m(
0w'
0v'
0e'
0_)
0~)
1(*
1**
00*
08*
0C*
0K*
0S*
0[*
0f*
0n*
0v*
0~*
0++
03+
0;+
0C+
0m!
0n!
0o!
0p!
1q!
0r!
0s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0:)
0;)
0'2
0g9
0f9
0)2
0C5
0a'
0+2
0'%
0-2
0/2
012
032
052
072
092
0;2
0B)
0=2
0k(
0y@
0l(
0{@
0}@
0!A
0#A
0lC
0%A
1zC
1$D
1,D
14D
1?D
1GD
1OD
1WD
1bD
1jD
1rD
1zD
1'E
1/E
17E
1?E
0'A
0)A
0+A
0@E
08E
00E
0(E
0{D
0sD
0kD
0cD
0XD
0PD
0HD
0@D
05D
0-D
0%D
0{C
0T)
0u1
1G+
1?+
17+
1/+
1$+
1z*
1r*
1j*
1_*
1W*
1O*
1G*
1<*
14*
0+*
1)*
0!*
0."
1-"
1.*
05*
0=*
0H*
0P*
0X*
0`*
0k*
0s*
0{*
0%+
00+
08+
0@+
0H+
1~C
0!D
1I+
1A+
19+
11+
1&+
1|*
1t*
1l*
1a*
1Y*
1Q*
1I*
1>*
16*
0/*
0|)
07*
0?*
0J*
0R*
0Z*
0b*
0m*
0u*
0}*
0'+
02+
0:+
0B+
0J+
0uC
1&D
0v)
0*+
0)+
0(+
0y)
0e*
0d*
0c*
0x)
0B*
0A*
0@*
0w)
0})
01*
0,"
09*
0D*
0L*
0T*
0\*
0g*
0o*
0w*
0!+
0,+
04+
0<+
0D+
0'D
1(D
0}!
0~!
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0)D
0vC
1.D
0/D
10D
01D
0wC
16D
07D
18D
09D
0qC
1AD
0BD
1CD
0DD
0:D
1ID
0JD
1KD
0LD
0;D
1QD
0RD
1SD
0TD
0<D
1YD
0ZD
1[D
0\D
0rC
1dD
0eD
1fD
0gD
0]D
1lD
0mD
1nD
0oD
0^D
1tD
0uD
1vD
0wD
0_D
1|D
0}D
1~D
0!E
0sC
1)E
0*E
1+E
0,E
0"E
11E
02E
13E
04E
0#E
19E
0:E
1;E
0<E
0$E
1AE
0BE
1CE
0DE
0pC
0`'
0!/
0"/
0#/
0$/
0%/
0&/
0'/
0(/
0A
0-!
0o(
0')
0x1
0w1
0y1
0j(
0)(
1((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0"2
0!2
0~1
0}1
0|1
0{1
0!)
0~(
0}(
0|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0s(
0r(
0q(
0p(
09(
08(
07(
06(
05(
04(
03(
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
08)
06)
05)
04)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
0*)
0))
0A2
0?2
0I:
0H:
0G:
0F:
0E:
0D:
0C:
0B:
0A:
0@:
0?:
0>:
0=:
0<:
0;:
0::
0G2
0E2
0C2
0K2
0I2
0G6
0F6
0Q2
0O2
0M2
0q2
0o2
0m2
0k2
0i2
0g2
0e2
0c2
0a2
0_2
0]2
0[2
0Y2
0W2
0U2
0S2
0i7
0h7
0g7
0f7
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0]7
0\7
0[7
0Z7
0=8
0<8
0;8
0:8
098
088
078
068
058
048
038
028
018
008
0/8
0.8
0o8
0n8
0m8
0l8
0k8
0j8
0i8
0h8
0g8
0f8
0e8
0d8
0c8
0b8
0a8
0`8
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
059
049
025
015
005
0/5
0.5
0-5
0,5
0+5
0*5
0)5
0(5
0'5
0&5
0%5
0$5
0#5
0l6
0k6
0j6
0i6
0h6
0g6
0f6
0e6
0d6
0c6
0b6
0a6
0`6
0_6
0^6
0]6
033
013
0/3
0-3
0+3
0)3
0'3
0%3
0#3
0!3
0}2
0{2
0y2
0w2
0u2
0s2
0S3
0Q3
0O3
0M3
0K3
0I3
0G3
0E3
0C3
0A3
0?3
0=3
0;3
093
073
053
0s3
0q3
0o3
0m3
0k3
0i3
0g3
0e3
0c3
0a3
0_3
0]3
0[3
0Y3
0W3
0U3
054
034
014
0/4
0-4
0+4
0)4
0'4
0%4
0#4
0!4
0}3
0{3
0y3
0w3
0u3
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0U4
0S4
0Q4
0O4
0M4
0K4
0I4
0G4
0E4
0C4
0A4
0?4
0=4
0;4
094
074
0Y4
0W4
0y4
0w4
0u4
0s4
0q4
0o4
0m4
0k4
0i4
0g4
0e4
0c4
0a4
0_4
0]4
0[4
0!5
0}4
0{4
0KA
0IA
0GA
0EA
0CA
0AA
0?A
0=A
0;A
09A
07A
05A
03A
01A
0/A
0-A
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0kA
0iA
0gA
0eA
0cA
0aA
0_A
0]A
0[A
0YA
0WA
0UA
0SA
0QA
0OA
0MA
0-B
0+B
0)B
0'B
0%B
0#B
0!B
0}A
0{A
0yA
0wA
0uA
0sA
0qA
0oA
0mA
0MB
0KB
0IB
0GB
0EB
0CB
0AB
0?B
0=B
0;B
09B
07B
05B
03B
01B
0/B
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0mB
0kB
0iB
0gB
0eB
0cB
0aB
0_B
0]B
0[B
0YB
0WB
0UB
0SB
0QB
0OB
0jC
0iC
0hC
0gC
0fC
0eC
0dC
0cC
0bC
0aC
0`C
0_C
0^C
0]C
0\C
0[C
0/C
0-C
0+C
0)C
0'C
0%C
0#C
0!C
0}B
0{B
0yB
0wB
0uB
0sB
0qB
0oB
0JC
0IC
0HC
0GC
0FC
0EC
0DC
0CC
0BC
0AC
0@C
0?C
0>C
0=C
0<C
0;C
03C
01C
09C
07C
05C
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0D
0C
0B
0=E
05E
0-E
0%E
0xD
0pD
0hD
0`D
0UD
0MD
0ED
0=D
02D
0*D
0"D
0xC
0c$
0}$
0i$
0C)
0yC
0#D
0+D
03D
0>D
0FD
0ND
0VD
0aD
0iD
0qD
0yD
0&E
0.E
06E
0>E
0KC
0LC
0MC
0NC
0OC
0PC
0QC
0RC
0SC
0TC
0UC
0VC
0WC
0XC
0YC
0ZC
1%2
1$2
1#2
0")
0K6
1J6
0I6
0H6
0l:
0v@
1V5
0L6
0x@
1"6
0[5
0w@
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0):
0(:
0':
0&:
0%:
0$:
0#:
0":
0!:
0~9
0}9
0|9
0{9
0z9
0y9
0x9
0w9
0v9
0u9
0t9
0s9
0r9
0q9
0p9
0o9
0n9
0m9
0l9
0k9
0j9
0i9
0h9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
0K9
0J9
0I9
0H9
0G9
0F9
0E9
0D9
0!9
0~8
0}8
0|8
0{8
0z8
0y8
0x8
0w8
0v8
0u8
0t8
0s8
0r8
0q8
0p8
0M8
0L8
0K8
0J8
0I8
0H8
0G8
0F8
0E8
0D8
0C8
0B8
0A8
0@8
0?8
0>8
0y7
0x7
0w7
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0n7
0m7
0l7
0k7
0j7
0t(
17)
0H/
0F/
0D/
0B/
0@/
0>/
0</
0:/
08/
06/
04/
02/
00/
0./
0,/
0*/
0i/
0g/
0e/
0c/
0a/
0_/
0]/
0[/
0Y/
0W/
0U/
0S/
0Q/
0O/
0M/
0K/
0,0
0*0
0(0
0&0
0$0
0"0
0~/
0|/
0z/
0x/
0v/
0t/
0r/
0p/
0n/
0l/
0M0
0K0
0I0
0G0
0E0
0C0
0A0
0?0
0=0
0;0
090
070
050
030
010
0/0
0n0
0l0
0j0
0h0
0f0
0d0
0b0
0`0
0^0
0\0
0Z0
0X0
0V0
0T0
0R0
0P0
011
0/1
0-1
0+1
0)1
0'1
0%1
0#1
0!1
0}0
0{0
0y0
0w0
0u0
0s0
0q0
0R1
0P1
0N1
0L1
0J1
0H1
0F1
0D1
0B1
0@1
0>1
0<1
0:1
081
061
041
0s1
0q1
0o1
0m1
0k1
0i1
0g1
0e1
0c1
0a1
0_1
0]1
0[1
0Y1
0W1
0U1
0]@
0u=
0S@
0v=
0I@
0w=
0?@
0x=
0$@
0y=
0x?
0z=
0n?
0{=
0d?
0|=
0I?
0}=
0??
0~=
05?
0!>
0+?
0">
0n>
0#>
0d>
0$>
0Z>
0%>
0P>
0&>
1_@
0a=
1U@
0b=
1K@
0c=
1A@
0d=
1&@
0e=
1z?
0f=
1p?
0g=
1f?
0h=
1K?
0i=
1A?
0j=
17?
0k=
1-?
0l=
1p>
0m=
1f>
0n=
1\>
0o=
1R>
0p=
136
1T5
0S>
0]>
0g>
0t=
0q>
0.?
08?
0B?
0s=
0L?
0g?
0q?
0{?
0r=
0'@
0B@
0L@
0V@
0q=
0`@
0Q>
1T>
1^>
1h>
0*>
1r>
1/?
19?
1C?
0)>
1M?
1h?
1r?
1|?
0(>
1(@
1C@
1M@
1W@
0'>
1a@
0b@
0j:
0X@
0N@
0D@
0)@
0+>
0}?
0s?
0i?
0N?
0,>
0D?
0:?
00?
0s>
0i>
0_>
0U>
0N>
0->
0,?
1V>
1`>
1j>
1t>
11?
1;?
1E?
0e?
1O?
1j?
1t?
1~?
0@@
1*@
1E@
1O@
1Y@
0W5
0U5
1c@
0d@
0Z@
0P@
0F@
0+@
0=@
0!@
0u?
0k?
0P?
0b?
0F?
0<?
02?
0u>
0k>
0a>
0W>
0)?
0O>
0Y>
0c>
0m>
0*?
04?
0>?
0H?
0c?
0m?
0w?
0#@
0>@
0H@
0R@
0\@
1X5
09>
05>
01>
0=>
0+8
0*8
0)8
0(8
0'8
0&8
0%8
0$8
0#8
0"8
0!8
0~7
0}7
0|7
0{7
0z7
0]8
0\8
0[8
0Z8
0Y8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0Q8
0P8
0O8
0N8
019
009
0/9
0.9
0-9
0,9
0+9
0*9
0)9
0(9
0'9
0&9
0%9
0$9
0#9
0"9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0X9
0W9
0V9
0U9
0T9
02@
01@
00@
0/@
06@
05@
04@
03@
0W?
0V?
0U?
0T?
0[?
0Z?
0Y?
0X?
0|>
0{>
0z>
0y>
0"?
0!?
0~>
0}>
0c;
0b;
0a;
0`;
0_;
0^;
0];
0\;
0[;
0Z;
0Y;
0X;
0W;
0V;
0U;
0T;
07<
06<
05<
04<
03<
02<
01<
00<
0/<
0.<
0-<
0,<
0+<
0*<
0)<
0(<
0i<
0h<
0g<
0f<
0e<
0d<
0c<
0b<
0a<
0`<
0_<
0^<
0]<
0\<
0[<
0Z<
0==
0<=
0;=
0:=
09=
08=
07=
06=
05=
04=
03=
02=
01=
00=
0/=
0.=
0C>
0B>
0A>
0@>
0G>
0F>
0E>
0D>
0Z5
0Y5
0m5
0l5
1!6
1~5
156
046
0?>
0H>
0I>
0J>
0x>
0#?
0$?
0%?
0S?
0\?
0]?
0^?
0.@
07@
08@
09@
0J@
0T@
0^@
0o?
0y?
0%@
06?
0@?
0J?
0[>
0e>
0o>
0K>
0L>
0M>
0&?
0'?
0(?
0_?
0`?
0a?
0:@
0;@
0<@
00>
0/>
0.>
04>
03>
02>
08>
07>
06>
0<>
0;>
0:>
126
0k5
0M=
0L=
0K=
0J=
0I=
0H=
0G=
0F=
0E=
0D=
0C=
0B=
0A=
0@=
0?=
0>=
0y<
0x<
0w<
0v<
0u<
0t<
0s<
0r<
0q<
0p<
0o<
0n<
0m<
0l<
0k<
0j<
0G<
0F<
0E<
0D<
0C<
0B<
0A<
0@<
0?<
0><
0=<
0<<
0;<
0:<
09<
08<
0s;
0r;
0q;
0p;
0o;
0n;
0m;
0l;
0k;
0j;
0i;
0h;
0g;
0f;
0e;
0d;
0W7
0V7
0U7
0T7
0S7
0R7
0Q7
0P7
0O7
0N7
0M7
0L7
0K7
0J7
0I7
0H7
0G7
0F7
0E7
0D7
0C7
0B7
0A7
0@7
077
067
057
047
037
027
017
007
0/7
0.7
0-7
0,7
0+7
0*7
0)7
0(7
0}6
0|6
0{6
0z6
0y6
0x6
0w6
0v6
0Y:
0U:
0Q:
0M:
0i:
0e:
0a:
0]:
0:5
095
085
075
065
055
045
035
0%<
0$<
0#<
0"<
0!<
0~;
0};
0|;
0{;
0z;
0y;
0x;
0w;
0v;
0u;
0t;
0W<
0V<
0U<
0T<
0S<
0R<
0Q<
0P<
0O<
0N<
0M<
0L<
0K<
0J<
0I<
0H<
0+=
0*=
0)=
0(=
0'=
0&=
0%=
0$=
0#=
0"=
0!=
0~<
0}<
0|<
0{<
0z<
0]=
0\=
0[=
0Z=
0Y=
0X=
0W=
0V=
0U=
0T=
0S=
0R=
0Q=
0P=
0O=
0N=
0}5
1E6
0X:
0W:
0V:
0T:
0S:
0R:
0P:
0O:
0N:
0L:
0K:
0J:
0k:
0h:
0g:
0f:
0d:
0c:
0b:
0`:
0_:
0^:
0\:
0[:
0Z:
0Q;
0P;
0O;
0N;
0M;
0L;
0K;
0J;
0I;
0H;
0G;
0F;
0E;
0D;
0C;
0B;
0A;
0@;
0?;
0>;
0=;
0<;
0;;
0:;
09;
08;
07;
06;
05;
04;
03;
02;
01;
00;
0/;
0.;
0-;
0,;
0+;
0*;
0);
0(;
0';
0&;
0%;
0$;
0#;
0";
0!;
0~:
0}:
0|:
0{:
0z:
0y:
0x:
0w:
0v:
0u:
0t:
0s:
0r:
0q:
0p:
09:
08:
07:
06:
05:
04:
03:
02:
01:
00:
0/:
0.:
0-:
0,:
0+:
0*:
0S5
0R5
0Q5
0P5
0O5
0N5
0M5
0L5
0K5
0J5
0I5
0H5
0G5
0F5
0E5
0D5
0\6
0[6
0Z6
0Y6
0X6
0W6
0V6
0U6
0T6
0S6
0R6
0Q6
0P6
0O6
0N6
0M6
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0S)
0R)
0Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
1H)
0G)
0F)
0E)
0D)
0_'
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0(-
0'-
0&-
0%-
0$-
0v,
0u,
0t,
0s,
0r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0H-
0G-
0F-
0E-
0D-
0C-
0B-
0A-
08-
07-
06-
05-
04-
03-
02-
01-
00-
0/-
0.-
0--
0,-
0+-
0*-
0)-
0L$
0K$
0J$
0I$
0H$
0G$
0F$
0E$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0I-
0J-
b0 K-
0X-
b0 Y-
0W-
b0 N-
b0 O-
0P-
0Q-
0R-
0S-
0T-
0U-
b0 V-
0M-
b0 Z-
0[-
0L-
0=)
0A)
0k$
0U"
0W"
0L!
0<)
0s$
0u$
0O"
0o$
0n$
0m$
0x$
0w$
0R"
0Q"
0_$
0^$
0]$
0f$
0e$
0#%
0"%
0!%
0b'
0{$
0&2
#50
08!
0V)
05!
#100
18!
1V)
15!
b10 Y)
b10 :!
#150
08!
0V)
05!
#200
18!
1V)
15!
b11 Y)
b11 :!
#201
09!
0W)
07!
#250
08!
0V)
05!
#300
18!
1V)
15!
b1000000000101111011011100000000 `+
1%,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
b0 -,
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
b1000000000101111011011100000000 GE
b100 Y)
b100 :!
#301
1="
0q!
1;)
1x1
1w1
1')
1o(
#350
08!
0V)
05!
#400
18!
1V)
15!
b100000000010111101101110000000 `+
b100000000010111101101110000000 GE
b101 Y)
b101 :!
#450
08!
0V)
05!
#500
18!
1V)
15!
b10000000001011110110111000000 `+
b10000000001011110110111000000 GE
b110 Y)
b110 :!
#550
08!
0V)
05!
#600
18!
1V)
15!
b1000000000101111011011100000 `+
b1000000000101111011011100000 GE
b111 Y)
b111 :!
#650
08!
0V)
05!
#700
18!
1V)
15!
b100000000010111101101110000 `+
b100000000010111101101110000 GE
b1000 Y)
b1000 :!
#750
08!
0V)
05!
#800
18!
1V)
15!
b10000000001011110110111000 `+
b10000000001011110110111000 GE
b1001 Y)
b1001 :!
#850
08!
0V)
05!
#900
18!
1V)
15!
b1000000000101111011011100 `+
b1000000000101111011011100 GE
b1010 Y)
b1010 :!
#950
08!
0V)
05!
#1000
18!
1V)
15!
b100000000010111101101110 `+
b100000000010111101101110 GE
b1011 Y)
b1011 :!
#1050
08!
0V)
05!
#1100
18!
1V)
15!
b10000000001011110110111 `+
b10000000001011110110111 GE
b1100 Y)
b1100 :!
1a+
0d)
0n(
1c)
1w4
1j!
1`!
1_!
1j(
1C)
1;2
1>
14
13
0')
0o(
18(
1}(
1s(
1r(
0H)
#1150
08!
0V)
05!
#1200
18!
1V)
15!
1s+
b10000000001000000000101111011011 `+
b11000000000100 6,
b11000000000100 5,
b11000000000100 4,
b11000000000100 3,
b11000000000100 2,
b11000000000100 1,
b11000000000100 0,
b11000000000100 /,
b11000000000100 .,
b11000000000100 -,
b11000000000100 ,,
b11000000000100 +,
b11000000000100 *,
b11000000000100 ),
b11000000000100 (,
b11000000000100 ',
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
1<2
1x4
b10000000001000000000101111011011 GE
b1101 Y)
b1101 :!
#1201
1M"
1>)
1X(
0(*
0**
1o!
1p!
1z!
0;)
1B)
1u1
1)A
1+*
0)*
0-"
0.*
1/*
1|)
11*
1,"
0x1
0w1
0((
1'(
07)
16)
0j!
1a!
0`!
0_!
1/
1kB
0}(
1t(
0s(
0r(
0>
15
04
03
08(
17(
1Q)
1G)
1F)
1&-
1t,
1F-
16-
1J$
1*$
1Q4
114
1h#
1H#
1O3
1o3
b100 N-
1U-
b11 K-
1J-
1u$
1#%
1"%
1!%
1]$
1=)
1}$
152
192
1C2
1!5
1}4
1{4
#1250
08!
0V)
05!
#1300
18!
1V)
15!
0s+
1r+
b11000000000100000000010111101101 `+
0%,
1$,
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
1E,
1D2
1P3
1p3
124
162
1R4
1:2
1"5
1~4
1|4
1lB
1*A
b11000000000100000000010111101101 GE
b1110 Y)
b1110 :!
#1301
1?)
1>&
1$%
1%%
1&%
1~$
1:$
1v$
1Z$
1x#
1X#
1`$
1h(
1<"
0="
1W(
0X(
1(*
1**
10*
0o!
0p!
1q!
0z!
1a'
1}@
1'A
1"D
1#D
0C)
01*
04*
0+*
1)*
1-"
1.*
15*
0,"
0;2
1YC
06*
0/*
0|)
17*
1})
11*
14*
05*
1,"
19*
1+"
16*
07*
0})
09*
0+"
0#2
1`'
0j(
1((
0/
1.
17)
0w4
1u4
1+C
1)B
19C
17C
15C
1iC
0}$
0u1
092
1&'
18(
0Q)
1H)
0G)
0F)
0&-
0t,
0F-
06-
0J$
0*$
0Q4
014
0h#
0H#
0O3
0o3
0J-
b0 K-
b0 N-
0U-
0=)
0]$
0#%
0"%
0!%
0u$
052
0!5
0}4
0{4
0C2
#1350
08!
0V)
05!
#1400
18!
1V)
15!
1s+
b11100000000010000000001011110110 `+
1%,
0E,
1D,
0D2
0P3
0p3
024
062
0R4
0:2
0<2
0x4
1v4
0"5
0~4
0|4
1~@
1*B
1,C
1(A
1:C
18C
16C
b11100000000010000000001011110110 GE
1"F
1NE
b1111 Y)
b1111 :!
0a+
1d)
0c)
1n(
1;2
192
152
0'A
0}@
08(
1!5
1}4
1{4
1w4
0u4
1Q4
114
1o3
1O3
1C2
09C
07C
05C
0+C
0)B
0a!
0t(
05
#1401
1@)
16'
1S&
1T&
1U&
1P&
1M&
1{%
1j%
0$%
0%%
0&%
1L"
0M"
0>)
0~$
0:$
0v$
0Z$
0x#
0X#
0`$
1g(
0h(
1="
1X(
0(*
0**
052
092
0;2
0B)
1k(
1}@
1u1
1'A
1+*
0)*
0-"
0.*
1/*
1|)
01*
04*
15*
0,"
06*
17*
1})
19*
1+"
0$2
1#2
0'(
18(
1/
07)
06)
15)
0C2
0O3
0o3
014
0Q4
0w4
1u4
0!5
0}4
0{4
1)B
1+C
1HC
19C
17C
15C
1J!
1*D
0u1
1+D
1XC
1hC
1S
1%'
1'(
#1450
08!
0V)
05!
#1500
18!
1V)
15!
1\)
b1110000000001000000000101111011 `+
0%,
0$,
1#,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
b0 -,
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
1E,
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
b1110000000001000000000101111011 GE
16F
15F
14F
b10000 Y)
b10000 :!
1a+
0d)
0n(
1c)
0)A
0'A
0}@
1LE
1w4
09C
07C
05C
0+C
0kB
1iB
0)B
1a!
1t(
15
#1501
1['
1\'
1]'
1h(
1;"
0<"
0="
1w'
0q!
1;)
0%2
0w4
0u4
1s4
1D
1C
1B
1x1
1w1
1j(
#1550
08!
0V)
05!
#1600
18!
1V)
15!
b10111000000000100000000010111101 `+
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
0v4
1t4
0~@
0*B
0lB
1jB
0,C
0(A
0*A
0:C
08C
06C
b10111000000000100000000010111101 GE
1ME
b10001 Y)
b10001 :!
#1601
1J'
0S&
0T&
0U&
0?)
0P&
0M&
1=&
0>&
0{%
0j%
1K"
0L"
1q!
0;)
0k(
0a'
0"D
0*D
0,D
0LE
1-D
0+D
0#D
0YC
0XC
00D
11D
1wC
13D
1WC
1A
1!/
1$2
0x1
0w1
0((
0'(
1&(
0iB
1gB
0iC
0HC
1*D
1,D
0-D
1+D
1XC
10D
01D
0wC
03D
0WC
0j(
0&'
08(
07(
16(
1q1
#1650
08!
0V)
05!
#1700
18!
1V)
15!
0\)
0s+
0r+
1q+
b11011100000000010000000001011110 `+
1r1
0jB
1hB
b11011100000000010000000001011110 GE
0"F
1!F
0ME
0NE
06F
05F
04F
b10010 Y)
b10010 :!
b1 .!
0a+
1d)
0c)
1n(
18(
17(
06(
1iB
0gB
0a!
0t(
05
#1701
0['
0\'
0]'
0@)
0J'
15'
06'
1<&
0=&
1^-
1V(
0W(
0X(
0w'
1(*
1**
00*
18*
0*D
12D
13D
0+D
09*
0<*
11*
14*
0+*
1)*
1-"
1.*
05*
1,"
1=*
0+"
0XC
1WC
0>*
16*
0/*
0|)
07*
1?*
1w)
0})
01*
0,"
19*
1<*
1D*
1*"
0=*
1+"
1>*
0?*
0w)
0D*
0*"
1%2
0!/
0A
0`'
1((
17)
08(
07(
16(
0/
0.
1-
0iB
1gB
0hC
1gC
0J!
1I!
0D
0C
0B
0S
1R
0%'
1$'
#1750
08!
0V)
05!
#1800
18!
1V)
15!
b1101110000000001000000000101111 `+
1%,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
b0 -,
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
0E,
0D,
1C,
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
b1101110000000001000000000101111 GE
0!F
1~E
b10011 Y)
b10011 :!
1a+
0d)
0n(
1c)
18(
1h!
1d!
1c!
1b!
1a!
1`!
1_!
1{(
1w(
1v(
1u(
1t(
1s(
1r(
1<
18
17
16
15
14
13
1")
#1801
14'
05'
1f(
0g(
0h(
1="
0q!
1;)
1w4
0I!
1H!
1x1
1w1
1')
1o(
1j(
08(
0{(
0w(
0v(
0u(
0t(
0s(
0r(
0R
1Q
1C)
1;2
0')
0o(
0")
18(
1{(
1w(
1v(
1u(
1t(
1s(
1r(
1")
0H)
#1850
08!
0V)
05!
#1900
18!
1V)
15!
1^)
1s+
b10110111000000000100000000010111 `+
b11111100010000 6,
b11111100010000 5,
b11111100010000 4,
b11111100010000 3,
b11111100010000 2,
b11111100010000 1,
b11111100010000 0,
b11111100010000 /,
b11111100010000 .,
b11111100010000 -,
b11111100010000 ,,
b11111100010000 +,
b11111100010000 *,
b11111100010000 ),
b11111100010000 (,
b11111100010000 ',
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
1<2
1x4
b10110111000000000100000000010111 GE
b10100 Y)
b10100 :!
#1901
1M"
1>)
1X(
1#)
1_)
0(*
0**
1o!
1p!
1q!
1r!
1s!
1t!
1x!
0;)
1B)
1u1
1)A
1+*
0)*
0-"
0.*
1/*
1|)
11*
1,"
0x1
0w1
0((
1'(
07)
16)
1}1
1|1
1{1
0h!
0d!
0c!
0b!
0`!
0_!
1/
1kB
0j(
0%2
0$2
0#2
0{(
0w(
0v(
0u(
0s(
0r(
0<
08
07
06
04
03
08(
17(
0u1
0_)
0C)
0;2
1')
1o(
0")
1x1
1w1
18(
07(
1{(
1w(
1v(
1u(
1s(
1r(
17)
06)
1j(
1_)
1C)
1;2
1")
0')
0o(
08(
17(
0{(
0w(
0v(
0u(
0s(
0r(
07)
16)
0")
1O)
1K)
1J)
1I)
1H)
1G)
1F)
1g"
1$-
1r,
1q,
1p,
1o,
1n,
1m,
1l,
1k,
1j,
1i,
1h,
1g,
1D-
14-
1H$
1($
1$$
1#$
1"$
1!$
1~#
1}#
1|#
1{#
1M4
1E4
1C4
1A4
1?4
1=4
1;4
194
174
1-4
1f#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
1?#
1>#
1=#
1<#
1;#
1o2
1K3
1I3
1G3
1E3
1C3
1A3
1?3
1=3
1;3
193
173
153
1k3
b100 N-
b10 O-
1T-
b11 K-
1J-
1s$
1#%
1"%
1!%
1Q"
1]$
1=)
1}$
132
192
1C2
1?2
1!5
1}4
1{4
#1950
08!
0V)
05!
#2000
18!
1V)
15!
0^)
1`)
0s+
1r+
b11011011100000000010000000001011 `+
0%,
1$,
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
1E,
1@2
1D2
1p2
1L3
1J3
1H3
1F3
1D3
1B3
1@3
1>3
1<3
1:3
183
163
1l3
1.4
142
1N4
1F4
1D4
1B4
1@4
1>4
1<4
1:4
184
1:2
1"5
1~4
1|4
1lB
1*A
b11011011100000000010000000001011 GE
b10101 Y)
b10101 :!
#2001
1?)
1>&
1$%
1%%
1&%
1~$
1-$
1.$
1/$
10$
11$
12$
13$
14$
18$
1t$
1X$
1v#
1K#
1L#
1M#
1N#
1O#
1P#
1Q#
1R#
1S#
1T#
1U#
1V#
1w"
1`$
1S"
1h(
1<"
0="
1W(
0X(
1$)
0#)
0_)
1(*
1**
10*
0o!
0p!
0r!
0s!
0t!
0x!
1a'
1!A
1'A
1"D
1#D
0C)
01*
04*
0+*
1)*
1-"
1.*
15*
0,"
0;2
1YC
06*
0/*
0|)
17*
1})
11*
14*
05*
1,"
09*
0<*
1=*
0+"
16*
07*
0>*
1?*
0})
19*
1<*
1w)
1D*
0=*
1+"
1>*
1*"
0?*
0w)
0D*
0*"
1#2
1`'
1x@
0"6
0x1
0w1
1((
0}1
0|1
0{1
0/
1.
17)
0w4
1u4
1h7
1<8
1n8
1B9
115
1^6
1'C
1T%
1%B
1{A
1yA
1wA
1uA
1sA
1qA
1oA
1mA
19C
17C
15C
1iC
0}$
1u1
092
1L6
0j(
1%2
1$2
0#2
0V5
0x@
1w@
1&'
1%:
1cA
1v9
1R9
1~8
1L8
1x7
18(
0!6
1Z>
1%>
1+?
1">
0u1
036
1,?
x/?
1[>
x^>
x_>
1M>
x0?
1)?
x1?
x`>
xa>
x2?
x*?
xY>
0X5
0L6
1[5
19>
1<>
056
026
1*8
1\8
109
1b9
1b;
16<
1h<
1<=
1F>
1"?
136
156
1L=
1x<
1F<
1r;
1N7
1.7
1|6
0E6
1X:
1U:
1m5
1h:
1e:
195
1$<
1V<
1*=
1\=
1P;
1@;
10;
1~:
1R5
1O5
1[6
1X6
18:
17%
14%
1IA
1CA
0O)
0K)
0J)
0I)
0G)
0F)
0g"
0$-
0r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0D-
04-
0H$
0($
0$$
0#$
0"$
0!$
0~#
0}#
0|#
0{#
0M4
0E4
0C4
0A4
0?4
0=4
0;4
094
074
0-4
0f#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0o2
0K3
0I3
0G3
0E3
0C3
0A3
0?3
0=3
0;3
093
073
053
0k3
0J-
b0 K-
b0 N-
b0 O-
0T-
0=)
0Q"
0]$
0#%
0"%
0!%
0s$
032
0!5
0}4
0{4
0C2
0?2
#2050
08!
0V)
05!
#2100
18!
1V)
15!
0`)
1a)
1s+
b11101101110000000001000000000101 `+
1%,
0E,
1D,
0@2
0D2
0p2
0L3
0J3
0H3
0F3
0D3
0B3
0@3
0>3
0<3
0:3
083
063
0l3
0.4
042
0N4
0F4
0D4
0B4
0@4
0>4
0<4
0:4
084
0:2
0<2
0x4
1v4
0"5
0~4
0|4
1JA
1DA
1dA
1"A
1&B
1|A
1zA
1xA
1vA
1tA
1rA
1pA
1nA
1(C
1(A
1:C
18C
16C
b11101101110000000001000000000101 GE
1"F
1NE
b10110 Y)
b10110 :!
#2101
1@)
16'
1S&
1T&
1U&
1P&
1K&
1n%
1o%
1p%
1q%
1r%
1s%
1t%
1u%
1y%
1k%
1d%
1D%
1G%
0$%
0%%
0&%
1L"
0M"
0>)
0~$
0-$
0.$
0/$
00$
01$
02$
03$
04$
08$
0t$
0X$
0v#
0K#
0L#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0w"
0`$
0S"
1g(
0h(
1="
1X(
1%)
0$)
0(*
0**
0!A
0'A
0B)
1k(
1u1
1LE
0)A
1+*
0)*
0-"
0.*
1/*
1|)
01*
04*
15*
0,"
06*
17*
1})
09*
0<*
1=*
0+"
0>*
1?*
1w)
1D*
1*"
0$2
1#2
0'(
1/
07)
06)
05)
14)
0O5
0h7
0<8
0n8
0B9
015
0^6
0T%
1w4
0kB
1iB
1e
1b
0$'
1#'
0%B
0{A
0yA
0wA
0uA
0sA
0qA
0oA
0mA
0'C
1FC
1BC
1AC
1@C
1?C
1>C
1=C
1<C
1;C
09C
07C
05C
1J!
1=E
15E
1-E
1%E
1xD
1pD
1hD
1`D
1=D
0u1
1>D
1aD
1iD
1qD
1yD
1&E
1.E
16E
1>E
1KC
1LC
1MC
1NC
1OC
1PC
1QC
1RC
1VC
1V5
1"6
0[5
0w@
1S
0&(
1%(
0%:
0cA
0v9
0R9
0~8
0L8
0x7
0X6
07(
0Z>
0%>
0+?
0">
0,?
1/?
0[>
1^>
0_>
0M>
00?
0)?
11?
1`>
0a>
02?
0*?
0Y>
1X5
09>
0<>
04%
0*8
0\8
009
0b9
0b;
06<
0h<
0<=
0F>
0"?
06(
15(
0m5
1!6
126
0L=
0x<
0F<
0r;
0N7
0.7
0|6
0CA
0X:
0U:
0h:
0e:
095
0$<
0V<
0*=
0\=
1E6
0P;
0@;
00;
0~:
08:
0R5
0[6
07%
0IA
#2150
08!
0V)
05!
#2200
18!
1V)
15!
1[)
0a)
1b)
0r+
0q+
1p+
b11110110111000000000100000000010 `+
0%,
0$,
0#,
1",
1E,
1x4
0JA
0DA
0dA
0"A
0&B
0|A
0zA
0xA
0vA
0tA
0rA
0pA
0nA
0lB
1jB
0(C
0(A
0*A
0:C
08C
06C
b11110110111000000000100000000010 GE
1pE
1mE
1/F
1ME
16F
15F
14F
b10111 Y)
b10111 :!
0a+
1d)
0c)
1n(
1)A
1'A
1!A
0LE
17(
16(
05(
0w4
19C
17C
15C
1'C
1kB
0iB
1%B
1{A
1yA
1wA
1uA
1sA
1qA
1oA
1mA
1cA
1IA
1CA
0a!
0t(
05
#2201
1['
1\'
1]'
1J'
1E'
1V'
1Y'
0S&
0T&
0U&
0?)
0P&
0K&
1=&
0>&
0n%
0o%
0p%
0q%
0r%
0s%
0t%
0u%
0y%
0k%
0d%
0D%
0G%
1M"
1h(
1:"
0;"
0<"
0="
1U(
0V(
0W(
1&)
0%)
1v'
00*
08*
1C*
0k(
0a'
0!A
0"D
1*D
0'A
0)A
1u1
1+D
0#D
0D*
0G*
19*
1<*
11*
14*
05*
1,"
0=*
1+"
1H*
0*"
0YC
1XC
0I*
1>*
16*
07*
0?*
1J*
1@*
0w)
0})
09*
1D*
1G*
1L*
1)"
0H*
1*"
0+"
1I*
0J*
0@*
0L*
0)"
0%2
1!/
1A
1$2
0((
1'(
07(
06(
15(
0.
0-
1,
16)
1w4
0IA
0CA
0e
0b
0cA
1$'
0#'
0%B
0{A
0yA
0wA
0uA
0sA
0qA
0oA
0mA
0kB
1iB
0iC
1hC
0'C
0FC
0BC
0AC
0@C
0?C
0>C
0=C
0<C
0;C
09C
07C
05C
1D
1C
1B
0=E
05E
0-E
0%E
0xD
0pD
0hD
0`D
0=D
0u1
0>D
0aD
0iD
0qD
0yD
0&E
0.E
06E
0>E
0KC
0LC
0MC
0NC
0OC
0PC
0QC
0RC
0VC
0&'
1%'
1m1
#2250
08!
0V)
05!
#2300
18!
1V)
15!
0[)
0b)
b1111011011100000000010000000001 `+
1$,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
b0 -,
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
0D,
0C,
1B,
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
1n1
b1111011011100000000010000000001 GE
0pE
0mE
0"F
1!F
0/F
0ME
0NE
06F
05F
04F
b11000 Y)
b11000 :!
b10 .!
1a+
0d)
0n(
1c)
08(
17(
0w4
0u4
0s4
1q4
1kB
1a!
1t(
15
#2301
0['
0\'
0]'
0@)
0J'
0E'
15'
06'
0V'
0Y'
1`-
1e(
0f(
0g(
1<"
0&)
0v'
0q!
1;)
1%2
0!/
0A
1u4
0J!
1I!
0D
0C
0B
1')
0`'
1x1
1w1
1o(
1j(
18(
07(
0t(
0S
1R
1C)
1;2
0')
0o(
08(
17(
1t(
0H)
#2350
08!
0V)
05!
#2400
18!
1V)
15!
0s+
1r+
b10111101101110000000001000000000 `+
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
1<2
0x4
0t4
1r4
1lB
b10111101101110000000001000000000 GE
b11001 Y)
b11001 :!
0a+
1d)
0c)
1n(
0;2
0j(
18(
07(
1w4
1s4
0q4
0kB
0a!
0C)
1')
1o(
0t(
05
1H)
#2401
1>&
1J"
0K"
0M"
1>)
1W(
0X(
1(*
1**
10*
1q!
0;)
1;2
1B)
1"D
1#D
1u1
01*
04*
0+*
1)*
1-"
1.*
15*
0,"
1YC
06*
0/*
0|)
17*
1})
11*
14*
05*
1,"
19*
1+"
16*
07*
0})
09*
0+"
0x1
0w1
0')
0o(
1((
1t(
08(
17(
0/
1.
0w4
0s4
1q4
1kB
1iC
1&'
0t(
17)
#2450
08!
0V)
05!
#2500
18!
1V)
15!
b1011110110111000000000100000000 `+
1%,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
b0 -,
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
0E,
1D,
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
b1011110110111000000000100000000 GE
1"F
b11010 Y)
b11010 :!
#2501
16'
1g(
0h(
1="
0q!
1;)
1J!
1')
1o(
1S
#2550
08!
0V)
05!
#2600
18!
1V)
15!
b101111011011100000000010000000 `+
b101111011011100000000010000000 GE
b11011 Y)
b11011 :!
#2650
08!
0V)
05!
#2700
18!
1V)
15!
b10111101101110000000001000000 `+
b10111101101110000000001000000 GE
b11100 Y)
b11100 :!
#2750
08!
0V)
05!
#2800
18!
1V)
15!
b1011110110111000000000100000 `+
b1011110110111000000000100000 GE
b11101 Y)
b11101 :!
#2850
08!
0V)
05!
#2900
18!
1V)
15!
b101111011011100000000010000 `+
b101111011011100000000010000 GE
b11110 Y)
b11110 :!
#2950
08!
0V)
05!
#3000
18!
1V)
15!
b10111101101110000000001000 `+
b10111101101110000000001000 GE
b11111 Y)
b11111 :!
#3050
08!
0V)
05!
#3100
18!
1V)
15!
b1011110110111000000000100 `+
b1011110110111000000000100 GE
b100000 Y)
b100000 :!
#3150
08!
0V)
05!
#3200
18!
1V)
15!
b101111011011100000000010 `+
b101111011011100000000010 GE
b100001 Y)
b100001 :!
#3250
08!
0V)
05!
#3300
18!
1V)
15!
b10111101101110000000001 `+
b10111101101110000000001 GE
b100010 Y)
b100010 :!
1a+
0d)
0n(
1c)
0;2
1)A
1w4
0kB
0gB
1eB
#3350
08!
0V)
05!
#3400
18!
1V)
15!
b10000000001011110110111000000000 `+
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
0<2
1x4
0lB
0hB
1fB
1*A
b10000000001011110110111000000000 GE
b100011 Y)
b100011 :!
0a+
1d)
0c)
1n(
1;2
0)A
0w4
1kB
1gB
0eB
#3401
1?)
1;&
0<&
0>&
1M"
0>)
0;)
0;2
0B)
0"D
02D
1=D
1)A
1>D
03D
0#D
0u1
0YC
0WC
1VC
1w4
0kB
0gB
1eB
0iC
0gC
1fC
1x1
1w1
0&'
0$'
1#'
#3450
08!
0V)
05!
#3500
18!
1V)
15!
b1000000000101111011011100000000 `+
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
b1000000000101111011011100000000 GE
0"F
0~E
1}E
1NE
b100100 Y)
b100100 :!
#3501
1@)
13'
04'
06'
1;)
0J!
0H!
1G!
0S
0Q
1P
#3550
08!
0V)
05!
#3600
18!
1V)
15!
b100000000010111101101110000000 `+
b100000000010111101101110000000 GE
b100101 Y)
b100101 :!
#3650
08!
0V)
05!
#3700
18!
1V)
15!
b10000000001011110110111000000 `+
b10000000001011110110111000000 GE
b100110 Y)
b100110 :!
#3750
08!
0V)
05!
#3800
18!
1V)
15!
b1000000000101111011011100000 `+
b1000000000101111011011100000 GE
b100111 Y)
b100111 :!
#3850
08!
0V)
05!
#3900
18!
1V)
15!
b100000000010111101101110000 `+
b100000000010111101101110000 GE
b101000 Y)
b101000 :!
#3950
08!
0V)
05!
#4000
18!
1V)
15!
b10000000001011110110111000 `+
b10000000001011110110111000 GE
b101001 Y)
b101001 :!
#4050
08!
0V)
05!
#4100
18!
1V)
15!
b1000000000101111011011100 `+
b1000000000101111011011100 GE
b101010 Y)
b101010 :!
#4150
08!
0V)
05!
#4200
18!
1V)
15!
b100000000010111101101110 `+
b100000000010111101101110 GE
b101011 Y)
b101011 :!
#4250
08!
0V)
05!
#4300
18!
1V)
15!
b10000000001011110110111 `+
b10000000001011110110111 GE
b101100 Y)
b101100 :!
1a+
0d)
0n(
1c)
0)A
1kB
1j(
1C)
1;2
0')
0o(
18(
0H)
#4350
08!
0V)
05!
#4400
18!
1V)
15!
1s+
b10000000001000000000101111011011 `+
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
1<2
1lB
0*A
b10000000001000000000101111011011 GE
b101101 Y)
b101101 :!
#4401
0?)
1>&
1>)
1X(
0(*
0**
0;)
1B)
1"D
1#D
1u1
1)A
1+*
0)*
0-"
0.*
1YC
1/*
1|)
01*
04*
15*
0,"
06*
17*
1})
19*
1+"
0x1
0w1
0((
0'(
1&(
07)
06)
15)
1a!
1/
1iC
0j(
1&'
1t(
15
08(
07(
16(
0C)
0;2
1')
1o(
18(
17(
06(
0t(
17)
16)
05)
1H)
#4450
08!
0V)
05!
#4500
18!
1V)
15!
b11000000000100000000010111101101 `+
1E,
0<2
1*A
b11000000000100000000010111101101 GE
1"F
0NE
b101110 Y)
b101110 :!
#4501
0@)
16'
1?)
0>)
1h(
0B)
0u1
0)A
1J!
1x1
1w1
1S
1j(
1C)
1;2
0')
0o(
08(
07(
16(
1t(
07)
06)
15)
0H)
1L-
1{$
1&2
172
#4550
08!
0V)
05!
#4600
18!
1V)
15!
0s+
0r+
1q+
b11100000000010000000001011110110 `+
0%,
0$,
1#,
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
182
1<2
0*A
b11100000000010000000001011110110 GE
1NE
b101111 Y)
b101111 :!
0a+
1d)
0c)
1n(
0;2
072
1)A
0j(
18(
17(
06(
0a!
0C)
1')
1o(
0t(
05
17)
16)
05)
1H)
0L-
0{$
0&2
#4601
1@)
0?)
1>)
1|$
1;"
0<"
0="
1V(
0W(
0X(
1(*
1**
00*
18*
1q!
172
1;2
1B)
0)A
1u1
09*
0<*
11*
14*
0+*
1)*
1-"
1.*
05*
1,"
1=*
0+"
0>*
16*
0/*
0|)
07*
1?*
1w)
0})
01*
0,"
19*
1<*
0D*
0G*
1H*
0*"
0=*
1+"
1>*
0I*
1J*
0?*
0w)
1@*
1L*
1D*
1G*
0H*
1*"
1)"
1I*
0J*
0@*
0L*
0)"
0x1
0w1
0')
0o(
1((
1t(
08(
07(
16(
0/
0.
1-
07)
06)
15)
0t(
17)
#4650
08!
0V)
05!
#4700
18!
1V)
15!
b1110000000001000000000101111011 `+
1%,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
b0 -,
b0 ,,
b0 +,
b0 *,
b0 ),
b0 (,
b0 ',
0E,
0D,
1C,
1f,
1e,
1d,
1c,
1b,
1a,
1`,
1_,
1^,
1],
1\,
1[,
1Z,
1Y,
1X,
1W,
b1110000000001000000000101111011 GE
0NE
b110000 Y)
b110000 :!
1a+
0d)
0n(
1c)
0;2
072
1)A
1%A
18(
0w4
0u4
1s4
1a!
1t(
15
#4701
0@)
1f(
0g(
0h(
1="
0q!
1;)
1w4
1')
1o(
08(
0t(
#4750
08!
0V)
05!
#4800
18!
1V)
15!
b10111000000000100000000010111101 `+
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
082
0<2
0v4
1t4
1&A
1*A
b10111000000000100000000010111101 GE
b110001 Y)
b110001 :!
#4801
1?)
1m%
1K"
0L"
0>)
0|$
0;)
0%A
0B)
0u1
0)A
1-!
0iB
1gB
1x1
1w1
1j(
1C)
1;2
0')
0o(
18(
1t(
0H)
1L-
1{$
1&2
172
#4850
08!
0V)
05!
#4900
18!
1V)
15!
1s+
b11011100000000010000000001011110 `+
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
b100000000000 -,
b100000000000 ,,
b100000000000 +,
b100000000000 *,
b100000000000 ),
b100000000000 (,
b100000000000 ',
182
1<2
0&A
0jB
1hB
0*A
b1000 IE
b0 JE
b1 JE
b11011100000000010000000001011110 GE
1NE
b110010 Y)
b110010 :!
b11 .!
0a+
1d)
0c)
1n(
0;2
072
1)A
1%A
0j(
08(
1iB
0gB
0a!
0C)
1')
1o(
0t(
05
1H)
0L-
0{$
0&2
#4901
1@)
0?)
1<&
0=&
0m%
1>)
1|$
1X(
0(*
0**
1q!
172
1;2
1B)
0%A
0*D
12D
0)A
13D
0+D
1u1
1+*
0)*
0-"
0.*
0XC
1WC
1/*
1|)
11*
1,"
0-!
0x1
0w1
0')
0o(
0((
1'(
1t(
18(
1/
0iB
1gB
0hC
1gC
0%'
1$'
0t(
07)
16)
