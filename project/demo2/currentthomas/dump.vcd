$date
	Fri Nov 15 17:02:31 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var reg 1 :! clk $end
$var reg 1 ;! rst $end
$var wire 1 8! err $end
$var integer 32 <! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =! err $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' branching_out_MEM_WB $end
$var wire 1 a' err1 $end
$var wire 1 b' branchNOP $end
$var wire 1 c' MUX_OUT_ONE [15] $end
$var wire 1 d' MUX_OUT_ONE [14] $end
$var wire 1 e' MUX_OUT_ONE [13] $end
$var wire 1 f' MUX_OUT_ONE [12] $end
$var wire 1 g' MUX_OUT_ONE [11] $end
$var wire 1 h' MUX_OUT_ONE [10] $end
$var wire 1 i' MUX_OUT_ONE [9] $end
$var wire 1 j' MUX_OUT_ONE [8] $end
$var wire 1 k' MUX_OUT_ONE [7] $end
$var wire 1 l' MUX_OUT_ONE [6] $end
$var wire 1 m' MUX_OUT_ONE [5] $end
$var wire 1 n' MUX_OUT_ONE [4] $end
$var wire 1 o' MUX_OUT_ONE [3] $end
$var wire 1 p' MUX_OUT_ONE [2] $end
$var wire 1 q' MUX_OUT_ONE [1] $end
$var wire 1 r' MUX_OUT_ONE [0] $end
$var wire 1 s' MUX_OUT_TWO [15] $end
$var wire 1 t' MUX_OUT_TWO [14] $end
$var wire 1 u' MUX_OUT_TWO [13] $end
$var wire 1 v' MUX_OUT_TWO [12] $end
$var wire 1 w' MUX_OUT_TWO [11] $end
$var wire 1 x' MUX_OUT_TWO [10] $end
$var wire 1 y' MUX_OUT_TWO [9] $end
$var wire 1 z' MUX_OUT_TWO [8] $end
$var wire 1 {' MUX_OUT_TWO [7] $end
$var wire 1 |' MUX_OUT_TWO [6] $end
$var wire 1 }' MUX_OUT_TWO [5] $end
$var wire 1 ~' MUX_OUT_TWO [4] $end
$var wire 1 !( MUX_OUT_TWO [3] $end
$var wire 1 "( MUX_OUT_TWO [2] $end
$var wire 1 #( MUX_OUT_TWO [1] $end
$var wire 1 $( MUX_OUT_TWO [0] $end
$var wire 1 %( PC_NO_PLUS_TWO [15] $end
$var wire 1 &( PC_NO_PLUS_TWO [14] $end
$var wire 1 '( PC_NO_PLUS_TWO [13] $end
$var wire 1 (( PC_NO_PLUS_TWO [12] $end
$var wire 1 )( PC_NO_PLUS_TWO [11] $end
$var wire 1 *( PC_NO_PLUS_TWO [10] $end
$var wire 1 +( PC_NO_PLUS_TWO [9] $end
$var wire 1 ,( PC_NO_PLUS_TWO [8] $end
$var wire 1 -( PC_NO_PLUS_TWO [7] $end
$var wire 1 .( PC_NO_PLUS_TWO [6] $end
$var wire 1 /( PC_NO_PLUS_TWO [5] $end
$var wire 1 0( PC_NO_PLUS_TWO [4] $end
$var wire 1 1( PC_NO_PLUS_TWO [3] $end
$var wire 1 2( PC_NO_PLUS_TWO [2] $end
$var wire 1 3( PC_NO_PLUS_TWO [1] $end
$var wire 1 4( PC_NO_PLUS_TWO [0] $end
$var wire 1 5( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 6( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 7( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 8( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 9( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 :( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 ;( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 <( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 =( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 >( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 ?( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 @( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 A( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 B( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 C( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 D( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 E( SendNop $end
$var wire 1 F( inst_again [15] $end
$var wire 1 G( inst_again [14] $end
$var wire 1 H( inst_again [13] $end
$var wire 1 I( inst_again [12] $end
$var wire 1 J( inst_again [11] $end
$var wire 1 K( inst_again [10] $end
$var wire 1 L( inst_again [9] $end
$var wire 1 M( inst_again [8] $end
$var wire 1 N( inst_again [7] $end
$var wire 1 O( inst_again [6] $end
$var wire 1 P( inst_again [5] $end
$var wire 1 Q( inst_again [4] $end
$var wire 1 R( inst_again [3] $end
$var wire 1 S( inst_again [2] $end
$var wire 1 T( inst_again [1] $end
$var wire 1 U( inst_again [0] $end
$var wire 1 V( pc_repeat [15] $end
$var wire 1 W( pc_repeat [14] $end
$var wire 1 X( pc_repeat [13] $end
$var wire 1 Y( pc_repeat [12] $end
$var wire 1 Z( pc_repeat [11] $end
$var wire 1 [( pc_repeat [10] $end
$var wire 1 \( pc_repeat [9] $end
$var wire 1 ]( pc_repeat [8] $end
$var wire 1 ^( pc_repeat [7] $end
$var wire 1 _( pc_repeat [6] $end
$var wire 1 `( pc_repeat [5] $end
$var wire 1 a( pc_repeat [4] $end
$var wire 1 b( pc_repeat [3] $end
$var wire 1 c( pc_repeat [2] $end
$var wire 1 d( pc_repeat [1] $end
$var wire 1 e( pc_repeat [0] $end
$var wire 1 f( MemWrt_Decode_Out $end
$var wire 1 g( RegWrt_Decode_Out $end
$var wire 1 h( NOP_Out_ID_EX $end
$var wire 1 i( NOP_Out_ID_MEM $end
$var wire 1 j( NOP_Out_ID_WB $end
$var wire 1 k( branching_Decode_Out $end
$var wire 1 l( Nop_or_Branch $end

$scope module my_clkrst $end
$var reg 1 m( clk $end
$var reg 1 n( rst $end
$var wire 1 o( err $end
$var integer 32 p( cycle_count $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 s' PC_in [15] $end
$var wire 1 t' PC_in [14] $end
$var wire 1 u' PC_in [13] $end
$var wire 1 v' PC_in [12] $end
$var wire 1 w' PC_in [11] $end
$var wire 1 x' PC_in [10] $end
$var wire 1 y' PC_in [9] $end
$var wire 1 z' PC_in [8] $end
$var wire 1 {' PC_in [7] $end
$var wire 1 |' PC_in [6] $end
$var wire 1 }' PC_in [5] $end
$var wire 1 ~' PC_in [4] $end
$var wire 1 !( PC_in [3] $end
$var wire 1 "( PC_in [2] $end
$var wire 1 #( PC_in [1] $end
$var wire 1 $( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 %( pc_temp [15] $end
$var wire 1 &( pc_temp [14] $end
$var wire 1 '( pc_temp [13] $end
$var wire 1 (( pc_temp [12] $end
$var wire 1 )( pc_temp [11] $end
$var wire 1 *( pc_temp [10] $end
$var wire 1 +( pc_temp [9] $end
$var wire 1 ,( pc_temp [8] $end
$var wire 1 -( pc_temp [7] $end
$var wire 1 .( pc_temp [6] $end
$var wire 1 /( pc_temp [5] $end
$var wire 1 0( pc_temp [4] $end
$var wire 1 1( pc_temp [3] $end
$var wire 1 2( pc_temp [2] $end
$var wire 1 3( pc_temp [1] $end
$var wire 1 4( pc_temp [0] $end

$scope module fa $end
$var wire 1 %( A [15] $end
$var wire 1 &( A [14] $end
$var wire 1 '( A [13] $end
$var wire 1 (( A [12] $end
$var wire 1 )( A [11] $end
$var wire 1 *( A [10] $end
$var wire 1 +( A [9] $end
$var wire 1 ,( A [8] $end
$var wire 1 -( A [7] $end
$var wire 1 .( A [6] $end
$var wire 1 /( A [5] $end
$var wire 1 0( A [4] $end
$var wire 1 1( A [3] $end
$var wire 1 2( A [2] $end
$var wire 1 3( A [1] $end
$var wire 1 4( A [0] $end
$var wire 1 q( B [15] $end
$var wire 1 r( B [14] $end
$var wire 1 s( B [13] $end
$var wire 1 t( B [12] $end
$var wire 1 u( B [11] $end
$var wire 1 v( B [10] $end
$var wire 1 w( B [9] $end
$var wire 1 x( B [8] $end
$var wire 1 y( B [7] $end
$var wire 1 z( B [6] $end
$var wire 1 {( B [5] $end
$var wire 1 |( B [4] $end
$var wire 1 }( B [3] $end
$var wire 1 ~( B [2] $end
$var wire 1 !) B [1] $end
$var wire 1 ") B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 #) Cout $end
$var wire 1 $) Cout0 $end
$var wire 1 %) Cout1 $end
$var wire 1 &) Cout2 $end
$var wire 1 ') Cin $end

$scope module f1 $end
$var wire 1 1( A [3] $end
$var wire 1 2( A [2] $end
$var wire 1 3( A [1] $end
$var wire 1 4( A [0] $end
$var wire 1 }( B [3] $end
$var wire 1 ~( B [2] $end
$var wire 1 !) B [1] $end
$var wire 1 ") B [0] $end
$var wire 1 ') Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 $) Cout $end
$var wire 1 () Cout0 $end
$var wire 1 )) Cout1 $end
$var wire 1 *) Cout2 $end

$scope module f1 $end
$var wire 1 4( A $end
$var wire 1 ") B $end
$var wire 1 ') Cin $end
$var wire 1 0" S $end
$var wire 1 () Cout $end
$var wire 1 +) xor_AB $end
$var wire 1 ,) xor_ABCin $end
$var wire 1 -) NAND_AB $end
$var wire 1 .) not_NAND_AB $end
$var wire 1 /) NAND_Cin_xor_AB $end
$var wire 1 0) not_NAND_Cin_xor_AB $end
$var wire 1 1) NOR_2NAND $end
$var wire 1 2) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4( in1 $end
$var wire 1 ") in2 $end
$var wire 1 +) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +) in1 $end
$var wire 1 ') in2 $end
$var wire 1 ,) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4( in1 $end
$var wire 1 ") in2 $end
$var wire 1 -) out $end
$upscope $end

$scope module not1 $end
$var wire 1 -) in1 $end
$var wire 1 .) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ') in1 $end
$var wire 1 +) in2 $end
$var wire 1 /) out $end
$upscope $end

$scope module not2 $end
$var wire 1 /) in1 $end
$var wire 1 0) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .) in1 $end
$var wire 1 0) in2 $end
$var wire 1 1) out $end
$upscope $end

$scope module not3 $end
$var wire 1 1) in1 $end
$var wire 1 2) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 3( A $end
$var wire 1 !) B $end
$var wire 1 () Cin $end
$var wire 1 /" S $end
$var wire 1 )) Cout $end
$var wire 1 3) xor_AB $end
$var wire 1 4) xor_ABCin $end
$var wire 1 5) NAND_AB $end
$var wire 1 6) not_NAND_AB $end
$var wire 1 7) NAND_Cin_xor_AB $end
$var wire 1 8) not_NAND_Cin_xor_AB $end
$var wire 1 9) NOR_2NAND $end
$var wire 1 :) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3( in1 $end
$var wire 1 !) in2 $end
$var wire 1 3) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 3) in1 $end
$var wire 1 () in2 $end
$var wire 1 4) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3( in1 $end
$var wire 1 !) in2 $end
$var wire 1 5) out $end
$upscope $end

$scope module not1 $end
$var wire 1 5) in1 $end
$var wire 1 6) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 () in1 $end
$var wire 1 3) in2 $end
$var wire 1 7) out $end
$upscope $end

$scope module not2 $end
$var wire 1 7) in1 $end
$var wire 1 8) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 6) in1 $end
$var wire 1 8) in2 $end
$var wire 1 9) out $end
$upscope $end

$scope module not3 $end
$var wire 1 9) in1 $end
$var wire 1 :) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 2( A $end
$var wire 1 ~( B $end
$var wire 1 )) Cin $end
$var wire 1 ." S $end
$var wire 1 *) Cout $end
$var wire 1 ;) xor_AB $end
$var wire 1 <) xor_ABCin $end
$var wire 1 =) NAND_AB $end
$var wire 1 >) not_NAND_AB $end
$var wire 1 ?) NAND_Cin_xor_AB $end
$var wire 1 @) not_NAND_Cin_xor_AB $end
$var wire 1 A) NOR_2NAND $end
$var wire 1 B) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2( in1 $end
$var wire 1 ~( in2 $end
$var wire 1 ;) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;) in1 $end
$var wire 1 )) in2 $end
$var wire 1 <) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2( in1 $end
$var wire 1 ~( in2 $end
$var wire 1 =) out $end
$upscope $end

$scope module not1 $end
$var wire 1 =) in1 $end
$var wire 1 >) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )) in1 $end
$var wire 1 ;) in2 $end
$var wire 1 ?) out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?) in1 $end
$var wire 1 @) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >) in1 $end
$var wire 1 @) in2 $end
$var wire 1 A) out $end
$upscope $end

$scope module not3 $end
$var wire 1 A) in1 $end
$var wire 1 B) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 1( A $end
$var wire 1 }( B $end
$var wire 1 *) Cin $end
$var wire 1 -" S $end
$var wire 1 $) Cout $end
$var wire 1 C) xor_AB $end
$var wire 1 D) xor_ABCin $end
$var wire 1 E) NAND_AB $end
$var wire 1 F) not_NAND_AB $end
$var wire 1 G) NAND_Cin_xor_AB $end
$var wire 1 H) not_NAND_Cin_xor_AB $end
$var wire 1 I) NOR_2NAND $end
$var wire 1 J) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 1( in1 $end
$var wire 1 }( in2 $end
$var wire 1 C) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 C) in1 $end
$var wire 1 *) in2 $end
$var wire 1 D) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 1( in1 $end
$var wire 1 }( in2 $end
$var wire 1 E) out $end
$upscope $end

$scope module not1 $end
$var wire 1 E) in1 $end
$var wire 1 F) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 *) in1 $end
$var wire 1 C) in2 $end
$var wire 1 G) out $end
$upscope $end

$scope module not2 $end
$var wire 1 G) in1 $end
$var wire 1 H) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 F) in1 $end
$var wire 1 H) in2 $end
$var wire 1 I) out $end
$upscope $end

$scope module not3 $end
$var wire 1 I) in1 $end
$var wire 1 J) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 -( A [3] $end
$var wire 1 .( A [2] $end
$var wire 1 /( A [1] $end
$var wire 1 0( A [0] $end
$var wire 1 y( B [3] $end
$var wire 1 z( B [2] $end
$var wire 1 {( B [1] $end
$var wire 1 |( B [0] $end
$var wire 1 $) Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 %) Cout $end
$var wire 1 K) Cout0 $end
$var wire 1 L) Cout1 $end
$var wire 1 M) Cout2 $end

$scope module f1 $end
$var wire 1 0( A $end
$var wire 1 |( B $end
$var wire 1 $) Cin $end
$var wire 1 ," S $end
$var wire 1 K) Cout $end
$var wire 1 N) xor_AB $end
$var wire 1 O) xor_ABCin $end
$var wire 1 P) NAND_AB $end
$var wire 1 Q) not_NAND_AB $end
$var wire 1 R) NAND_Cin_xor_AB $end
$var wire 1 S) not_NAND_Cin_xor_AB $end
$var wire 1 T) NOR_2NAND $end
$var wire 1 U) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 0( in1 $end
$var wire 1 |( in2 $end
$var wire 1 N) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 N) in1 $end
$var wire 1 $) in2 $end
$var wire 1 O) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 0( in1 $end
$var wire 1 |( in2 $end
$var wire 1 P) out $end
$upscope $end

$scope module not1 $end
$var wire 1 P) in1 $end
$var wire 1 Q) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 $) in1 $end
$var wire 1 N) in2 $end
$var wire 1 R) out $end
$upscope $end

$scope module not2 $end
$var wire 1 R) in1 $end
$var wire 1 S) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 Q) in1 $end
$var wire 1 S) in2 $end
$var wire 1 T) out $end
$upscope $end

$scope module not3 $end
$var wire 1 T) in1 $end
$var wire 1 U) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 /( A $end
$var wire 1 {( B $end
$var wire 1 K) Cin $end
$var wire 1 +" S $end
$var wire 1 L) Cout $end
$var wire 1 V) xor_AB $end
$var wire 1 W) xor_ABCin $end
$var wire 1 X) NAND_AB $end
$var wire 1 Y) not_NAND_AB $end
$var wire 1 Z) NAND_Cin_xor_AB $end
$var wire 1 [) not_NAND_Cin_xor_AB $end
$var wire 1 \) NOR_2NAND $end
$var wire 1 ]) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 /( in1 $end
$var wire 1 {( in2 $end
$var wire 1 V) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 V) in1 $end
$var wire 1 K) in2 $end
$var wire 1 W) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 /( in1 $end
$var wire 1 {( in2 $end
$var wire 1 X) out $end
$upscope $end

$scope module not1 $end
$var wire 1 X) in1 $end
$var wire 1 Y) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K) in1 $end
$var wire 1 V) in2 $end
$var wire 1 Z) out $end
$upscope $end

$scope module not2 $end
$var wire 1 Z) in1 $end
$var wire 1 [) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 Y) in1 $end
$var wire 1 [) in2 $end
$var wire 1 \) out $end
$upscope $end

$scope module not3 $end
$var wire 1 \) in1 $end
$var wire 1 ]) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 .( A $end
$var wire 1 z( B $end
$var wire 1 L) Cin $end
$var wire 1 *" S $end
$var wire 1 M) Cout $end
$var wire 1 ^) xor_AB $end
$var wire 1 _) xor_ABCin $end
$var wire 1 `) NAND_AB $end
$var wire 1 a) not_NAND_AB $end
$var wire 1 b) NAND_Cin_xor_AB $end
$var wire 1 c) not_NAND_Cin_xor_AB $end
$var wire 1 d) NOR_2NAND $end
$var wire 1 e) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 .( in1 $end
$var wire 1 z( in2 $end
$var wire 1 ^) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^) in1 $end
$var wire 1 L) in2 $end
$var wire 1 _) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 .( in1 $end
$var wire 1 z( in2 $end
$var wire 1 `) out $end
$upscope $end

$scope module not1 $end
$var wire 1 `) in1 $end
$var wire 1 a) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L) in1 $end
$var wire 1 ^) in2 $end
$var wire 1 b) out $end
$upscope $end

$scope module not2 $end
$var wire 1 b) in1 $end
$var wire 1 c) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 a) in1 $end
$var wire 1 c) in2 $end
$var wire 1 d) out $end
$upscope $end

$scope module not3 $end
$var wire 1 d) in1 $end
$var wire 1 e) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 -( A $end
$var wire 1 y( B $end
$var wire 1 M) Cin $end
$var wire 1 )" S $end
$var wire 1 %) Cout $end
$var wire 1 f) xor_AB $end
$var wire 1 g) xor_ABCin $end
$var wire 1 h) NAND_AB $end
$var wire 1 i) not_NAND_AB $end
$var wire 1 j) NAND_Cin_xor_AB $end
$var wire 1 k) not_NAND_Cin_xor_AB $end
$var wire 1 l) NOR_2NAND $end
$var wire 1 m) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 -( in1 $end
$var wire 1 y( in2 $end
$var wire 1 f) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 f) in1 $end
$var wire 1 M) in2 $end
$var wire 1 g) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -( in1 $end
$var wire 1 y( in2 $end
$var wire 1 h) out $end
$upscope $end

$scope module not1 $end
$var wire 1 h) in1 $end
$var wire 1 i) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 M) in1 $end
$var wire 1 f) in2 $end
$var wire 1 j) out $end
$upscope $end

$scope module not2 $end
$var wire 1 j) in1 $end
$var wire 1 k) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 i) in1 $end
$var wire 1 k) in2 $end
$var wire 1 l) out $end
$upscope $end

$scope module not3 $end
$var wire 1 l) in1 $end
$var wire 1 m) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 )( A [3] $end
$var wire 1 *( A [2] $end
$var wire 1 +( A [1] $end
$var wire 1 ,( A [0] $end
$var wire 1 u( B [3] $end
$var wire 1 v( B [2] $end
$var wire 1 w( B [1] $end
$var wire 1 x( B [0] $end
$var wire 1 %) Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 &) Cout $end
$var wire 1 n) Cout0 $end
$var wire 1 o) Cout1 $end
$var wire 1 p) Cout2 $end

$scope module f1 $end
$var wire 1 ,( A $end
$var wire 1 x( B $end
$var wire 1 %) Cin $end
$var wire 1 (" S $end
$var wire 1 n) Cout $end
$var wire 1 q) xor_AB $end
$var wire 1 r) xor_ABCin $end
$var wire 1 s) NAND_AB $end
$var wire 1 t) not_NAND_AB $end
$var wire 1 u) NAND_Cin_xor_AB $end
$var wire 1 v) not_NAND_Cin_xor_AB $end
$var wire 1 w) NOR_2NAND $end
$var wire 1 x) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ,( in1 $end
$var wire 1 x( in2 $end
$var wire 1 q) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 q) in1 $end
$var wire 1 %) in2 $end
$var wire 1 r) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,( in1 $end
$var wire 1 x( in2 $end
$var wire 1 s) out $end
$upscope $end

$scope module not1 $end
$var wire 1 s) in1 $end
$var wire 1 t) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 %) in1 $end
$var wire 1 q) in2 $end
$var wire 1 u) out $end
$upscope $end

$scope module not2 $end
$var wire 1 u) in1 $end
$var wire 1 v) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 t) in1 $end
$var wire 1 v) in2 $end
$var wire 1 w) out $end
$upscope $end

$scope module not3 $end
$var wire 1 w) in1 $end
$var wire 1 x) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 +( A $end
$var wire 1 w( B $end
$var wire 1 n) Cin $end
$var wire 1 '" S $end
$var wire 1 o) Cout $end
$var wire 1 y) xor_AB $end
$var wire 1 z) xor_ABCin $end
$var wire 1 {) NAND_AB $end
$var wire 1 |) not_NAND_AB $end
$var wire 1 }) NAND_Cin_xor_AB $end
$var wire 1 ~) not_NAND_Cin_xor_AB $end
$var wire 1 !* NOR_2NAND $end
$var wire 1 "* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 +( in1 $end
$var wire 1 w( in2 $end
$var wire 1 y) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 y) in1 $end
$var wire 1 n) in2 $end
$var wire 1 z) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +( in1 $end
$var wire 1 w( in2 $end
$var wire 1 {) out $end
$upscope $end

$scope module not1 $end
$var wire 1 {) in1 $end
$var wire 1 |) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n) in1 $end
$var wire 1 y) in2 $end
$var wire 1 }) out $end
$upscope $end

$scope module not2 $end
$var wire 1 }) in1 $end
$var wire 1 ~) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 |) in1 $end
$var wire 1 ~) in2 $end
$var wire 1 !* out $end
$upscope $end

$scope module not3 $end
$var wire 1 !* in1 $end
$var wire 1 "* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 *( A $end
$var wire 1 v( B $end
$var wire 1 o) Cin $end
$var wire 1 &" S $end
$var wire 1 p) Cout $end
$var wire 1 #* xor_AB $end
$var wire 1 $* xor_ABCin $end
$var wire 1 %* NAND_AB $end
$var wire 1 &* not_NAND_AB $end
$var wire 1 '* NAND_Cin_xor_AB $end
$var wire 1 (* not_NAND_Cin_xor_AB $end
$var wire 1 )* NOR_2NAND $end
$var wire 1 ** not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 *( in1 $end
$var wire 1 v( in2 $end
$var wire 1 #* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 #* in1 $end
$var wire 1 o) in2 $end
$var wire 1 $* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *( in1 $end
$var wire 1 v( in2 $end
$var wire 1 %* out $end
$upscope $end

$scope module not1 $end
$var wire 1 %* in1 $end
$var wire 1 &* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o) in1 $end
$var wire 1 #* in2 $end
$var wire 1 '* out $end
$upscope $end

$scope module not2 $end
$var wire 1 '* in1 $end
$var wire 1 (* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 &* in1 $end
$var wire 1 (* in2 $end
$var wire 1 )* out $end
$upscope $end

$scope module not3 $end
$var wire 1 )* in1 $end
$var wire 1 ** out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 )( A $end
$var wire 1 u( B $end
$var wire 1 p) Cin $end
$var wire 1 %" S $end
$var wire 1 &) Cout $end
$var wire 1 +* xor_AB $end
$var wire 1 ,* xor_ABCin $end
$var wire 1 -* NAND_AB $end
$var wire 1 .* not_NAND_AB $end
$var wire 1 /* NAND_Cin_xor_AB $end
$var wire 1 0* not_NAND_Cin_xor_AB $end
$var wire 1 1* NOR_2NAND $end
$var wire 1 2* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 )( in1 $end
$var wire 1 u( in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +* in1 $end
$var wire 1 p) in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )( in1 $end
$var wire 1 u( in2 $end
$var wire 1 -* out $end
$upscope $end

$scope module not1 $end
$var wire 1 -* in1 $end
$var wire 1 .* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p) in1 $end
$var wire 1 +* in2 $end
$var wire 1 /* out $end
$upscope $end

$scope module not2 $end
$var wire 1 /* in1 $end
$var wire 1 0* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .* in1 $end
$var wire 1 0* in2 $end
$var wire 1 1* out $end
$upscope $end

$scope module not3 $end
$var wire 1 1* in1 $end
$var wire 1 2* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 %( A [3] $end
$var wire 1 &( A [2] $end
$var wire 1 '( A [1] $end
$var wire 1 (( A [0] $end
$var wire 1 q( B [3] $end
$var wire 1 r( B [2] $end
$var wire 1 s( B [1] $end
$var wire 1 t( B [0] $end
$var wire 1 &) Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 #) Cout $end
$var wire 1 3* Cout0 $end
$var wire 1 4* Cout1 $end
$var wire 1 5* Cout2 $end

$scope module f1 $end
$var wire 1 (( A $end
$var wire 1 t( B $end
$var wire 1 &) Cin $end
$var wire 1 $" S $end
$var wire 1 3* Cout $end
$var wire 1 6* xor_AB $end
$var wire 1 7* xor_ABCin $end
$var wire 1 8* NAND_AB $end
$var wire 1 9* not_NAND_AB $end
$var wire 1 :* NAND_Cin_xor_AB $end
$var wire 1 ;* not_NAND_Cin_xor_AB $end
$var wire 1 <* NOR_2NAND $end
$var wire 1 =* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 (( in1 $end
$var wire 1 t( in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 6* in1 $end
$var wire 1 &) in2 $end
$var wire 1 7* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (( in1 $end
$var wire 1 t( in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module not1 $end
$var wire 1 8* in1 $end
$var wire 1 9* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 &) in1 $end
$var wire 1 6* in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module not2 $end
$var wire 1 :* in1 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 9* in1 $end
$var wire 1 ;* in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not3 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 '( A $end
$var wire 1 s( B $end
$var wire 1 3* Cin $end
$var wire 1 #" S $end
$var wire 1 4* Cout $end
$var wire 1 >* xor_AB $end
$var wire 1 ?* xor_ABCin $end
$var wire 1 @* NAND_AB $end
$var wire 1 A* not_NAND_AB $end
$var wire 1 B* NAND_Cin_xor_AB $end
$var wire 1 C* not_NAND_Cin_xor_AB $end
$var wire 1 D* NOR_2NAND $end
$var wire 1 E* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 '( in1 $end
$var wire 1 s( in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 >* in1 $end
$var wire 1 3* in2 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '( in1 $end
$var wire 1 s( in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not1 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3* in1 $end
$var wire 1 >* in2 $end
$var wire 1 B* out $end
$upscope $end

$scope module not2 $end
$var wire 1 B* in1 $end
$var wire 1 C* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 A* in1 $end
$var wire 1 C* in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module not3 $end
$var wire 1 D* in1 $end
$var wire 1 E* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 &( A $end
$var wire 1 r( B $end
$var wire 1 4* Cin $end
$var wire 1 "" S $end
$var wire 1 5* Cout $end
$var wire 1 F* xor_AB $end
$var wire 1 G* xor_ABCin $end
$var wire 1 H* NAND_AB $end
$var wire 1 I* not_NAND_AB $end
$var wire 1 J* NAND_Cin_xor_AB $end
$var wire 1 K* not_NAND_Cin_xor_AB $end
$var wire 1 L* NOR_2NAND $end
$var wire 1 M* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 &( in1 $end
$var wire 1 r( in2 $end
$var wire 1 F* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 F* in1 $end
$var wire 1 4* in2 $end
$var wire 1 G* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &( in1 $end
$var wire 1 r( in2 $end
$var wire 1 H* out $end
$upscope $end

$scope module not1 $end
$var wire 1 H* in1 $end
$var wire 1 I* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 4* in1 $end
$var wire 1 F* in2 $end
$var wire 1 J* out $end
$upscope $end

$scope module not2 $end
$var wire 1 J* in1 $end
$var wire 1 K* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 I* in1 $end
$var wire 1 K* in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module not3 $end
$var wire 1 L* in1 $end
$var wire 1 M* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 %( A $end
$var wire 1 q( B $end
$var wire 1 5* Cin $end
$var wire 1 !" S $end
$var wire 1 #) Cout $end
$var wire 1 N* xor_AB $end
$var wire 1 O* xor_ABCin $end
$var wire 1 P* NAND_AB $end
$var wire 1 Q* not_NAND_AB $end
$var wire 1 R* NAND_Cin_xor_AB $end
$var wire 1 S* not_NAND_Cin_xor_AB $end
$var wire 1 T* NOR_2NAND $end
$var wire 1 U* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 %( in1 $end
$var wire 1 q( in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 N* in1 $end
$var wire 1 5* in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %( in1 $end
$var wire 1 q( in2 $end
$var wire 1 P* out $end
$upscope $end

$scope module not1 $end
$var wire 1 P* in1 $end
$var wire 1 Q* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5* in1 $end
$var wire 1 N* in2 $end
$var wire 1 R* out $end
$upscope $end

$scope module not2 $end
$var wire 1 R* in1 $end
$var wire 1 S* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 Q* in1 $end
$var wire 1 S* in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module not3 $end
$var wire 1 T* in1 $end
$var wire 1 U* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 V* data_in [15] $end
$var wire 1 W* data_in [14] $end
$var wire 1 X* data_in [13] $end
$var wire 1 Y* data_in [12] $end
$var wire 1 Z* data_in [11] $end
$var wire 1 [* data_in [10] $end
$var wire 1 \* data_in [9] $end
$var wire 1 ]* data_in [8] $end
$var wire 1 ^* data_in [7] $end
$var wire 1 _* data_in [6] $end
$var wire 1 `* data_in [5] $end
$var wire 1 a* data_in [4] $end
$var wire 1 b* data_in [3] $end
$var wire 1 c* data_in [2] $end
$var wire 1 d* data_in [1] $end
$var wire 1 e* data_in [0] $end
$var wire 1 %( addr [15] $end
$var wire 1 &( addr [14] $end
$var wire 1 '( addr [13] $end
$var wire 1 (( addr [12] $end
$var wire 1 )( addr [11] $end
$var wire 1 *( addr [10] $end
$var wire 1 +( addr [9] $end
$var wire 1 ,( addr [8] $end
$var wire 1 -( addr [7] $end
$var wire 1 .( addr [6] $end
$var wire 1 /( addr [5] $end
$var wire 1 0( addr [4] $end
$var wire 1 1( addr [3] $end
$var wire 1 2( addr [2] $end
$var wire 1 3( addr [1] $end
$var wire 1 4( addr [0] $end
$var wire 1 f* enable $end
$var wire 1 g* wr $end
$var wire 1 h* createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i* loaded $end
$var reg 17 j* largest [16:0] $end
$var integer 32 k* mcd $end
$var integer 32 l* i $end
$upscope $end

$scope module pc[15] $end
$var wire 1 %( q $end
$var wire 1 s' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m* state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 &( q $end
$var wire 1 t' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n* state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 '( q $end
$var wire 1 u' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o* state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 (( q $end
$var wire 1 v' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p* state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 )( q $end
$var wire 1 w' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q* state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 *( q $end
$var wire 1 x' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r* state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 +( q $end
$var wire 1 y' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s* state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 ,( q $end
$var wire 1 z' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t* state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 -( q $end
$var wire 1 {' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u* state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 .( q $end
$var wire 1 |' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v* state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 /( q $end
$var wire 1 }' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w* state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 0( q $end
$var wire 1 ~' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x* state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y* state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z* state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {* state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |* state $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next_in [15] $end
$var wire 1 "" PC_next_in [14] $end
$var wire 1 #" PC_next_in [13] $end
$var wire 1 $" PC_next_in [12] $end
$var wire 1 %" PC_next_in [11] $end
$var wire 1 &" PC_next_in [10] $end
$var wire 1 '" PC_next_in [9] $end
$var wire 1 (" PC_next_in [8] $end
$var wire 1 )" PC_next_in [7] $end
$var wire 1 *" PC_next_in [6] $end
$var wire 1 +" PC_next_in [5] $end
$var wire 1 ," PC_next_in [4] $end
$var wire 1 -" PC_next_in [3] $end
$var wire 1 ." PC_next_in [2] $end
$var wire 1 /" PC_next_in [1] $end
$var wire 1 0" PC_next_in [0] $end
$var wire 1 F( instruction_in [15] $end
$var wire 1 G( instruction_in [14] $end
$var wire 1 H( instruction_in [13] $end
$var wire 1 I( instruction_in [12] $end
$var wire 1 J( instruction_in [11] $end
$var wire 1 K( instruction_in [10] $end
$var wire 1 L( instruction_in [9] $end
$var wire 1 M( instruction_in [8] $end
$var wire 1 N( instruction_in [7] $end
$var wire 1 O( instruction_in [6] $end
$var wire 1 P( instruction_in [5] $end
$var wire 1 Q( instruction_in [4] $end
$var wire 1 R( instruction_in [3] $end
$var wire 1 S( instruction_in [2] $end
$var wire 1 T( instruction_in [1] $end
$var wire 1 U( instruction_in [0] $end
$var wire 1 %( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 &( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 '( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 (( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 )( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 *( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 +( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 ,( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 -( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 .( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 /( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 0( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 1( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 2( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 3( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 4( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 5( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 6( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 7( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 8( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 9( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 :( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 ;( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 <( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 =( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 >( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 ?( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 @( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 A( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 B( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 C( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 D( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 !" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }* state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 "" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~* state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 #" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 $" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "+ state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 %" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #+ state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 &" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $+ state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 '" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %+ state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 (" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &+ state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 )" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '+ state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 *" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (+ state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 +" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )+ state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 ," d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *+ state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 -" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ++ state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 ." d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,+ state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 /" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -+ state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 0" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .+ state $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 /+ state [15:0] $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 0+ state [15:0] $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 1+ state [15:0] $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 2+ state [15:0] $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 3+ state [15:0] $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 4+ state [15:0] $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 5+ state [15:0] $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 6+ state [15:0] $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 7+ state [15:0] $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 8+ state [15:0] $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 9+ state [15:0] $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 :+ state [15:0] $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ;+ state [15:0] $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 <+ state [15:0] $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 =+ state [15:0] $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 >+ state [15:0] $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?+ state $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @+ state $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A+ state $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B+ state $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 9( q $end
$var wire 1 )( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C+ state $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 :( q $end
$var wire 1 *( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D+ state $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 ;( q $end
$var wire 1 +( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E+ state $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 <( q $end
$var wire 1 ,( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F+ state $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 =( q $end
$var wire 1 -( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G+ state $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 >( q $end
$var wire 1 .( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H+ state $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 ?( q $end
$var wire 1 /( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I+ state $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 @( q $end
$var wire 1 0( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J+ state $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 A( q $end
$var wire 1 1( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K+ state $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 B( q $end
$var wire 1 2( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L+ state $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 C( q $end
$var wire 1 3( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M+ state $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 D( q $end
$var wire 1 4( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N+ state $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 a' err $end
$var wire 1 o! instruction [15] $end
$var wire 1 p! instruction [14] $end
$var wire 1 q! instruction [13] $end
$var wire 1 r! instruction [12] $end
$var wire 1 s! instruction [11] $end
$var wire 1 t! instruction [10] $end
$var wire 1 u! instruction [9] $end
$var wire 1 v! instruction [8] $end
$var wire 1 w! instruction [7] $end
$var wire 1 x! instruction [6] $end
$var wire 1 y! instruction [5] $end
$var wire 1 z! instruction [4] $end
$var wire 1 {! instruction [3] $end
$var wire 1 |! instruction [2] $end
$var wire 1 }! instruction [1] $end
$var wire 1 ~! instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 O+ signed_i_1 [15] $end
$var wire 1 P+ signed_i_1 [14] $end
$var wire 1 Q+ signed_i_1 [13] $end
$var wire 1 R+ signed_i_1 [12] $end
$var wire 1 S+ signed_i_1 [11] $end
$var wire 1 T+ signed_i_1 [10] $end
$var wire 1 U+ signed_i_1 [9] $end
$var wire 1 V+ signed_i_1 [8] $end
$var wire 1 W+ signed_i_1 [7] $end
$var wire 1 X+ signed_i_1 [6] $end
$var wire 1 Y+ signed_i_1 [5] $end
$var wire 1 Z+ signed_i_1 [4] $end
$var wire 1 [+ signed_i_1 [3] $end
$var wire 1 \+ signed_i_1 [2] $end
$var wire 1 ]+ signed_i_1 [1] $end
$var wire 1 ^+ signed_i_1 [0] $end
$var wire 1 _+ zero_i_1 [15] $end
$var wire 1 `+ zero_i_1 [14] $end
$var wire 1 a+ zero_i_1 [13] $end
$var wire 1 b+ zero_i_1 [12] $end
$var wire 1 c+ zero_i_1 [11] $end
$var wire 1 d+ zero_i_1 [10] $end
$var wire 1 e+ zero_i_1 [9] $end
$var wire 1 f+ zero_i_1 [8] $end
$var wire 1 g+ zero_i_1 [7] $end
$var wire 1 h+ zero_i_1 [6] $end
$var wire 1 i+ zero_i_1 [5] $end
$var wire 1 j+ zero_i_1 [4] $end
$var wire 1 k+ zero_i_1 [3] $end
$var wire 1 l+ zero_i_1 [2] $end
$var wire 1 m+ zero_i_1 [1] $end
$var wire 1 n+ zero_i_1 [0] $end
$var wire 1 o+ signed_i_2 [15] $end
$var wire 1 p+ signed_i_2 [14] $end
$var wire 1 q+ signed_i_2 [13] $end
$var wire 1 r+ signed_i_2 [12] $end
$var wire 1 s+ signed_i_2 [11] $end
$var wire 1 t+ signed_i_2 [10] $end
$var wire 1 u+ signed_i_2 [9] $end
$var wire 1 v+ signed_i_2 [8] $end
$var wire 1 w+ signed_i_2 [7] $end
$var wire 1 x+ signed_i_2 [6] $end
$var wire 1 y+ signed_i_2 [5] $end
$var wire 1 z+ signed_i_2 [4] $end
$var wire 1 {+ signed_i_2 [3] $end
$var wire 1 |+ signed_i_2 [2] $end
$var wire 1 }+ signed_i_2 [1] $end
$var wire 1 ~+ signed_i_2 [0] $end
$var wire 1 !, zero_i_2 [15] $end
$var wire 1 ", zero_i_2 [14] $end
$var wire 1 #, zero_i_2 [13] $end
$var wire 1 $, zero_i_2 [12] $end
$var wire 1 %, zero_i_2 [11] $end
$var wire 1 &, zero_i_2 [10] $end
$var wire 1 ', zero_i_2 [9] $end
$var wire 1 (, zero_i_2 [8] $end
$var wire 1 ), zero_i_2 [7] $end
$var wire 1 *, zero_i_2 [6] $end
$var wire 1 +, zero_i_2 [5] $end
$var wire 1 ,, zero_i_2 [4] $end
$var wire 1 -, zero_i_2 [3] $end
$var wire 1 ., zero_i_2 [2] $end
$var wire 1 /, zero_i_2 [1] $end
$var wire 1 0, zero_i_2 [0] $end
$var reg 1 1, OExt $end
$var reg 1 2, RegWrt $end
$var reg 2 3, RegDst [1:0] $end
$var reg 1 4, halt $end
$var reg 1 5, BTR $end
$var reg 3 6, ALUOpr [2:0] $end
$var reg 2 7, Bsrc [1:0] $end
$var reg 1 8, InvB $end
$var reg 1 9, InvA $end
$var reg 1 :, ImmSrc $end
$var reg 1 ;, MemWrt $end
$var reg 1 <, ALUJMP $end
$var reg 1 =, PC_or_add $end
$var reg 2 >, RegSrc [1:0] $end
$var reg 1 ?, SLBI $end
$var reg 1 @, branching $end
$var reg 2 A, branch_command [1:0] $end
$var reg 3 B, SetCtrl [2:0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end

$scope module registerfile $end
$var parameter 32 C, bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 t! read1RegSel [2] $end
$var wire 1 u! read1RegSel [1] $end
$var wire 1 v! read1RegSel [0] $end
$var wire 1 w! read2RegSel [2] $end
$var wire 1 x! read2RegSel [1] $end
$var wire 1 y! read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 a' err $end
$var wire 1 D, registers [0] $end
$var wire 1 E, registers [1] $end
$var wire 1 F, registers [2] $end
$var wire 1 G, registers [3] $end
$var wire 1 H, registers [4] $end
$var wire 1 I, registers [5] $end
$var wire 1 J, registers [6] $end
$var wire 1 K, registers [7] $end
$var wire 1 L, registers [8] $end
$var wire 1 M, registers [9] $end
$var wire 1 N, registers [10] $end
$var wire 1 O, registers [11] $end
$var wire 1 P, registers [12] $end
$var wire 1 Q, registers [13] $end
$var wire 1 R, registers [14] $end
$var wire 1 S, registers [15] $end
$var wire 1 T, registers [16] $end
$var wire 1 U, registers [17] $end
$var wire 1 V, registers [18] $end
$var wire 1 W, registers [19] $end
$var wire 1 X, registers [20] $end
$var wire 1 Y, registers [21] $end
$var wire 1 Z, registers [22] $end
$var wire 1 [, registers [23] $end
$var wire 1 \, registers [24] $end
$var wire 1 ], registers [25] $end
$var wire 1 ^, registers [26] $end
$var wire 1 _, registers [27] $end
$var wire 1 `, registers [28] $end
$var wire 1 a, registers [29] $end
$var wire 1 b, registers [30] $end
$var wire 1 c, registers [31] $end
$var wire 1 d, registers [32] $end
$var wire 1 e, registers [33] $end
$var wire 1 f, registers [34] $end
$var wire 1 g, registers [35] $end
$var wire 1 h, registers [36] $end
$var wire 1 i, registers [37] $end
$var wire 1 j, registers [38] $end
$var wire 1 k, registers [39] $end
$var wire 1 l, registers [40] $end
$var wire 1 m, registers [41] $end
$var wire 1 n, registers [42] $end
$var wire 1 o, registers [43] $end
$var wire 1 p, registers [44] $end
$var wire 1 q, registers [45] $end
$var wire 1 r, registers [46] $end
$var wire 1 s, registers [47] $end
$var wire 1 t, registers [48] $end
$var wire 1 u, registers [49] $end
$var wire 1 v, registers [50] $end
$var wire 1 w, registers [51] $end
$var wire 1 x, registers [52] $end
$var wire 1 y, registers [53] $end
$var wire 1 z, registers [54] $end
$var wire 1 {, registers [55] $end
$var wire 1 |, registers [56] $end
$var wire 1 }, registers [57] $end
$var wire 1 ~, registers [58] $end
$var wire 1 !- registers [59] $end
$var wire 1 "- registers [60] $end
$var wire 1 #- registers [61] $end
$var wire 1 $- registers [62] $end
$var wire 1 %- registers [63] $end
$var wire 1 &- registers [64] $end
$var wire 1 '- registers [65] $end
$var wire 1 (- registers [66] $end
$var wire 1 )- registers [67] $end
$var wire 1 *- registers [68] $end
$var wire 1 +- registers [69] $end
$var wire 1 ,- registers [70] $end
$var wire 1 -- registers [71] $end
$var wire 1 .- registers [72] $end
$var wire 1 /- registers [73] $end
$var wire 1 0- registers [74] $end
$var wire 1 1- registers [75] $end
$var wire 1 2- registers [76] $end
$var wire 1 3- registers [77] $end
$var wire 1 4- registers [78] $end
$var wire 1 5- registers [79] $end
$var wire 1 6- registers [80] $end
$var wire 1 7- registers [81] $end
$var wire 1 8- registers [82] $end
$var wire 1 9- registers [83] $end
$var wire 1 :- registers [84] $end
$var wire 1 ;- registers [85] $end
$var wire 1 <- registers [86] $end
$var wire 1 =- registers [87] $end
$var wire 1 >- registers [88] $end
$var wire 1 ?- registers [89] $end
$var wire 1 @- registers [90] $end
$var wire 1 A- registers [91] $end
$var wire 1 B- registers [92] $end
$var wire 1 C- registers [93] $end
$var wire 1 D- registers [94] $end
$var wire 1 E- registers [95] $end
$var wire 1 F- registers [96] $end
$var wire 1 G- registers [97] $end
$var wire 1 H- registers [98] $end
$var wire 1 I- registers [99] $end
$var wire 1 J- registers [100] $end
$var wire 1 K- registers [101] $end
$var wire 1 L- registers [102] $end
$var wire 1 M- registers [103] $end
$var wire 1 N- registers [104] $end
$var wire 1 O- registers [105] $end
$var wire 1 P- registers [106] $end
$var wire 1 Q- registers [107] $end
$var wire 1 R- registers [108] $end
$var wire 1 S- registers [109] $end
$var wire 1 T- registers [110] $end
$var wire 1 U- registers [111] $end
$var wire 1 V- registers [112] $end
$var wire 1 W- registers [113] $end
$var wire 1 X- registers [114] $end
$var wire 1 Y- registers [115] $end
$var wire 1 Z- registers [116] $end
$var wire 1 [- registers [117] $end
$var wire 1 \- registers [118] $end
$var wire 1 ]- registers [119] $end
$var wire 1 ^- registers [120] $end
$var wire 1 _- registers [121] $end
$var wire 1 `- registers [122] $end
$var wire 1 a- registers [123] $end
$var wire 1 b- registers [124] $end
$var wire 1 c- registers [125] $end
$var wire 1 d- registers [126] $end
$var wire 1 e- registers [127] $end
$var wire 1 f- mask_1 [0] $end
$var wire 1 g- mask_1 [1] $end
$var wire 1 h- mask_1 [2] $end
$var wire 1 i- mask_1 [3] $end
$var wire 1 j- mask_1 [4] $end
$var wire 1 k- mask_1 [5] $end
$var wire 1 l- mask_1 [6] $end
$var wire 1 m- mask_1 [7] $end

$scope module ind_reg1 $end
$var parameter 32 n- bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 m- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 e- read [15] $end
$var wire 1 d- read [14] $end
$var wire 1 c- read [13] $end
$var wire 1 b- read [12] $end
$var wire 1 a- read [11] $end
$var wire 1 `- read [10] $end
$var wire 1 _- read [9] $end
$var wire 1 ^- read [8] $end
$var wire 1 ]- read [7] $end
$var wire 1 \- read [6] $end
$var wire 1 [- read [5] $end
$var wire 1 Z- read [4] $end
$var wire 1 Y- read [3] $end
$var wire 1 X- read [2] $end
$var wire 1 W- read [1] $end
$var wire 1 V- read [0] $end

$scope module flop[15] $end
$var wire 1 e- q $end
$var wire 1 o- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p- state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 d- q $end
$var wire 1 q- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r- state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 c- q $end
$var wire 1 s- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t- state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 b- q $end
$var wire 1 u- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v- state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 a- q $end
$var wire 1 w- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x- state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 `- q $end
$var wire 1 y- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z- state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 _- q $end
$var wire 1 {- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |- state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ^- q $end
$var wire 1 }- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~- state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 ]- q $end
$var wire 1 !. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ". state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 \- q $end
$var wire 1 #. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $. state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 [- q $end
$var wire 1 %. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &. state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 Z- q $end
$var wire 1 '. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (. state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 Y- q $end
$var wire 1 ). d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *. state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 X- q $end
$var wire 1 +. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,. state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 W- q $end
$var wire 1 -. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .. state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 V- q $end
$var wire 1 /. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0. state $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var parameter 32 1. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 l- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 U- read [15] $end
$var wire 1 T- read [14] $end
$var wire 1 S- read [13] $end
$var wire 1 R- read [12] $end
$var wire 1 Q- read [11] $end
$var wire 1 P- read [10] $end
$var wire 1 O- read [9] $end
$var wire 1 N- read [8] $end
$var wire 1 M- read [7] $end
$var wire 1 L- read [6] $end
$var wire 1 K- read [5] $end
$var wire 1 J- read [4] $end
$var wire 1 I- read [3] $end
$var wire 1 H- read [2] $end
$var wire 1 G- read [1] $end
$var wire 1 F- read [0] $end

$scope module flop[15] $end
$var wire 1 U- q $end
$var wire 1 2. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 T- q $end
$var wire 1 4. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 S- q $end
$var wire 1 6. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 R- q $end
$var wire 1 8. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 Q- q $end
$var wire 1 :. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 P- q $end
$var wire 1 <. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 O- q $end
$var wire 1 >. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?. state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 N- q $end
$var wire 1 @. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A. state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 M- q $end
$var wire 1 B. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C. state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 L- q $end
$var wire 1 D. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E. state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 K- q $end
$var wire 1 F. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G. state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 J- q $end
$var wire 1 H. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I. state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 I- q $end
$var wire 1 J. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K. state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 H- q $end
$var wire 1 L. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M. state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 G- q $end
$var wire 1 N. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O. state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 F- q $end
$var wire 1 P. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q. state $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var parameter 32 R. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 k- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 E- read [15] $end
$var wire 1 D- read [14] $end
$var wire 1 C- read [13] $end
$var wire 1 B- read [12] $end
$var wire 1 A- read [11] $end
$var wire 1 @- read [10] $end
$var wire 1 ?- read [9] $end
$var wire 1 >- read [8] $end
$var wire 1 =- read [7] $end
$var wire 1 <- read [6] $end
$var wire 1 ;- read [5] $end
$var wire 1 :- read [4] $end
$var wire 1 9- read [3] $end
$var wire 1 8- read [2] $end
$var wire 1 7- read [1] $end
$var wire 1 6- read [0] $end

$scope module flop[15] $end
$var wire 1 E- q $end
$var wire 1 S. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 D- q $end
$var wire 1 U. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 C- q $end
$var wire 1 W. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 B- q $end
$var wire 1 Y. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 A- q $end
$var wire 1 [. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 @- q $end
$var wire 1 ]. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ?- q $end
$var wire 1 _. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `. state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 >- q $end
$var wire 1 a. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b. state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 =- q $end
$var wire 1 c. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d. state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 <- q $end
$var wire 1 e. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f. state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 ;- q $end
$var wire 1 g. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h. state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 :- q $end
$var wire 1 i. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j. state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 9- q $end
$var wire 1 k. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l. state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 8- q $end
$var wire 1 m. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n. state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 7- q $end
$var wire 1 o. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p. state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 6- q $end
$var wire 1 q. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r. state $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var parameter 32 s. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 j- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 5- read [15] $end
$var wire 1 4- read [14] $end
$var wire 1 3- read [13] $end
$var wire 1 2- read [12] $end
$var wire 1 1- read [11] $end
$var wire 1 0- read [10] $end
$var wire 1 /- read [9] $end
$var wire 1 .- read [8] $end
$var wire 1 -- read [7] $end
$var wire 1 ,- read [6] $end
$var wire 1 +- read [5] $end
$var wire 1 *- read [4] $end
$var wire 1 )- read [3] $end
$var wire 1 (- read [2] $end
$var wire 1 '- read [1] $end
$var wire 1 &- read [0] $end

$scope module flop[15] $end
$var wire 1 5- q $end
$var wire 1 t. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 4- q $end
$var wire 1 v. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 3- q $end
$var wire 1 x. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 2- q $end
$var wire 1 z. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 1- q $end
$var wire 1 |. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 0- q $end
$var wire 1 ~. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 /- q $end
$var wire 1 "/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 .- q $end
$var wire 1 $/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 -- q $end
$var wire 1 &/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 ,- q $end
$var wire 1 (/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 +- q $end
$var wire 1 */ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 *- q $end
$var wire 1 ,/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 )- q $end
$var wire 1 ./ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 // state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 (- q $end
$var wire 1 0/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 '- q $end
$var wire 1 2/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 &- q $end
$var wire 1 4/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5/ state $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var parameter 32 6/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 i- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 %- read [15] $end
$var wire 1 $- read [14] $end
$var wire 1 #- read [13] $end
$var wire 1 "- read [12] $end
$var wire 1 !- read [11] $end
$var wire 1 ~, read [10] $end
$var wire 1 }, read [9] $end
$var wire 1 |, read [8] $end
$var wire 1 {, read [7] $end
$var wire 1 z, read [6] $end
$var wire 1 y, read [5] $end
$var wire 1 x, read [4] $end
$var wire 1 w, read [3] $end
$var wire 1 v, read [2] $end
$var wire 1 u, read [1] $end
$var wire 1 t, read [0] $end

$scope module flop[15] $end
$var wire 1 %- q $end
$var wire 1 7/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 $- q $end
$var wire 1 9/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 #- q $end
$var wire 1 ;/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 </ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 "- q $end
$var wire 1 =/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 !- q $end
$var wire 1 ?/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ~, q $end
$var wire 1 A/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 }, q $end
$var wire 1 C/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 |, q $end
$var wire 1 E/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 {, q $end
$var wire 1 G/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 z, q $end
$var wire 1 I/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 y, q $end
$var wire 1 K/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 x, q $end
$var wire 1 M/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 w, q $end
$var wire 1 O/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 v, q $end
$var wire 1 Q/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 u, q $end
$var wire 1 S/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 t, q $end
$var wire 1 U/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V/ state $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var parameter 32 W/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 h- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 s, read [15] $end
$var wire 1 r, read [14] $end
$var wire 1 q, read [13] $end
$var wire 1 p, read [12] $end
$var wire 1 o, read [11] $end
$var wire 1 n, read [10] $end
$var wire 1 m, read [9] $end
$var wire 1 l, read [8] $end
$var wire 1 k, read [7] $end
$var wire 1 j, read [6] $end
$var wire 1 i, read [5] $end
$var wire 1 h, read [4] $end
$var wire 1 g, read [3] $end
$var wire 1 f, read [2] $end
$var wire 1 e, read [1] $end
$var wire 1 d, read [0] $end

$scope module flop[15] $end
$var wire 1 s, q $end
$var wire 1 X/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 r, q $end
$var wire 1 Z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 q, q $end
$var wire 1 \/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 p, q $end
$var wire 1 ^/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 o, q $end
$var wire 1 `/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 n, q $end
$var wire 1 b/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 m, q $end
$var wire 1 d/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 l, q $end
$var wire 1 f/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 k, q $end
$var wire 1 h/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 j, q $end
$var wire 1 j/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 i, q $end
$var wire 1 l/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 h, q $end
$var wire 1 n/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 g, q $end
$var wire 1 p/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 f, q $end
$var wire 1 r/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 e, q $end
$var wire 1 t/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 d, q $end
$var wire 1 v/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w/ state $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var parameter 32 x/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 g- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 c, read [15] $end
$var wire 1 b, read [14] $end
$var wire 1 a, read [13] $end
$var wire 1 `, read [12] $end
$var wire 1 _, read [11] $end
$var wire 1 ^, read [10] $end
$var wire 1 ], read [9] $end
$var wire 1 \, read [8] $end
$var wire 1 [, read [7] $end
$var wire 1 Z, read [6] $end
$var wire 1 Y, read [5] $end
$var wire 1 X, read [4] $end
$var wire 1 W, read [3] $end
$var wire 1 V, read [2] $end
$var wire 1 U, read [1] $end
$var wire 1 T, read [0] $end

$scope module flop[15] $end
$var wire 1 c, q $end
$var wire 1 y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 b, q $end
$var wire 1 {/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 a, q $end
$var wire 1 }/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 `, q $end
$var wire 1 !0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 _, q $end
$var wire 1 #0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ^, q $end
$var wire 1 %0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ], q $end
$var wire 1 '0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 \, q $end
$var wire 1 )0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 [, q $end
$var wire 1 +0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 Z, q $end
$var wire 1 -0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 Y, q $end
$var wire 1 /0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 00 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 X, q $end
$var wire 1 10 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 20 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 W, q $end
$var wire 1 30 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 40 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 V, q $end
$var wire 1 50 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 60 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 U, q $end
$var wire 1 70 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 80 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 T, q $end
$var wire 1 90 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :0 state $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var parameter 32 ;0 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 f- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 S, read [15] $end
$var wire 1 R, read [14] $end
$var wire 1 Q, read [13] $end
$var wire 1 P, read [12] $end
$var wire 1 O, read [11] $end
$var wire 1 N, read [10] $end
$var wire 1 M, read [9] $end
$var wire 1 L, read [8] $end
$var wire 1 K, read [7] $end
$var wire 1 J, read [6] $end
$var wire 1 I, read [5] $end
$var wire 1 H, read [4] $end
$var wire 1 G, read [3] $end
$var wire 1 F, read [2] $end
$var wire 1 E, read [1] $end
$var wire 1 D, read [0] $end

$scope module flop[15] $end
$var wire 1 S, q $end
$var wire 1 <0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 R, q $end
$var wire 1 >0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 Q, q $end
$var wire 1 @0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 P, q $end
$var wire 1 B0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 O, q $end
$var wire 1 D0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 N, q $end
$var wire 1 F0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 M, q $end
$var wire 1 H0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 L, q $end
$var wire 1 J0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 K, q $end
$var wire 1 L0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 J, q $end
$var wire 1 N0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 I, q $end
$var wire 1 P0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 H, q $end
$var wire 1 R0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 G, q $end
$var wire 1 T0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 F, q $end
$var wire 1 V0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 E, q $end
$var wire 1 X0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 D, q $end
$var wire 1 Z0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [0 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 l( NOPEx $end
$var wire 1 i( NOPMem $end
$var wire 1 j( NOPWB $end
$var wire 1 E( sendNOP $end
$var wire 1 \0 regEqual $end
$var wire 1 ]0 RegS [2] $end
$var wire 1 ^0 RegS [1] $end
$var wire 1 _0 RegS [0] $end
$var wire 1 `0 RegT [2] $end
$var wire 1 a0 RegT [1] $end
$var wire 1 b0 RegT [0] $end
$var wire 1 c0 compEx $end
$var wire 1 d0 compMem $end
$var wire 1 e0 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 }$ halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 E( SendNOP_In $end
$var wire 1 h( SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f0 state $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g0 state $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h0 state $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i0 state $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j0 state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k0 state $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l0 state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m0 state $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 }$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n0 state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o0 state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 h( q $end
$var wire 1 E( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p0 state $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q0 state $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r0 state $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s0 state $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t0 state $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u0 state $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v0 state $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w0 state $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x0 state $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y0 state $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z0 state $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {0 state $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |0 state $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }0 state $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~0 state $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !1 state $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "1 state $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #1 state $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $1 state $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %1 state $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &1 state $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '1 state $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (1 state $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )1 state $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *1 state $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +1 state $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,1 state $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -1 state $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .1 state $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /1 state $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 01 state $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 11 state $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 21 state $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 31 state $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 41 state $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 51 state $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 61 state $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 71 state $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 81 state $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 91 state $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :1 state $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;1 state $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <1 state $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =1 state $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >1 state $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?1 state $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @1 state $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A1 state $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B1 state $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C1 state $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D1 state $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E1 state $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F1 state $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G1 state $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H1 state $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I1 state $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J1 state $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K1 state $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L1 state $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M1 state $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N1 state $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O1 state $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P1 state $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q1 state $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R1 state $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S1 state $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T1 state $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U1 state $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V1 state $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W1 state $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X1 state $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y1 state $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z1 state $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [1 state $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \1 state $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]1 state $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^1 state $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _1 state $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `1 state $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a1 state $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b1 state $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c1 state $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d1 state $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e1 state $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f1 state $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g1 state $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h1 state $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i1 state $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j1 state $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k1 state $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l1 state $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m1 state $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n1 state $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o1 state $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p1 state $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q1 state $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r1 state $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s1 state $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t1 state $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u1 state $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v1 state $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w1 state $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x1 state $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y1 state $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z1 state $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {1 state $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |1 state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }1 state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~1 state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !2 state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "2 state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #2 state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $2 state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %2 state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &2 state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '2 state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (2 state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )2 state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *2 state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +2 state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,2 state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -2 state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .2 state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /2 state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 02 state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 12 state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 22 state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 32 state $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 42 possibleslbi [15] $end
$var wire 1 52 possibleslbi [14] $end
$var wire 1 62 possibleslbi [13] $end
$var wire 1 72 possibleslbi [12] $end
$var wire 1 82 possibleslbi [11] $end
$var wire 1 92 possibleslbi [10] $end
$var wire 1 :2 possibleslbi [9] $end
$var wire 1 ;2 possibleslbi [8] $end
$var wire 1 <2 possibleslbi [7] $end
$var wire 1 =2 possibleslbi [6] $end
$var wire 1 >2 possibleslbi [5] $end
$var wire 1 ?2 possibleslbi [4] $end
$var wire 1 @2 possibleslbi [3] $end
$var wire 1 A2 possibleslbi [2] $end
$var wire 1 B2 possibleslbi [1] $end
$var wire 1 C2 possibleslbi [0] $end
$var wire 1 D2 shiftedA [15] $end
$var wire 1 E2 shiftedA [14] $end
$var wire 1 F2 shiftedA [13] $end
$var wire 1 G2 shiftedA [12] $end
$var wire 1 H2 shiftedA [11] $end
$var wire 1 I2 shiftedA [10] $end
$var wire 1 J2 shiftedA [9] $end
$var wire 1 K2 shiftedA [8] $end
$var wire 1 L2 shiftedA [7] $end
$var wire 1 M2 shiftedA [6] $end
$var wire 1 N2 shiftedA [5] $end
$var wire 1 O2 shiftedA [4] $end
$var wire 1 P2 shiftedA [3] $end
$var wire 1 Q2 shiftedA [2] $end
$var wire 1 R2 shiftedA [1] $end
$var wire 1 S2 shiftedA [0] $end
$var wire 1 T2 slbiOper $end
$var wire 1 U2 aluout [15] $end
$var wire 1 V2 aluout [14] $end
$var wire 1 W2 aluout [13] $end
$var wire 1 X2 aluout [12] $end
$var wire 1 Y2 aluout [11] $end
$var wire 1 Z2 aluout [10] $end
$var wire 1 [2 aluout [9] $end
$var wire 1 \2 aluout [8] $end
$var wire 1 ]2 aluout [7] $end
$var wire 1 ^2 aluout [6] $end
$var wire 1 _2 aluout [5] $end
$var wire 1 `2 aluout [4] $end
$var wire 1 a2 aluout [3] $end
$var wire 1 b2 aluout [2] $end
$var wire 1 c2 aluout [1] $end
$var wire 1 d2 aluout [0] $end
$var wire 1 e2 conditional $end
$var wire 1 f2 CF $end
$var wire 1 g2 Zero $end
$var wire 1 h2 Overflow $end
$var wire 1 i2 Brchcnd $end
$var wire 1 j2 Oper [1] $end
$var wire 1 k2 Oper [0] $end
$var wire 1 l2 altb $end
$var wire 1 m2 coout [15] $end
$var wire 1 n2 coout [14] $end
$var wire 1 o2 coout [13] $end
$var wire 1 p2 coout [12] $end
$var wire 1 q2 coout [11] $end
$var wire 1 r2 coout [10] $end
$var wire 1 s2 coout [9] $end
$var wire 1 t2 coout [8] $end
$var wire 1 u2 coout [7] $end
$var wire 1 v2 coout [6] $end
$var wire 1 w2 coout [5] $end
$var wire 1 x2 coout [4] $end
$var wire 1 y2 coout [3] $end
$var wire 1 z2 coout [2] $end
$var wire 1 {2 coout [1] $end
$var wire 1 |2 coout [0] $end
$var wire 1 }2 sltoper [1] $end
$var wire 1 ~2 sltoper [0] $end
$var wire 1 !3 ltout [15] $end
$var wire 1 "3 ltout [14] $end
$var wire 1 #3 ltout [13] $end
$var wire 1 $3 ltout [12] $end
$var wire 1 %3 ltout [11] $end
$var wire 1 &3 ltout [10] $end
$var wire 1 '3 ltout [9] $end
$var wire 1 (3 ltout [8] $end
$var wire 1 )3 ltout [7] $end
$var wire 1 *3 ltout [6] $end
$var wire 1 +3 ltout [5] $end
$var wire 1 ,3 ltout [4] $end
$var wire 1 -3 ltout [3] $end
$var wire 1 .3 ltout [2] $end
$var wire 1 /3 ltout [1] $end
$var wire 1 03 ltout [0] $end
$var wire 1 13 seqoper [1] $end
$var wire 1 23 seqoper [0] $end
$var wire 1 33 aeqb $end
$var wire 1 43 seqout [15] $end
$var wire 1 53 seqout [14] $end
$var wire 1 63 seqout [13] $end
$var wire 1 73 seqout [12] $end
$var wire 1 83 seqout [11] $end
$var wire 1 93 seqout [10] $end
$var wire 1 :3 seqout [9] $end
$var wire 1 ;3 seqout [8] $end
$var wire 1 <3 seqout [7] $end
$var wire 1 =3 seqout [6] $end
$var wire 1 >3 seqout [5] $end
$var wire 1 ?3 seqout [4] $end
$var wire 1 @3 seqout [3] $end
$var wire 1 A3 seqout [2] $end
$var wire 1 B3 seqout [1] $end
$var wire 1 C3 seqout [0] $end
$var wire 1 D3 alteb $end
$var wire 1 E3 sleoper [1] $end
$var wire 1 F3 sleoper [0] $end
$var wire 1 G3 sleout [15] $end
$var wire 1 H3 sleout [14] $end
$var wire 1 I3 sleout [13] $end
$var wire 1 J3 sleout [12] $end
$var wire 1 K3 sleout [11] $end
$var wire 1 L3 sleout [10] $end
$var wire 1 M3 sleout [9] $end
$var wire 1 N3 sleout [8] $end
$var wire 1 O3 sleout [7] $end
$var wire 1 P3 sleout [6] $end
$var wire 1 Q3 sleout [5] $end
$var wire 1 R3 sleout [4] $end
$var wire 1 S3 sleout [3] $end
$var wire 1 T3 sleout [2] $end
$var wire 1 U3 sleout [1] $end
$var wire 1 V3 sleout [0] $end
$var wire 1 W3 SetCtrl [1] $end
$var wire 1 X3 SetCtrl [0] $end
$var wire 1 Y3 carry $end
$var wire 1 Z3 SLT $end
$var wire 1 [3 SEQ $end
$var wire 1 \3 SLE $end
$var wire 1 ]3 greater $end
$var wire 1 ^3 ReverseOut [15] $end
$var wire 1 _3 ReverseOut [14] $end
$var wire 1 `3 ReverseOut [13] $end
$var wire 1 a3 ReverseOut [12] $end
$var wire 1 b3 ReverseOut [11] $end
$var wire 1 c3 ReverseOut [10] $end
$var wire 1 d3 ReverseOut [9] $end
$var wire 1 e3 ReverseOut [8] $end
$var wire 1 f3 ReverseOut [7] $end
$var wire 1 g3 ReverseOut [6] $end
$var wire 1 h3 ReverseOut [5] $end
$var wire 1 i3 ReverseOut [4] $end
$var wire 1 j3 ReverseOut [3] $end
$var wire 1 k3 ReverseOut [2] $end
$var wire 1 l3 ReverseOut [1] $end
$var wire 1 m3 ReverseOut [0] $end
$var wire 1 n3 reverse [15] $end
$var wire 1 o3 reverse [14] $end
$var wire 1 p3 reverse [13] $end
$var wire 1 q3 reverse [12] $end
$var wire 1 r3 reverse [11] $end
$var wire 1 s3 reverse [10] $end
$var wire 1 t3 reverse [9] $end
$var wire 1 u3 reverse [8] $end
$var wire 1 v3 reverse [7] $end
$var wire 1 w3 reverse [6] $end
$var wire 1 x3 reverse [5] $end
$var wire 1 y3 reverse [4] $end
$var wire 1 z3 reverse [3] $end
$var wire 1 {3 reverse [2] $end
$var wire 1 |3 reverse [1] $end
$var wire 1 }3 reverse [0] $end

$scope module shift $end
$var parameter 32 ~3 OPERAND_WIDTH $end
$var parameter 32 !4 SHAMT_WIDTH $end
$var parameter 32 "4 NUM_OPERATIONS $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 '4 Oper [1] $end
$var wire 1 (4 Oper [0] $end
$var wire 1 D2 Out [15] $end
$var wire 1 E2 Out [14] $end
$var wire 1 F2 Out [13] $end
$var wire 1 G2 Out [12] $end
$var wire 1 H2 Out [11] $end
$var wire 1 I2 Out [10] $end
$var wire 1 J2 Out [9] $end
$var wire 1 K2 Out [8] $end
$var wire 1 L2 Out [7] $end
$var wire 1 M2 Out [6] $end
$var wire 1 N2 Out [5] $end
$var wire 1 O2 Out [4] $end
$var wire 1 P2 Out [3] $end
$var wire 1 Q2 Out [2] $end
$var wire 1 R2 Out [1] $end
$var wire 1 S2 Out [0] $end
$var wire 1 )4 shift_left_r [15] $end
$var wire 1 *4 shift_left_r [14] $end
$var wire 1 +4 shift_left_r [13] $end
$var wire 1 ,4 shift_left_r [12] $end
$var wire 1 -4 shift_left_r [11] $end
$var wire 1 .4 shift_left_r [10] $end
$var wire 1 /4 shift_left_r [9] $end
$var wire 1 04 shift_left_r [8] $end
$var wire 1 14 shift_left_r [7] $end
$var wire 1 24 shift_left_r [6] $end
$var wire 1 34 shift_left_r [5] $end
$var wire 1 44 shift_left_r [4] $end
$var wire 1 54 shift_left_r [3] $end
$var wire 1 64 shift_left_r [2] $end
$var wire 1 74 shift_left_r [1] $end
$var wire 1 84 shift_left_r [0] $end
$var wire 1 94 rotate_left_r [15] $end
$var wire 1 :4 rotate_left_r [14] $end
$var wire 1 ;4 rotate_left_r [13] $end
$var wire 1 <4 rotate_left_r [12] $end
$var wire 1 =4 rotate_left_r [11] $end
$var wire 1 >4 rotate_left_r [10] $end
$var wire 1 ?4 rotate_left_r [9] $end
$var wire 1 @4 rotate_left_r [8] $end
$var wire 1 A4 rotate_left_r [7] $end
$var wire 1 B4 rotate_left_r [6] $end
$var wire 1 C4 rotate_left_r [5] $end
$var wire 1 D4 rotate_left_r [4] $end
$var wire 1 E4 rotate_left_r [3] $end
$var wire 1 F4 rotate_left_r [2] $end
$var wire 1 G4 rotate_left_r [1] $end
$var wire 1 H4 rotate_left_r [0] $end
$var wire 1 I4 shift_right_l_r [15] $end
$var wire 1 J4 shift_right_l_r [14] $end
$var wire 1 K4 shift_right_l_r [13] $end
$var wire 1 L4 shift_right_l_r [12] $end
$var wire 1 M4 shift_right_l_r [11] $end
$var wire 1 N4 shift_right_l_r [10] $end
$var wire 1 O4 shift_right_l_r [9] $end
$var wire 1 P4 shift_right_l_r [8] $end
$var wire 1 Q4 shift_right_l_r [7] $end
$var wire 1 R4 shift_right_l_r [6] $end
$var wire 1 S4 shift_right_l_r [5] $end
$var wire 1 T4 shift_right_l_r [4] $end
$var wire 1 U4 shift_right_l_r [3] $end
$var wire 1 V4 shift_right_l_r [2] $end
$var wire 1 W4 shift_right_l_r [1] $end
$var wire 1 X4 shift_right_l_r [0] $end
$var wire 1 Y4 rotate_right_r [15] $end
$var wire 1 Z4 rotate_right_r [14] $end
$var wire 1 [4 rotate_right_r [13] $end
$var wire 1 \4 rotate_right_r [12] $end
$var wire 1 ]4 rotate_right_r [11] $end
$var wire 1 ^4 rotate_right_r [10] $end
$var wire 1 _4 rotate_right_r [9] $end
$var wire 1 `4 rotate_right_r [8] $end
$var wire 1 a4 rotate_right_r [7] $end
$var wire 1 b4 rotate_right_r [6] $end
$var wire 1 c4 rotate_right_r [5] $end
$var wire 1 d4 rotate_right_r [4] $end
$var wire 1 e4 rotate_right_r [3] $end
$var wire 1 f4 rotate_right_r [2] $end
$var wire 1 g4 rotate_right_r [1] $end
$var wire 1 h4 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 i4 OPERAND_WIDTH $end
$var parameter 32 j4 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 )4 result [15] $end
$var wire 1 *4 result [14] $end
$var wire 1 +4 result [13] $end
$var wire 1 ,4 result [12] $end
$var wire 1 -4 result [11] $end
$var wire 1 .4 result [10] $end
$var wire 1 /4 result [9] $end
$var wire 1 04 result [8] $end
$var wire 1 14 result [7] $end
$var wire 1 24 result [6] $end
$var wire 1 34 result [5] $end
$var wire 1 44 result [4] $end
$var wire 1 54 result [3] $end
$var wire 1 64 result [2] $end
$var wire 1 74 result [1] $end
$var wire 1 84 result [0] $end
$var wire 1 k4 temp1 [15] $end
$var wire 1 l4 temp1 [14] $end
$var wire 1 m4 temp1 [13] $end
$var wire 1 n4 temp1 [12] $end
$var wire 1 o4 temp1 [11] $end
$var wire 1 p4 temp1 [10] $end
$var wire 1 q4 temp1 [9] $end
$var wire 1 r4 temp1 [8] $end
$var wire 1 s4 temp1 [7] $end
$var wire 1 t4 temp1 [6] $end
$var wire 1 u4 temp1 [5] $end
$var wire 1 v4 temp1 [4] $end
$var wire 1 w4 temp1 [3] $end
$var wire 1 x4 temp1 [2] $end
$var wire 1 y4 temp1 [1] $end
$var wire 1 z4 temp1 [0] $end
$var wire 1 {4 temp2 [15] $end
$var wire 1 |4 temp2 [14] $end
$var wire 1 }4 temp2 [13] $end
$var wire 1 ~4 temp2 [12] $end
$var wire 1 !5 temp2 [11] $end
$var wire 1 "5 temp2 [10] $end
$var wire 1 #5 temp2 [9] $end
$var wire 1 $5 temp2 [8] $end
$var wire 1 %5 temp2 [7] $end
$var wire 1 &5 temp2 [6] $end
$var wire 1 '5 temp2 [5] $end
$var wire 1 (5 temp2 [4] $end
$var wire 1 )5 temp2 [3] $end
$var wire 1 *5 temp2 [2] $end
$var wire 1 +5 temp2 [1] $end
$var wire 1 ,5 temp2 [0] $end
$var wire 1 -5 temp3 [15] $end
$var wire 1 .5 temp3 [14] $end
$var wire 1 /5 temp3 [13] $end
$var wire 1 05 temp3 [12] $end
$var wire 1 15 temp3 [11] $end
$var wire 1 25 temp3 [10] $end
$var wire 1 35 temp3 [9] $end
$var wire 1 45 temp3 [8] $end
$var wire 1 55 temp3 [7] $end
$var wire 1 65 temp3 [6] $end
$var wire 1 75 temp3 [5] $end
$var wire 1 85 temp3 [4] $end
$var wire 1 95 temp3 [3] $end
$var wire 1 :5 temp3 [2] $end
$var wire 1 ;5 temp3 [1] $end
$var wire 1 <5 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 =5 OPERAND_WIDTH $end
$var parameter 32 >5 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 94 result [15] $end
$var wire 1 :4 result [14] $end
$var wire 1 ;4 result [13] $end
$var wire 1 <4 result [12] $end
$var wire 1 =4 result [11] $end
$var wire 1 >4 result [10] $end
$var wire 1 ?4 result [9] $end
$var wire 1 @4 result [8] $end
$var wire 1 A4 result [7] $end
$var wire 1 B4 result [6] $end
$var wire 1 C4 result [5] $end
$var wire 1 D4 result [4] $end
$var wire 1 E4 result [3] $end
$var wire 1 F4 result [2] $end
$var wire 1 G4 result [1] $end
$var wire 1 H4 result [0] $end
$var wire 1 ?5 temp1 [15] $end
$var wire 1 @5 temp1 [14] $end
$var wire 1 A5 temp1 [13] $end
$var wire 1 B5 temp1 [12] $end
$var wire 1 C5 temp1 [11] $end
$var wire 1 D5 temp1 [10] $end
$var wire 1 E5 temp1 [9] $end
$var wire 1 F5 temp1 [8] $end
$var wire 1 G5 temp1 [7] $end
$var wire 1 H5 temp1 [6] $end
$var wire 1 I5 temp1 [5] $end
$var wire 1 J5 temp1 [4] $end
$var wire 1 K5 temp1 [3] $end
$var wire 1 L5 temp1 [2] $end
$var wire 1 M5 temp1 [1] $end
$var wire 1 N5 temp1 [0] $end
$var wire 1 O5 temp2 [15] $end
$var wire 1 P5 temp2 [14] $end
$var wire 1 Q5 temp2 [13] $end
$var wire 1 R5 temp2 [12] $end
$var wire 1 S5 temp2 [11] $end
$var wire 1 T5 temp2 [10] $end
$var wire 1 U5 temp2 [9] $end
$var wire 1 V5 temp2 [8] $end
$var wire 1 W5 temp2 [7] $end
$var wire 1 X5 temp2 [6] $end
$var wire 1 Y5 temp2 [5] $end
$var wire 1 Z5 temp2 [4] $end
$var wire 1 [5 temp2 [3] $end
$var wire 1 \5 temp2 [2] $end
$var wire 1 ]5 temp2 [1] $end
$var wire 1 ^5 temp2 [0] $end
$var wire 1 _5 temp3 [15] $end
$var wire 1 `5 temp3 [14] $end
$var wire 1 a5 temp3 [13] $end
$var wire 1 b5 temp3 [12] $end
$var wire 1 c5 temp3 [11] $end
$var wire 1 d5 temp3 [10] $end
$var wire 1 e5 temp3 [9] $end
$var wire 1 f5 temp3 [8] $end
$var wire 1 g5 temp3 [7] $end
$var wire 1 h5 temp3 [6] $end
$var wire 1 i5 temp3 [5] $end
$var wire 1 j5 temp3 [4] $end
$var wire 1 k5 temp3 [3] $end
$var wire 1 l5 temp3 [2] $end
$var wire 1 m5 temp3 [1] $end
$var wire 1 n5 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 o5 OPERAND_WIDTH $end
$var parameter 32 p5 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 I4 result [15] $end
$var wire 1 J4 result [14] $end
$var wire 1 K4 result [13] $end
$var wire 1 L4 result [12] $end
$var wire 1 M4 result [11] $end
$var wire 1 N4 result [10] $end
$var wire 1 O4 result [9] $end
$var wire 1 P4 result [8] $end
$var wire 1 Q4 result [7] $end
$var wire 1 R4 result [6] $end
$var wire 1 S4 result [5] $end
$var wire 1 T4 result [4] $end
$var wire 1 U4 result [3] $end
$var wire 1 V4 result [2] $end
$var wire 1 W4 result [1] $end
$var wire 1 X4 result [0] $end
$var wire 1 q5 temp1 [15] $end
$var wire 1 r5 temp1 [14] $end
$var wire 1 s5 temp1 [13] $end
$var wire 1 t5 temp1 [12] $end
$var wire 1 u5 temp1 [11] $end
$var wire 1 v5 temp1 [10] $end
$var wire 1 w5 temp1 [9] $end
$var wire 1 x5 temp1 [8] $end
$var wire 1 y5 temp1 [7] $end
$var wire 1 z5 temp1 [6] $end
$var wire 1 {5 temp1 [5] $end
$var wire 1 |5 temp1 [4] $end
$var wire 1 }5 temp1 [3] $end
$var wire 1 ~5 temp1 [2] $end
$var wire 1 !6 temp1 [1] $end
$var wire 1 "6 temp1 [0] $end
$var wire 1 #6 temp2 [15] $end
$var wire 1 $6 temp2 [14] $end
$var wire 1 %6 temp2 [13] $end
$var wire 1 &6 temp2 [12] $end
$var wire 1 '6 temp2 [11] $end
$var wire 1 (6 temp2 [10] $end
$var wire 1 )6 temp2 [9] $end
$var wire 1 *6 temp2 [8] $end
$var wire 1 +6 temp2 [7] $end
$var wire 1 ,6 temp2 [6] $end
$var wire 1 -6 temp2 [5] $end
$var wire 1 .6 temp2 [4] $end
$var wire 1 /6 temp2 [3] $end
$var wire 1 06 temp2 [2] $end
$var wire 1 16 temp2 [1] $end
$var wire 1 26 temp2 [0] $end
$var wire 1 36 temp3 [15] $end
$var wire 1 46 temp3 [14] $end
$var wire 1 56 temp3 [13] $end
$var wire 1 66 temp3 [12] $end
$var wire 1 76 temp3 [11] $end
$var wire 1 86 temp3 [10] $end
$var wire 1 96 temp3 [9] $end
$var wire 1 :6 temp3 [8] $end
$var wire 1 ;6 temp3 [7] $end
$var wire 1 <6 temp3 [6] $end
$var wire 1 =6 temp3 [5] $end
$var wire 1 >6 temp3 [4] $end
$var wire 1 ?6 temp3 [3] $end
$var wire 1 @6 temp3 [2] $end
$var wire 1 A6 temp3 [1] $end
$var wire 1 B6 temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 C6 OPERAND_WIDTH $end
$var parameter 32 D6 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 Y4 result [15] $end
$var wire 1 Z4 result [14] $end
$var wire 1 [4 result [13] $end
$var wire 1 \4 result [12] $end
$var wire 1 ]4 result [11] $end
$var wire 1 ^4 result [10] $end
$var wire 1 _4 result [9] $end
$var wire 1 `4 result [8] $end
$var wire 1 a4 result [7] $end
$var wire 1 b4 result [6] $end
$var wire 1 c4 result [5] $end
$var wire 1 d4 result [4] $end
$var wire 1 e4 result [3] $end
$var wire 1 f4 result [2] $end
$var wire 1 g4 result [1] $end
$var wire 1 h4 result [0] $end
$var wire 1 E6 temp1 [15] $end
$var wire 1 F6 temp1 [14] $end
$var wire 1 G6 temp1 [13] $end
$var wire 1 H6 temp1 [12] $end
$var wire 1 I6 temp1 [11] $end
$var wire 1 J6 temp1 [10] $end
$var wire 1 K6 temp1 [9] $end
$var wire 1 L6 temp1 [8] $end
$var wire 1 M6 temp1 [7] $end
$var wire 1 N6 temp1 [6] $end
$var wire 1 O6 temp1 [5] $end
$var wire 1 P6 temp1 [4] $end
$var wire 1 Q6 temp1 [3] $end
$var wire 1 R6 temp1 [2] $end
$var wire 1 S6 temp1 [1] $end
$var wire 1 T6 temp1 [0] $end
$var wire 1 U6 temp2 [15] $end
$var wire 1 V6 temp2 [14] $end
$var wire 1 W6 temp2 [13] $end
$var wire 1 X6 temp2 [12] $end
$var wire 1 Y6 temp2 [11] $end
$var wire 1 Z6 temp2 [10] $end
$var wire 1 [6 temp2 [9] $end
$var wire 1 \6 temp2 [8] $end
$var wire 1 ]6 temp2 [7] $end
$var wire 1 ^6 temp2 [6] $end
$var wire 1 _6 temp2 [5] $end
$var wire 1 `6 temp2 [4] $end
$var wire 1 a6 temp2 [3] $end
$var wire 1 b6 temp2 [2] $end
$var wire 1 c6 temp2 [1] $end
$var wire 1 d6 temp2 [0] $end
$var wire 1 e6 temp3 [15] $end
$var wire 1 f6 temp3 [14] $end
$var wire 1 g6 temp3 [13] $end
$var wire 1 h6 temp3 [12] $end
$var wire 1 i6 temp3 [11] $end
$var wire 1 j6 temp3 [10] $end
$var wire 1 k6 temp3 [9] $end
$var wire 1 l6 temp3 [8] $end
$var wire 1 m6 temp3 [7] $end
$var wire 1 n6 temp3 [6] $end
$var wire 1 o6 temp3 [5] $end
$var wire 1 p6 temp3 [4] $end
$var wire 1 q6 temp3 [3] $end
$var wire 1 r6 temp3 [2] $end
$var wire 1 s6 temp3 [1] $end
$var wire 1 t6 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 u6 OPERAND_WIDTH $end
$var parameter 32 v6 NUM_OPERATIONS $end
$var wire 1 42 InA [15] $end
$var wire 1 52 InA [14] $end
$var wire 1 62 InA [13] $end
$var wire 1 72 InA [12] $end
$var wire 1 82 InA [11] $end
$var wire 1 92 InA [10] $end
$var wire 1 :2 InA [9] $end
$var wire 1 ;2 InA [8] $end
$var wire 1 <2 InA [7] $end
$var wire 1 =2 InA [6] $end
$var wire 1 >2 InA [5] $end
$var wire 1 ?2 InA [4] $end
$var wire 1 @2 InA [3] $end
$var wire 1 A2 InA [2] $end
$var wire 1 B2 InA [1] $end
$var wire 1 C2 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 w6 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 x6 sign $end
$var wire 1 U2 Out [15] $end
$var wire 1 V2 Out [14] $end
$var wire 1 W2 Out [13] $end
$var wire 1 X2 Out [12] $end
$var wire 1 Y2 Out [11] $end
$var wire 1 Z2 Out [10] $end
$var wire 1 [2 Out [9] $end
$var wire 1 \2 Out [8] $end
$var wire 1 ]2 Out [7] $end
$var wire 1 ^2 Out [6] $end
$var wire 1 _2 Out [5] $end
$var wire 1 `2 Out [4] $end
$var wire 1 a2 Out [3] $end
$var wire 1 b2 Out [2] $end
$var wire 1 c2 Out [1] $end
$var wire 1 d2 Out [0] $end
$var wire 1 e2 signOut $end
$var wire 1 h2 Ofl $end
$var wire 1 g2 Zero $end
$var wire 1 f2 carryFlag $end
$var wire 1 y6 InA_invA [15] $end
$var wire 1 z6 InA_invA [14] $end
$var wire 1 {6 InA_invA [13] $end
$var wire 1 |6 InA_invA [12] $end
$var wire 1 }6 InA_invA [11] $end
$var wire 1 ~6 InA_invA [10] $end
$var wire 1 !7 InA_invA [9] $end
$var wire 1 "7 InA_invA [8] $end
$var wire 1 #7 InA_invA [7] $end
$var wire 1 $7 InA_invA [6] $end
$var wire 1 %7 InA_invA [5] $end
$var wire 1 &7 InA_invA [4] $end
$var wire 1 '7 InA_invA [3] $end
$var wire 1 (7 InA_invA [2] $end
$var wire 1 )7 InA_invA [1] $end
$var wire 1 *7 InA_invA [0] $end
$var wire 1 +7 InB_invB [15] $end
$var wire 1 ,7 InB_invB [14] $end
$var wire 1 -7 InB_invB [13] $end
$var wire 1 .7 InB_invB [12] $end
$var wire 1 /7 InB_invB [11] $end
$var wire 1 07 InB_invB [10] $end
$var wire 1 17 InB_invB [9] $end
$var wire 1 27 InB_invB [8] $end
$var wire 1 37 InB_invB [7] $end
$var wire 1 47 InB_invB [6] $end
$var wire 1 57 InB_invB [5] $end
$var wire 1 67 InB_invB [4] $end
$var wire 1 77 InB_invB [3] $end
$var wire 1 87 InB_invB [2] $end
$var wire 1 97 InB_invB [1] $end
$var wire 1 :7 InB_invB [0] $end
$var wire 1 ;7 barrel [15] $end
$var wire 1 <7 barrel [14] $end
$var wire 1 =7 barrel [13] $end
$var wire 1 >7 barrel [12] $end
$var wire 1 ?7 barrel [11] $end
$var wire 1 @7 barrel [10] $end
$var wire 1 A7 barrel [9] $end
$var wire 1 B7 barrel [8] $end
$var wire 1 C7 barrel [7] $end
$var wire 1 D7 barrel [6] $end
$var wire 1 E7 barrel [5] $end
$var wire 1 F7 barrel [4] $end
$var wire 1 G7 barrel [3] $end
$var wire 1 H7 barrel [2] $end
$var wire 1 I7 barrel [1] $end
$var wire 1 J7 barrel [0] $end
$var wire 1 K7 logic_gates_r [15] $end
$var wire 1 L7 logic_gates_r [14] $end
$var wire 1 M7 logic_gates_r [13] $end
$var wire 1 N7 logic_gates_r [12] $end
$var wire 1 O7 logic_gates_r [11] $end
$var wire 1 P7 logic_gates_r [10] $end
$var wire 1 Q7 logic_gates_r [9] $end
$var wire 1 R7 logic_gates_r [8] $end
$var wire 1 S7 logic_gates_r [7] $end
$var wire 1 T7 logic_gates_r [6] $end
$var wire 1 U7 logic_gates_r [5] $end
$var wire 1 V7 logic_gates_r [4] $end
$var wire 1 W7 logic_gates_r [3] $end
$var wire 1 X7 logic_gates_r [2] $end
$var wire 1 Y7 logic_gates_r [1] $end
$var wire 1 Z7 logic_gates_r [0] $end
$var wire 1 [7 addition [15] $end
$var wire 1 \7 addition [14] $end
$var wire 1 ]7 addition [13] $end
$var wire 1 ^7 addition [12] $end
$var wire 1 _7 addition [11] $end
$var wire 1 `7 addition [10] $end
$var wire 1 a7 addition [9] $end
$var wire 1 b7 addition [8] $end
$var wire 1 c7 addition [7] $end
$var wire 1 d7 addition [6] $end
$var wire 1 e7 addition [5] $end
$var wire 1 f7 addition [4] $end
$var wire 1 g7 addition [3] $end
$var wire 1 h7 addition [2] $end
$var wire 1 i7 addition [1] $end
$var wire 1 j7 addition [0] $end
$var wire 1 k7 addition_logic [15] $end
$var wire 1 l7 addition_logic [14] $end
$var wire 1 m7 addition_logic [13] $end
$var wire 1 n7 addition_logic [12] $end
$var wire 1 o7 addition_logic [11] $end
$var wire 1 p7 addition_logic [10] $end
$var wire 1 q7 addition_logic [9] $end
$var wire 1 r7 addition_logic [8] $end
$var wire 1 s7 addition_logic [7] $end
$var wire 1 t7 addition_logic [6] $end
$var wire 1 u7 addition_logic [5] $end
$var wire 1 v7 addition_logic [4] $end
$var wire 1 w7 addition_logic [3] $end
$var wire 1 x7 addition_logic [2] $end
$var wire 1 y7 addition_logic [1] $end
$var wire 1 z7 addition_logic [0] $end
$var wire 1 {7 carry $end
$var wire 1 |7 signed_over $end
$var wire 1 }7 less $end

$scope module shift $end
$var parameter 32 ~7 OPERAND_WIDTH $end
$var parameter 32 !8 SHAMT_WIDTH $end
$var parameter 32 "8 NUM_OPERATIONS $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 ;7 Out [15] $end
$var wire 1 <7 Out [14] $end
$var wire 1 =7 Out [13] $end
$var wire 1 >7 Out [12] $end
$var wire 1 ?7 Out [11] $end
$var wire 1 @7 Out [10] $end
$var wire 1 A7 Out [9] $end
$var wire 1 B7 Out [8] $end
$var wire 1 C7 Out [7] $end
$var wire 1 D7 Out [6] $end
$var wire 1 E7 Out [5] $end
$var wire 1 F7 Out [4] $end
$var wire 1 G7 Out [3] $end
$var wire 1 H7 Out [2] $end
$var wire 1 I7 Out [1] $end
$var wire 1 J7 Out [0] $end
$var wire 1 #8 shift_left_r [15] $end
$var wire 1 $8 shift_left_r [14] $end
$var wire 1 %8 shift_left_r [13] $end
$var wire 1 &8 shift_left_r [12] $end
$var wire 1 '8 shift_left_r [11] $end
$var wire 1 (8 shift_left_r [10] $end
$var wire 1 )8 shift_left_r [9] $end
$var wire 1 *8 shift_left_r [8] $end
$var wire 1 +8 shift_left_r [7] $end
$var wire 1 ,8 shift_left_r [6] $end
$var wire 1 -8 shift_left_r [5] $end
$var wire 1 .8 shift_left_r [4] $end
$var wire 1 /8 shift_left_r [3] $end
$var wire 1 08 shift_left_r [2] $end
$var wire 1 18 shift_left_r [1] $end
$var wire 1 28 shift_left_r [0] $end
$var wire 1 38 rotate_left_r [15] $end
$var wire 1 48 rotate_left_r [14] $end
$var wire 1 58 rotate_left_r [13] $end
$var wire 1 68 rotate_left_r [12] $end
$var wire 1 78 rotate_left_r [11] $end
$var wire 1 88 rotate_left_r [10] $end
$var wire 1 98 rotate_left_r [9] $end
$var wire 1 :8 rotate_left_r [8] $end
$var wire 1 ;8 rotate_left_r [7] $end
$var wire 1 <8 rotate_left_r [6] $end
$var wire 1 =8 rotate_left_r [5] $end
$var wire 1 >8 rotate_left_r [4] $end
$var wire 1 ?8 rotate_left_r [3] $end
$var wire 1 @8 rotate_left_r [2] $end
$var wire 1 A8 rotate_left_r [1] $end
$var wire 1 B8 rotate_left_r [0] $end
$var wire 1 C8 shift_right_l_r [15] $end
$var wire 1 D8 shift_right_l_r [14] $end
$var wire 1 E8 shift_right_l_r [13] $end
$var wire 1 F8 shift_right_l_r [12] $end
$var wire 1 G8 shift_right_l_r [11] $end
$var wire 1 H8 shift_right_l_r [10] $end
$var wire 1 I8 shift_right_l_r [9] $end
$var wire 1 J8 shift_right_l_r [8] $end
$var wire 1 K8 shift_right_l_r [7] $end
$var wire 1 L8 shift_right_l_r [6] $end
$var wire 1 M8 shift_right_l_r [5] $end
$var wire 1 N8 shift_right_l_r [4] $end
$var wire 1 O8 shift_right_l_r [3] $end
$var wire 1 P8 shift_right_l_r [2] $end
$var wire 1 Q8 shift_right_l_r [1] $end
$var wire 1 R8 shift_right_l_r [0] $end
$var wire 1 S8 rotate_right_r [15] $end
$var wire 1 T8 rotate_right_r [14] $end
$var wire 1 U8 rotate_right_r [13] $end
$var wire 1 V8 rotate_right_r [12] $end
$var wire 1 W8 rotate_right_r [11] $end
$var wire 1 X8 rotate_right_r [10] $end
$var wire 1 Y8 rotate_right_r [9] $end
$var wire 1 Z8 rotate_right_r [8] $end
$var wire 1 [8 rotate_right_r [7] $end
$var wire 1 \8 rotate_right_r [6] $end
$var wire 1 ]8 rotate_right_r [5] $end
$var wire 1 ^8 rotate_right_r [4] $end
$var wire 1 _8 rotate_right_r [3] $end
$var wire 1 `8 rotate_right_r [2] $end
$var wire 1 a8 rotate_right_r [1] $end
$var wire 1 b8 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 c8 OPERAND_WIDTH $end
$var parameter 32 d8 SHAMT_WIDTH $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 #8 result [15] $end
$var wire 1 $8 result [14] $end
$var wire 1 %8 result [13] $end
$var wire 1 &8 result [12] $end
$var wire 1 '8 result [11] $end
$var wire 1 (8 result [10] $end
$var wire 1 )8 result [9] $end
$var wire 1 *8 result [8] $end
$var wire 1 +8 result [7] $end
$var wire 1 ,8 result [6] $end
$var wire 1 -8 result [5] $end
$var wire 1 .8 result [4] $end
$var wire 1 /8 result [3] $end
$var wire 1 08 result [2] $end
$var wire 1 18 result [1] $end
$var wire 1 28 result [0] $end
$var wire 1 e8 temp1 [15] $end
$var wire 1 f8 temp1 [14] $end
$var wire 1 g8 temp1 [13] $end
$var wire 1 h8 temp1 [12] $end
$var wire 1 i8 temp1 [11] $end
$var wire 1 j8 temp1 [10] $end
$var wire 1 k8 temp1 [9] $end
$var wire 1 l8 temp1 [8] $end
$var wire 1 m8 temp1 [7] $end
$var wire 1 n8 temp1 [6] $end
$var wire 1 o8 temp1 [5] $end
$var wire 1 p8 temp1 [4] $end
$var wire 1 q8 temp1 [3] $end
$var wire 1 r8 temp1 [2] $end
$var wire 1 s8 temp1 [1] $end
$var wire 1 t8 temp1 [0] $end
$var wire 1 u8 temp2 [15] $end
$var wire 1 v8 temp2 [14] $end
$var wire 1 w8 temp2 [13] $end
$var wire 1 x8 temp2 [12] $end
$var wire 1 y8 temp2 [11] $end
$var wire 1 z8 temp2 [10] $end
$var wire 1 {8 temp2 [9] $end
$var wire 1 |8 temp2 [8] $end
$var wire 1 }8 temp2 [7] $end
$var wire 1 ~8 temp2 [6] $end
$var wire 1 !9 temp2 [5] $end
$var wire 1 "9 temp2 [4] $end
$var wire 1 #9 temp2 [3] $end
$var wire 1 $9 temp2 [2] $end
$var wire 1 %9 temp2 [1] $end
$var wire 1 &9 temp2 [0] $end
$var wire 1 '9 temp3 [15] $end
$var wire 1 (9 temp3 [14] $end
$var wire 1 )9 temp3 [13] $end
$var wire 1 *9 temp3 [12] $end
$var wire 1 +9 temp3 [11] $end
$var wire 1 ,9 temp3 [10] $end
$var wire 1 -9 temp3 [9] $end
$var wire 1 .9 temp3 [8] $end
$var wire 1 /9 temp3 [7] $end
$var wire 1 09 temp3 [6] $end
$var wire 1 19 temp3 [5] $end
$var wire 1 29 temp3 [4] $end
$var wire 1 39 temp3 [3] $end
$var wire 1 49 temp3 [2] $end
$var wire 1 59 temp3 [1] $end
$var wire 1 69 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 79 OPERAND_WIDTH $end
$var parameter 32 89 SHAMT_WIDTH $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 38 result [15] $end
$var wire 1 48 result [14] $end
$var wire 1 58 result [13] $end
$var wire 1 68 result [12] $end
$var wire 1 78 result [11] $end
$var wire 1 88 result [10] $end
$var wire 1 98 result [9] $end
$var wire 1 :8 result [8] $end
$var wire 1 ;8 result [7] $end
$var wire 1 <8 result [6] $end
$var wire 1 =8 result [5] $end
$var wire 1 >8 result [4] $end
$var wire 1 ?8 result [3] $end
$var wire 1 @8 result [2] $end
$var wire 1 A8 result [1] $end
$var wire 1 B8 result [0] $end
$var wire 1 99 temp1 [15] $end
$var wire 1 :9 temp1 [14] $end
$var wire 1 ;9 temp1 [13] $end
$var wire 1 <9 temp1 [12] $end
$var wire 1 =9 temp1 [11] $end
$var wire 1 >9 temp1 [10] $end
$var wire 1 ?9 temp1 [9] $end
$var wire 1 @9 temp1 [8] $end
$var wire 1 A9 temp1 [7] $end
$var wire 1 B9 temp1 [6] $end
$var wire 1 C9 temp1 [5] $end
$var wire 1 D9 temp1 [4] $end
$var wire 1 E9 temp1 [3] $end
$var wire 1 F9 temp1 [2] $end
$var wire 1 G9 temp1 [1] $end
$var wire 1 H9 temp1 [0] $end
$var wire 1 I9 temp2 [15] $end
$var wire 1 J9 temp2 [14] $end
$var wire 1 K9 temp2 [13] $end
$var wire 1 L9 temp2 [12] $end
$var wire 1 M9 temp2 [11] $end
$var wire 1 N9 temp2 [10] $end
$var wire 1 O9 temp2 [9] $end
$var wire 1 P9 temp2 [8] $end
$var wire 1 Q9 temp2 [7] $end
$var wire 1 R9 temp2 [6] $end
$var wire 1 S9 temp2 [5] $end
$var wire 1 T9 temp2 [4] $end
$var wire 1 U9 temp2 [3] $end
$var wire 1 V9 temp2 [2] $end
$var wire 1 W9 temp2 [1] $end
$var wire 1 X9 temp2 [0] $end
$var wire 1 Y9 temp3 [15] $end
$var wire 1 Z9 temp3 [14] $end
$var wire 1 [9 temp3 [13] $end
$var wire 1 \9 temp3 [12] $end
$var wire 1 ]9 temp3 [11] $end
$var wire 1 ^9 temp3 [10] $end
$var wire 1 _9 temp3 [9] $end
$var wire 1 `9 temp3 [8] $end
$var wire 1 a9 temp3 [7] $end
$var wire 1 b9 temp3 [6] $end
$var wire 1 c9 temp3 [5] $end
$var wire 1 d9 temp3 [4] $end
$var wire 1 e9 temp3 [3] $end
$var wire 1 f9 temp3 [2] $end
$var wire 1 g9 temp3 [1] $end
$var wire 1 h9 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 i9 OPERAND_WIDTH $end
$var parameter 32 j9 SHAMT_WIDTH $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 C8 result [15] $end
$var wire 1 D8 result [14] $end
$var wire 1 E8 result [13] $end
$var wire 1 F8 result [12] $end
$var wire 1 G8 result [11] $end
$var wire 1 H8 result [10] $end
$var wire 1 I8 result [9] $end
$var wire 1 J8 result [8] $end
$var wire 1 K8 result [7] $end
$var wire 1 L8 result [6] $end
$var wire 1 M8 result [5] $end
$var wire 1 N8 result [4] $end
$var wire 1 O8 result [3] $end
$var wire 1 P8 result [2] $end
$var wire 1 Q8 result [1] $end
$var wire 1 R8 result [0] $end
$var wire 1 k9 temp1 [15] $end
$var wire 1 l9 temp1 [14] $end
$var wire 1 m9 temp1 [13] $end
$var wire 1 n9 temp1 [12] $end
$var wire 1 o9 temp1 [11] $end
$var wire 1 p9 temp1 [10] $end
$var wire 1 q9 temp1 [9] $end
$var wire 1 r9 temp1 [8] $end
$var wire 1 s9 temp1 [7] $end
$var wire 1 t9 temp1 [6] $end
$var wire 1 u9 temp1 [5] $end
$var wire 1 v9 temp1 [4] $end
$var wire 1 w9 temp1 [3] $end
$var wire 1 x9 temp1 [2] $end
$var wire 1 y9 temp1 [1] $end
$var wire 1 z9 temp1 [0] $end
$var wire 1 {9 temp2 [15] $end
$var wire 1 |9 temp2 [14] $end
$var wire 1 }9 temp2 [13] $end
$var wire 1 ~9 temp2 [12] $end
$var wire 1 !: temp2 [11] $end
$var wire 1 ": temp2 [10] $end
$var wire 1 #: temp2 [9] $end
$var wire 1 $: temp2 [8] $end
$var wire 1 %: temp2 [7] $end
$var wire 1 &: temp2 [6] $end
$var wire 1 ': temp2 [5] $end
$var wire 1 (: temp2 [4] $end
$var wire 1 ): temp2 [3] $end
$var wire 1 *: temp2 [2] $end
$var wire 1 +: temp2 [1] $end
$var wire 1 ,: temp2 [0] $end
$var wire 1 -: temp3 [15] $end
$var wire 1 .: temp3 [14] $end
$var wire 1 /: temp3 [13] $end
$var wire 1 0: temp3 [12] $end
$var wire 1 1: temp3 [11] $end
$var wire 1 2: temp3 [10] $end
$var wire 1 3: temp3 [9] $end
$var wire 1 4: temp3 [8] $end
$var wire 1 5: temp3 [7] $end
$var wire 1 6: temp3 [6] $end
$var wire 1 7: temp3 [5] $end
$var wire 1 8: temp3 [4] $end
$var wire 1 9: temp3 [3] $end
$var wire 1 :: temp3 [2] $end
$var wire 1 ;: temp3 [1] $end
$var wire 1 <: temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 =: OPERAND_WIDTH $end
$var parameter 32 >: SHAMT_WIDTH $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 S8 result [15] $end
$var wire 1 T8 result [14] $end
$var wire 1 U8 result [13] $end
$var wire 1 V8 result [12] $end
$var wire 1 W8 result [11] $end
$var wire 1 X8 result [10] $end
$var wire 1 Y8 result [9] $end
$var wire 1 Z8 result [8] $end
$var wire 1 [8 result [7] $end
$var wire 1 \8 result [6] $end
$var wire 1 ]8 result [5] $end
$var wire 1 ^8 result [4] $end
$var wire 1 _8 result [3] $end
$var wire 1 `8 result [2] $end
$var wire 1 a8 result [1] $end
$var wire 1 b8 result [0] $end
$var wire 1 ?: temp1 [15] $end
$var wire 1 @: temp1 [14] $end
$var wire 1 A: temp1 [13] $end
$var wire 1 B: temp1 [12] $end
$var wire 1 C: temp1 [11] $end
$var wire 1 D: temp1 [10] $end
$var wire 1 E: temp1 [9] $end
$var wire 1 F: temp1 [8] $end
$var wire 1 G: temp1 [7] $end
$var wire 1 H: temp1 [6] $end
$var wire 1 I: temp1 [5] $end
$var wire 1 J: temp1 [4] $end
$var wire 1 K: temp1 [3] $end
$var wire 1 L: temp1 [2] $end
$var wire 1 M: temp1 [1] $end
$var wire 1 N: temp1 [0] $end
$var wire 1 O: temp2 [15] $end
$var wire 1 P: temp2 [14] $end
$var wire 1 Q: temp2 [13] $end
$var wire 1 R: temp2 [12] $end
$var wire 1 S: temp2 [11] $end
$var wire 1 T: temp2 [10] $end
$var wire 1 U: temp2 [9] $end
$var wire 1 V: temp2 [8] $end
$var wire 1 W: temp2 [7] $end
$var wire 1 X: temp2 [6] $end
$var wire 1 Y: temp2 [5] $end
$var wire 1 Z: temp2 [4] $end
$var wire 1 [: temp2 [3] $end
$var wire 1 \: temp2 [2] $end
$var wire 1 ]: temp2 [1] $end
$var wire 1 ^: temp2 [0] $end
$var wire 1 _: temp3 [15] $end
$var wire 1 `: temp3 [14] $end
$var wire 1 a: temp3 [13] $end
$var wire 1 b: temp3 [12] $end
$var wire 1 c: temp3 [11] $end
$var wire 1 d: temp3 [10] $end
$var wire 1 e: temp3 [9] $end
$var wire 1 f: temp3 [8] $end
$var wire 1 g: temp3 [7] $end
$var wire 1 h: temp3 [6] $end
$var wire 1 i: temp3 [5] $end
$var wire 1 j: temp3 [4] $end
$var wire 1 k: temp3 [3] $end
$var wire 1 l: temp3 [2] $end
$var wire 1 m: temp3 [1] $end
$var wire 1 n: temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var parameter 32 o: OPERAND_WIDTH $end
$var parameter 32 p: NUM_OPERATIONS $end
$var wire 1 y6 A [15] $end
$var wire 1 z6 A [14] $end
$var wire 1 {6 A [13] $end
$var wire 1 |6 A [12] $end
$var wire 1 }6 A [11] $end
$var wire 1 ~6 A [10] $end
$var wire 1 !7 A [9] $end
$var wire 1 "7 A [8] $end
$var wire 1 #7 A [7] $end
$var wire 1 $7 A [6] $end
$var wire 1 %7 A [5] $end
$var wire 1 &7 A [4] $end
$var wire 1 '7 A [3] $end
$var wire 1 (7 A [2] $end
$var wire 1 )7 A [1] $end
$var wire 1 *7 A [0] $end
$var wire 1 +7 B [15] $end
$var wire 1 ,7 B [14] $end
$var wire 1 -7 B [13] $end
$var wire 1 .7 B [12] $end
$var wire 1 /7 B [11] $end
$var wire 1 07 B [10] $end
$var wire 1 17 B [9] $end
$var wire 1 27 B [8] $end
$var wire 1 37 B [7] $end
$var wire 1 47 B [6] $end
$var wire 1 57 B [5] $end
$var wire 1 67 B [4] $end
$var wire 1 77 B [3] $end
$var wire 1 87 B [2] $end
$var wire 1 97 B [1] $end
$var wire 1 :7 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 K7 Result [15] $end
$var wire 1 L7 Result [14] $end
$var wire 1 M7 Result [13] $end
$var wire 1 N7 Result [12] $end
$var wire 1 O7 Result [11] $end
$var wire 1 P7 Result [10] $end
$var wire 1 Q7 Result [9] $end
$var wire 1 R7 Result [8] $end
$var wire 1 S7 Result [7] $end
$var wire 1 T7 Result [6] $end
$var wire 1 U7 Result [5] $end
$var wire 1 V7 Result [4] $end
$var wire 1 W7 Result [3] $end
$var wire 1 X7 Result [2] $end
$var wire 1 Y7 Result [1] $end
$var wire 1 Z7 Result [0] $end
$upscope $end

$scope module adding $end
$var parameter 32 q: N $end
$var wire 1 [7 sum [15] $end
$var wire 1 \7 sum [14] $end
$var wire 1 ]7 sum [13] $end
$var wire 1 ^7 sum [12] $end
$var wire 1 _7 sum [11] $end
$var wire 1 `7 sum [10] $end
$var wire 1 a7 sum [9] $end
$var wire 1 b7 sum [8] $end
$var wire 1 c7 sum [7] $end
$var wire 1 d7 sum [6] $end
$var wire 1 e7 sum [5] $end
$var wire 1 f7 sum [4] $end
$var wire 1 g7 sum [3] $end
$var wire 1 h7 sum [2] $end
$var wire 1 i7 sum [1] $end
$var wire 1 j7 sum [0] $end
$var wire 1 {7 c_out $end
$var wire 1 y6 a [15] $end
$var wire 1 z6 a [14] $end
$var wire 1 {6 a [13] $end
$var wire 1 |6 a [12] $end
$var wire 1 }6 a [11] $end
$var wire 1 ~6 a [10] $end
$var wire 1 !7 a [9] $end
$var wire 1 "7 a [8] $end
$var wire 1 #7 a [7] $end
$var wire 1 $7 a [6] $end
$var wire 1 %7 a [5] $end
$var wire 1 &7 a [4] $end
$var wire 1 '7 a [3] $end
$var wire 1 (7 a [2] $end
$var wire 1 )7 a [1] $end
$var wire 1 *7 a [0] $end
$var wire 1 +7 b [15] $end
$var wire 1 ,7 b [14] $end
$var wire 1 -7 b [13] $end
$var wire 1 .7 b [12] $end
$var wire 1 /7 b [11] $end
$var wire 1 07 b [10] $end
$var wire 1 17 b [9] $end
$var wire 1 27 b [8] $end
$var wire 1 37 b [7] $end
$var wire 1 47 b [6] $end
$var wire 1 57 b [5] $end
$var wire 1 67 b [4] $end
$var wire 1 77 b [3] $end
$var wire 1 87 b [2] $end
$var wire 1 97 b [1] $end
$var wire 1 :7 b [0] $end
$var wire 1 w6 c_in $end
$var wire 1 r: gen [15] $end
$var wire 1 s: gen [14] $end
$var wire 1 t: gen [13] $end
$var wire 1 u: gen [12] $end
$var wire 1 v: gen [11] $end
$var wire 1 w: gen [10] $end
$var wire 1 x: gen [9] $end
$var wire 1 y: gen [8] $end
$var wire 1 z: gen [7] $end
$var wire 1 {: gen [6] $end
$var wire 1 |: gen [5] $end
$var wire 1 }: gen [4] $end
$var wire 1 ~: gen [3] $end
$var wire 1 !; gen [2] $end
$var wire 1 "; gen [1] $end
$var wire 1 #; gen [0] $end
$var wire 1 $; four_gen [3] $end
$var wire 1 %; four_gen [2] $end
$var wire 1 &; four_gen [1] $end
$var wire 1 '; four_gen [0] $end
$var wire 1 (; prop [15] $end
$var wire 1 ); prop [14] $end
$var wire 1 *; prop [13] $end
$var wire 1 +; prop [12] $end
$var wire 1 ,; prop [11] $end
$var wire 1 -; prop [10] $end
$var wire 1 .; prop [9] $end
$var wire 1 /; prop [8] $end
$var wire 1 0; prop [7] $end
$var wire 1 1; prop [6] $end
$var wire 1 2; prop [5] $end
$var wire 1 3; prop [4] $end
$var wire 1 4; prop [3] $end
$var wire 1 5; prop [2] $end
$var wire 1 6; prop [1] $end
$var wire 1 7; prop [0] $end
$var wire 1 8; four_prop [3] $end
$var wire 1 9; four_prop [2] $end
$var wire 1 :; four_prop [1] $end
$var wire 1 ;; four_prop [0] $end
$var wire 1 <; carry [2] $end
$var wire 1 =; carry [1] $end
$var wire 1 >; carry [0] $end
$var wire 1 ?; fa_sum [15] $end
$var wire 1 @; fa_sum [14] $end
$var wire 1 A; fa_sum [13] $end
$var wire 1 B; fa_sum [12] $end
$var wire 1 C; fa_sum [11] $end
$var wire 1 D; fa_sum [10] $end
$var wire 1 E; fa_sum [9] $end
$var wire 1 F; fa_sum [8] $end
$var wire 1 G; fa_sum [7] $end
$var wire 1 H; fa_sum [6] $end
$var wire 1 I; fa_sum [5] $end
$var wire 1 J; fa_sum [4] $end
$var wire 1 K; fa_sum [3] $end
$var wire 1 L; fa_sum [2] $end
$var wire 1 M; fa_sum [1] $end
$var wire 1 N; fa_sum [0] $end

$scope module cla1 $end
$var parameter 32 O; N $end
$var wire 1 K; sum [3] $end
$var wire 1 L; sum [2] $end
$var wire 1 M; sum [1] $end
$var wire 1 N; sum [0] $end
$var wire 1 P; c_out $end
$var wire 1 '7 a [3] $end
$var wire 1 (7 a [2] $end
$var wire 1 )7 a [1] $end
$var wire 1 *7 a [0] $end
$var wire 1 77 b [3] $end
$var wire 1 87 b [2] $end
$var wire 1 97 b [1] $end
$var wire 1 :7 b [0] $end
$var wire 1 w6 c_in $end
$var wire 1 Q; gen [3] $end
$var wire 1 R; gen [2] $end
$var wire 1 S; gen [1] $end
$var wire 1 T; gen [0] $end
$var wire 1 U; prop [3] $end
$var wire 1 V; prop [2] $end
$var wire 1 W; prop [1] $end
$var wire 1 X; prop [0] $end
$var wire 1 Y; carry [2] $end
$var wire 1 Z; carry [1] $end
$var wire 1 [; carry [0] $end
$var wire 1 \; fa_sum [3] $end
$var wire 1 ]; fa_sum [2] $end
$var wire 1 ^; fa_sum [1] $end
$var wire 1 _; fa_sum [0] $end

$scope module fa1 $end
$var wire 1 _; s $end
$var wire 1 `; c_out $end
$var wire 1 *7 a $end
$var wire 1 :7 b $end
$var wire 1 w6 c_in $end
$var wire 1 a; xor_AB $end
$var wire 1 b; xor_ABCin $end
$var wire 1 c; NAND_AB $end
$var wire 1 d; not_NAND_AB $end
$var wire 1 e; NAND_Cin_xor_AB $end
$var wire 1 f; not_NAND_Cin_xor_AB $end
$var wire 1 g; NOR_2NAND $end
$var wire 1 h; not_NOR_2NAND $end
$var wire 1 i; Cin $end

$scope module xor1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 a; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 a; in1 $end
$var wire 1 w6 in2 $end
$var wire 1 b; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 c; out $end
$upscope $end

$scope module not1 $end
$var wire 1 c; in1 $end
$var wire 1 d; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 i; in1 $end
$var wire 1 a; in2 $end
$var wire 1 e; out $end
$upscope $end

$scope module not2 $end
$var wire 1 e; in1 $end
$var wire 1 f; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 d; in1 $end
$var wire 1 f; in2 $end
$var wire 1 g; out $end
$upscope $end

$scope module not3 $end
$var wire 1 g; in1 $end
$var wire 1 h; out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 ^; s $end
$var wire 1 j; c_out $end
$var wire 1 )7 a $end
$var wire 1 97 b $end
$var wire 1 [; c_in $end
$var wire 1 k; xor_AB $end
$var wire 1 l; xor_ABCin $end
$var wire 1 m; NAND_AB $end
$var wire 1 n; not_NAND_AB $end
$var wire 1 o; NAND_Cin_xor_AB $end
$var wire 1 p; not_NAND_Cin_xor_AB $end
$var wire 1 q; NOR_2NAND $end
$var wire 1 r; not_NOR_2NAND $end
$var wire 1 s; Cin $end

$scope module xor1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 k; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 k; in1 $end
$var wire 1 [; in2 $end
$var wire 1 l; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 m; out $end
$upscope $end

$scope module not1 $end
$var wire 1 m; in1 $end
$var wire 1 n; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s; in1 $end
$var wire 1 k; in2 $end
$var wire 1 o; out $end
$upscope $end

$scope module not2 $end
$var wire 1 o; in1 $end
$var wire 1 p; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 n; in1 $end
$var wire 1 p; in2 $end
$var wire 1 q; out $end
$upscope $end

$scope module not3 $end
$var wire 1 q; in1 $end
$var wire 1 r; out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 ]; s $end
$var wire 1 t; c_out $end
$var wire 1 (7 a $end
$var wire 1 87 b $end
$var wire 1 Z; c_in $end
$var wire 1 u; xor_AB $end
$var wire 1 v; xor_ABCin $end
$var wire 1 w; NAND_AB $end
$var wire 1 x; not_NAND_AB $end
$var wire 1 y; NAND_Cin_xor_AB $end
$var wire 1 z; not_NAND_Cin_xor_AB $end
$var wire 1 {; NOR_2NAND $end
$var wire 1 |; not_NOR_2NAND $end
$var wire 1 }; Cin $end

$scope module xor1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 u; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u; in1 $end
$var wire 1 Z; in2 $end
$var wire 1 v; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 w; out $end
$upscope $end

$scope module not1 $end
$var wire 1 w; in1 $end
$var wire 1 x; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }; in1 $end
$var wire 1 u; in2 $end
$var wire 1 y; out $end
$upscope $end

$scope module not2 $end
$var wire 1 y; in1 $end
$var wire 1 z; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x; in1 $end
$var wire 1 z; in2 $end
$var wire 1 {; out $end
$upscope $end

$scope module not3 $end
$var wire 1 {; in1 $end
$var wire 1 |; out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 \; s $end
$var wire 1 ~; c_out $end
$var wire 1 '7 a $end
$var wire 1 77 b $end
$var wire 1 Y; c_in $end
$var wire 1 !< xor_AB $end
$var wire 1 "< xor_ABCin $end
$var wire 1 #< NAND_AB $end
$var wire 1 $< not_NAND_AB $end
$var wire 1 %< NAND_Cin_xor_AB $end
$var wire 1 &< not_NAND_Cin_xor_AB $end
$var wire 1 '< NOR_2NAND $end
$var wire 1 (< not_NOR_2NAND $end
$var wire 1 )< Cin $end

$scope module xor1 $end
$var wire 1 '7 in1 $end
$var wire 1 77 in2 $end
$var wire 1 !< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 !< in1 $end
$var wire 1 Y; in2 $end
$var wire 1 "< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '7 in1 $end
$var wire 1 77 in2 $end
$var wire 1 #< out $end
$upscope $end

$scope module not1 $end
$var wire 1 #< in1 $end
$var wire 1 $< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )< in1 $end
$var wire 1 !< in2 $end
$var wire 1 %< out $end
$upscope $end

$scope module not2 $end
$var wire 1 %< in1 $end
$var wire 1 &< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $< in1 $end
$var wire 1 &< in2 $end
$var wire 1 '< out $end
$upscope $end

$scope module not3 $end
$var wire 1 '< in1 $end
$var wire 1 (< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var parameter 32 *< N $end
$var wire 1 G; sum [3] $end
$var wire 1 H; sum [2] $end
$var wire 1 I; sum [1] $end
$var wire 1 J; sum [0] $end
$var wire 1 +< c_out $end
$var wire 1 #7 a [3] $end
$var wire 1 $7 a [2] $end
$var wire 1 %7 a [1] $end
$var wire 1 &7 a [0] $end
$var wire 1 37 b [3] $end
$var wire 1 47 b [2] $end
$var wire 1 57 b [1] $end
$var wire 1 67 b [0] $end
$var wire 1 >; c_in $end
$var wire 1 ,< gen [3] $end
$var wire 1 -< gen [2] $end
$var wire 1 .< gen [1] $end
$var wire 1 /< gen [0] $end
$var wire 1 0< prop [3] $end
$var wire 1 1< prop [2] $end
$var wire 1 2< prop [1] $end
$var wire 1 3< prop [0] $end
$var wire 1 4< carry [2] $end
$var wire 1 5< carry [1] $end
$var wire 1 6< carry [0] $end
$var wire 1 7< fa_sum [3] $end
$var wire 1 8< fa_sum [2] $end
$var wire 1 9< fa_sum [1] $end
$var wire 1 :< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 :< s $end
$var wire 1 ;< c_out $end
$var wire 1 &7 a $end
$var wire 1 67 b $end
$var wire 1 >; c_in $end
$var wire 1 << xor_AB $end
$var wire 1 =< xor_ABCin $end
$var wire 1 >< NAND_AB $end
$var wire 1 ?< not_NAND_AB $end
$var wire 1 @< NAND_Cin_xor_AB $end
$var wire 1 A< not_NAND_Cin_xor_AB $end
$var wire 1 B< NOR_2NAND $end
$var wire 1 C< not_NOR_2NAND $end
$var wire 1 D< Cin $end

$scope module xor1 $end
$var wire 1 &7 in1 $end
$var wire 1 67 in2 $end
$var wire 1 << out $end
$upscope $end

$scope module xor2 $end
$var wire 1 << in1 $end
$var wire 1 >; in2 $end
$var wire 1 =< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &7 in1 $end
$var wire 1 67 in2 $end
$var wire 1 >< out $end
$upscope $end

$scope module not1 $end
$var wire 1 >< in1 $end
$var wire 1 ?< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 D< in1 $end
$var wire 1 << in2 $end
$var wire 1 @< out $end
$upscope $end

$scope module not2 $end
$var wire 1 @< in1 $end
$var wire 1 A< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?< in1 $end
$var wire 1 A< in2 $end
$var wire 1 B< out $end
$upscope $end

$scope module not3 $end
$var wire 1 B< in1 $end
$var wire 1 C< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 9< s $end
$var wire 1 E< c_out $end
$var wire 1 %7 a $end
$var wire 1 57 b $end
$var wire 1 6< c_in $end
$var wire 1 F< xor_AB $end
$var wire 1 G< xor_ABCin $end
$var wire 1 H< NAND_AB $end
$var wire 1 I< not_NAND_AB $end
$var wire 1 J< NAND_Cin_xor_AB $end
$var wire 1 K< not_NAND_Cin_xor_AB $end
$var wire 1 L< NOR_2NAND $end
$var wire 1 M< not_NOR_2NAND $end
$var wire 1 N< Cin $end

$scope module xor1 $end
$var wire 1 %7 in1 $end
$var wire 1 57 in2 $end
$var wire 1 F< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 F< in1 $end
$var wire 1 6< in2 $end
$var wire 1 G< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %7 in1 $end
$var wire 1 57 in2 $end
$var wire 1 H< out $end
$upscope $end

$scope module not1 $end
$var wire 1 H< in1 $end
$var wire 1 I< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 N< in1 $end
$var wire 1 F< in2 $end
$var wire 1 J< out $end
$upscope $end

$scope module not2 $end
$var wire 1 J< in1 $end
$var wire 1 K< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 I< in1 $end
$var wire 1 K< in2 $end
$var wire 1 L< out $end
$upscope $end

$scope module not3 $end
$var wire 1 L< in1 $end
$var wire 1 M< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 8< s $end
$var wire 1 O< c_out $end
$var wire 1 $7 a $end
$var wire 1 47 b $end
$var wire 1 5< c_in $end
$var wire 1 P< xor_AB $end
$var wire 1 Q< xor_ABCin $end
$var wire 1 R< NAND_AB $end
$var wire 1 S< not_NAND_AB $end
$var wire 1 T< NAND_Cin_xor_AB $end
$var wire 1 U< not_NAND_Cin_xor_AB $end
$var wire 1 V< NOR_2NAND $end
$var wire 1 W< not_NOR_2NAND $end
$var wire 1 X< Cin $end

$scope module xor1 $end
$var wire 1 $7 in1 $end
$var wire 1 47 in2 $end
$var wire 1 P< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P< in1 $end
$var wire 1 5< in2 $end
$var wire 1 Q< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $7 in1 $end
$var wire 1 47 in2 $end
$var wire 1 R< out $end
$upscope $end

$scope module not1 $end
$var wire 1 R< in1 $end
$var wire 1 S< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X< in1 $end
$var wire 1 P< in2 $end
$var wire 1 T< out $end
$upscope $end

$scope module not2 $end
$var wire 1 T< in1 $end
$var wire 1 U< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S< in1 $end
$var wire 1 U< in2 $end
$var wire 1 V< out $end
$upscope $end

$scope module not3 $end
$var wire 1 V< in1 $end
$var wire 1 W< out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 7< s $end
$var wire 1 Y< c_out $end
$var wire 1 #7 a $end
$var wire 1 37 b $end
$var wire 1 4< c_in $end
$var wire 1 Z< xor_AB $end
$var wire 1 [< xor_ABCin $end
$var wire 1 \< NAND_AB $end
$var wire 1 ]< not_NAND_AB $end
$var wire 1 ^< NAND_Cin_xor_AB $end
$var wire 1 _< not_NAND_Cin_xor_AB $end
$var wire 1 `< NOR_2NAND $end
$var wire 1 a< not_NOR_2NAND $end
$var wire 1 b< Cin $end

$scope module xor1 $end
$var wire 1 #7 in1 $end
$var wire 1 37 in2 $end
$var wire 1 Z< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 Z< in1 $end
$var wire 1 4< in2 $end
$var wire 1 [< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #7 in1 $end
$var wire 1 37 in2 $end
$var wire 1 \< out $end
$upscope $end

$scope module not1 $end
$var wire 1 \< in1 $end
$var wire 1 ]< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 b< in1 $end
$var wire 1 Z< in2 $end
$var wire 1 ^< out $end
$upscope $end

$scope module not2 $end
$var wire 1 ^< in1 $end
$var wire 1 _< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ]< in1 $end
$var wire 1 _< in2 $end
$var wire 1 `< out $end
$upscope $end

$scope module not3 $end
$var wire 1 `< in1 $end
$var wire 1 a< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var parameter 32 c< N $end
$var wire 1 C; sum [3] $end
$var wire 1 D; sum [2] $end
$var wire 1 E; sum [1] $end
$var wire 1 F; sum [0] $end
$var wire 1 d< c_out $end
$var wire 1 }6 a [3] $end
$var wire 1 ~6 a [2] $end
$var wire 1 !7 a [1] $end
$var wire 1 "7 a [0] $end
$var wire 1 /7 b [3] $end
$var wire 1 07 b [2] $end
$var wire 1 17 b [1] $end
$var wire 1 27 b [0] $end
$var wire 1 =; c_in $end
$var wire 1 e< gen [3] $end
$var wire 1 f< gen [2] $end
$var wire 1 g< gen [1] $end
$var wire 1 h< gen [0] $end
$var wire 1 i< prop [3] $end
$var wire 1 j< prop [2] $end
$var wire 1 k< prop [1] $end
$var wire 1 l< prop [0] $end
$var wire 1 m< carry [2] $end
$var wire 1 n< carry [1] $end
$var wire 1 o< carry [0] $end
$var wire 1 p< fa_sum [3] $end
$var wire 1 q< fa_sum [2] $end
$var wire 1 r< fa_sum [1] $end
$var wire 1 s< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 s< s $end
$var wire 1 t< c_out $end
$var wire 1 "7 a $end
$var wire 1 27 b $end
$var wire 1 =; c_in $end
$var wire 1 u< xor_AB $end
$var wire 1 v< xor_ABCin $end
$var wire 1 w< NAND_AB $end
$var wire 1 x< not_NAND_AB $end
$var wire 1 y< NAND_Cin_xor_AB $end
$var wire 1 z< not_NAND_Cin_xor_AB $end
$var wire 1 {< NOR_2NAND $end
$var wire 1 |< not_NOR_2NAND $end
$var wire 1 }< Cin $end

$scope module xor1 $end
$var wire 1 "7 in1 $end
$var wire 1 27 in2 $end
$var wire 1 u< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u< in1 $end
$var wire 1 =; in2 $end
$var wire 1 v< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 "7 in1 $end
$var wire 1 27 in2 $end
$var wire 1 w< out $end
$upscope $end

$scope module not1 $end
$var wire 1 w< in1 $end
$var wire 1 x< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }< in1 $end
$var wire 1 u< in2 $end
$var wire 1 y< out $end
$upscope $end

$scope module not2 $end
$var wire 1 y< in1 $end
$var wire 1 z< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x< in1 $end
$var wire 1 z< in2 $end
$var wire 1 {< out $end
$upscope $end

$scope module not3 $end
$var wire 1 {< in1 $end
$var wire 1 |< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 r< s $end
$var wire 1 ~< c_out $end
$var wire 1 !7 a $end
$var wire 1 17 b $end
$var wire 1 o< c_in $end
$var wire 1 != xor_AB $end
$var wire 1 "= xor_ABCin $end
$var wire 1 #= NAND_AB $end
$var wire 1 $= not_NAND_AB $end
$var wire 1 %= NAND_Cin_xor_AB $end
$var wire 1 &= not_NAND_Cin_xor_AB $end
$var wire 1 '= NOR_2NAND $end
$var wire 1 (= not_NOR_2NAND $end
$var wire 1 )= Cin $end

$scope module xor1 $end
$var wire 1 !7 in1 $end
$var wire 1 17 in2 $end
$var wire 1 != out $end
$upscope $end

$scope module xor2 $end
$var wire 1 != in1 $end
$var wire 1 o< in2 $end
$var wire 1 "= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 !7 in1 $end
$var wire 1 17 in2 $end
$var wire 1 #= out $end
$upscope $end

$scope module not1 $end
$var wire 1 #= in1 $end
$var wire 1 $= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )= in1 $end
$var wire 1 != in2 $end
$var wire 1 %= out $end
$upscope $end

$scope module not2 $end
$var wire 1 %= in1 $end
$var wire 1 &= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $= in1 $end
$var wire 1 &= in2 $end
$var wire 1 '= out $end
$upscope $end

$scope module not3 $end
$var wire 1 '= in1 $end
$var wire 1 (= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 q< s $end
$var wire 1 *= c_out $end
$var wire 1 ~6 a $end
$var wire 1 07 b $end
$var wire 1 n< c_in $end
$var wire 1 += xor_AB $end
$var wire 1 ,= xor_ABCin $end
$var wire 1 -= NAND_AB $end
$var wire 1 .= not_NAND_AB $end
$var wire 1 /= NAND_Cin_xor_AB $end
$var wire 1 0= not_NAND_Cin_xor_AB $end
$var wire 1 1= NOR_2NAND $end
$var wire 1 2= not_NOR_2NAND $end
$var wire 1 3= Cin $end

$scope module xor1 $end
$var wire 1 ~6 in1 $end
$var wire 1 07 in2 $end
$var wire 1 += out $end
$upscope $end

$scope module xor2 $end
$var wire 1 += in1 $end
$var wire 1 n< in2 $end
$var wire 1 ,= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ~6 in1 $end
$var wire 1 07 in2 $end
$var wire 1 -= out $end
$upscope $end

$scope module not1 $end
$var wire 1 -= in1 $end
$var wire 1 .= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3= in1 $end
$var wire 1 += in2 $end
$var wire 1 /= out $end
$upscope $end

$scope module not2 $end
$var wire 1 /= in1 $end
$var wire 1 0= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .= in1 $end
$var wire 1 0= in2 $end
$var wire 1 1= out $end
$upscope $end

$scope module not3 $end
$var wire 1 1= in1 $end
$var wire 1 2= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 p< s $end
$var wire 1 4= c_out $end
$var wire 1 }6 a $end
$var wire 1 /7 b $end
$var wire 1 m< c_in $end
$var wire 1 5= xor_AB $end
$var wire 1 6= xor_ABCin $end
$var wire 1 7= NAND_AB $end
$var wire 1 8= not_NAND_AB $end
$var wire 1 9= NAND_Cin_xor_AB $end
$var wire 1 := not_NAND_Cin_xor_AB $end
$var wire 1 ;= NOR_2NAND $end
$var wire 1 <= not_NOR_2NAND $end
$var wire 1 == Cin $end

$scope module xor1 $end
$var wire 1 }6 in1 $end
$var wire 1 /7 in2 $end
$var wire 1 5= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5= in1 $end
$var wire 1 m< in2 $end
$var wire 1 6= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 }6 in1 $end
$var wire 1 /7 in2 $end
$var wire 1 7= out $end
$upscope $end

$scope module not1 $end
$var wire 1 7= in1 $end
$var wire 1 8= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 == in1 $end
$var wire 1 5= in2 $end
$var wire 1 9= out $end
$upscope $end

$scope module not2 $end
$var wire 1 9= in1 $end
$var wire 1 := out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8= in1 $end
$var wire 1 := in2 $end
$var wire 1 ;= out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;= in1 $end
$var wire 1 <= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var parameter 32 >= N $end
$var wire 1 ?; sum [3] $end
$var wire 1 @; sum [2] $end
$var wire 1 A; sum [1] $end
$var wire 1 B; sum [0] $end
$var wire 1 ?= c_out $end
$var wire 1 y6 a [3] $end
$var wire 1 z6 a [2] $end
$var wire 1 {6 a [1] $end
$var wire 1 |6 a [0] $end
$var wire 1 +7 b [3] $end
$var wire 1 ,7 b [2] $end
$var wire 1 -7 b [1] $end
$var wire 1 .7 b [0] $end
$var wire 1 <; c_in $end
$var wire 1 @= gen [3] $end
$var wire 1 A= gen [2] $end
$var wire 1 B= gen [1] $end
$var wire 1 C= gen [0] $end
$var wire 1 D= prop [3] $end
$var wire 1 E= prop [2] $end
$var wire 1 F= prop [1] $end
$var wire 1 G= prop [0] $end
$var wire 1 H= carry [2] $end
$var wire 1 I= carry [1] $end
$var wire 1 J= carry [0] $end
$var wire 1 K= fa_sum [3] $end
$var wire 1 L= fa_sum [2] $end
$var wire 1 M= fa_sum [1] $end
$var wire 1 N= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 N= s $end
$var wire 1 O= c_out $end
$var wire 1 |6 a $end
$var wire 1 .7 b $end
$var wire 1 <; c_in $end
$var wire 1 P= xor_AB $end
$var wire 1 Q= xor_ABCin $end
$var wire 1 R= NAND_AB $end
$var wire 1 S= not_NAND_AB $end
$var wire 1 T= NAND_Cin_xor_AB $end
$var wire 1 U= not_NAND_Cin_xor_AB $end
$var wire 1 V= NOR_2NAND $end
$var wire 1 W= not_NOR_2NAND $end
$var wire 1 X= Cin $end

$scope module xor1 $end
$var wire 1 |6 in1 $end
$var wire 1 .7 in2 $end
$var wire 1 P= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P= in1 $end
$var wire 1 <; in2 $end
$var wire 1 Q= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 |6 in1 $end
$var wire 1 .7 in2 $end
$var wire 1 R= out $end
$upscope $end

$scope module not1 $end
$var wire 1 R= in1 $end
$var wire 1 S= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X= in1 $end
$var wire 1 P= in2 $end
$var wire 1 T= out $end
$upscope $end

$scope module not2 $end
$var wire 1 T= in1 $end
$var wire 1 U= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S= in1 $end
$var wire 1 U= in2 $end
$var wire 1 V= out $end
$upscope $end

$scope module not3 $end
$var wire 1 V= in1 $end
$var wire 1 W= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 M= s $end
$var wire 1 Y= c_out $end
$var wire 1 {6 a $end
$var wire 1 -7 b $end
$var wire 1 J= c_in $end
$var wire 1 Z= xor_AB $end
$var wire 1 [= xor_ABCin $end
$var wire 1 \= NAND_AB $end
$var wire 1 ]= not_NAND_AB $end
$var wire 1 ^= NAND_Cin_xor_AB $end
$var wire 1 _= not_NAND_Cin_xor_AB $end
$var wire 1 `= NOR_2NAND $end
$var wire 1 a= not_NOR_2NAND $end
$var wire 1 b= Cin $end

$scope module xor1 $end
$var wire 1 {6 in1 $end
$var wire 1 -7 in2 $end
$var wire 1 Z= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 Z= in1 $end
$var wire 1 J= in2 $end
$var wire 1 [= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 {6 in1 $end
$var wire 1 -7 in2 $end
$var wire 1 \= out $end
$upscope $end

$scope module not1 $end
$var wire 1 \= in1 $end
$var wire 1 ]= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 b= in1 $end
$var wire 1 Z= in2 $end
$var wire 1 ^= out $end
$upscope $end

$scope module not2 $end
$var wire 1 ^= in1 $end
$var wire 1 _= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ]= in1 $end
$var wire 1 _= in2 $end
$var wire 1 `= out $end
$upscope $end

$scope module not3 $end
$var wire 1 `= in1 $end
$var wire 1 a= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 L= s $end
$var wire 1 c= c_out $end
$var wire 1 z6 a $end
$var wire 1 ,7 b $end
$var wire 1 I= c_in $end
$var wire 1 d= xor_AB $end
$var wire 1 e= xor_ABCin $end
$var wire 1 f= NAND_AB $end
$var wire 1 g= not_NAND_AB $end
$var wire 1 h= NAND_Cin_xor_AB $end
$var wire 1 i= not_NAND_Cin_xor_AB $end
$var wire 1 j= NOR_2NAND $end
$var wire 1 k= not_NOR_2NAND $end
$var wire 1 l= Cin $end

$scope module xor1 $end
$var wire 1 z6 in1 $end
$var wire 1 ,7 in2 $end
$var wire 1 d= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d= in1 $end
$var wire 1 I= in2 $end
$var wire 1 e= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 z6 in1 $end
$var wire 1 ,7 in2 $end
$var wire 1 f= out $end
$upscope $end

$scope module not1 $end
$var wire 1 f= in1 $end
$var wire 1 g= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l= in1 $end
$var wire 1 d= in2 $end
$var wire 1 h= out $end
$upscope $end

$scope module not2 $end
$var wire 1 h= in1 $end
$var wire 1 i= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g= in1 $end
$var wire 1 i= in2 $end
$var wire 1 j= out $end
$upscope $end

$scope module not3 $end
$var wire 1 j= in1 $end
$var wire 1 k= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 K= s $end
$var wire 1 m= c_out $end
$var wire 1 y6 a $end
$var wire 1 +7 b $end
$var wire 1 H= c_in $end
$var wire 1 n= xor_AB $end
$var wire 1 o= xor_ABCin $end
$var wire 1 p= NAND_AB $end
$var wire 1 q= not_NAND_AB $end
$var wire 1 r= NAND_Cin_xor_AB $end
$var wire 1 s= not_NAND_Cin_xor_AB $end
$var wire 1 t= NOR_2NAND $end
$var wire 1 u= not_NOR_2NAND $end
$var wire 1 v= Cin $end

$scope module xor1 $end
$var wire 1 y6 in1 $end
$var wire 1 +7 in2 $end
$var wire 1 n= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n= in1 $end
$var wire 1 H= in2 $end
$var wire 1 o= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 y6 in1 $end
$var wire 1 +7 in2 $end
$var wire 1 p= out $end
$upscope $end

$scope module not1 $end
$var wire 1 p= in1 $end
$var wire 1 q= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v= in1 $end
$var wire 1 n= in2 $end
$var wire 1 r= out $end
$upscope $end

$scope module not2 $end
$var wire 1 r= in1 $end
$var wire 1 s= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q= in1 $end
$var wire 1 s= in2 $end
$var wire 1 t= out $end
$upscope $end

$scope module not3 $end
$var wire 1 t= in1 $end
$var wire 1 u= out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 42 InA [15] $end
$var wire 1 52 InA [14] $end
$var wire 1 62 InA [13] $end
$var wire 1 72 InA [12] $end
$var wire 1 82 InA [11] $end
$var wire 1 92 InA [10] $end
$var wire 1 :2 InA [9] $end
$var wire 1 ;2 InA [8] $end
$var wire 1 <2 InA [7] $end
$var wire 1 =2 InA [6] $end
$var wire 1 >2 InA [5] $end
$var wire 1 ?2 InA [4] $end
$var wire 1 @2 InA [3] $end
$var wire 1 A2 InA [2] $end
$var wire 1 B2 InA [1] $end
$var wire 1 C2 InA [0] $end
$var wire 1 w= InB [15] $end
$var wire 1 x= InB [14] $end
$var wire 1 y= InB [13] $end
$var wire 1 z= InB [12] $end
$var wire 1 {= InB [11] $end
$var wire 1 |= InB [10] $end
$var wire 1 }= InB [9] $end
$var wire 1 ~= InB [8] $end
$var wire 1 !> InB [7] $end
$var wire 1 "> InB [6] $end
$var wire 1 #> InB [5] $end
$var wire 1 $> InB [4] $end
$var wire 1 %> InB [3] $end
$var wire 1 &> InB [2] $end
$var wire 1 '> InB [1] $end
$var wire 1 (> InB [0] $end
$var wire 1 }7 Out $end
$var wire 1 )> difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 l2 Out $end
$var wire 1 *> difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 ]3 Out $end
$var wire 1 +> difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 l( SendNOP_In $end
$var wire 1 i( SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,> state $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -> state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .> state $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /> state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0> state $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1> state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2> state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 i( q $end
$var wire 1 l( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3> state $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4> state $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5> state $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6> state $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7> state $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8> state $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9> state $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :> state $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;> state $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <> state $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 => state $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >> state $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?> state $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @> state $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A> state $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B> state $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C> state $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D> state $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E> state $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F> state $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G> state $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H> state $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I> state $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J> state $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K> state $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L> state $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M> state $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N> state $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O> state $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P> state $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q> state $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R> state $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S> state $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T> state $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U> state $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V> state $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W> state $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X> state $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y> state $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z> state $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [> state $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \> state $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]> state $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^> state $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _> state $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `> state $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a> state $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b> state $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c> state $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d> state $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e> state $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f> state $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g> state $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h> state $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i> state $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j> state $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k> state $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l> state $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m> state $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n> state $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o> state $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p> state $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q> state $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r> state $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s> state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t> state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u> state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v> state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w> state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x> state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y> state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z> state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {> state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |> state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }> state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~> state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !? state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "? state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #? state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $? state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %? state $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &? state $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '? state $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (? state $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )? state $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *? state $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +? state $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,? state $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -? state $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .? state $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /? state $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0? state $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1? state $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2? state $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3? state $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4? state $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5? state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6? state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7? state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8? state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9? state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :? state $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 /$ SgnExt [15] $end
$var wire 1 0$ SgnExt [14] $end
$var wire 1 1$ SgnExt [13] $end
$var wire 1 2$ SgnExt [12] $end
$var wire 1 3$ SgnExt [11] $end
$var wire 1 4$ SgnExt [10] $end
$var wire 1 5$ SgnExt [9] $end
$var wire 1 6$ SgnExt [8] $end
$var wire 1 7$ SgnExt [7] $end
$var wire 1 8$ SgnExt [6] $end
$var wire 1 9$ SgnExt [5] $end
$var wire 1 :$ SgnExt [4] $end
$var wire 1 ;$ SgnExt [3] $end
$var wire 1 <$ SgnExt [2] $end
$var wire 1 =$ SgnExt [1] $end
$var wire 1 >$ SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 ;? MuxImmSrc [15] $end
$var wire 1 <? MuxImmSrc [14] $end
$var wire 1 =? MuxImmSrc [13] $end
$var wire 1 >? MuxImmSrc [12] $end
$var wire 1 ?? MuxImmSrc [11] $end
$var wire 1 @? MuxImmSrc [10] $end
$var wire 1 A? MuxImmSrc [9] $end
$var wire 1 B? MuxImmSrc [8] $end
$var wire 1 C? MuxImmSrc [7] $end
$var wire 1 D? MuxImmSrc [6] $end
$var wire 1 E? MuxImmSrc [5] $end
$var wire 1 F? MuxImmSrc [4] $end
$var wire 1 G? MuxImmSrc [3] $end
$var wire 1 H? MuxImmSrc [2] $end
$var wire 1 I? MuxImmSrc [1] $end
$var wire 1 J? MuxImmSrc [0] $end
$var wire 1 K? adderOut [15] $end
$var wire 1 L? adderOut [14] $end
$var wire 1 M? adderOut [13] $end
$var wire 1 N? adderOut [12] $end
$var wire 1 O? adderOut [11] $end
$var wire 1 P? adderOut [10] $end
$var wire 1 Q? adderOut [9] $end
$var wire 1 R? adderOut [8] $end
$var wire 1 S? adderOut [7] $end
$var wire 1 T? adderOut [6] $end
$var wire 1 U? adderOut [5] $end
$var wire 1 V? adderOut [4] $end
$var wire 1 W? adderOut [3] $end
$var wire 1 X? adderOut [2] $end
$var wire 1 Y? adderOut [1] $end
$var wire 1 Z? adderOut [0] $end
$var wire 1 [? MuxBranchSrc [15] $end
$var wire 1 \? MuxBranchSrc [14] $end
$var wire 1 ]? MuxBranchSrc [13] $end
$var wire 1 ^? MuxBranchSrc [12] $end
$var wire 1 _? MuxBranchSrc [11] $end
$var wire 1 `? MuxBranchSrc [10] $end
$var wire 1 a? MuxBranchSrc [9] $end
$var wire 1 b? MuxBranchSrc [8] $end
$var wire 1 c? MuxBranchSrc [7] $end
$var wire 1 d? MuxBranchSrc [6] $end
$var wire 1 e? MuxBranchSrc [5] $end
$var wire 1 f? MuxBranchSrc [4] $end
$var wire 1 g? MuxBranchSrc [3] $end
$var wire 1 h? MuxBranchSrc [2] $end
$var wire 1 i? MuxBranchSrc [1] $end
$var wire 1 j? MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 ;? B [15] $end
$var wire 1 <? B [14] $end
$var wire 1 =? B [13] $end
$var wire 1 >? B [12] $end
$var wire 1 ?? B [11] $end
$var wire 1 @? B [10] $end
$var wire 1 A? B [9] $end
$var wire 1 B? B [8] $end
$var wire 1 C? B [7] $end
$var wire 1 D? B [6] $end
$var wire 1 E? B [5] $end
$var wire 1 F? B [4] $end
$var wire 1 G? B [3] $end
$var wire 1 H? B [2] $end
$var wire 1 I? B [1] $end
$var wire 1 J? B [0] $end
$var wire 1 K? S [15] $end
$var wire 1 L? S [14] $end
$var wire 1 M? S [13] $end
$var wire 1 N? S [12] $end
$var wire 1 O? S [11] $end
$var wire 1 P? S [10] $end
$var wire 1 Q? S [9] $end
$var wire 1 R? S [8] $end
$var wire 1 S? S [7] $end
$var wire 1 T? S [6] $end
$var wire 1 U? S [5] $end
$var wire 1 V? S [4] $end
$var wire 1 W? S [3] $end
$var wire 1 X? S [2] $end
$var wire 1 Y? S [1] $end
$var wire 1 Z? S [0] $end
$var wire 1 k? Cout $end
$var wire 1 l? Cout0 $end
$var wire 1 m? Cout1 $end
$var wire 1 n? Cout2 $end
$var wire 1 o? Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 G? B [3] $end
$var wire 1 H? B [2] $end
$var wire 1 I? B [1] $end
$var wire 1 J? B [0] $end
$var wire 1 o? Cin $end
$var wire 1 W? S [3] $end
$var wire 1 X? S [2] $end
$var wire 1 Y? S [1] $end
$var wire 1 Z? S [0] $end
$var wire 1 l? Cout $end
$var wire 1 p? Cout0 $end
$var wire 1 q? Cout1 $end
$var wire 1 r? Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 J? B $end
$var wire 1 o? Cin $end
$var wire 1 Z? S $end
$var wire 1 p? Cout $end
$var wire 1 s? xor_AB $end
$var wire 1 t? xor_ABCin $end
$var wire 1 u? NAND_AB $end
$var wire 1 v? not_NAND_AB $end
$var wire 1 w? NAND_Cin_xor_AB $end
$var wire 1 x? not_NAND_Cin_xor_AB $end
$var wire 1 y? NOR_2NAND $end
$var wire 1 z? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 J? in2 $end
$var wire 1 s? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s? in1 $end
$var wire 1 o? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 J? in2 $end
$var wire 1 u? out $end
$upscope $end

$scope module not1 $end
$var wire 1 u? in1 $end
$var wire 1 v? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o? in1 $end
$var wire 1 s? in2 $end
$var wire 1 w? out $end
$upscope $end

$scope module not2 $end
$var wire 1 w? in1 $end
$var wire 1 x? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v? in1 $end
$var wire 1 x? in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module not3 $end
$var wire 1 y? in1 $end
$var wire 1 z? out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 I? B $end
$var wire 1 p? Cin $end
$var wire 1 Y? S $end
$var wire 1 q? Cout $end
$var wire 1 {? xor_AB $end
$var wire 1 |? xor_ABCin $end
$var wire 1 }? NAND_AB $end
$var wire 1 ~? not_NAND_AB $end
$var wire 1 !@ NAND_Cin_xor_AB $end
$var wire 1 "@ not_NAND_Cin_xor_AB $end
$var wire 1 #@ NOR_2NAND $end
$var wire 1 $@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 I? in2 $end
$var wire 1 {? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 {? in1 $end
$var wire 1 p? in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 I? in2 $end
$var wire 1 }? out $end
$upscope $end

$scope module not1 $end
$var wire 1 }? in1 $end
$var wire 1 ~? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p? in1 $end
$var wire 1 {? in2 $end
$var wire 1 !@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 !@ in1 $end
$var wire 1 "@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ~? in1 $end
$var wire 1 "@ in2 $end
$var wire 1 #@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 #@ in1 $end
$var wire 1 $@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 H? B $end
$var wire 1 q? Cin $end
$var wire 1 X? S $end
$var wire 1 r? Cout $end
$var wire 1 %@ xor_AB $end
$var wire 1 &@ xor_ABCin $end
$var wire 1 '@ NAND_AB $end
$var wire 1 (@ not_NAND_AB $end
$var wire 1 )@ NAND_Cin_xor_AB $end
$var wire 1 *@ not_NAND_Cin_xor_AB $end
$var wire 1 +@ NOR_2NAND $end
$var wire 1 ,@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 H? in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %@ in1 $end
$var wire 1 q? in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 H? in2 $end
$var wire 1 '@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 '@ in1 $end
$var wire 1 (@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q? in1 $end
$var wire 1 %@ in2 $end
$var wire 1 )@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 )@ in1 $end
$var wire 1 *@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (@ in1 $end
$var wire 1 *@ in2 $end
$var wire 1 +@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 +@ in1 $end
$var wire 1 ,@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 G? B $end
$var wire 1 r? Cin $end
$var wire 1 W? S $end
$var wire 1 l? Cout $end
$var wire 1 -@ xor_AB $end
$var wire 1 .@ xor_ABCin $end
$var wire 1 /@ NAND_AB $end
$var wire 1 0@ not_NAND_AB $end
$var wire 1 1@ NAND_Cin_xor_AB $end
$var wire 1 2@ not_NAND_Cin_xor_AB $end
$var wire 1 3@ NOR_2NAND $end
$var wire 1 4@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 G? in2 $end
$var wire 1 -@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -@ in1 $end
$var wire 1 r? in2 $end
$var wire 1 .@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 G? in2 $end
$var wire 1 /@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 /@ in1 $end
$var wire 1 0@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r? in1 $end
$var wire 1 -@ in2 $end
$var wire 1 1@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 1@ in1 $end
$var wire 1 2@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0@ in1 $end
$var wire 1 2@ in2 $end
$var wire 1 3@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 3@ in1 $end
$var wire 1 4@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 C? B [3] $end
$var wire 1 D? B [2] $end
$var wire 1 E? B [1] $end
$var wire 1 F? B [0] $end
$var wire 1 l? Cin $end
$var wire 1 S? S [3] $end
$var wire 1 T? S [2] $end
$var wire 1 U? S [1] $end
$var wire 1 V? S [0] $end
$var wire 1 m? Cout $end
$var wire 1 5@ Cout0 $end
$var wire 1 6@ Cout1 $end
$var wire 1 7@ Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 F? B $end
$var wire 1 l? Cin $end
$var wire 1 V? S $end
$var wire 1 5@ Cout $end
$var wire 1 8@ xor_AB $end
$var wire 1 9@ xor_ABCin $end
$var wire 1 :@ NAND_AB $end
$var wire 1 ;@ not_NAND_AB $end
$var wire 1 <@ NAND_Cin_xor_AB $end
$var wire 1 =@ not_NAND_Cin_xor_AB $end
$var wire 1 >@ NOR_2NAND $end
$var wire 1 ?@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 F? in2 $end
$var wire 1 8@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8@ in1 $end
$var wire 1 l? in2 $end
$var wire 1 9@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 F? in2 $end
$var wire 1 :@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 :@ in1 $end
$var wire 1 ;@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l? in1 $end
$var wire 1 8@ in2 $end
$var wire 1 <@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 <@ in1 $end
$var wire 1 =@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;@ in1 $end
$var wire 1 =@ in2 $end
$var wire 1 >@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 >@ in1 $end
$var wire 1 ?@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 E? B $end
$var wire 1 5@ Cin $end
$var wire 1 U? S $end
$var wire 1 6@ Cout $end
$var wire 1 @@ xor_AB $end
$var wire 1 A@ xor_ABCin $end
$var wire 1 B@ NAND_AB $end
$var wire 1 C@ not_NAND_AB $end
$var wire 1 D@ NAND_Cin_xor_AB $end
$var wire 1 E@ not_NAND_Cin_xor_AB $end
$var wire 1 F@ NOR_2NAND $end
$var wire 1 G@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 E? in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 @@ in1 $end
$var wire 1 5@ in2 $end
$var wire 1 A@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 E? in2 $end
$var wire 1 B@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 B@ in1 $end
$var wire 1 C@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5@ in1 $end
$var wire 1 @@ in2 $end
$var wire 1 D@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 D@ in1 $end
$var wire 1 E@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 C@ in1 $end
$var wire 1 E@ in2 $end
$var wire 1 F@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 F@ in1 $end
$var wire 1 G@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 D? B $end
$var wire 1 6@ Cin $end
$var wire 1 T? S $end
$var wire 1 7@ Cout $end
$var wire 1 H@ xor_AB $end
$var wire 1 I@ xor_ABCin $end
$var wire 1 J@ NAND_AB $end
$var wire 1 K@ not_NAND_AB $end
$var wire 1 L@ NAND_Cin_xor_AB $end
$var wire 1 M@ not_NAND_Cin_xor_AB $end
$var wire 1 N@ NOR_2NAND $end
$var wire 1 O@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 D? in2 $end
$var wire 1 H@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 H@ in1 $end
$var wire 1 6@ in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 D? in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 J@ in1 $end
$var wire 1 K@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 6@ in1 $end
$var wire 1 H@ in2 $end
$var wire 1 L@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 L@ in1 $end
$var wire 1 M@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 K@ in1 $end
$var wire 1 M@ in2 $end
$var wire 1 N@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 N@ in1 $end
$var wire 1 O@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 C? B $end
$var wire 1 7@ Cin $end
$var wire 1 S? S $end
$var wire 1 m? Cout $end
$var wire 1 P@ xor_AB $end
$var wire 1 Q@ xor_ABCin $end
$var wire 1 R@ NAND_AB $end
$var wire 1 S@ not_NAND_AB $end
$var wire 1 T@ NAND_Cin_xor_AB $end
$var wire 1 U@ not_NAND_Cin_xor_AB $end
$var wire 1 V@ NOR_2NAND $end
$var wire 1 W@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 C? in2 $end
$var wire 1 P@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P@ in1 $end
$var wire 1 7@ in2 $end
$var wire 1 Q@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 C? in2 $end
$var wire 1 R@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 R@ in1 $end
$var wire 1 S@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7@ in1 $end
$var wire 1 P@ in2 $end
$var wire 1 T@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 T@ in1 $end
$var wire 1 U@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S@ in1 $end
$var wire 1 U@ in2 $end
$var wire 1 V@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 V@ in1 $end
$var wire 1 W@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 ?? B [3] $end
$var wire 1 @? B [2] $end
$var wire 1 A? B [1] $end
$var wire 1 B? B [0] $end
$var wire 1 m? Cin $end
$var wire 1 O? S [3] $end
$var wire 1 P? S [2] $end
$var wire 1 Q? S [1] $end
$var wire 1 R? S [0] $end
$var wire 1 n? Cout $end
$var wire 1 X@ Cout0 $end
$var wire 1 Y@ Cout1 $end
$var wire 1 Z@ Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 B? B $end
$var wire 1 m? Cin $end
$var wire 1 R? S $end
$var wire 1 X@ Cout $end
$var wire 1 [@ xor_AB $end
$var wire 1 \@ xor_ABCin $end
$var wire 1 ]@ NAND_AB $end
$var wire 1 ^@ not_NAND_AB $end
$var wire 1 _@ NAND_Cin_xor_AB $end
$var wire 1 `@ not_NAND_Cin_xor_AB $end
$var wire 1 a@ NOR_2NAND $end
$var wire 1 b@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 B? in2 $end
$var wire 1 [@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 [@ in1 $end
$var wire 1 m? in2 $end
$var wire 1 \@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 B? in2 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ]@ in1 $end
$var wire 1 ^@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 m? in1 $end
$var wire 1 [@ in2 $end
$var wire 1 _@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 _@ in1 $end
$var wire 1 `@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ^@ in1 $end
$var wire 1 `@ in2 $end
$var wire 1 a@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 a@ in1 $end
$var wire 1 b@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 A? B $end
$var wire 1 X@ Cin $end
$var wire 1 Q? S $end
$var wire 1 Y@ Cout $end
$var wire 1 c@ xor_AB $end
$var wire 1 d@ xor_ABCin $end
$var wire 1 e@ NAND_AB $end
$var wire 1 f@ not_NAND_AB $end
$var wire 1 g@ NAND_Cin_xor_AB $end
$var wire 1 h@ not_NAND_Cin_xor_AB $end
$var wire 1 i@ NOR_2NAND $end
$var wire 1 j@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 A? in2 $end
$var wire 1 c@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 c@ in1 $end
$var wire 1 X@ in2 $end
$var wire 1 d@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 A? in2 $end
$var wire 1 e@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 e@ in1 $end
$var wire 1 f@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X@ in1 $end
$var wire 1 c@ in2 $end
$var wire 1 g@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 g@ in1 $end
$var wire 1 h@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 f@ in1 $end
$var wire 1 h@ in2 $end
$var wire 1 i@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 i@ in1 $end
$var wire 1 j@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 @? B $end
$var wire 1 Y@ Cin $end
$var wire 1 P? S $end
$var wire 1 Z@ Cout $end
$var wire 1 k@ xor_AB $end
$var wire 1 l@ xor_ABCin $end
$var wire 1 m@ NAND_AB $end
$var wire 1 n@ not_NAND_AB $end
$var wire 1 o@ NAND_Cin_xor_AB $end
$var wire 1 p@ not_NAND_Cin_xor_AB $end
$var wire 1 q@ NOR_2NAND $end
$var wire 1 r@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 @? in2 $end
$var wire 1 k@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 k@ in1 $end
$var wire 1 Y@ in2 $end
$var wire 1 l@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 @? in2 $end
$var wire 1 m@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 m@ in1 $end
$var wire 1 n@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Y@ in1 $end
$var wire 1 k@ in2 $end
$var wire 1 o@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 o@ in1 $end
$var wire 1 p@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 n@ in1 $end
$var wire 1 p@ in2 $end
$var wire 1 q@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 q@ in1 $end
$var wire 1 r@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 ?? B $end
$var wire 1 Z@ Cin $end
$var wire 1 O? S $end
$var wire 1 n? Cout $end
$var wire 1 s@ xor_AB $end
$var wire 1 t@ xor_ABCin $end
$var wire 1 u@ NAND_AB $end
$var wire 1 v@ not_NAND_AB $end
$var wire 1 w@ NAND_Cin_xor_AB $end
$var wire 1 x@ not_NAND_Cin_xor_AB $end
$var wire 1 y@ NOR_2NAND $end
$var wire 1 z@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 ?? in2 $end
$var wire 1 s@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s@ in1 $end
$var wire 1 Z@ in2 $end
$var wire 1 t@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 ?? in2 $end
$var wire 1 u@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 u@ in1 $end
$var wire 1 v@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 w@ in1 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v@ in1 $end
$var wire 1 x@ in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 y@ in1 $end
$var wire 1 z@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 ;? B [3] $end
$var wire 1 <? B [2] $end
$var wire 1 =? B [1] $end
$var wire 1 >? B [0] $end
$var wire 1 n? Cin $end
$var wire 1 K? S [3] $end
$var wire 1 L? S [2] $end
$var wire 1 M? S [1] $end
$var wire 1 N? S [0] $end
$var wire 1 k? Cout $end
$var wire 1 {@ Cout0 $end
$var wire 1 |@ Cout1 $end
$var wire 1 }@ Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 >? B $end
$var wire 1 n? Cin $end
$var wire 1 N? S $end
$var wire 1 {@ Cout $end
$var wire 1 ~@ xor_AB $end
$var wire 1 !A xor_ABCin $end
$var wire 1 "A NAND_AB $end
$var wire 1 #A not_NAND_AB $end
$var wire 1 $A NAND_Cin_xor_AB $end
$var wire 1 %A not_NAND_Cin_xor_AB $end
$var wire 1 &A NOR_2NAND $end
$var wire 1 'A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 >? in2 $end
$var wire 1 ~@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~@ in1 $end
$var wire 1 n? in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 >? in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module not1 $end
$var wire 1 "A in1 $end
$var wire 1 #A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n? in1 $end
$var wire 1 ~@ in2 $end
$var wire 1 $A out $end
$upscope $end

$scope module not2 $end
$var wire 1 $A in1 $end
$var wire 1 %A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #A in1 $end
$var wire 1 %A in2 $end
$var wire 1 &A out $end
$upscope $end

$scope module not3 $end
$var wire 1 &A in1 $end
$var wire 1 'A out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 =? B $end
$var wire 1 {@ Cin $end
$var wire 1 M? S $end
$var wire 1 |@ Cout $end
$var wire 1 (A xor_AB $end
$var wire 1 )A xor_ABCin $end
$var wire 1 *A NAND_AB $end
$var wire 1 +A not_NAND_AB $end
$var wire 1 ,A NAND_Cin_xor_AB $end
$var wire 1 -A not_NAND_Cin_xor_AB $end
$var wire 1 .A NOR_2NAND $end
$var wire 1 /A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 =? in2 $end
$var wire 1 (A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 (A in1 $end
$var wire 1 {@ in2 $end
$var wire 1 )A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 =? in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module not1 $end
$var wire 1 *A in1 $end
$var wire 1 +A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 {@ in1 $end
$var wire 1 (A in2 $end
$var wire 1 ,A out $end
$upscope $end

$scope module not2 $end
$var wire 1 ,A in1 $end
$var wire 1 -A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 +A in1 $end
$var wire 1 -A in2 $end
$var wire 1 .A out $end
$upscope $end

$scope module not3 $end
$var wire 1 .A in1 $end
$var wire 1 /A out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 <? B $end
$var wire 1 |@ Cin $end
$var wire 1 L? S $end
$var wire 1 }@ Cout $end
$var wire 1 0A xor_AB $end
$var wire 1 1A xor_ABCin $end
$var wire 1 2A NAND_AB $end
$var wire 1 3A not_NAND_AB $end
$var wire 1 4A NAND_Cin_xor_AB $end
$var wire 1 5A not_NAND_Cin_xor_AB $end
$var wire 1 6A NOR_2NAND $end
$var wire 1 7A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 <? in2 $end
$var wire 1 0A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 0A in1 $end
$var wire 1 |@ in2 $end
$var wire 1 1A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 <? in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module not1 $end
$var wire 1 2A in1 $end
$var wire 1 3A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 |@ in1 $end
$var wire 1 0A in2 $end
$var wire 1 4A out $end
$upscope $end

$scope module not2 $end
$var wire 1 4A in1 $end
$var wire 1 5A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 3A in1 $end
$var wire 1 5A in2 $end
$var wire 1 6A out $end
$upscope $end

$scope module not3 $end
$var wire 1 6A in1 $end
$var wire 1 7A out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 ;? B $end
$var wire 1 }@ Cin $end
$var wire 1 K? S $end
$var wire 1 k? Cout $end
$var wire 1 8A xor_AB $end
$var wire 1 9A xor_ABCin $end
$var wire 1 :A NAND_AB $end
$var wire 1 ;A not_NAND_AB $end
$var wire 1 <A NAND_Cin_xor_AB $end
$var wire 1 =A not_NAND_Cin_xor_AB $end
$var wire 1 >A NOR_2NAND $end
$var wire 1 ?A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 ;? in2 $end
$var wire 1 8A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8A in1 $end
$var wire 1 }@ in2 $end
$var wire 1 9A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 ;? in2 $end
$var wire 1 :A out $end
$upscope $end

$scope module not1 $end
$var wire 1 :A in1 $end
$var wire 1 ;A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }@ in1 $end
$var wire 1 8A in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module not2 $end
$var wire 1 <A in1 $end
$var wire 1 =A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;A in1 $end
$var wire 1 =A in2 $end
$var wire 1 >A out $end
$upscope $end

$scope module not3 $end
$var wire 1 >A in1 $end
$var wire 1 ?A out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 @A enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 AA loaded $end
$var reg 17 BA largest [16:0] $end
$var integer 32 CA mcd $end
$var integer 32 DA i $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 i( SendNOP_In $end
$var wire 1 j( SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end
$var wire 1 k% b_in $end
$var wire 1 `' b_out $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 EA state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 j( q $end
$var wire 1 i( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 FA state $end
$upscope $end

$scope module branch $end
$var wire 1 `' q $end
$var wire 1 k% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 GA state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 HA state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 IA state $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 JA state $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 KA state $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 LA state $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 MA state $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 NA state $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 OA state $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 PA state $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 QA state $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 RA state $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 SA state $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 TA state $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 UA state $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 VA state $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 WA state $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 XA state $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 YA state $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ZA state $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [A state $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \A state $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]A state $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^A state $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _A state $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `A state $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 aA state $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 bA state $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 cA state $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 dA state $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 eA state $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 fA state $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 gA state $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 hA state $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 iA state $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 jA state $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 kA state $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 lA state $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 mA state $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 nA state $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 oA state $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 pA state $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 qA state $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 rA state $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 sA state $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 tA state $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 uA state $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 vA state $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 wA state $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 xA state $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 yA state $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 zA state $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {A state $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |A state $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }A state $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~A state $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !B state $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "B state $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #B state $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $B state $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %B state $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &B state $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 'B state $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (B state $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )B state $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *B state $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +B state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,B state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -B state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .B state $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var wire 1 8! err $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' branching_out_MEM_WB $end
$var wire 1 a' err1 $end
$var wire 1 b' branchNOP $end
$var wire 1 c' MUX_OUT_ONE [15] $end
$var wire 1 d' MUX_OUT_ONE [14] $end
$var wire 1 e' MUX_OUT_ONE [13] $end
$var wire 1 f' MUX_OUT_ONE [12] $end
$var wire 1 g' MUX_OUT_ONE [11] $end
$var wire 1 h' MUX_OUT_ONE [10] $end
$var wire 1 i' MUX_OUT_ONE [9] $end
$var wire 1 j' MUX_OUT_ONE [8] $end
$var wire 1 k' MUX_OUT_ONE [7] $end
$var wire 1 l' MUX_OUT_ONE [6] $end
$var wire 1 m' MUX_OUT_ONE [5] $end
$var wire 1 n' MUX_OUT_ONE [4] $end
$var wire 1 o' MUX_OUT_ONE [3] $end
$var wire 1 p' MUX_OUT_ONE [2] $end
$var wire 1 q' MUX_OUT_ONE [1] $end
$var wire 1 r' MUX_OUT_ONE [0] $end
$var wire 1 s' MUX_OUT_TWO [15] $end
$var wire 1 t' MUX_OUT_TWO [14] $end
$var wire 1 u' MUX_OUT_TWO [13] $end
$var wire 1 v' MUX_OUT_TWO [12] $end
$var wire 1 w' MUX_OUT_TWO [11] $end
$var wire 1 x' MUX_OUT_TWO [10] $end
$var wire 1 y' MUX_OUT_TWO [9] $end
$var wire 1 z' MUX_OUT_TWO [8] $end
$var wire 1 {' MUX_OUT_TWO [7] $end
$var wire 1 |' MUX_OUT_TWO [6] $end
$var wire 1 }' MUX_OUT_TWO [5] $end
$var wire 1 ~' MUX_OUT_TWO [4] $end
$var wire 1 !( MUX_OUT_TWO [3] $end
$var wire 1 "( MUX_OUT_TWO [2] $end
$var wire 1 #( MUX_OUT_TWO [1] $end
$var wire 1 $( MUX_OUT_TWO [0] $end
$var wire 1 %( PC_NO_PLUS_TWO [15] $end
$var wire 1 &( PC_NO_PLUS_TWO [14] $end
$var wire 1 '( PC_NO_PLUS_TWO [13] $end
$var wire 1 (( PC_NO_PLUS_TWO [12] $end
$var wire 1 )( PC_NO_PLUS_TWO [11] $end
$var wire 1 *( PC_NO_PLUS_TWO [10] $end
$var wire 1 +( PC_NO_PLUS_TWO [9] $end
$var wire 1 ,( PC_NO_PLUS_TWO [8] $end
$var wire 1 -( PC_NO_PLUS_TWO [7] $end
$var wire 1 .( PC_NO_PLUS_TWO [6] $end
$var wire 1 /( PC_NO_PLUS_TWO [5] $end
$var wire 1 0( PC_NO_PLUS_TWO [4] $end
$var wire 1 1( PC_NO_PLUS_TWO [3] $end
$var wire 1 2( PC_NO_PLUS_TWO [2] $end
$var wire 1 3( PC_NO_PLUS_TWO [1] $end
$var wire 1 4( PC_NO_PLUS_TWO [0] $end
$var wire 1 5( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 6( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 7( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 8( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 9( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 :( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 ;( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 <( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 =( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 >( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 ?( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 @( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 A( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 B( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 C( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 D( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 E( SendNop $end
$var wire 1 F( inst_again [15] $end
$var wire 1 G( inst_again [14] $end
$var wire 1 H( inst_again [13] $end
$var wire 1 I( inst_again [12] $end
$var wire 1 J( inst_again [11] $end
$var wire 1 K( inst_again [10] $end
$var wire 1 L( inst_again [9] $end
$var wire 1 M( inst_again [8] $end
$var wire 1 N( inst_again [7] $end
$var wire 1 O( inst_again [6] $end
$var wire 1 P( inst_again [5] $end
$var wire 1 Q( inst_again [4] $end
$var wire 1 R( inst_again [3] $end
$var wire 1 S( inst_again [2] $end
$var wire 1 T( inst_again [1] $end
$var wire 1 U( inst_again [0] $end
$var wire 1 V( pc_repeat [15] $end
$var wire 1 W( pc_repeat [14] $end
$var wire 1 X( pc_repeat [13] $end
$var wire 1 Y( pc_repeat [12] $end
$var wire 1 Z( pc_repeat [11] $end
$var wire 1 [( pc_repeat [10] $end
$var wire 1 \( pc_repeat [9] $end
$var wire 1 ]( pc_repeat [8] $end
$var wire 1 ^( pc_repeat [7] $end
$var wire 1 _( pc_repeat [6] $end
$var wire 1 `( pc_repeat [5] $end
$var wire 1 a( pc_repeat [4] $end
$var wire 1 b( pc_repeat [3] $end
$var wire 1 c( pc_repeat [2] $end
$var wire 1 d( pc_repeat [1] $end
$var wire 1 e( pc_repeat [0] $end
$var wire 1 f( MemWrt_Decode_Out $end
$var wire 1 g( RegWrt_Decode_Out $end
$var wire 1 h( NOP_Out_ID_EX $end
$var wire 1 i( NOP_Out_ID_MEM $end
$var wire 1 j( NOP_Out_ID_WB $end
$var wire 1 k( branching_Decode_Out $end
$var wire 1 l( Nop_or_Branch $end

$scope module my_clkrst $end
$var wire 1 o( err $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 s' PC_in [15] $end
$var wire 1 t' PC_in [14] $end
$var wire 1 u' PC_in [13] $end
$var wire 1 v' PC_in [12] $end
$var wire 1 w' PC_in [11] $end
$var wire 1 x' PC_in [10] $end
$var wire 1 y' PC_in [9] $end
$var wire 1 z' PC_in [8] $end
$var wire 1 {' PC_in [7] $end
$var wire 1 |' PC_in [6] $end
$var wire 1 }' PC_in [5] $end
$var wire 1 ~' PC_in [4] $end
$var wire 1 !( PC_in [3] $end
$var wire 1 "( PC_in [2] $end
$var wire 1 #( PC_in [1] $end
$var wire 1 $( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 %( pc_temp [15] $end
$var wire 1 &( pc_temp [14] $end
$var wire 1 '( pc_temp [13] $end
$var wire 1 (( pc_temp [12] $end
$var wire 1 )( pc_temp [11] $end
$var wire 1 *( pc_temp [10] $end
$var wire 1 +( pc_temp [9] $end
$var wire 1 ,( pc_temp [8] $end
$var wire 1 -( pc_temp [7] $end
$var wire 1 .( pc_temp [6] $end
$var wire 1 /( pc_temp [5] $end
$var wire 1 0( pc_temp [4] $end
$var wire 1 1( pc_temp [3] $end
$var wire 1 2( pc_temp [2] $end
$var wire 1 3( pc_temp [1] $end
$var wire 1 4( pc_temp [0] $end

$scope module fa $end
$var wire 1 %( A [15] $end
$var wire 1 &( A [14] $end
$var wire 1 '( A [13] $end
$var wire 1 (( A [12] $end
$var wire 1 )( A [11] $end
$var wire 1 *( A [10] $end
$var wire 1 +( A [9] $end
$var wire 1 ,( A [8] $end
$var wire 1 -( A [7] $end
$var wire 1 .( A [6] $end
$var wire 1 /( A [5] $end
$var wire 1 0( A [4] $end
$var wire 1 1( A [3] $end
$var wire 1 2( A [2] $end
$var wire 1 3( A [1] $end
$var wire 1 4( A [0] $end
$var wire 1 q( B [15] $end
$var wire 1 r( B [14] $end
$var wire 1 s( B [13] $end
$var wire 1 t( B [12] $end
$var wire 1 u( B [11] $end
$var wire 1 v( B [10] $end
$var wire 1 w( B [9] $end
$var wire 1 x( B [8] $end
$var wire 1 y( B [7] $end
$var wire 1 z( B [6] $end
$var wire 1 {( B [5] $end
$var wire 1 |( B [4] $end
$var wire 1 }( B [3] $end
$var wire 1 ~( B [2] $end
$var wire 1 !) B [1] $end
$var wire 1 ") B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 #) Cout $end
$var wire 1 $) Cout0 $end
$var wire 1 %) Cout1 $end
$var wire 1 &) Cout2 $end
$var wire 1 ') Cin $end

$scope module f1 $end
$var wire 1 1( A [3] $end
$var wire 1 2( A [2] $end
$var wire 1 3( A [1] $end
$var wire 1 4( A [0] $end
$var wire 1 }( B [3] $end
$var wire 1 ~( B [2] $end
$var wire 1 !) B [1] $end
$var wire 1 ") B [0] $end
$var wire 1 ') Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 $) Cout $end
$var wire 1 () Cout0 $end
$var wire 1 )) Cout1 $end
$var wire 1 *) Cout2 $end

$scope module f1 $end
$var wire 1 4( A $end
$var wire 1 ") B $end
$var wire 1 ') Cin $end
$var wire 1 0" S $end
$var wire 1 () Cout $end
$var wire 1 +) xor_AB $end
$var wire 1 ,) xor_ABCin $end
$var wire 1 -) NAND_AB $end
$var wire 1 .) not_NAND_AB $end
$var wire 1 /) NAND_Cin_xor_AB $end
$var wire 1 0) not_NAND_Cin_xor_AB $end
$var wire 1 1) NOR_2NAND $end
$var wire 1 2) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4( in1 $end
$var wire 1 ") in2 $end
$var wire 1 +) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +) in1 $end
$var wire 1 ') in2 $end
$var wire 1 ,) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4( in1 $end
$var wire 1 ") in2 $end
$var wire 1 -) out $end
$upscope $end

$scope module not1 $end
$var wire 1 -) in1 $end
$var wire 1 .) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ') in1 $end
$var wire 1 +) in2 $end
$var wire 1 /) out $end
$upscope $end

$scope module not2 $end
$var wire 1 /) in1 $end
$var wire 1 0) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .) in1 $end
$var wire 1 0) in2 $end
$var wire 1 1) out $end
$upscope $end

$scope module not3 $end
$var wire 1 1) in1 $end
$var wire 1 2) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 3( A $end
$var wire 1 !) B $end
$var wire 1 () Cin $end
$var wire 1 /" S $end
$var wire 1 )) Cout $end
$var wire 1 3) xor_AB $end
$var wire 1 4) xor_ABCin $end
$var wire 1 5) NAND_AB $end
$var wire 1 6) not_NAND_AB $end
$var wire 1 7) NAND_Cin_xor_AB $end
$var wire 1 8) not_NAND_Cin_xor_AB $end
$var wire 1 9) NOR_2NAND $end
$var wire 1 :) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3( in1 $end
$var wire 1 !) in2 $end
$var wire 1 3) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 3) in1 $end
$var wire 1 () in2 $end
$var wire 1 4) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3( in1 $end
$var wire 1 !) in2 $end
$var wire 1 5) out $end
$upscope $end

$scope module not1 $end
$var wire 1 5) in1 $end
$var wire 1 6) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 () in1 $end
$var wire 1 3) in2 $end
$var wire 1 7) out $end
$upscope $end

$scope module not2 $end
$var wire 1 7) in1 $end
$var wire 1 8) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 6) in1 $end
$var wire 1 8) in2 $end
$var wire 1 9) out $end
$upscope $end

$scope module not3 $end
$var wire 1 9) in1 $end
$var wire 1 :) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 2( A $end
$var wire 1 ~( B $end
$var wire 1 )) Cin $end
$var wire 1 ." S $end
$var wire 1 *) Cout $end
$var wire 1 ;) xor_AB $end
$var wire 1 <) xor_ABCin $end
$var wire 1 =) NAND_AB $end
$var wire 1 >) not_NAND_AB $end
$var wire 1 ?) NAND_Cin_xor_AB $end
$var wire 1 @) not_NAND_Cin_xor_AB $end
$var wire 1 A) NOR_2NAND $end
$var wire 1 B) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2( in1 $end
$var wire 1 ~( in2 $end
$var wire 1 ;) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;) in1 $end
$var wire 1 )) in2 $end
$var wire 1 <) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2( in1 $end
$var wire 1 ~( in2 $end
$var wire 1 =) out $end
$upscope $end

$scope module not1 $end
$var wire 1 =) in1 $end
$var wire 1 >) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )) in1 $end
$var wire 1 ;) in2 $end
$var wire 1 ?) out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?) in1 $end
$var wire 1 @) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >) in1 $end
$var wire 1 @) in2 $end
$var wire 1 A) out $end
$upscope $end

$scope module not3 $end
$var wire 1 A) in1 $end
$var wire 1 B) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 1( A $end
$var wire 1 }( B $end
$var wire 1 *) Cin $end
$var wire 1 -" S $end
$var wire 1 $) Cout $end
$var wire 1 C) xor_AB $end
$var wire 1 D) xor_ABCin $end
$var wire 1 E) NAND_AB $end
$var wire 1 F) not_NAND_AB $end
$var wire 1 G) NAND_Cin_xor_AB $end
$var wire 1 H) not_NAND_Cin_xor_AB $end
$var wire 1 I) NOR_2NAND $end
$var wire 1 J) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 1( in1 $end
$var wire 1 }( in2 $end
$var wire 1 C) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 C) in1 $end
$var wire 1 *) in2 $end
$var wire 1 D) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 1( in1 $end
$var wire 1 }( in2 $end
$var wire 1 E) out $end
$upscope $end

$scope module not1 $end
$var wire 1 E) in1 $end
$var wire 1 F) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 *) in1 $end
$var wire 1 C) in2 $end
$var wire 1 G) out $end
$upscope $end

$scope module not2 $end
$var wire 1 G) in1 $end
$var wire 1 H) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 F) in1 $end
$var wire 1 H) in2 $end
$var wire 1 I) out $end
$upscope $end

$scope module not3 $end
$var wire 1 I) in1 $end
$var wire 1 J) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 -( A [3] $end
$var wire 1 .( A [2] $end
$var wire 1 /( A [1] $end
$var wire 1 0( A [0] $end
$var wire 1 y( B [3] $end
$var wire 1 z( B [2] $end
$var wire 1 {( B [1] $end
$var wire 1 |( B [0] $end
$var wire 1 $) Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 %) Cout $end
$var wire 1 K) Cout0 $end
$var wire 1 L) Cout1 $end
$var wire 1 M) Cout2 $end

$scope module f1 $end
$var wire 1 0( A $end
$var wire 1 |( B $end
$var wire 1 $) Cin $end
$var wire 1 ," S $end
$var wire 1 K) Cout $end
$var wire 1 N) xor_AB $end
$var wire 1 O) xor_ABCin $end
$var wire 1 P) NAND_AB $end
$var wire 1 Q) not_NAND_AB $end
$var wire 1 R) NAND_Cin_xor_AB $end
$var wire 1 S) not_NAND_Cin_xor_AB $end
$var wire 1 T) NOR_2NAND $end
$var wire 1 U) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 0( in1 $end
$var wire 1 |( in2 $end
$var wire 1 N) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 N) in1 $end
$var wire 1 $) in2 $end
$var wire 1 O) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 0( in1 $end
$var wire 1 |( in2 $end
$var wire 1 P) out $end
$upscope $end

$scope module not1 $end
$var wire 1 P) in1 $end
$var wire 1 Q) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 $) in1 $end
$var wire 1 N) in2 $end
$var wire 1 R) out $end
$upscope $end

$scope module not2 $end
$var wire 1 R) in1 $end
$var wire 1 S) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 Q) in1 $end
$var wire 1 S) in2 $end
$var wire 1 T) out $end
$upscope $end

$scope module not3 $end
$var wire 1 T) in1 $end
$var wire 1 U) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 /( A $end
$var wire 1 {( B $end
$var wire 1 K) Cin $end
$var wire 1 +" S $end
$var wire 1 L) Cout $end
$var wire 1 V) xor_AB $end
$var wire 1 W) xor_ABCin $end
$var wire 1 X) NAND_AB $end
$var wire 1 Y) not_NAND_AB $end
$var wire 1 Z) NAND_Cin_xor_AB $end
$var wire 1 [) not_NAND_Cin_xor_AB $end
$var wire 1 \) NOR_2NAND $end
$var wire 1 ]) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 /( in1 $end
$var wire 1 {( in2 $end
$var wire 1 V) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 V) in1 $end
$var wire 1 K) in2 $end
$var wire 1 W) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 /( in1 $end
$var wire 1 {( in2 $end
$var wire 1 X) out $end
$upscope $end

$scope module not1 $end
$var wire 1 X) in1 $end
$var wire 1 Y) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K) in1 $end
$var wire 1 V) in2 $end
$var wire 1 Z) out $end
$upscope $end

$scope module not2 $end
$var wire 1 Z) in1 $end
$var wire 1 [) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 Y) in1 $end
$var wire 1 [) in2 $end
$var wire 1 \) out $end
$upscope $end

$scope module not3 $end
$var wire 1 \) in1 $end
$var wire 1 ]) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 .( A $end
$var wire 1 z( B $end
$var wire 1 L) Cin $end
$var wire 1 *" S $end
$var wire 1 M) Cout $end
$var wire 1 ^) xor_AB $end
$var wire 1 _) xor_ABCin $end
$var wire 1 `) NAND_AB $end
$var wire 1 a) not_NAND_AB $end
$var wire 1 b) NAND_Cin_xor_AB $end
$var wire 1 c) not_NAND_Cin_xor_AB $end
$var wire 1 d) NOR_2NAND $end
$var wire 1 e) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 .( in1 $end
$var wire 1 z( in2 $end
$var wire 1 ^) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^) in1 $end
$var wire 1 L) in2 $end
$var wire 1 _) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 .( in1 $end
$var wire 1 z( in2 $end
$var wire 1 `) out $end
$upscope $end

$scope module not1 $end
$var wire 1 `) in1 $end
$var wire 1 a) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L) in1 $end
$var wire 1 ^) in2 $end
$var wire 1 b) out $end
$upscope $end

$scope module not2 $end
$var wire 1 b) in1 $end
$var wire 1 c) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 a) in1 $end
$var wire 1 c) in2 $end
$var wire 1 d) out $end
$upscope $end

$scope module not3 $end
$var wire 1 d) in1 $end
$var wire 1 e) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 -( A $end
$var wire 1 y( B $end
$var wire 1 M) Cin $end
$var wire 1 )" S $end
$var wire 1 %) Cout $end
$var wire 1 f) xor_AB $end
$var wire 1 g) xor_ABCin $end
$var wire 1 h) NAND_AB $end
$var wire 1 i) not_NAND_AB $end
$var wire 1 j) NAND_Cin_xor_AB $end
$var wire 1 k) not_NAND_Cin_xor_AB $end
$var wire 1 l) NOR_2NAND $end
$var wire 1 m) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 -( in1 $end
$var wire 1 y( in2 $end
$var wire 1 f) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 f) in1 $end
$var wire 1 M) in2 $end
$var wire 1 g) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -( in1 $end
$var wire 1 y( in2 $end
$var wire 1 h) out $end
$upscope $end

$scope module not1 $end
$var wire 1 h) in1 $end
$var wire 1 i) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 M) in1 $end
$var wire 1 f) in2 $end
$var wire 1 j) out $end
$upscope $end

$scope module not2 $end
$var wire 1 j) in1 $end
$var wire 1 k) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 i) in1 $end
$var wire 1 k) in2 $end
$var wire 1 l) out $end
$upscope $end

$scope module not3 $end
$var wire 1 l) in1 $end
$var wire 1 m) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 )( A [3] $end
$var wire 1 *( A [2] $end
$var wire 1 +( A [1] $end
$var wire 1 ,( A [0] $end
$var wire 1 u( B [3] $end
$var wire 1 v( B [2] $end
$var wire 1 w( B [1] $end
$var wire 1 x( B [0] $end
$var wire 1 %) Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 &) Cout $end
$var wire 1 n) Cout0 $end
$var wire 1 o) Cout1 $end
$var wire 1 p) Cout2 $end

$scope module f1 $end
$var wire 1 ,( A $end
$var wire 1 x( B $end
$var wire 1 %) Cin $end
$var wire 1 (" S $end
$var wire 1 n) Cout $end
$var wire 1 q) xor_AB $end
$var wire 1 r) xor_ABCin $end
$var wire 1 s) NAND_AB $end
$var wire 1 t) not_NAND_AB $end
$var wire 1 u) NAND_Cin_xor_AB $end
$var wire 1 v) not_NAND_Cin_xor_AB $end
$var wire 1 w) NOR_2NAND $end
$var wire 1 x) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ,( in1 $end
$var wire 1 x( in2 $end
$var wire 1 q) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 q) in1 $end
$var wire 1 %) in2 $end
$var wire 1 r) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,( in1 $end
$var wire 1 x( in2 $end
$var wire 1 s) out $end
$upscope $end

$scope module not1 $end
$var wire 1 s) in1 $end
$var wire 1 t) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 %) in1 $end
$var wire 1 q) in2 $end
$var wire 1 u) out $end
$upscope $end

$scope module not2 $end
$var wire 1 u) in1 $end
$var wire 1 v) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 t) in1 $end
$var wire 1 v) in2 $end
$var wire 1 w) out $end
$upscope $end

$scope module not3 $end
$var wire 1 w) in1 $end
$var wire 1 x) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 +( A $end
$var wire 1 w( B $end
$var wire 1 n) Cin $end
$var wire 1 '" S $end
$var wire 1 o) Cout $end
$var wire 1 y) xor_AB $end
$var wire 1 z) xor_ABCin $end
$var wire 1 {) NAND_AB $end
$var wire 1 |) not_NAND_AB $end
$var wire 1 }) NAND_Cin_xor_AB $end
$var wire 1 ~) not_NAND_Cin_xor_AB $end
$var wire 1 !* NOR_2NAND $end
$var wire 1 "* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 +( in1 $end
$var wire 1 w( in2 $end
$var wire 1 y) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 y) in1 $end
$var wire 1 n) in2 $end
$var wire 1 z) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +( in1 $end
$var wire 1 w( in2 $end
$var wire 1 {) out $end
$upscope $end

$scope module not1 $end
$var wire 1 {) in1 $end
$var wire 1 |) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n) in1 $end
$var wire 1 y) in2 $end
$var wire 1 }) out $end
$upscope $end

$scope module not2 $end
$var wire 1 }) in1 $end
$var wire 1 ~) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 |) in1 $end
$var wire 1 ~) in2 $end
$var wire 1 !* out $end
$upscope $end

$scope module not3 $end
$var wire 1 !* in1 $end
$var wire 1 "* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 *( A $end
$var wire 1 v( B $end
$var wire 1 o) Cin $end
$var wire 1 &" S $end
$var wire 1 p) Cout $end
$var wire 1 #* xor_AB $end
$var wire 1 $* xor_ABCin $end
$var wire 1 %* NAND_AB $end
$var wire 1 &* not_NAND_AB $end
$var wire 1 '* NAND_Cin_xor_AB $end
$var wire 1 (* not_NAND_Cin_xor_AB $end
$var wire 1 )* NOR_2NAND $end
$var wire 1 ** not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 *( in1 $end
$var wire 1 v( in2 $end
$var wire 1 #* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 #* in1 $end
$var wire 1 o) in2 $end
$var wire 1 $* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *( in1 $end
$var wire 1 v( in2 $end
$var wire 1 %* out $end
$upscope $end

$scope module not1 $end
$var wire 1 %* in1 $end
$var wire 1 &* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o) in1 $end
$var wire 1 #* in2 $end
$var wire 1 '* out $end
$upscope $end

$scope module not2 $end
$var wire 1 '* in1 $end
$var wire 1 (* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 &* in1 $end
$var wire 1 (* in2 $end
$var wire 1 )* out $end
$upscope $end

$scope module not3 $end
$var wire 1 )* in1 $end
$var wire 1 ** out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 )( A $end
$var wire 1 u( B $end
$var wire 1 p) Cin $end
$var wire 1 %" S $end
$var wire 1 &) Cout $end
$var wire 1 +* xor_AB $end
$var wire 1 ,* xor_ABCin $end
$var wire 1 -* NAND_AB $end
$var wire 1 .* not_NAND_AB $end
$var wire 1 /* NAND_Cin_xor_AB $end
$var wire 1 0* not_NAND_Cin_xor_AB $end
$var wire 1 1* NOR_2NAND $end
$var wire 1 2* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 )( in1 $end
$var wire 1 u( in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +* in1 $end
$var wire 1 p) in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )( in1 $end
$var wire 1 u( in2 $end
$var wire 1 -* out $end
$upscope $end

$scope module not1 $end
$var wire 1 -* in1 $end
$var wire 1 .* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p) in1 $end
$var wire 1 +* in2 $end
$var wire 1 /* out $end
$upscope $end

$scope module not2 $end
$var wire 1 /* in1 $end
$var wire 1 0* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .* in1 $end
$var wire 1 0* in2 $end
$var wire 1 1* out $end
$upscope $end

$scope module not3 $end
$var wire 1 1* in1 $end
$var wire 1 2* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 %( A [3] $end
$var wire 1 &( A [2] $end
$var wire 1 '( A [1] $end
$var wire 1 (( A [0] $end
$var wire 1 q( B [3] $end
$var wire 1 r( B [2] $end
$var wire 1 s( B [1] $end
$var wire 1 t( B [0] $end
$var wire 1 &) Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 #) Cout $end
$var wire 1 3* Cout0 $end
$var wire 1 4* Cout1 $end
$var wire 1 5* Cout2 $end

$scope module f1 $end
$var wire 1 (( A $end
$var wire 1 t( B $end
$var wire 1 &) Cin $end
$var wire 1 $" S $end
$var wire 1 3* Cout $end
$var wire 1 6* xor_AB $end
$var wire 1 7* xor_ABCin $end
$var wire 1 8* NAND_AB $end
$var wire 1 9* not_NAND_AB $end
$var wire 1 :* NAND_Cin_xor_AB $end
$var wire 1 ;* not_NAND_Cin_xor_AB $end
$var wire 1 <* NOR_2NAND $end
$var wire 1 =* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 (( in1 $end
$var wire 1 t( in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 6* in1 $end
$var wire 1 &) in2 $end
$var wire 1 7* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (( in1 $end
$var wire 1 t( in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module not1 $end
$var wire 1 8* in1 $end
$var wire 1 9* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 &) in1 $end
$var wire 1 6* in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module not2 $end
$var wire 1 :* in1 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 9* in1 $end
$var wire 1 ;* in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not3 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 '( A $end
$var wire 1 s( B $end
$var wire 1 3* Cin $end
$var wire 1 #" S $end
$var wire 1 4* Cout $end
$var wire 1 >* xor_AB $end
$var wire 1 ?* xor_ABCin $end
$var wire 1 @* NAND_AB $end
$var wire 1 A* not_NAND_AB $end
$var wire 1 B* NAND_Cin_xor_AB $end
$var wire 1 C* not_NAND_Cin_xor_AB $end
$var wire 1 D* NOR_2NAND $end
$var wire 1 E* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 '( in1 $end
$var wire 1 s( in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 >* in1 $end
$var wire 1 3* in2 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '( in1 $end
$var wire 1 s( in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not1 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3* in1 $end
$var wire 1 >* in2 $end
$var wire 1 B* out $end
$upscope $end

$scope module not2 $end
$var wire 1 B* in1 $end
$var wire 1 C* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 A* in1 $end
$var wire 1 C* in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module not3 $end
$var wire 1 D* in1 $end
$var wire 1 E* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 &( A $end
$var wire 1 r( B $end
$var wire 1 4* Cin $end
$var wire 1 "" S $end
$var wire 1 5* Cout $end
$var wire 1 F* xor_AB $end
$var wire 1 G* xor_ABCin $end
$var wire 1 H* NAND_AB $end
$var wire 1 I* not_NAND_AB $end
$var wire 1 J* NAND_Cin_xor_AB $end
$var wire 1 K* not_NAND_Cin_xor_AB $end
$var wire 1 L* NOR_2NAND $end
$var wire 1 M* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 &( in1 $end
$var wire 1 r( in2 $end
$var wire 1 F* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 F* in1 $end
$var wire 1 4* in2 $end
$var wire 1 G* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &( in1 $end
$var wire 1 r( in2 $end
$var wire 1 H* out $end
$upscope $end

$scope module not1 $end
$var wire 1 H* in1 $end
$var wire 1 I* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 4* in1 $end
$var wire 1 F* in2 $end
$var wire 1 J* out $end
$upscope $end

$scope module not2 $end
$var wire 1 J* in1 $end
$var wire 1 K* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 I* in1 $end
$var wire 1 K* in2 $end
$var wire 1 L* out $end
$upscope $end

$scope module not3 $end
$var wire 1 L* in1 $end
$var wire 1 M* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 %( A $end
$var wire 1 q( B $end
$var wire 1 5* Cin $end
$var wire 1 !" S $end
$var wire 1 #) Cout $end
$var wire 1 N* xor_AB $end
$var wire 1 O* xor_ABCin $end
$var wire 1 P* NAND_AB $end
$var wire 1 Q* not_NAND_AB $end
$var wire 1 R* NAND_Cin_xor_AB $end
$var wire 1 S* not_NAND_Cin_xor_AB $end
$var wire 1 T* NOR_2NAND $end
$var wire 1 U* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 %( in1 $end
$var wire 1 q( in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 N* in1 $end
$var wire 1 5* in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %( in1 $end
$var wire 1 q( in2 $end
$var wire 1 P* out $end
$upscope $end

$scope module not1 $end
$var wire 1 P* in1 $end
$var wire 1 Q* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5* in1 $end
$var wire 1 N* in2 $end
$var wire 1 R* out $end
$upscope $end

$scope module not2 $end
$var wire 1 R* in1 $end
$var wire 1 S* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 Q* in1 $end
$var wire 1 S* in2 $end
$var wire 1 T* out $end
$upscope $end

$scope module not3 $end
$var wire 1 T* in1 $end
$var wire 1 U* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 V* data_in [15] $end
$var wire 1 W* data_in [14] $end
$var wire 1 X* data_in [13] $end
$var wire 1 Y* data_in [12] $end
$var wire 1 Z* data_in [11] $end
$var wire 1 [* data_in [10] $end
$var wire 1 \* data_in [9] $end
$var wire 1 ]* data_in [8] $end
$var wire 1 ^* data_in [7] $end
$var wire 1 _* data_in [6] $end
$var wire 1 `* data_in [5] $end
$var wire 1 a* data_in [4] $end
$var wire 1 b* data_in [3] $end
$var wire 1 c* data_in [2] $end
$var wire 1 d* data_in [1] $end
$var wire 1 e* data_in [0] $end
$var wire 1 %( addr [15] $end
$var wire 1 &( addr [14] $end
$var wire 1 '( addr [13] $end
$var wire 1 (( addr [12] $end
$var wire 1 )( addr [11] $end
$var wire 1 *( addr [10] $end
$var wire 1 +( addr [9] $end
$var wire 1 ,( addr [8] $end
$var wire 1 -( addr [7] $end
$var wire 1 .( addr [6] $end
$var wire 1 /( addr [5] $end
$var wire 1 0( addr [4] $end
$var wire 1 1( addr [3] $end
$var wire 1 2( addr [2] $end
$var wire 1 3( addr [1] $end
$var wire 1 4( addr [0] $end
$var wire 1 f* enable $end
$var wire 1 g* wr $end
$var wire 1 h* createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[15] $end
$var wire 1 %( q $end
$var wire 1 s' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 &( q $end
$var wire 1 t' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 '( q $end
$var wire 1 u' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 (( q $end
$var wire 1 v' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 )( q $end
$var wire 1 w' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 *( q $end
$var wire 1 x' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 +( q $end
$var wire 1 y' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 ,( q $end
$var wire 1 z' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 -( q $end
$var wire 1 {' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 .( q $end
$var wire 1 |' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 /( q $end
$var wire 1 }' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 0( q $end
$var wire 1 ~' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next_in [15] $end
$var wire 1 "" PC_next_in [14] $end
$var wire 1 #" PC_next_in [13] $end
$var wire 1 $" PC_next_in [12] $end
$var wire 1 %" PC_next_in [11] $end
$var wire 1 &" PC_next_in [10] $end
$var wire 1 '" PC_next_in [9] $end
$var wire 1 (" PC_next_in [8] $end
$var wire 1 )" PC_next_in [7] $end
$var wire 1 *" PC_next_in [6] $end
$var wire 1 +" PC_next_in [5] $end
$var wire 1 ," PC_next_in [4] $end
$var wire 1 -" PC_next_in [3] $end
$var wire 1 ." PC_next_in [2] $end
$var wire 1 /" PC_next_in [1] $end
$var wire 1 0" PC_next_in [0] $end
$var wire 1 F( instruction_in [15] $end
$var wire 1 G( instruction_in [14] $end
$var wire 1 H( instruction_in [13] $end
$var wire 1 I( instruction_in [12] $end
$var wire 1 J( instruction_in [11] $end
$var wire 1 K( instruction_in [10] $end
$var wire 1 L( instruction_in [9] $end
$var wire 1 M( instruction_in [8] $end
$var wire 1 N( instruction_in [7] $end
$var wire 1 O( instruction_in [6] $end
$var wire 1 P( instruction_in [5] $end
$var wire 1 Q( instruction_in [4] $end
$var wire 1 R( instruction_in [3] $end
$var wire 1 S( instruction_in [2] $end
$var wire 1 T( instruction_in [1] $end
$var wire 1 U( instruction_in [0] $end
$var wire 1 %( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 &( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 '( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 (( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 )( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 *( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 +( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 ,( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 -( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 .( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 /( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 0( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 1( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 2( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 3( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 4( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 5( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 6( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 7( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 8( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 9( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 :( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 ;( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 <( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 =( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 >( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 ?( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 @( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 A( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 B( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 C( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 D( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 !" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 "" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 #" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 $" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 %" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 &" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 '" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 (" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 )" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 *" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 +" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 ," d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 -" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 ." d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 /" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 0" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 F( d [15] $end
$var wire 1 G( d [14] $end
$var wire 1 H( d [13] $end
$var wire 1 I( d [12] $end
$var wire 1 J( d [11] $end
$var wire 1 K( d [10] $end
$var wire 1 L( d [9] $end
$var wire 1 M( d [8] $end
$var wire 1 N( d [7] $end
$var wire 1 O( d [6] $end
$var wire 1 P( d [5] $end
$var wire 1 Q( d [4] $end
$var wire 1 R( d [3] $end
$var wire 1 S( d [2] $end
$var wire 1 T( d [1] $end
$var wire 1 U( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 9( q $end
$var wire 1 )( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 :( q $end
$var wire 1 *( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 ;( q $end
$var wire 1 +( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 <( q $end
$var wire 1 ,( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 =( q $end
$var wire 1 -( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 >( q $end
$var wire 1 .( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 ?( q $end
$var wire 1 /( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 @( q $end
$var wire 1 0( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 A( q $end
$var wire 1 1( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 B( q $end
$var wire 1 2( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 C( q $end
$var wire 1 3( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 D( q $end
$var wire 1 4( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 a' err $end
$var wire 1 o! instruction [15] $end
$var wire 1 p! instruction [14] $end
$var wire 1 q! instruction [13] $end
$var wire 1 r! instruction [12] $end
$var wire 1 s! instruction [11] $end
$var wire 1 t! instruction [10] $end
$var wire 1 u! instruction [9] $end
$var wire 1 v! instruction [8] $end
$var wire 1 w! instruction [7] $end
$var wire 1 x! instruction [6] $end
$var wire 1 y! instruction [5] $end
$var wire 1 z! instruction [4] $end
$var wire 1 {! instruction [3] $end
$var wire 1 |! instruction [2] $end
$var wire 1 }! instruction [1] $end
$var wire 1 ~! instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 O+ signed_i_1 [15] $end
$var wire 1 P+ signed_i_1 [14] $end
$var wire 1 Q+ signed_i_1 [13] $end
$var wire 1 R+ signed_i_1 [12] $end
$var wire 1 S+ signed_i_1 [11] $end
$var wire 1 T+ signed_i_1 [10] $end
$var wire 1 U+ signed_i_1 [9] $end
$var wire 1 V+ signed_i_1 [8] $end
$var wire 1 W+ signed_i_1 [7] $end
$var wire 1 X+ signed_i_1 [6] $end
$var wire 1 Y+ signed_i_1 [5] $end
$var wire 1 Z+ signed_i_1 [4] $end
$var wire 1 [+ signed_i_1 [3] $end
$var wire 1 \+ signed_i_1 [2] $end
$var wire 1 ]+ signed_i_1 [1] $end
$var wire 1 ^+ signed_i_1 [0] $end
$var wire 1 _+ zero_i_1 [15] $end
$var wire 1 `+ zero_i_1 [14] $end
$var wire 1 a+ zero_i_1 [13] $end
$var wire 1 b+ zero_i_1 [12] $end
$var wire 1 c+ zero_i_1 [11] $end
$var wire 1 d+ zero_i_1 [10] $end
$var wire 1 e+ zero_i_1 [9] $end
$var wire 1 f+ zero_i_1 [8] $end
$var wire 1 g+ zero_i_1 [7] $end
$var wire 1 h+ zero_i_1 [6] $end
$var wire 1 i+ zero_i_1 [5] $end
$var wire 1 j+ zero_i_1 [4] $end
$var wire 1 k+ zero_i_1 [3] $end
$var wire 1 l+ zero_i_1 [2] $end
$var wire 1 m+ zero_i_1 [1] $end
$var wire 1 n+ zero_i_1 [0] $end
$var wire 1 o+ signed_i_2 [15] $end
$var wire 1 p+ signed_i_2 [14] $end
$var wire 1 q+ signed_i_2 [13] $end
$var wire 1 r+ signed_i_2 [12] $end
$var wire 1 s+ signed_i_2 [11] $end
$var wire 1 t+ signed_i_2 [10] $end
$var wire 1 u+ signed_i_2 [9] $end
$var wire 1 v+ signed_i_2 [8] $end
$var wire 1 w+ signed_i_2 [7] $end
$var wire 1 x+ signed_i_2 [6] $end
$var wire 1 y+ signed_i_2 [5] $end
$var wire 1 z+ signed_i_2 [4] $end
$var wire 1 {+ signed_i_2 [3] $end
$var wire 1 |+ signed_i_2 [2] $end
$var wire 1 }+ signed_i_2 [1] $end
$var wire 1 ~+ signed_i_2 [0] $end
$var wire 1 !, zero_i_2 [15] $end
$var wire 1 ", zero_i_2 [14] $end
$var wire 1 #, zero_i_2 [13] $end
$var wire 1 $, zero_i_2 [12] $end
$var wire 1 %, zero_i_2 [11] $end
$var wire 1 &, zero_i_2 [10] $end
$var wire 1 ', zero_i_2 [9] $end
$var wire 1 (, zero_i_2 [8] $end
$var wire 1 ), zero_i_2 [7] $end
$var wire 1 *, zero_i_2 [6] $end
$var wire 1 +, zero_i_2 [5] $end
$var wire 1 ,, zero_i_2 [4] $end
$var wire 1 -, zero_i_2 [3] $end
$var wire 1 ., zero_i_2 [2] $end
$var wire 1 /, zero_i_2 [1] $end
$var wire 1 0, zero_i_2 [0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end

$scope module registerfile $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 t! read1RegSel [2] $end
$var wire 1 u! read1RegSel [1] $end
$var wire 1 v! read1RegSel [0] $end
$var wire 1 w! read2RegSel [2] $end
$var wire 1 x! read2RegSel [1] $end
$var wire 1 y! read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 a' err $end
$var wire 1 D, registers [0] $end
$var wire 1 E, registers [1] $end
$var wire 1 F, registers [2] $end
$var wire 1 G, registers [3] $end
$var wire 1 H, registers [4] $end
$var wire 1 I, registers [5] $end
$var wire 1 J, registers [6] $end
$var wire 1 K, registers [7] $end
$var wire 1 L, registers [8] $end
$var wire 1 M, registers [9] $end
$var wire 1 N, registers [10] $end
$var wire 1 O, registers [11] $end
$var wire 1 P, registers [12] $end
$var wire 1 Q, registers [13] $end
$var wire 1 R, registers [14] $end
$var wire 1 S, registers [15] $end
$var wire 1 T, registers [16] $end
$var wire 1 U, registers [17] $end
$var wire 1 V, registers [18] $end
$var wire 1 W, registers [19] $end
$var wire 1 X, registers [20] $end
$var wire 1 Y, registers [21] $end
$var wire 1 Z, registers [22] $end
$var wire 1 [, registers [23] $end
$var wire 1 \, registers [24] $end
$var wire 1 ], registers [25] $end
$var wire 1 ^, registers [26] $end
$var wire 1 _, registers [27] $end
$var wire 1 `, registers [28] $end
$var wire 1 a, registers [29] $end
$var wire 1 b, registers [30] $end
$var wire 1 c, registers [31] $end
$var wire 1 d, registers [32] $end
$var wire 1 e, registers [33] $end
$var wire 1 f, registers [34] $end
$var wire 1 g, registers [35] $end
$var wire 1 h, registers [36] $end
$var wire 1 i, registers [37] $end
$var wire 1 j, registers [38] $end
$var wire 1 k, registers [39] $end
$var wire 1 l, registers [40] $end
$var wire 1 m, registers [41] $end
$var wire 1 n, registers [42] $end
$var wire 1 o, registers [43] $end
$var wire 1 p, registers [44] $end
$var wire 1 q, registers [45] $end
$var wire 1 r, registers [46] $end
$var wire 1 s, registers [47] $end
$var wire 1 t, registers [48] $end
$var wire 1 u, registers [49] $end
$var wire 1 v, registers [50] $end
$var wire 1 w, registers [51] $end
$var wire 1 x, registers [52] $end
$var wire 1 y, registers [53] $end
$var wire 1 z, registers [54] $end
$var wire 1 {, registers [55] $end
$var wire 1 |, registers [56] $end
$var wire 1 }, registers [57] $end
$var wire 1 ~, registers [58] $end
$var wire 1 !- registers [59] $end
$var wire 1 "- registers [60] $end
$var wire 1 #- registers [61] $end
$var wire 1 $- registers [62] $end
$var wire 1 %- registers [63] $end
$var wire 1 &- registers [64] $end
$var wire 1 '- registers [65] $end
$var wire 1 (- registers [66] $end
$var wire 1 )- registers [67] $end
$var wire 1 *- registers [68] $end
$var wire 1 +- registers [69] $end
$var wire 1 ,- registers [70] $end
$var wire 1 -- registers [71] $end
$var wire 1 .- registers [72] $end
$var wire 1 /- registers [73] $end
$var wire 1 0- registers [74] $end
$var wire 1 1- registers [75] $end
$var wire 1 2- registers [76] $end
$var wire 1 3- registers [77] $end
$var wire 1 4- registers [78] $end
$var wire 1 5- registers [79] $end
$var wire 1 6- registers [80] $end
$var wire 1 7- registers [81] $end
$var wire 1 8- registers [82] $end
$var wire 1 9- registers [83] $end
$var wire 1 :- registers [84] $end
$var wire 1 ;- registers [85] $end
$var wire 1 <- registers [86] $end
$var wire 1 =- registers [87] $end
$var wire 1 >- registers [88] $end
$var wire 1 ?- registers [89] $end
$var wire 1 @- registers [90] $end
$var wire 1 A- registers [91] $end
$var wire 1 B- registers [92] $end
$var wire 1 C- registers [93] $end
$var wire 1 D- registers [94] $end
$var wire 1 E- registers [95] $end
$var wire 1 F- registers [96] $end
$var wire 1 G- registers [97] $end
$var wire 1 H- registers [98] $end
$var wire 1 I- registers [99] $end
$var wire 1 J- registers [100] $end
$var wire 1 K- registers [101] $end
$var wire 1 L- registers [102] $end
$var wire 1 M- registers [103] $end
$var wire 1 N- registers [104] $end
$var wire 1 O- registers [105] $end
$var wire 1 P- registers [106] $end
$var wire 1 Q- registers [107] $end
$var wire 1 R- registers [108] $end
$var wire 1 S- registers [109] $end
$var wire 1 T- registers [110] $end
$var wire 1 U- registers [111] $end
$var wire 1 V- registers [112] $end
$var wire 1 W- registers [113] $end
$var wire 1 X- registers [114] $end
$var wire 1 Y- registers [115] $end
$var wire 1 Z- registers [116] $end
$var wire 1 [- registers [117] $end
$var wire 1 \- registers [118] $end
$var wire 1 ]- registers [119] $end
$var wire 1 ^- registers [120] $end
$var wire 1 _- registers [121] $end
$var wire 1 `- registers [122] $end
$var wire 1 a- registers [123] $end
$var wire 1 b- registers [124] $end
$var wire 1 c- registers [125] $end
$var wire 1 d- registers [126] $end
$var wire 1 e- registers [127] $end
$var wire 1 f- mask_1 [0] $end
$var wire 1 g- mask_1 [1] $end
$var wire 1 h- mask_1 [2] $end
$var wire 1 i- mask_1 [3] $end
$var wire 1 j- mask_1 [4] $end
$var wire 1 k- mask_1 [5] $end
$var wire 1 l- mask_1 [6] $end
$var wire 1 m- mask_1 [7] $end

$scope module ind_reg1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 m- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 e- read [15] $end
$var wire 1 d- read [14] $end
$var wire 1 c- read [13] $end
$var wire 1 b- read [12] $end
$var wire 1 a- read [11] $end
$var wire 1 `- read [10] $end
$var wire 1 _- read [9] $end
$var wire 1 ^- read [8] $end
$var wire 1 ]- read [7] $end
$var wire 1 \- read [6] $end
$var wire 1 [- read [5] $end
$var wire 1 Z- read [4] $end
$var wire 1 Y- read [3] $end
$var wire 1 X- read [2] $end
$var wire 1 W- read [1] $end
$var wire 1 V- read [0] $end

$scope module flop[15] $end
$var wire 1 e- q $end
$var wire 1 o- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 d- q $end
$var wire 1 q- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 c- q $end
$var wire 1 s- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 b- q $end
$var wire 1 u- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 a- q $end
$var wire 1 w- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 `- q $end
$var wire 1 y- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 _- q $end
$var wire 1 {- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ^- q $end
$var wire 1 }- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 ]- q $end
$var wire 1 !. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 \- q $end
$var wire 1 #. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 [- q $end
$var wire 1 %. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 Z- q $end
$var wire 1 '. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 Y- q $end
$var wire 1 ). d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 X- q $end
$var wire 1 +. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 W- q $end
$var wire 1 -. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 V- q $end
$var wire 1 /. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 l- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 U- read [15] $end
$var wire 1 T- read [14] $end
$var wire 1 S- read [13] $end
$var wire 1 R- read [12] $end
$var wire 1 Q- read [11] $end
$var wire 1 P- read [10] $end
$var wire 1 O- read [9] $end
$var wire 1 N- read [8] $end
$var wire 1 M- read [7] $end
$var wire 1 L- read [6] $end
$var wire 1 K- read [5] $end
$var wire 1 J- read [4] $end
$var wire 1 I- read [3] $end
$var wire 1 H- read [2] $end
$var wire 1 G- read [1] $end
$var wire 1 F- read [0] $end

$scope module flop[15] $end
$var wire 1 U- q $end
$var wire 1 2. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 T- q $end
$var wire 1 4. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 S- q $end
$var wire 1 6. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 R- q $end
$var wire 1 8. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 Q- q $end
$var wire 1 :. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 P- q $end
$var wire 1 <. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 O- q $end
$var wire 1 >. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 N- q $end
$var wire 1 @. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 M- q $end
$var wire 1 B. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 L- q $end
$var wire 1 D. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 K- q $end
$var wire 1 F. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 J- q $end
$var wire 1 H. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 I- q $end
$var wire 1 J. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 H- q $end
$var wire 1 L. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 G- q $end
$var wire 1 N. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 F- q $end
$var wire 1 P. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 k- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 E- read [15] $end
$var wire 1 D- read [14] $end
$var wire 1 C- read [13] $end
$var wire 1 B- read [12] $end
$var wire 1 A- read [11] $end
$var wire 1 @- read [10] $end
$var wire 1 ?- read [9] $end
$var wire 1 >- read [8] $end
$var wire 1 =- read [7] $end
$var wire 1 <- read [6] $end
$var wire 1 ;- read [5] $end
$var wire 1 :- read [4] $end
$var wire 1 9- read [3] $end
$var wire 1 8- read [2] $end
$var wire 1 7- read [1] $end
$var wire 1 6- read [0] $end

$scope module flop[15] $end
$var wire 1 E- q $end
$var wire 1 S. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 D- q $end
$var wire 1 U. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 C- q $end
$var wire 1 W. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 B- q $end
$var wire 1 Y. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 A- q $end
$var wire 1 [. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 @- q $end
$var wire 1 ]. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ?- q $end
$var wire 1 _. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 >- q $end
$var wire 1 a. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 =- q $end
$var wire 1 c. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 <- q $end
$var wire 1 e. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 ;- q $end
$var wire 1 g. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 :- q $end
$var wire 1 i. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 9- q $end
$var wire 1 k. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 8- q $end
$var wire 1 m. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 7- q $end
$var wire 1 o. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 6- q $end
$var wire 1 q. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 j- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 5- read [15] $end
$var wire 1 4- read [14] $end
$var wire 1 3- read [13] $end
$var wire 1 2- read [12] $end
$var wire 1 1- read [11] $end
$var wire 1 0- read [10] $end
$var wire 1 /- read [9] $end
$var wire 1 .- read [8] $end
$var wire 1 -- read [7] $end
$var wire 1 ,- read [6] $end
$var wire 1 +- read [5] $end
$var wire 1 *- read [4] $end
$var wire 1 )- read [3] $end
$var wire 1 (- read [2] $end
$var wire 1 '- read [1] $end
$var wire 1 &- read [0] $end

$scope module flop[15] $end
$var wire 1 5- q $end
$var wire 1 t. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 4- q $end
$var wire 1 v. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 3- q $end
$var wire 1 x. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 2- q $end
$var wire 1 z. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 1- q $end
$var wire 1 |. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 0- q $end
$var wire 1 ~. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 /- q $end
$var wire 1 "/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 .- q $end
$var wire 1 $/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 -- q $end
$var wire 1 &/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 ,- q $end
$var wire 1 (/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 +- q $end
$var wire 1 */ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 *- q $end
$var wire 1 ,/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 )- q $end
$var wire 1 ./ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 (- q $end
$var wire 1 0/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 '- q $end
$var wire 1 2/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 &- q $end
$var wire 1 4/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 i- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 %- read [15] $end
$var wire 1 $- read [14] $end
$var wire 1 #- read [13] $end
$var wire 1 "- read [12] $end
$var wire 1 !- read [11] $end
$var wire 1 ~, read [10] $end
$var wire 1 }, read [9] $end
$var wire 1 |, read [8] $end
$var wire 1 {, read [7] $end
$var wire 1 z, read [6] $end
$var wire 1 y, read [5] $end
$var wire 1 x, read [4] $end
$var wire 1 w, read [3] $end
$var wire 1 v, read [2] $end
$var wire 1 u, read [1] $end
$var wire 1 t, read [0] $end

$scope module flop[15] $end
$var wire 1 %- q $end
$var wire 1 7/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 $- q $end
$var wire 1 9/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 #- q $end
$var wire 1 ;/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 "- q $end
$var wire 1 =/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 !- q $end
$var wire 1 ?/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ~, q $end
$var wire 1 A/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 }, q $end
$var wire 1 C/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 |, q $end
$var wire 1 E/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 {, q $end
$var wire 1 G/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 z, q $end
$var wire 1 I/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 y, q $end
$var wire 1 K/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 x, q $end
$var wire 1 M/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 w, q $end
$var wire 1 O/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 v, q $end
$var wire 1 Q/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 u, q $end
$var wire 1 S/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 t, q $end
$var wire 1 U/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 h- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 s, read [15] $end
$var wire 1 r, read [14] $end
$var wire 1 q, read [13] $end
$var wire 1 p, read [12] $end
$var wire 1 o, read [11] $end
$var wire 1 n, read [10] $end
$var wire 1 m, read [9] $end
$var wire 1 l, read [8] $end
$var wire 1 k, read [7] $end
$var wire 1 j, read [6] $end
$var wire 1 i, read [5] $end
$var wire 1 h, read [4] $end
$var wire 1 g, read [3] $end
$var wire 1 f, read [2] $end
$var wire 1 e, read [1] $end
$var wire 1 d, read [0] $end

$scope module flop[15] $end
$var wire 1 s, q $end
$var wire 1 X/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 r, q $end
$var wire 1 Z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 q, q $end
$var wire 1 \/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 p, q $end
$var wire 1 ^/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 o, q $end
$var wire 1 `/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 n, q $end
$var wire 1 b/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 m, q $end
$var wire 1 d/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 l, q $end
$var wire 1 f/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 k, q $end
$var wire 1 h/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 j, q $end
$var wire 1 j/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 i, q $end
$var wire 1 l/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 h, q $end
$var wire 1 n/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 g, q $end
$var wire 1 p/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 f, q $end
$var wire 1 r/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 e, q $end
$var wire 1 t/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 d, q $end
$var wire 1 v/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 g- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 c, read [15] $end
$var wire 1 b, read [14] $end
$var wire 1 a, read [13] $end
$var wire 1 `, read [12] $end
$var wire 1 _, read [11] $end
$var wire 1 ^, read [10] $end
$var wire 1 ], read [9] $end
$var wire 1 \, read [8] $end
$var wire 1 [, read [7] $end
$var wire 1 Z, read [6] $end
$var wire 1 Y, read [5] $end
$var wire 1 X, read [4] $end
$var wire 1 W, read [3] $end
$var wire 1 V, read [2] $end
$var wire 1 U, read [1] $end
$var wire 1 T, read [0] $end

$scope module flop[15] $end
$var wire 1 c, q $end
$var wire 1 y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 b, q $end
$var wire 1 {/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 a, q $end
$var wire 1 }/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 `, q $end
$var wire 1 !0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 _, q $end
$var wire 1 #0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ^, q $end
$var wire 1 %0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ], q $end
$var wire 1 '0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 \, q $end
$var wire 1 )0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 [, q $end
$var wire 1 +0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 Z, q $end
$var wire 1 -0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 Y, q $end
$var wire 1 /0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 X, q $end
$var wire 1 10 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 W, q $end
$var wire 1 30 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 V, q $end
$var wire 1 50 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 U, q $end
$var wire 1 70 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 T, q $end
$var wire 1 90 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 f- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 S, read [15] $end
$var wire 1 R, read [14] $end
$var wire 1 Q, read [13] $end
$var wire 1 P, read [12] $end
$var wire 1 O, read [11] $end
$var wire 1 N, read [10] $end
$var wire 1 M, read [9] $end
$var wire 1 L, read [8] $end
$var wire 1 K, read [7] $end
$var wire 1 J, read [6] $end
$var wire 1 I, read [5] $end
$var wire 1 H, read [4] $end
$var wire 1 G, read [3] $end
$var wire 1 F, read [2] $end
$var wire 1 E, read [1] $end
$var wire 1 D, read [0] $end

$scope module flop[15] $end
$var wire 1 S, q $end
$var wire 1 <0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 R, q $end
$var wire 1 >0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 Q, q $end
$var wire 1 @0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 P, q $end
$var wire 1 B0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 O, q $end
$var wire 1 D0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 N, q $end
$var wire 1 F0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 M, q $end
$var wire 1 H0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 L, q $end
$var wire 1 J0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 K, q $end
$var wire 1 L0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 J, q $end
$var wire 1 N0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 I, q $end
$var wire 1 P0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 H, q $end
$var wire 1 R0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 G, q $end
$var wire 1 T0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 F, q $end
$var wire 1 V0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 E, q $end
$var wire 1 X0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 D, q $end
$var wire 1 Z0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 l( NOPEx $end
$var wire 1 i( NOPMem $end
$var wire 1 j( NOPWB $end
$var wire 1 E( sendNOP $end
$var wire 1 \0 regEqual $end
$var wire 1 ]0 RegS [2] $end
$var wire 1 ^0 RegS [1] $end
$var wire 1 _0 RegS [0] $end
$var wire 1 `0 RegT [2] $end
$var wire 1 a0 RegT [1] $end
$var wire 1 b0 RegT [0] $end
$var wire 1 c0 compEx $end
$var wire 1 d0 compMem $end
$var wire 1 e0 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 }$ halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 E( SendNOP_In $end
$var wire 1 h( SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 }$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 h( q $end
$var wire 1 E( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 42 possibleslbi [15] $end
$var wire 1 52 possibleslbi [14] $end
$var wire 1 62 possibleslbi [13] $end
$var wire 1 72 possibleslbi [12] $end
$var wire 1 82 possibleslbi [11] $end
$var wire 1 92 possibleslbi [10] $end
$var wire 1 :2 possibleslbi [9] $end
$var wire 1 ;2 possibleslbi [8] $end
$var wire 1 <2 possibleslbi [7] $end
$var wire 1 =2 possibleslbi [6] $end
$var wire 1 >2 possibleslbi [5] $end
$var wire 1 ?2 possibleslbi [4] $end
$var wire 1 @2 possibleslbi [3] $end
$var wire 1 A2 possibleslbi [2] $end
$var wire 1 B2 possibleslbi [1] $end
$var wire 1 C2 possibleslbi [0] $end
$var wire 1 D2 shiftedA [15] $end
$var wire 1 E2 shiftedA [14] $end
$var wire 1 F2 shiftedA [13] $end
$var wire 1 G2 shiftedA [12] $end
$var wire 1 H2 shiftedA [11] $end
$var wire 1 I2 shiftedA [10] $end
$var wire 1 J2 shiftedA [9] $end
$var wire 1 K2 shiftedA [8] $end
$var wire 1 L2 shiftedA [7] $end
$var wire 1 M2 shiftedA [6] $end
$var wire 1 N2 shiftedA [5] $end
$var wire 1 O2 shiftedA [4] $end
$var wire 1 P2 shiftedA [3] $end
$var wire 1 Q2 shiftedA [2] $end
$var wire 1 R2 shiftedA [1] $end
$var wire 1 S2 shiftedA [0] $end
$var wire 1 T2 slbiOper $end
$var wire 1 U2 aluout [15] $end
$var wire 1 V2 aluout [14] $end
$var wire 1 W2 aluout [13] $end
$var wire 1 X2 aluout [12] $end
$var wire 1 Y2 aluout [11] $end
$var wire 1 Z2 aluout [10] $end
$var wire 1 [2 aluout [9] $end
$var wire 1 \2 aluout [8] $end
$var wire 1 ]2 aluout [7] $end
$var wire 1 ^2 aluout [6] $end
$var wire 1 _2 aluout [5] $end
$var wire 1 `2 aluout [4] $end
$var wire 1 a2 aluout [3] $end
$var wire 1 b2 aluout [2] $end
$var wire 1 c2 aluout [1] $end
$var wire 1 d2 aluout [0] $end
$var wire 1 e2 conditional $end
$var wire 1 f2 CF $end
$var wire 1 g2 Zero $end
$var wire 1 h2 Overflow $end
$var wire 1 i2 Brchcnd $end
$var wire 1 j2 Oper [1] $end
$var wire 1 k2 Oper [0] $end
$var wire 1 l2 altb $end
$var wire 1 m2 coout [15] $end
$var wire 1 n2 coout [14] $end
$var wire 1 o2 coout [13] $end
$var wire 1 p2 coout [12] $end
$var wire 1 q2 coout [11] $end
$var wire 1 r2 coout [10] $end
$var wire 1 s2 coout [9] $end
$var wire 1 t2 coout [8] $end
$var wire 1 u2 coout [7] $end
$var wire 1 v2 coout [6] $end
$var wire 1 w2 coout [5] $end
$var wire 1 x2 coout [4] $end
$var wire 1 y2 coout [3] $end
$var wire 1 z2 coout [2] $end
$var wire 1 {2 coout [1] $end
$var wire 1 |2 coout [0] $end
$var wire 1 }2 sltoper [1] $end
$var wire 1 ~2 sltoper [0] $end
$var wire 1 !3 ltout [15] $end
$var wire 1 "3 ltout [14] $end
$var wire 1 #3 ltout [13] $end
$var wire 1 $3 ltout [12] $end
$var wire 1 %3 ltout [11] $end
$var wire 1 &3 ltout [10] $end
$var wire 1 '3 ltout [9] $end
$var wire 1 (3 ltout [8] $end
$var wire 1 )3 ltout [7] $end
$var wire 1 *3 ltout [6] $end
$var wire 1 +3 ltout [5] $end
$var wire 1 ,3 ltout [4] $end
$var wire 1 -3 ltout [3] $end
$var wire 1 .3 ltout [2] $end
$var wire 1 /3 ltout [1] $end
$var wire 1 03 ltout [0] $end
$var wire 1 13 seqoper [1] $end
$var wire 1 23 seqoper [0] $end
$var wire 1 33 aeqb $end
$var wire 1 43 seqout [15] $end
$var wire 1 53 seqout [14] $end
$var wire 1 63 seqout [13] $end
$var wire 1 73 seqout [12] $end
$var wire 1 83 seqout [11] $end
$var wire 1 93 seqout [10] $end
$var wire 1 :3 seqout [9] $end
$var wire 1 ;3 seqout [8] $end
$var wire 1 <3 seqout [7] $end
$var wire 1 =3 seqout [6] $end
$var wire 1 >3 seqout [5] $end
$var wire 1 ?3 seqout [4] $end
$var wire 1 @3 seqout [3] $end
$var wire 1 A3 seqout [2] $end
$var wire 1 B3 seqout [1] $end
$var wire 1 C3 seqout [0] $end
$var wire 1 D3 alteb $end
$var wire 1 E3 sleoper [1] $end
$var wire 1 F3 sleoper [0] $end
$var wire 1 G3 sleout [15] $end
$var wire 1 H3 sleout [14] $end
$var wire 1 I3 sleout [13] $end
$var wire 1 J3 sleout [12] $end
$var wire 1 K3 sleout [11] $end
$var wire 1 L3 sleout [10] $end
$var wire 1 M3 sleout [9] $end
$var wire 1 N3 sleout [8] $end
$var wire 1 O3 sleout [7] $end
$var wire 1 P3 sleout [6] $end
$var wire 1 Q3 sleout [5] $end
$var wire 1 R3 sleout [4] $end
$var wire 1 S3 sleout [3] $end
$var wire 1 T3 sleout [2] $end
$var wire 1 U3 sleout [1] $end
$var wire 1 V3 sleout [0] $end
$var wire 1 W3 SetCtrl [1] $end
$var wire 1 X3 SetCtrl [0] $end
$var wire 1 Y3 carry $end
$var wire 1 Z3 SLT $end
$var wire 1 [3 SEQ $end
$var wire 1 \3 SLE $end
$var wire 1 ]3 greater $end
$var wire 1 ^3 ReverseOut [15] $end
$var wire 1 _3 ReverseOut [14] $end
$var wire 1 `3 ReverseOut [13] $end
$var wire 1 a3 ReverseOut [12] $end
$var wire 1 b3 ReverseOut [11] $end
$var wire 1 c3 ReverseOut [10] $end
$var wire 1 d3 ReverseOut [9] $end
$var wire 1 e3 ReverseOut [8] $end
$var wire 1 f3 ReverseOut [7] $end
$var wire 1 g3 ReverseOut [6] $end
$var wire 1 h3 ReverseOut [5] $end
$var wire 1 i3 ReverseOut [4] $end
$var wire 1 j3 ReverseOut [3] $end
$var wire 1 k3 ReverseOut [2] $end
$var wire 1 l3 ReverseOut [1] $end
$var wire 1 m3 ReverseOut [0] $end
$var wire 1 n3 reverse [15] $end
$var wire 1 o3 reverse [14] $end
$var wire 1 p3 reverse [13] $end
$var wire 1 q3 reverse [12] $end
$var wire 1 r3 reverse [11] $end
$var wire 1 s3 reverse [10] $end
$var wire 1 t3 reverse [9] $end
$var wire 1 u3 reverse [8] $end
$var wire 1 v3 reverse [7] $end
$var wire 1 w3 reverse [6] $end
$var wire 1 x3 reverse [5] $end
$var wire 1 y3 reverse [4] $end
$var wire 1 z3 reverse [3] $end
$var wire 1 {3 reverse [2] $end
$var wire 1 |3 reverse [1] $end
$var wire 1 }3 reverse [0] $end

$scope module shift $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 '4 Oper [1] $end
$var wire 1 (4 Oper [0] $end
$var wire 1 D2 Out [15] $end
$var wire 1 E2 Out [14] $end
$var wire 1 F2 Out [13] $end
$var wire 1 G2 Out [12] $end
$var wire 1 H2 Out [11] $end
$var wire 1 I2 Out [10] $end
$var wire 1 J2 Out [9] $end
$var wire 1 K2 Out [8] $end
$var wire 1 L2 Out [7] $end
$var wire 1 M2 Out [6] $end
$var wire 1 N2 Out [5] $end
$var wire 1 O2 Out [4] $end
$var wire 1 P2 Out [3] $end
$var wire 1 Q2 Out [2] $end
$var wire 1 R2 Out [1] $end
$var wire 1 S2 Out [0] $end
$var wire 1 )4 shift_left_r [15] $end
$var wire 1 *4 shift_left_r [14] $end
$var wire 1 +4 shift_left_r [13] $end
$var wire 1 ,4 shift_left_r [12] $end
$var wire 1 -4 shift_left_r [11] $end
$var wire 1 .4 shift_left_r [10] $end
$var wire 1 /4 shift_left_r [9] $end
$var wire 1 04 shift_left_r [8] $end
$var wire 1 14 shift_left_r [7] $end
$var wire 1 24 shift_left_r [6] $end
$var wire 1 34 shift_left_r [5] $end
$var wire 1 44 shift_left_r [4] $end
$var wire 1 54 shift_left_r [3] $end
$var wire 1 64 shift_left_r [2] $end
$var wire 1 74 shift_left_r [1] $end
$var wire 1 84 shift_left_r [0] $end
$var wire 1 94 rotate_left_r [15] $end
$var wire 1 :4 rotate_left_r [14] $end
$var wire 1 ;4 rotate_left_r [13] $end
$var wire 1 <4 rotate_left_r [12] $end
$var wire 1 =4 rotate_left_r [11] $end
$var wire 1 >4 rotate_left_r [10] $end
$var wire 1 ?4 rotate_left_r [9] $end
$var wire 1 @4 rotate_left_r [8] $end
$var wire 1 A4 rotate_left_r [7] $end
$var wire 1 B4 rotate_left_r [6] $end
$var wire 1 C4 rotate_left_r [5] $end
$var wire 1 D4 rotate_left_r [4] $end
$var wire 1 E4 rotate_left_r [3] $end
$var wire 1 F4 rotate_left_r [2] $end
$var wire 1 G4 rotate_left_r [1] $end
$var wire 1 H4 rotate_left_r [0] $end
$var wire 1 I4 shift_right_l_r [15] $end
$var wire 1 J4 shift_right_l_r [14] $end
$var wire 1 K4 shift_right_l_r [13] $end
$var wire 1 L4 shift_right_l_r [12] $end
$var wire 1 M4 shift_right_l_r [11] $end
$var wire 1 N4 shift_right_l_r [10] $end
$var wire 1 O4 shift_right_l_r [9] $end
$var wire 1 P4 shift_right_l_r [8] $end
$var wire 1 Q4 shift_right_l_r [7] $end
$var wire 1 R4 shift_right_l_r [6] $end
$var wire 1 S4 shift_right_l_r [5] $end
$var wire 1 T4 shift_right_l_r [4] $end
$var wire 1 U4 shift_right_l_r [3] $end
$var wire 1 V4 shift_right_l_r [2] $end
$var wire 1 W4 shift_right_l_r [1] $end
$var wire 1 X4 shift_right_l_r [0] $end
$var wire 1 Y4 rotate_right_r [15] $end
$var wire 1 Z4 rotate_right_r [14] $end
$var wire 1 [4 rotate_right_r [13] $end
$var wire 1 \4 rotate_right_r [12] $end
$var wire 1 ]4 rotate_right_r [11] $end
$var wire 1 ^4 rotate_right_r [10] $end
$var wire 1 _4 rotate_right_r [9] $end
$var wire 1 `4 rotate_right_r [8] $end
$var wire 1 a4 rotate_right_r [7] $end
$var wire 1 b4 rotate_right_r [6] $end
$var wire 1 c4 rotate_right_r [5] $end
$var wire 1 d4 rotate_right_r [4] $end
$var wire 1 e4 rotate_right_r [3] $end
$var wire 1 f4 rotate_right_r [2] $end
$var wire 1 g4 rotate_right_r [1] $end
$var wire 1 h4 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 )4 result [15] $end
$var wire 1 *4 result [14] $end
$var wire 1 +4 result [13] $end
$var wire 1 ,4 result [12] $end
$var wire 1 -4 result [11] $end
$var wire 1 .4 result [10] $end
$var wire 1 /4 result [9] $end
$var wire 1 04 result [8] $end
$var wire 1 14 result [7] $end
$var wire 1 24 result [6] $end
$var wire 1 34 result [5] $end
$var wire 1 44 result [4] $end
$var wire 1 54 result [3] $end
$var wire 1 64 result [2] $end
$var wire 1 74 result [1] $end
$var wire 1 84 result [0] $end
$var wire 1 k4 temp1 [15] $end
$var wire 1 l4 temp1 [14] $end
$var wire 1 m4 temp1 [13] $end
$var wire 1 n4 temp1 [12] $end
$var wire 1 o4 temp1 [11] $end
$var wire 1 p4 temp1 [10] $end
$var wire 1 q4 temp1 [9] $end
$var wire 1 r4 temp1 [8] $end
$var wire 1 s4 temp1 [7] $end
$var wire 1 t4 temp1 [6] $end
$var wire 1 u4 temp1 [5] $end
$var wire 1 v4 temp1 [4] $end
$var wire 1 w4 temp1 [3] $end
$var wire 1 x4 temp1 [2] $end
$var wire 1 y4 temp1 [1] $end
$var wire 1 z4 temp1 [0] $end
$var wire 1 {4 temp2 [15] $end
$var wire 1 |4 temp2 [14] $end
$var wire 1 }4 temp2 [13] $end
$var wire 1 ~4 temp2 [12] $end
$var wire 1 !5 temp2 [11] $end
$var wire 1 "5 temp2 [10] $end
$var wire 1 #5 temp2 [9] $end
$var wire 1 $5 temp2 [8] $end
$var wire 1 %5 temp2 [7] $end
$var wire 1 &5 temp2 [6] $end
$var wire 1 '5 temp2 [5] $end
$var wire 1 (5 temp2 [4] $end
$var wire 1 )5 temp2 [3] $end
$var wire 1 *5 temp2 [2] $end
$var wire 1 +5 temp2 [1] $end
$var wire 1 ,5 temp2 [0] $end
$var wire 1 -5 temp3 [15] $end
$var wire 1 .5 temp3 [14] $end
$var wire 1 /5 temp3 [13] $end
$var wire 1 05 temp3 [12] $end
$var wire 1 15 temp3 [11] $end
$var wire 1 25 temp3 [10] $end
$var wire 1 35 temp3 [9] $end
$var wire 1 45 temp3 [8] $end
$var wire 1 55 temp3 [7] $end
$var wire 1 65 temp3 [6] $end
$var wire 1 75 temp3 [5] $end
$var wire 1 85 temp3 [4] $end
$var wire 1 95 temp3 [3] $end
$var wire 1 :5 temp3 [2] $end
$var wire 1 ;5 temp3 [1] $end
$var wire 1 <5 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 94 result [15] $end
$var wire 1 :4 result [14] $end
$var wire 1 ;4 result [13] $end
$var wire 1 <4 result [12] $end
$var wire 1 =4 result [11] $end
$var wire 1 >4 result [10] $end
$var wire 1 ?4 result [9] $end
$var wire 1 @4 result [8] $end
$var wire 1 A4 result [7] $end
$var wire 1 B4 result [6] $end
$var wire 1 C4 result [5] $end
$var wire 1 D4 result [4] $end
$var wire 1 E4 result [3] $end
$var wire 1 F4 result [2] $end
$var wire 1 G4 result [1] $end
$var wire 1 H4 result [0] $end
$var wire 1 ?5 temp1 [15] $end
$var wire 1 @5 temp1 [14] $end
$var wire 1 A5 temp1 [13] $end
$var wire 1 B5 temp1 [12] $end
$var wire 1 C5 temp1 [11] $end
$var wire 1 D5 temp1 [10] $end
$var wire 1 E5 temp1 [9] $end
$var wire 1 F5 temp1 [8] $end
$var wire 1 G5 temp1 [7] $end
$var wire 1 H5 temp1 [6] $end
$var wire 1 I5 temp1 [5] $end
$var wire 1 J5 temp1 [4] $end
$var wire 1 K5 temp1 [3] $end
$var wire 1 L5 temp1 [2] $end
$var wire 1 M5 temp1 [1] $end
$var wire 1 N5 temp1 [0] $end
$var wire 1 O5 temp2 [15] $end
$var wire 1 P5 temp2 [14] $end
$var wire 1 Q5 temp2 [13] $end
$var wire 1 R5 temp2 [12] $end
$var wire 1 S5 temp2 [11] $end
$var wire 1 T5 temp2 [10] $end
$var wire 1 U5 temp2 [9] $end
$var wire 1 V5 temp2 [8] $end
$var wire 1 W5 temp2 [7] $end
$var wire 1 X5 temp2 [6] $end
$var wire 1 Y5 temp2 [5] $end
$var wire 1 Z5 temp2 [4] $end
$var wire 1 [5 temp2 [3] $end
$var wire 1 \5 temp2 [2] $end
$var wire 1 ]5 temp2 [1] $end
$var wire 1 ^5 temp2 [0] $end
$var wire 1 _5 temp3 [15] $end
$var wire 1 `5 temp3 [14] $end
$var wire 1 a5 temp3 [13] $end
$var wire 1 b5 temp3 [12] $end
$var wire 1 c5 temp3 [11] $end
$var wire 1 d5 temp3 [10] $end
$var wire 1 e5 temp3 [9] $end
$var wire 1 f5 temp3 [8] $end
$var wire 1 g5 temp3 [7] $end
$var wire 1 h5 temp3 [6] $end
$var wire 1 i5 temp3 [5] $end
$var wire 1 j5 temp3 [4] $end
$var wire 1 k5 temp3 [3] $end
$var wire 1 l5 temp3 [2] $end
$var wire 1 m5 temp3 [1] $end
$var wire 1 n5 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 I4 result [15] $end
$var wire 1 J4 result [14] $end
$var wire 1 K4 result [13] $end
$var wire 1 L4 result [12] $end
$var wire 1 M4 result [11] $end
$var wire 1 N4 result [10] $end
$var wire 1 O4 result [9] $end
$var wire 1 P4 result [8] $end
$var wire 1 Q4 result [7] $end
$var wire 1 R4 result [6] $end
$var wire 1 S4 result [5] $end
$var wire 1 T4 result [4] $end
$var wire 1 U4 result [3] $end
$var wire 1 V4 result [2] $end
$var wire 1 W4 result [1] $end
$var wire 1 X4 result [0] $end
$var wire 1 q5 temp1 [15] $end
$var wire 1 r5 temp1 [14] $end
$var wire 1 s5 temp1 [13] $end
$var wire 1 t5 temp1 [12] $end
$var wire 1 u5 temp1 [11] $end
$var wire 1 v5 temp1 [10] $end
$var wire 1 w5 temp1 [9] $end
$var wire 1 x5 temp1 [8] $end
$var wire 1 y5 temp1 [7] $end
$var wire 1 z5 temp1 [6] $end
$var wire 1 {5 temp1 [5] $end
$var wire 1 |5 temp1 [4] $end
$var wire 1 }5 temp1 [3] $end
$var wire 1 ~5 temp1 [2] $end
$var wire 1 !6 temp1 [1] $end
$var wire 1 "6 temp1 [0] $end
$var wire 1 #6 temp2 [15] $end
$var wire 1 $6 temp2 [14] $end
$var wire 1 %6 temp2 [13] $end
$var wire 1 &6 temp2 [12] $end
$var wire 1 '6 temp2 [11] $end
$var wire 1 (6 temp2 [10] $end
$var wire 1 )6 temp2 [9] $end
$var wire 1 *6 temp2 [8] $end
$var wire 1 +6 temp2 [7] $end
$var wire 1 ,6 temp2 [6] $end
$var wire 1 -6 temp2 [5] $end
$var wire 1 .6 temp2 [4] $end
$var wire 1 /6 temp2 [3] $end
$var wire 1 06 temp2 [2] $end
$var wire 1 16 temp2 [1] $end
$var wire 1 26 temp2 [0] $end
$var wire 1 36 temp3 [15] $end
$var wire 1 46 temp3 [14] $end
$var wire 1 56 temp3 [13] $end
$var wire 1 66 temp3 [12] $end
$var wire 1 76 temp3 [11] $end
$var wire 1 86 temp3 [10] $end
$var wire 1 96 temp3 [9] $end
$var wire 1 :6 temp3 [8] $end
$var wire 1 ;6 temp3 [7] $end
$var wire 1 <6 temp3 [6] $end
$var wire 1 =6 temp3 [5] $end
$var wire 1 >6 temp3 [4] $end
$var wire 1 ?6 temp3 [3] $end
$var wire 1 @6 temp3 [2] $end
$var wire 1 A6 temp3 [1] $end
$var wire 1 B6 temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 #4 ShAmt [3] $end
$var wire 1 $4 ShAmt [2] $end
$var wire 1 %4 ShAmt [1] $end
$var wire 1 &4 ShAmt [0] $end
$var wire 1 Y4 result [15] $end
$var wire 1 Z4 result [14] $end
$var wire 1 [4 result [13] $end
$var wire 1 \4 result [12] $end
$var wire 1 ]4 result [11] $end
$var wire 1 ^4 result [10] $end
$var wire 1 _4 result [9] $end
$var wire 1 `4 result [8] $end
$var wire 1 a4 result [7] $end
$var wire 1 b4 result [6] $end
$var wire 1 c4 result [5] $end
$var wire 1 d4 result [4] $end
$var wire 1 e4 result [3] $end
$var wire 1 f4 result [2] $end
$var wire 1 g4 result [1] $end
$var wire 1 h4 result [0] $end
$var wire 1 E6 temp1 [15] $end
$var wire 1 F6 temp1 [14] $end
$var wire 1 G6 temp1 [13] $end
$var wire 1 H6 temp1 [12] $end
$var wire 1 I6 temp1 [11] $end
$var wire 1 J6 temp1 [10] $end
$var wire 1 K6 temp1 [9] $end
$var wire 1 L6 temp1 [8] $end
$var wire 1 M6 temp1 [7] $end
$var wire 1 N6 temp1 [6] $end
$var wire 1 O6 temp1 [5] $end
$var wire 1 P6 temp1 [4] $end
$var wire 1 Q6 temp1 [3] $end
$var wire 1 R6 temp1 [2] $end
$var wire 1 S6 temp1 [1] $end
$var wire 1 T6 temp1 [0] $end
$var wire 1 U6 temp2 [15] $end
$var wire 1 V6 temp2 [14] $end
$var wire 1 W6 temp2 [13] $end
$var wire 1 X6 temp2 [12] $end
$var wire 1 Y6 temp2 [11] $end
$var wire 1 Z6 temp2 [10] $end
$var wire 1 [6 temp2 [9] $end
$var wire 1 \6 temp2 [8] $end
$var wire 1 ]6 temp2 [7] $end
$var wire 1 ^6 temp2 [6] $end
$var wire 1 _6 temp2 [5] $end
$var wire 1 `6 temp2 [4] $end
$var wire 1 a6 temp2 [3] $end
$var wire 1 b6 temp2 [2] $end
$var wire 1 c6 temp2 [1] $end
$var wire 1 d6 temp2 [0] $end
$var wire 1 e6 temp3 [15] $end
$var wire 1 f6 temp3 [14] $end
$var wire 1 g6 temp3 [13] $end
$var wire 1 h6 temp3 [12] $end
$var wire 1 i6 temp3 [11] $end
$var wire 1 j6 temp3 [10] $end
$var wire 1 k6 temp3 [9] $end
$var wire 1 l6 temp3 [8] $end
$var wire 1 m6 temp3 [7] $end
$var wire 1 n6 temp3 [6] $end
$var wire 1 o6 temp3 [5] $end
$var wire 1 p6 temp3 [4] $end
$var wire 1 q6 temp3 [3] $end
$var wire 1 r6 temp3 [2] $end
$var wire 1 s6 temp3 [1] $end
$var wire 1 t6 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var wire 1 42 InA [15] $end
$var wire 1 52 InA [14] $end
$var wire 1 62 InA [13] $end
$var wire 1 72 InA [12] $end
$var wire 1 82 InA [11] $end
$var wire 1 92 InA [10] $end
$var wire 1 :2 InA [9] $end
$var wire 1 ;2 InA [8] $end
$var wire 1 <2 InA [7] $end
$var wire 1 =2 InA [6] $end
$var wire 1 >2 InA [5] $end
$var wire 1 ?2 InA [4] $end
$var wire 1 @2 InA [3] $end
$var wire 1 A2 InA [2] $end
$var wire 1 B2 InA [1] $end
$var wire 1 C2 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 w6 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 x6 sign $end
$var wire 1 U2 Out [15] $end
$var wire 1 V2 Out [14] $end
$var wire 1 W2 Out [13] $end
$var wire 1 X2 Out [12] $end
$var wire 1 Y2 Out [11] $end
$var wire 1 Z2 Out [10] $end
$var wire 1 [2 Out [9] $end
$var wire 1 \2 Out [8] $end
$var wire 1 ]2 Out [7] $end
$var wire 1 ^2 Out [6] $end
$var wire 1 _2 Out [5] $end
$var wire 1 `2 Out [4] $end
$var wire 1 a2 Out [3] $end
$var wire 1 b2 Out [2] $end
$var wire 1 c2 Out [1] $end
$var wire 1 d2 Out [0] $end
$var wire 1 e2 signOut $end
$var wire 1 h2 Ofl $end
$var wire 1 g2 Zero $end
$var wire 1 f2 carryFlag $end
$var wire 1 y6 InA_invA [15] $end
$var wire 1 z6 InA_invA [14] $end
$var wire 1 {6 InA_invA [13] $end
$var wire 1 |6 InA_invA [12] $end
$var wire 1 }6 InA_invA [11] $end
$var wire 1 ~6 InA_invA [10] $end
$var wire 1 !7 InA_invA [9] $end
$var wire 1 "7 InA_invA [8] $end
$var wire 1 #7 InA_invA [7] $end
$var wire 1 $7 InA_invA [6] $end
$var wire 1 %7 InA_invA [5] $end
$var wire 1 &7 InA_invA [4] $end
$var wire 1 '7 InA_invA [3] $end
$var wire 1 (7 InA_invA [2] $end
$var wire 1 )7 InA_invA [1] $end
$var wire 1 *7 InA_invA [0] $end
$var wire 1 +7 InB_invB [15] $end
$var wire 1 ,7 InB_invB [14] $end
$var wire 1 -7 InB_invB [13] $end
$var wire 1 .7 InB_invB [12] $end
$var wire 1 /7 InB_invB [11] $end
$var wire 1 07 InB_invB [10] $end
$var wire 1 17 InB_invB [9] $end
$var wire 1 27 InB_invB [8] $end
$var wire 1 37 InB_invB [7] $end
$var wire 1 47 InB_invB [6] $end
$var wire 1 57 InB_invB [5] $end
$var wire 1 67 InB_invB [4] $end
$var wire 1 77 InB_invB [3] $end
$var wire 1 87 InB_invB [2] $end
$var wire 1 97 InB_invB [1] $end
$var wire 1 :7 InB_invB [0] $end
$var wire 1 ;7 barrel [15] $end
$var wire 1 <7 barrel [14] $end
$var wire 1 =7 barrel [13] $end
$var wire 1 >7 barrel [12] $end
$var wire 1 ?7 barrel [11] $end
$var wire 1 @7 barrel [10] $end
$var wire 1 A7 barrel [9] $end
$var wire 1 B7 barrel [8] $end
$var wire 1 C7 barrel [7] $end
$var wire 1 D7 barrel [6] $end
$var wire 1 E7 barrel [5] $end
$var wire 1 F7 barrel [4] $end
$var wire 1 G7 barrel [3] $end
$var wire 1 H7 barrel [2] $end
$var wire 1 I7 barrel [1] $end
$var wire 1 J7 barrel [0] $end
$var wire 1 K7 logic_gates_r [15] $end
$var wire 1 L7 logic_gates_r [14] $end
$var wire 1 M7 logic_gates_r [13] $end
$var wire 1 N7 logic_gates_r [12] $end
$var wire 1 O7 logic_gates_r [11] $end
$var wire 1 P7 logic_gates_r [10] $end
$var wire 1 Q7 logic_gates_r [9] $end
$var wire 1 R7 logic_gates_r [8] $end
$var wire 1 S7 logic_gates_r [7] $end
$var wire 1 T7 logic_gates_r [6] $end
$var wire 1 U7 logic_gates_r [5] $end
$var wire 1 V7 logic_gates_r [4] $end
$var wire 1 W7 logic_gates_r [3] $end
$var wire 1 X7 logic_gates_r [2] $end
$var wire 1 Y7 logic_gates_r [1] $end
$var wire 1 Z7 logic_gates_r [0] $end
$var wire 1 [7 addition [15] $end
$var wire 1 \7 addition [14] $end
$var wire 1 ]7 addition [13] $end
$var wire 1 ^7 addition [12] $end
$var wire 1 _7 addition [11] $end
$var wire 1 `7 addition [10] $end
$var wire 1 a7 addition [9] $end
$var wire 1 b7 addition [8] $end
$var wire 1 c7 addition [7] $end
$var wire 1 d7 addition [6] $end
$var wire 1 e7 addition [5] $end
$var wire 1 f7 addition [4] $end
$var wire 1 g7 addition [3] $end
$var wire 1 h7 addition [2] $end
$var wire 1 i7 addition [1] $end
$var wire 1 j7 addition [0] $end
$var wire 1 k7 addition_logic [15] $end
$var wire 1 l7 addition_logic [14] $end
$var wire 1 m7 addition_logic [13] $end
$var wire 1 n7 addition_logic [12] $end
$var wire 1 o7 addition_logic [11] $end
$var wire 1 p7 addition_logic [10] $end
$var wire 1 q7 addition_logic [9] $end
$var wire 1 r7 addition_logic [8] $end
$var wire 1 s7 addition_logic [7] $end
$var wire 1 t7 addition_logic [6] $end
$var wire 1 u7 addition_logic [5] $end
$var wire 1 v7 addition_logic [4] $end
$var wire 1 w7 addition_logic [3] $end
$var wire 1 x7 addition_logic [2] $end
$var wire 1 y7 addition_logic [1] $end
$var wire 1 z7 addition_logic [0] $end
$var wire 1 {7 carry $end
$var wire 1 |7 signed_over $end
$var wire 1 }7 less $end

$scope module shift $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 ;7 Out [15] $end
$var wire 1 <7 Out [14] $end
$var wire 1 =7 Out [13] $end
$var wire 1 >7 Out [12] $end
$var wire 1 ?7 Out [11] $end
$var wire 1 @7 Out [10] $end
$var wire 1 A7 Out [9] $end
$var wire 1 B7 Out [8] $end
$var wire 1 C7 Out [7] $end
$var wire 1 D7 Out [6] $end
$var wire 1 E7 Out [5] $end
$var wire 1 F7 Out [4] $end
$var wire 1 G7 Out [3] $end
$var wire 1 H7 Out [2] $end
$var wire 1 I7 Out [1] $end
$var wire 1 J7 Out [0] $end
$var wire 1 #8 shift_left_r [15] $end
$var wire 1 $8 shift_left_r [14] $end
$var wire 1 %8 shift_left_r [13] $end
$var wire 1 &8 shift_left_r [12] $end
$var wire 1 '8 shift_left_r [11] $end
$var wire 1 (8 shift_left_r [10] $end
$var wire 1 )8 shift_left_r [9] $end
$var wire 1 *8 shift_left_r [8] $end
$var wire 1 +8 shift_left_r [7] $end
$var wire 1 ,8 shift_left_r [6] $end
$var wire 1 -8 shift_left_r [5] $end
$var wire 1 .8 shift_left_r [4] $end
$var wire 1 /8 shift_left_r [3] $end
$var wire 1 08 shift_left_r [2] $end
$var wire 1 18 shift_left_r [1] $end
$var wire 1 28 shift_left_r [0] $end
$var wire 1 38 rotate_left_r [15] $end
$var wire 1 48 rotate_left_r [14] $end
$var wire 1 58 rotate_left_r [13] $end
$var wire 1 68 rotate_left_r [12] $end
$var wire 1 78 rotate_left_r [11] $end
$var wire 1 88 rotate_left_r [10] $end
$var wire 1 98 rotate_left_r [9] $end
$var wire 1 :8 rotate_left_r [8] $end
$var wire 1 ;8 rotate_left_r [7] $end
$var wire 1 <8 rotate_left_r [6] $end
$var wire 1 =8 rotate_left_r [5] $end
$var wire 1 >8 rotate_left_r [4] $end
$var wire 1 ?8 rotate_left_r [3] $end
$var wire 1 @8 rotate_left_r [2] $end
$var wire 1 A8 rotate_left_r [1] $end
$var wire 1 B8 rotate_left_r [0] $end
$var wire 1 C8 shift_right_l_r [15] $end
$var wire 1 D8 shift_right_l_r [14] $end
$var wire 1 E8 shift_right_l_r [13] $end
$var wire 1 F8 shift_right_l_r [12] $end
$var wire 1 G8 shift_right_l_r [11] $end
$var wire 1 H8 shift_right_l_r [10] $end
$var wire 1 I8 shift_right_l_r [9] $end
$var wire 1 J8 shift_right_l_r [8] $end
$var wire 1 K8 shift_right_l_r [7] $end
$var wire 1 L8 shift_right_l_r [6] $end
$var wire 1 M8 shift_right_l_r [5] $end
$var wire 1 N8 shift_right_l_r [4] $end
$var wire 1 O8 shift_right_l_r [3] $end
$var wire 1 P8 shift_right_l_r [2] $end
$var wire 1 Q8 shift_right_l_r [1] $end
$var wire 1 R8 shift_right_l_r [0] $end
$var wire 1 S8 rotate_right_r [15] $end
$var wire 1 T8 rotate_right_r [14] $end
$var wire 1 U8 rotate_right_r [13] $end
$var wire 1 V8 rotate_right_r [12] $end
$var wire 1 W8 rotate_right_r [11] $end
$var wire 1 X8 rotate_right_r [10] $end
$var wire 1 Y8 rotate_right_r [9] $end
$var wire 1 Z8 rotate_right_r [8] $end
$var wire 1 [8 rotate_right_r [7] $end
$var wire 1 \8 rotate_right_r [6] $end
$var wire 1 ]8 rotate_right_r [5] $end
$var wire 1 ^8 rotate_right_r [4] $end
$var wire 1 _8 rotate_right_r [3] $end
$var wire 1 `8 rotate_right_r [2] $end
$var wire 1 a8 rotate_right_r [1] $end
$var wire 1 b8 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 #8 result [15] $end
$var wire 1 $8 result [14] $end
$var wire 1 %8 result [13] $end
$var wire 1 &8 result [12] $end
$var wire 1 '8 result [11] $end
$var wire 1 (8 result [10] $end
$var wire 1 )8 result [9] $end
$var wire 1 *8 result [8] $end
$var wire 1 +8 result [7] $end
$var wire 1 ,8 result [6] $end
$var wire 1 -8 result [5] $end
$var wire 1 .8 result [4] $end
$var wire 1 /8 result [3] $end
$var wire 1 08 result [2] $end
$var wire 1 18 result [1] $end
$var wire 1 28 result [0] $end
$var wire 1 e8 temp1 [15] $end
$var wire 1 f8 temp1 [14] $end
$var wire 1 g8 temp1 [13] $end
$var wire 1 h8 temp1 [12] $end
$var wire 1 i8 temp1 [11] $end
$var wire 1 j8 temp1 [10] $end
$var wire 1 k8 temp1 [9] $end
$var wire 1 l8 temp1 [8] $end
$var wire 1 m8 temp1 [7] $end
$var wire 1 n8 temp1 [6] $end
$var wire 1 o8 temp1 [5] $end
$var wire 1 p8 temp1 [4] $end
$var wire 1 q8 temp1 [3] $end
$var wire 1 r8 temp1 [2] $end
$var wire 1 s8 temp1 [1] $end
$var wire 1 t8 temp1 [0] $end
$var wire 1 u8 temp2 [15] $end
$var wire 1 v8 temp2 [14] $end
$var wire 1 w8 temp2 [13] $end
$var wire 1 x8 temp2 [12] $end
$var wire 1 y8 temp2 [11] $end
$var wire 1 z8 temp2 [10] $end
$var wire 1 {8 temp2 [9] $end
$var wire 1 |8 temp2 [8] $end
$var wire 1 }8 temp2 [7] $end
$var wire 1 ~8 temp2 [6] $end
$var wire 1 !9 temp2 [5] $end
$var wire 1 "9 temp2 [4] $end
$var wire 1 #9 temp2 [3] $end
$var wire 1 $9 temp2 [2] $end
$var wire 1 %9 temp2 [1] $end
$var wire 1 &9 temp2 [0] $end
$var wire 1 '9 temp3 [15] $end
$var wire 1 (9 temp3 [14] $end
$var wire 1 )9 temp3 [13] $end
$var wire 1 *9 temp3 [12] $end
$var wire 1 +9 temp3 [11] $end
$var wire 1 ,9 temp3 [10] $end
$var wire 1 -9 temp3 [9] $end
$var wire 1 .9 temp3 [8] $end
$var wire 1 /9 temp3 [7] $end
$var wire 1 09 temp3 [6] $end
$var wire 1 19 temp3 [5] $end
$var wire 1 29 temp3 [4] $end
$var wire 1 39 temp3 [3] $end
$var wire 1 49 temp3 [2] $end
$var wire 1 59 temp3 [1] $end
$var wire 1 69 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 38 result [15] $end
$var wire 1 48 result [14] $end
$var wire 1 58 result [13] $end
$var wire 1 68 result [12] $end
$var wire 1 78 result [11] $end
$var wire 1 88 result [10] $end
$var wire 1 98 result [9] $end
$var wire 1 :8 result [8] $end
$var wire 1 ;8 result [7] $end
$var wire 1 <8 result [6] $end
$var wire 1 =8 result [5] $end
$var wire 1 >8 result [4] $end
$var wire 1 ?8 result [3] $end
$var wire 1 @8 result [2] $end
$var wire 1 A8 result [1] $end
$var wire 1 B8 result [0] $end
$var wire 1 99 temp1 [15] $end
$var wire 1 :9 temp1 [14] $end
$var wire 1 ;9 temp1 [13] $end
$var wire 1 <9 temp1 [12] $end
$var wire 1 =9 temp1 [11] $end
$var wire 1 >9 temp1 [10] $end
$var wire 1 ?9 temp1 [9] $end
$var wire 1 @9 temp1 [8] $end
$var wire 1 A9 temp1 [7] $end
$var wire 1 B9 temp1 [6] $end
$var wire 1 C9 temp1 [5] $end
$var wire 1 D9 temp1 [4] $end
$var wire 1 E9 temp1 [3] $end
$var wire 1 F9 temp1 [2] $end
$var wire 1 G9 temp1 [1] $end
$var wire 1 H9 temp1 [0] $end
$var wire 1 I9 temp2 [15] $end
$var wire 1 J9 temp2 [14] $end
$var wire 1 K9 temp2 [13] $end
$var wire 1 L9 temp2 [12] $end
$var wire 1 M9 temp2 [11] $end
$var wire 1 N9 temp2 [10] $end
$var wire 1 O9 temp2 [9] $end
$var wire 1 P9 temp2 [8] $end
$var wire 1 Q9 temp2 [7] $end
$var wire 1 R9 temp2 [6] $end
$var wire 1 S9 temp2 [5] $end
$var wire 1 T9 temp2 [4] $end
$var wire 1 U9 temp2 [3] $end
$var wire 1 V9 temp2 [2] $end
$var wire 1 W9 temp2 [1] $end
$var wire 1 X9 temp2 [0] $end
$var wire 1 Y9 temp3 [15] $end
$var wire 1 Z9 temp3 [14] $end
$var wire 1 [9 temp3 [13] $end
$var wire 1 \9 temp3 [12] $end
$var wire 1 ]9 temp3 [11] $end
$var wire 1 ^9 temp3 [10] $end
$var wire 1 _9 temp3 [9] $end
$var wire 1 `9 temp3 [8] $end
$var wire 1 a9 temp3 [7] $end
$var wire 1 b9 temp3 [6] $end
$var wire 1 c9 temp3 [5] $end
$var wire 1 d9 temp3 [4] $end
$var wire 1 e9 temp3 [3] $end
$var wire 1 f9 temp3 [2] $end
$var wire 1 g9 temp3 [1] $end
$var wire 1 h9 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 C8 result [15] $end
$var wire 1 D8 result [14] $end
$var wire 1 E8 result [13] $end
$var wire 1 F8 result [12] $end
$var wire 1 G8 result [11] $end
$var wire 1 H8 result [10] $end
$var wire 1 I8 result [9] $end
$var wire 1 J8 result [8] $end
$var wire 1 K8 result [7] $end
$var wire 1 L8 result [6] $end
$var wire 1 M8 result [5] $end
$var wire 1 N8 result [4] $end
$var wire 1 O8 result [3] $end
$var wire 1 P8 result [2] $end
$var wire 1 Q8 result [1] $end
$var wire 1 R8 result [0] $end
$var wire 1 k9 temp1 [15] $end
$var wire 1 l9 temp1 [14] $end
$var wire 1 m9 temp1 [13] $end
$var wire 1 n9 temp1 [12] $end
$var wire 1 o9 temp1 [11] $end
$var wire 1 p9 temp1 [10] $end
$var wire 1 q9 temp1 [9] $end
$var wire 1 r9 temp1 [8] $end
$var wire 1 s9 temp1 [7] $end
$var wire 1 t9 temp1 [6] $end
$var wire 1 u9 temp1 [5] $end
$var wire 1 v9 temp1 [4] $end
$var wire 1 w9 temp1 [3] $end
$var wire 1 x9 temp1 [2] $end
$var wire 1 y9 temp1 [1] $end
$var wire 1 z9 temp1 [0] $end
$var wire 1 {9 temp2 [15] $end
$var wire 1 |9 temp2 [14] $end
$var wire 1 }9 temp2 [13] $end
$var wire 1 ~9 temp2 [12] $end
$var wire 1 !: temp2 [11] $end
$var wire 1 ": temp2 [10] $end
$var wire 1 #: temp2 [9] $end
$var wire 1 $: temp2 [8] $end
$var wire 1 %: temp2 [7] $end
$var wire 1 &: temp2 [6] $end
$var wire 1 ': temp2 [5] $end
$var wire 1 (: temp2 [4] $end
$var wire 1 ): temp2 [3] $end
$var wire 1 *: temp2 [2] $end
$var wire 1 +: temp2 [1] $end
$var wire 1 ,: temp2 [0] $end
$var wire 1 -: temp3 [15] $end
$var wire 1 .: temp3 [14] $end
$var wire 1 /: temp3 [13] $end
$var wire 1 0: temp3 [12] $end
$var wire 1 1: temp3 [11] $end
$var wire 1 2: temp3 [10] $end
$var wire 1 3: temp3 [9] $end
$var wire 1 4: temp3 [8] $end
$var wire 1 5: temp3 [7] $end
$var wire 1 6: temp3 [6] $end
$var wire 1 7: temp3 [5] $end
$var wire 1 8: temp3 [4] $end
$var wire 1 9: temp3 [3] $end
$var wire 1 :: temp3 [2] $end
$var wire 1 ;: temp3 [1] $end
$var wire 1 <: temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 y6 In [15] $end
$var wire 1 z6 In [14] $end
$var wire 1 {6 In [13] $end
$var wire 1 |6 In [12] $end
$var wire 1 }6 In [11] $end
$var wire 1 ~6 In [10] $end
$var wire 1 !7 In [9] $end
$var wire 1 "7 In [8] $end
$var wire 1 #7 In [7] $end
$var wire 1 $7 In [6] $end
$var wire 1 %7 In [5] $end
$var wire 1 &7 In [4] $end
$var wire 1 '7 In [3] $end
$var wire 1 (7 In [2] $end
$var wire 1 )7 In [1] $end
$var wire 1 *7 In [0] $end
$var wire 1 77 ShAmt [3] $end
$var wire 1 87 ShAmt [2] $end
$var wire 1 97 ShAmt [1] $end
$var wire 1 :7 ShAmt [0] $end
$var wire 1 S8 result [15] $end
$var wire 1 T8 result [14] $end
$var wire 1 U8 result [13] $end
$var wire 1 V8 result [12] $end
$var wire 1 W8 result [11] $end
$var wire 1 X8 result [10] $end
$var wire 1 Y8 result [9] $end
$var wire 1 Z8 result [8] $end
$var wire 1 [8 result [7] $end
$var wire 1 \8 result [6] $end
$var wire 1 ]8 result [5] $end
$var wire 1 ^8 result [4] $end
$var wire 1 _8 result [3] $end
$var wire 1 `8 result [2] $end
$var wire 1 a8 result [1] $end
$var wire 1 b8 result [0] $end
$var wire 1 ?: temp1 [15] $end
$var wire 1 @: temp1 [14] $end
$var wire 1 A: temp1 [13] $end
$var wire 1 B: temp1 [12] $end
$var wire 1 C: temp1 [11] $end
$var wire 1 D: temp1 [10] $end
$var wire 1 E: temp1 [9] $end
$var wire 1 F: temp1 [8] $end
$var wire 1 G: temp1 [7] $end
$var wire 1 H: temp1 [6] $end
$var wire 1 I: temp1 [5] $end
$var wire 1 J: temp1 [4] $end
$var wire 1 K: temp1 [3] $end
$var wire 1 L: temp1 [2] $end
$var wire 1 M: temp1 [1] $end
$var wire 1 N: temp1 [0] $end
$var wire 1 O: temp2 [15] $end
$var wire 1 P: temp2 [14] $end
$var wire 1 Q: temp2 [13] $end
$var wire 1 R: temp2 [12] $end
$var wire 1 S: temp2 [11] $end
$var wire 1 T: temp2 [10] $end
$var wire 1 U: temp2 [9] $end
$var wire 1 V: temp2 [8] $end
$var wire 1 W: temp2 [7] $end
$var wire 1 X: temp2 [6] $end
$var wire 1 Y: temp2 [5] $end
$var wire 1 Z: temp2 [4] $end
$var wire 1 [: temp2 [3] $end
$var wire 1 \: temp2 [2] $end
$var wire 1 ]: temp2 [1] $end
$var wire 1 ^: temp2 [0] $end
$var wire 1 _: temp3 [15] $end
$var wire 1 `: temp3 [14] $end
$var wire 1 a: temp3 [13] $end
$var wire 1 b: temp3 [12] $end
$var wire 1 c: temp3 [11] $end
$var wire 1 d: temp3 [10] $end
$var wire 1 e: temp3 [9] $end
$var wire 1 f: temp3 [8] $end
$var wire 1 g: temp3 [7] $end
$var wire 1 h: temp3 [6] $end
$var wire 1 i: temp3 [5] $end
$var wire 1 j: temp3 [4] $end
$var wire 1 k: temp3 [3] $end
$var wire 1 l: temp3 [2] $end
$var wire 1 m: temp3 [1] $end
$var wire 1 n: temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var wire 1 y6 A [15] $end
$var wire 1 z6 A [14] $end
$var wire 1 {6 A [13] $end
$var wire 1 |6 A [12] $end
$var wire 1 }6 A [11] $end
$var wire 1 ~6 A [10] $end
$var wire 1 !7 A [9] $end
$var wire 1 "7 A [8] $end
$var wire 1 #7 A [7] $end
$var wire 1 $7 A [6] $end
$var wire 1 %7 A [5] $end
$var wire 1 &7 A [4] $end
$var wire 1 '7 A [3] $end
$var wire 1 (7 A [2] $end
$var wire 1 )7 A [1] $end
$var wire 1 *7 A [0] $end
$var wire 1 +7 B [15] $end
$var wire 1 ,7 B [14] $end
$var wire 1 -7 B [13] $end
$var wire 1 .7 B [12] $end
$var wire 1 /7 B [11] $end
$var wire 1 07 B [10] $end
$var wire 1 17 B [9] $end
$var wire 1 27 B [8] $end
$var wire 1 37 B [7] $end
$var wire 1 47 B [6] $end
$var wire 1 57 B [5] $end
$var wire 1 67 B [4] $end
$var wire 1 77 B [3] $end
$var wire 1 87 B [2] $end
$var wire 1 97 B [1] $end
$var wire 1 :7 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 K7 Result [15] $end
$var wire 1 L7 Result [14] $end
$var wire 1 M7 Result [13] $end
$var wire 1 N7 Result [12] $end
$var wire 1 O7 Result [11] $end
$var wire 1 P7 Result [10] $end
$var wire 1 Q7 Result [9] $end
$var wire 1 R7 Result [8] $end
$var wire 1 S7 Result [7] $end
$var wire 1 T7 Result [6] $end
$var wire 1 U7 Result [5] $end
$var wire 1 V7 Result [4] $end
$var wire 1 W7 Result [3] $end
$var wire 1 X7 Result [2] $end
$var wire 1 Y7 Result [1] $end
$var wire 1 Z7 Result [0] $end
$upscope $end

$scope module adding $end
$var wire 1 [7 sum [15] $end
$var wire 1 \7 sum [14] $end
$var wire 1 ]7 sum [13] $end
$var wire 1 ^7 sum [12] $end
$var wire 1 _7 sum [11] $end
$var wire 1 `7 sum [10] $end
$var wire 1 a7 sum [9] $end
$var wire 1 b7 sum [8] $end
$var wire 1 c7 sum [7] $end
$var wire 1 d7 sum [6] $end
$var wire 1 e7 sum [5] $end
$var wire 1 f7 sum [4] $end
$var wire 1 g7 sum [3] $end
$var wire 1 h7 sum [2] $end
$var wire 1 i7 sum [1] $end
$var wire 1 j7 sum [0] $end
$var wire 1 {7 c_out $end
$var wire 1 y6 a [15] $end
$var wire 1 z6 a [14] $end
$var wire 1 {6 a [13] $end
$var wire 1 |6 a [12] $end
$var wire 1 }6 a [11] $end
$var wire 1 ~6 a [10] $end
$var wire 1 !7 a [9] $end
$var wire 1 "7 a [8] $end
$var wire 1 #7 a [7] $end
$var wire 1 $7 a [6] $end
$var wire 1 %7 a [5] $end
$var wire 1 &7 a [4] $end
$var wire 1 '7 a [3] $end
$var wire 1 (7 a [2] $end
$var wire 1 )7 a [1] $end
$var wire 1 *7 a [0] $end
$var wire 1 +7 b [15] $end
$var wire 1 ,7 b [14] $end
$var wire 1 -7 b [13] $end
$var wire 1 .7 b [12] $end
$var wire 1 /7 b [11] $end
$var wire 1 07 b [10] $end
$var wire 1 17 b [9] $end
$var wire 1 27 b [8] $end
$var wire 1 37 b [7] $end
$var wire 1 47 b [6] $end
$var wire 1 57 b [5] $end
$var wire 1 67 b [4] $end
$var wire 1 77 b [3] $end
$var wire 1 87 b [2] $end
$var wire 1 97 b [1] $end
$var wire 1 :7 b [0] $end
$var wire 1 w6 c_in $end
$var wire 1 r: gen [15] $end
$var wire 1 s: gen [14] $end
$var wire 1 t: gen [13] $end
$var wire 1 u: gen [12] $end
$var wire 1 v: gen [11] $end
$var wire 1 w: gen [10] $end
$var wire 1 x: gen [9] $end
$var wire 1 y: gen [8] $end
$var wire 1 z: gen [7] $end
$var wire 1 {: gen [6] $end
$var wire 1 |: gen [5] $end
$var wire 1 }: gen [4] $end
$var wire 1 ~: gen [3] $end
$var wire 1 !; gen [2] $end
$var wire 1 "; gen [1] $end
$var wire 1 #; gen [0] $end
$var wire 1 $; four_gen [3] $end
$var wire 1 %; four_gen [2] $end
$var wire 1 &; four_gen [1] $end
$var wire 1 '; four_gen [0] $end
$var wire 1 (; prop [15] $end
$var wire 1 ); prop [14] $end
$var wire 1 *; prop [13] $end
$var wire 1 +; prop [12] $end
$var wire 1 ,; prop [11] $end
$var wire 1 -; prop [10] $end
$var wire 1 .; prop [9] $end
$var wire 1 /; prop [8] $end
$var wire 1 0; prop [7] $end
$var wire 1 1; prop [6] $end
$var wire 1 2; prop [5] $end
$var wire 1 3; prop [4] $end
$var wire 1 4; prop [3] $end
$var wire 1 5; prop [2] $end
$var wire 1 6; prop [1] $end
$var wire 1 7; prop [0] $end
$var wire 1 8; four_prop [3] $end
$var wire 1 9; four_prop [2] $end
$var wire 1 :; four_prop [1] $end
$var wire 1 ;; four_prop [0] $end
$var wire 1 <; carry [2] $end
$var wire 1 =; carry [1] $end
$var wire 1 >; carry [0] $end
$var wire 1 ?; fa_sum [15] $end
$var wire 1 @; fa_sum [14] $end
$var wire 1 A; fa_sum [13] $end
$var wire 1 B; fa_sum [12] $end
$var wire 1 C; fa_sum [11] $end
$var wire 1 D; fa_sum [10] $end
$var wire 1 E; fa_sum [9] $end
$var wire 1 F; fa_sum [8] $end
$var wire 1 G; fa_sum [7] $end
$var wire 1 H; fa_sum [6] $end
$var wire 1 I; fa_sum [5] $end
$var wire 1 J; fa_sum [4] $end
$var wire 1 K; fa_sum [3] $end
$var wire 1 L; fa_sum [2] $end
$var wire 1 M; fa_sum [1] $end
$var wire 1 N; fa_sum [0] $end

$scope module cla1 $end
$var wire 1 K; sum [3] $end
$var wire 1 L; sum [2] $end
$var wire 1 M; sum [1] $end
$var wire 1 N; sum [0] $end
$var wire 1 P; c_out $end
$var wire 1 '7 a [3] $end
$var wire 1 (7 a [2] $end
$var wire 1 )7 a [1] $end
$var wire 1 *7 a [0] $end
$var wire 1 77 b [3] $end
$var wire 1 87 b [2] $end
$var wire 1 97 b [1] $end
$var wire 1 :7 b [0] $end
$var wire 1 w6 c_in $end
$var wire 1 Q; gen [3] $end
$var wire 1 R; gen [2] $end
$var wire 1 S; gen [1] $end
$var wire 1 T; gen [0] $end
$var wire 1 U; prop [3] $end
$var wire 1 V; prop [2] $end
$var wire 1 W; prop [1] $end
$var wire 1 X; prop [0] $end
$var wire 1 Y; carry [2] $end
$var wire 1 Z; carry [1] $end
$var wire 1 [; carry [0] $end
$var wire 1 \; fa_sum [3] $end
$var wire 1 ]; fa_sum [2] $end
$var wire 1 ^; fa_sum [1] $end
$var wire 1 _; fa_sum [0] $end

$scope module fa1 $end
$var wire 1 _; s $end
$var wire 1 `; c_out $end
$var wire 1 *7 a $end
$var wire 1 :7 b $end
$var wire 1 w6 c_in $end
$var wire 1 a; xor_AB $end
$var wire 1 b; xor_ABCin $end
$var wire 1 c; NAND_AB $end
$var wire 1 d; not_NAND_AB $end
$var wire 1 e; NAND_Cin_xor_AB $end
$var wire 1 f; not_NAND_Cin_xor_AB $end
$var wire 1 g; NOR_2NAND $end
$var wire 1 h; not_NOR_2NAND $end
$var wire 1 i; Cin $end

$scope module xor1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 a; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 a; in1 $end
$var wire 1 w6 in2 $end
$var wire 1 b; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *7 in1 $end
$var wire 1 :7 in2 $end
$var wire 1 c; out $end
$upscope $end

$scope module not1 $end
$var wire 1 c; in1 $end
$var wire 1 d; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 i; in1 $end
$var wire 1 a; in2 $end
$var wire 1 e; out $end
$upscope $end

$scope module not2 $end
$var wire 1 e; in1 $end
$var wire 1 f; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 d; in1 $end
$var wire 1 f; in2 $end
$var wire 1 g; out $end
$upscope $end

$scope module not3 $end
$var wire 1 g; in1 $end
$var wire 1 h; out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 ^; s $end
$var wire 1 j; c_out $end
$var wire 1 )7 a $end
$var wire 1 97 b $end
$var wire 1 [; c_in $end
$var wire 1 k; xor_AB $end
$var wire 1 l; xor_ABCin $end
$var wire 1 m; NAND_AB $end
$var wire 1 n; not_NAND_AB $end
$var wire 1 o; NAND_Cin_xor_AB $end
$var wire 1 p; not_NAND_Cin_xor_AB $end
$var wire 1 q; NOR_2NAND $end
$var wire 1 r; not_NOR_2NAND $end
$var wire 1 s; Cin $end

$scope module xor1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 k; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 k; in1 $end
$var wire 1 [; in2 $end
$var wire 1 l; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )7 in1 $end
$var wire 1 97 in2 $end
$var wire 1 m; out $end
$upscope $end

$scope module not1 $end
$var wire 1 m; in1 $end
$var wire 1 n; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s; in1 $end
$var wire 1 k; in2 $end
$var wire 1 o; out $end
$upscope $end

$scope module not2 $end
$var wire 1 o; in1 $end
$var wire 1 p; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 n; in1 $end
$var wire 1 p; in2 $end
$var wire 1 q; out $end
$upscope $end

$scope module not3 $end
$var wire 1 q; in1 $end
$var wire 1 r; out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 ]; s $end
$var wire 1 t; c_out $end
$var wire 1 (7 a $end
$var wire 1 87 b $end
$var wire 1 Z; c_in $end
$var wire 1 u; xor_AB $end
$var wire 1 v; xor_ABCin $end
$var wire 1 w; NAND_AB $end
$var wire 1 x; not_NAND_AB $end
$var wire 1 y; NAND_Cin_xor_AB $end
$var wire 1 z; not_NAND_Cin_xor_AB $end
$var wire 1 {; NOR_2NAND $end
$var wire 1 |; not_NOR_2NAND $end
$var wire 1 }; Cin $end

$scope module xor1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 u; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u; in1 $end
$var wire 1 Z; in2 $end
$var wire 1 v; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (7 in1 $end
$var wire 1 87 in2 $end
$var wire 1 w; out $end
$upscope $end

$scope module not1 $end
$var wire 1 w; in1 $end
$var wire 1 x; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }; in1 $end
$var wire 1 u; in2 $end
$var wire 1 y; out $end
$upscope $end

$scope module not2 $end
$var wire 1 y; in1 $end
$var wire 1 z; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x; in1 $end
$var wire 1 z; in2 $end
$var wire 1 {; out $end
$upscope $end

$scope module not3 $end
$var wire 1 {; in1 $end
$var wire 1 |; out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 \; s $end
$var wire 1 ~; c_out $end
$var wire 1 '7 a $end
$var wire 1 77 b $end
$var wire 1 Y; c_in $end
$var wire 1 !< xor_AB $end
$var wire 1 "< xor_ABCin $end
$var wire 1 #< NAND_AB $end
$var wire 1 $< not_NAND_AB $end
$var wire 1 %< NAND_Cin_xor_AB $end
$var wire 1 &< not_NAND_Cin_xor_AB $end
$var wire 1 '< NOR_2NAND $end
$var wire 1 (< not_NOR_2NAND $end
$var wire 1 )< Cin $end

$scope module xor1 $end
$var wire 1 '7 in1 $end
$var wire 1 77 in2 $end
$var wire 1 !< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 !< in1 $end
$var wire 1 Y; in2 $end
$var wire 1 "< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '7 in1 $end
$var wire 1 77 in2 $end
$var wire 1 #< out $end
$upscope $end

$scope module not1 $end
$var wire 1 #< in1 $end
$var wire 1 $< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )< in1 $end
$var wire 1 !< in2 $end
$var wire 1 %< out $end
$upscope $end

$scope module not2 $end
$var wire 1 %< in1 $end
$var wire 1 &< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $< in1 $end
$var wire 1 &< in2 $end
$var wire 1 '< out $end
$upscope $end

$scope module not3 $end
$var wire 1 '< in1 $end
$var wire 1 (< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var wire 1 G; sum [3] $end
$var wire 1 H; sum [2] $end
$var wire 1 I; sum [1] $end
$var wire 1 J; sum [0] $end
$var wire 1 +< c_out $end
$var wire 1 #7 a [3] $end
$var wire 1 $7 a [2] $end
$var wire 1 %7 a [1] $end
$var wire 1 &7 a [0] $end
$var wire 1 37 b [3] $end
$var wire 1 47 b [2] $end
$var wire 1 57 b [1] $end
$var wire 1 67 b [0] $end
$var wire 1 >; c_in $end
$var wire 1 ,< gen [3] $end
$var wire 1 -< gen [2] $end
$var wire 1 .< gen [1] $end
$var wire 1 /< gen [0] $end
$var wire 1 0< prop [3] $end
$var wire 1 1< prop [2] $end
$var wire 1 2< prop [1] $end
$var wire 1 3< prop [0] $end
$var wire 1 4< carry [2] $end
$var wire 1 5< carry [1] $end
$var wire 1 6< carry [0] $end
$var wire 1 7< fa_sum [3] $end
$var wire 1 8< fa_sum [2] $end
$var wire 1 9< fa_sum [1] $end
$var wire 1 :< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 :< s $end
$var wire 1 ;< c_out $end
$var wire 1 &7 a $end
$var wire 1 67 b $end
$var wire 1 >; c_in $end
$var wire 1 << xor_AB $end
$var wire 1 =< xor_ABCin $end
$var wire 1 >< NAND_AB $end
$var wire 1 ?< not_NAND_AB $end
$var wire 1 @< NAND_Cin_xor_AB $end
$var wire 1 A< not_NAND_Cin_xor_AB $end
$var wire 1 B< NOR_2NAND $end
$var wire 1 C< not_NOR_2NAND $end
$var wire 1 D< Cin $end

$scope module xor1 $end
$var wire 1 &7 in1 $end
$var wire 1 67 in2 $end
$var wire 1 << out $end
$upscope $end

$scope module xor2 $end
$var wire 1 << in1 $end
$var wire 1 >; in2 $end
$var wire 1 =< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &7 in1 $end
$var wire 1 67 in2 $end
$var wire 1 >< out $end
$upscope $end

$scope module not1 $end
$var wire 1 >< in1 $end
$var wire 1 ?< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 D< in1 $end
$var wire 1 << in2 $end
$var wire 1 @< out $end
$upscope $end

$scope module not2 $end
$var wire 1 @< in1 $end
$var wire 1 A< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ?< in1 $end
$var wire 1 A< in2 $end
$var wire 1 B< out $end
$upscope $end

$scope module not3 $end
$var wire 1 B< in1 $end
$var wire 1 C< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 9< s $end
$var wire 1 E< c_out $end
$var wire 1 %7 a $end
$var wire 1 57 b $end
$var wire 1 6< c_in $end
$var wire 1 F< xor_AB $end
$var wire 1 G< xor_ABCin $end
$var wire 1 H< NAND_AB $end
$var wire 1 I< not_NAND_AB $end
$var wire 1 J< NAND_Cin_xor_AB $end
$var wire 1 K< not_NAND_Cin_xor_AB $end
$var wire 1 L< NOR_2NAND $end
$var wire 1 M< not_NOR_2NAND $end
$var wire 1 N< Cin $end

$scope module xor1 $end
$var wire 1 %7 in1 $end
$var wire 1 57 in2 $end
$var wire 1 F< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 F< in1 $end
$var wire 1 6< in2 $end
$var wire 1 G< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %7 in1 $end
$var wire 1 57 in2 $end
$var wire 1 H< out $end
$upscope $end

$scope module not1 $end
$var wire 1 H< in1 $end
$var wire 1 I< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 N< in1 $end
$var wire 1 F< in2 $end
$var wire 1 J< out $end
$upscope $end

$scope module not2 $end
$var wire 1 J< in1 $end
$var wire 1 K< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 I< in1 $end
$var wire 1 K< in2 $end
$var wire 1 L< out $end
$upscope $end

$scope module not3 $end
$var wire 1 L< in1 $end
$var wire 1 M< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 8< s $end
$var wire 1 O< c_out $end
$var wire 1 $7 a $end
$var wire 1 47 b $end
$var wire 1 5< c_in $end
$var wire 1 P< xor_AB $end
$var wire 1 Q< xor_ABCin $end
$var wire 1 R< NAND_AB $end
$var wire 1 S< not_NAND_AB $end
$var wire 1 T< NAND_Cin_xor_AB $end
$var wire 1 U< not_NAND_Cin_xor_AB $end
$var wire 1 V< NOR_2NAND $end
$var wire 1 W< not_NOR_2NAND $end
$var wire 1 X< Cin $end

$scope module xor1 $end
$var wire 1 $7 in1 $end
$var wire 1 47 in2 $end
$var wire 1 P< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P< in1 $end
$var wire 1 5< in2 $end
$var wire 1 Q< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $7 in1 $end
$var wire 1 47 in2 $end
$var wire 1 R< out $end
$upscope $end

$scope module not1 $end
$var wire 1 R< in1 $end
$var wire 1 S< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X< in1 $end
$var wire 1 P< in2 $end
$var wire 1 T< out $end
$upscope $end

$scope module not2 $end
$var wire 1 T< in1 $end
$var wire 1 U< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S< in1 $end
$var wire 1 U< in2 $end
$var wire 1 V< out $end
$upscope $end

$scope module not3 $end
$var wire 1 V< in1 $end
$var wire 1 W< out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 7< s $end
$var wire 1 Y< c_out $end
$var wire 1 #7 a $end
$var wire 1 37 b $end
$var wire 1 4< c_in $end
$var wire 1 Z< xor_AB $end
$var wire 1 [< xor_ABCin $end
$var wire 1 \< NAND_AB $end
$var wire 1 ]< not_NAND_AB $end
$var wire 1 ^< NAND_Cin_xor_AB $end
$var wire 1 _< not_NAND_Cin_xor_AB $end
$var wire 1 `< NOR_2NAND $end
$var wire 1 a< not_NOR_2NAND $end
$var wire 1 b< Cin $end

$scope module xor1 $end
$var wire 1 #7 in1 $end
$var wire 1 37 in2 $end
$var wire 1 Z< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 Z< in1 $end
$var wire 1 4< in2 $end
$var wire 1 [< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #7 in1 $end
$var wire 1 37 in2 $end
$var wire 1 \< out $end
$upscope $end

$scope module not1 $end
$var wire 1 \< in1 $end
$var wire 1 ]< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 b< in1 $end
$var wire 1 Z< in2 $end
$var wire 1 ^< out $end
$upscope $end

$scope module not2 $end
$var wire 1 ^< in1 $end
$var wire 1 _< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ]< in1 $end
$var wire 1 _< in2 $end
$var wire 1 `< out $end
$upscope $end

$scope module not3 $end
$var wire 1 `< in1 $end
$var wire 1 a< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var wire 1 C; sum [3] $end
$var wire 1 D; sum [2] $end
$var wire 1 E; sum [1] $end
$var wire 1 F; sum [0] $end
$var wire 1 d< c_out $end
$var wire 1 }6 a [3] $end
$var wire 1 ~6 a [2] $end
$var wire 1 !7 a [1] $end
$var wire 1 "7 a [0] $end
$var wire 1 /7 b [3] $end
$var wire 1 07 b [2] $end
$var wire 1 17 b [1] $end
$var wire 1 27 b [0] $end
$var wire 1 =; c_in $end
$var wire 1 e< gen [3] $end
$var wire 1 f< gen [2] $end
$var wire 1 g< gen [1] $end
$var wire 1 h< gen [0] $end
$var wire 1 i< prop [3] $end
$var wire 1 j< prop [2] $end
$var wire 1 k< prop [1] $end
$var wire 1 l< prop [0] $end
$var wire 1 m< carry [2] $end
$var wire 1 n< carry [1] $end
$var wire 1 o< carry [0] $end
$var wire 1 p< fa_sum [3] $end
$var wire 1 q< fa_sum [2] $end
$var wire 1 r< fa_sum [1] $end
$var wire 1 s< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 s< s $end
$var wire 1 t< c_out $end
$var wire 1 "7 a $end
$var wire 1 27 b $end
$var wire 1 =; c_in $end
$var wire 1 u< xor_AB $end
$var wire 1 v< xor_ABCin $end
$var wire 1 w< NAND_AB $end
$var wire 1 x< not_NAND_AB $end
$var wire 1 y< NAND_Cin_xor_AB $end
$var wire 1 z< not_NAND_Cin_xor_AB $end
$var wire 1 {< NOR_2NAND $end
$var wire 1 |< not_NOR_2NAND $end
$var wire 1 }< Cin $end

$scope module xor1 $end
$var wire 1 "7 in1 $end
$var wire 1 27 in2 $end
$var wire 1 u< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u< in1 $end
$var wire 1 =; in2 $end
$var wire 1 v< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 "7 in1 $end
$var wire 1 27 in2 $end
$var wire 1 w< out $end
$upscope $end

$scope module not1 $end
$var wire 1 w< in1 $end
$var wire 1 x< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }< in1 $end
$var wire 1 u< in2 $end
$var wire 1 y< out $end
$upscope $end

$scope module not2 $end
$var wire 1 y< in1 $end
$var wire 1 z< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x< in1 $end
$var wire 1 z< in2 $end
$var wire 1 {< out $end
$upscope $end

$scope module not3 $end
$var wire 1 {< in1 $end
$var wire 1 |< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 r< s $end
$var wire 1 ~< c_out $end
$var wire 1 !7 a $end
$var wire 1 17 b $end
$var wire 1 o< c_in $end
$var wire 1 != xor_AB $end
$var wire 1 "= xor_ABCin $end
$var wire 1 #= NAND_AB $end
$var wire 1 $= not_NAND_AB $end
$var wire 1 %= NAND_Cin_xor_AB $end
$var wire 1 &= not_NAND_Cin_xor_AB $end
$var wire 1 '= NOR_2NAND $end
$var wire 1 (= not_NOR_2NAND $end
$var wire 1 )= Cin $end

$scope module xor1 $end
$var wire 1 !7 in1 $end
$var wire 1 17 in2 $end
$var wire 1 != out $end
$upscope $end

$scope module xor2 $end
$var wire 1 != in1 $end
$var wire 1 o< in2 $end
$var wire 1 "= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 !7 in1 $end
$var wire 1 17 in2 $end
$var wire 1 #= out $end
$upscope $end

$scope module not1 $end
$var wire 1 #= in1 $end
$var wire 1 $= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )= in1 $end
$var wire 1 != in2 $end
$var wire 1 %= out $end
$upscope $end

$scope module not2 $end
$var wire 1 %= in1 $end
$var wire 1 &= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 $= in1 $end
$var wire 1 &= in2 $end
$var wire 1 '= out $end
$upscope $end

$scope module not3 $end
$var wire 1 '= in1 $end
$var wire 1 (= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 q< s $end
$var wire 1 *= c_out $end
$var wire 1 ~6 a $end
$var wire 1 07 b $end
$var wire 1 n< c_in $end
$var wire 1 += xor_AB $end
$var wire 1 ,= xor_ABCin $end
$var wire 1 -= NAND_AB $end
$var wire 1 .= not_NAND_AB $end
$var wire 1 /= NAND_Cin_xor_AB $end
$var wire 1 0= not_NAND_Cin_xor_AB $end
$var wire 1 1= NOR_2NAND $end
$var wire 1 2= not_NOR_2NAND $end
$var wire 1 3= Cin $end

$scope module xor1 $end
$var wire 1 ~6 in1 $end
$var wire 1 07 in2 $end
$var wire 1 += out $end
$upscope $end

$scope module xor2 $end
$var wire 1 += in1 $end
$var wire 1 n< in2 $end
$var wire 1 ,= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ~6 in1 $end
$var wire 1 07 in2 $end
$var wire 1 -= out $end
$upscope $end

$scope module not1 $end
$var wire 1 -= in1 $end
$var wire 1 .= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3= in1 $end
$var wire 1 += in2 $end
$var wire 1 /= out $end
$upscope $end

$scope module not2 $end
$var wire 1 /= in1 $end
$var wire 1 0= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .= in1 $end
$var wire 1 0= in2 $end
$var wire 1 1= out $end
$upscope $end

$scope module not3 $end
$var wire 1 1= in1 $end
$var wire 1 2= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 p< s $end
$var wire 1 4= c_out $end
$var wire 1 }6 a $end
$var wire 1 /7 b $end
$var wire 1 m< c_in $end
$var wire 1 5= xor_AB $end
$var wire 1 6= xor_ABCin $end
$var wire 1 7= NAND_AB $end
$var wire 1 8= not_NAND_AB $end
$var wire 1 9= NAND_Cin_xor_AB $end
$var wire 1 := not_NAND_Cin_xor_AB $end
$var wire 1 ;= NOR_2NAND $end
$var wire 1 <= not_NOR_2NAND $end
$var wire 1 == Cin $end

$scope module xor1 $end
$var wire 1 }6 in1 $end
$var wire 1 /7 in2 $end
$var wire 1 5= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5= in1 $end
$var wire 1 m< in2 $end
$var wire 1 6= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 }6 in1 $end
$var wire 1 /7 in2 $end
$var wire 1 7= out $end
$upscope $end

$scope module not1 $end
$var wire 1 7= in1 $end
$var wire 1 8= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 == in1 $end
$var wire 1 5= in2 $end
$var wire 1 9= out $end
$upscope $end

$scope module not2 $end
$var wire 1 9= in1 $end
$var wire 1 := out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8= in1 $end
$var wire 1 := in2 $end
$var wire 1 ;= out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;= in1 $end
$var wire 1 <= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var wire 1 ?; sum [3] $end
$var wire 1 @; sum [2] $end
$var wire 1 A; sum [1] $end
$var wire 1 B; sum [0] $end
$var wire 1 ?= c_out $end
$var wire 1 y6 a [3] $end
$var wire 1 z6 a [2] $end
$var wire 1 {6 a [1] $end
$var wire 1 |6 a [0] $end
$var wire 1 +7 b [3] $end
$var wire 1 ,7 b [2] $end
$var wire 1 -7 b [1] $end
$var wire 1 .7 b [0] $end
$var wire 1 <; c_in $end
$var wire 1 @= gen [3] $end
$var wire 1 A= gen [2] $end
$var wire 1 B= gen [1] $end
$var wire 1 C= gen [0] $end
$var wire 1 D= prop [3] $end
$var wire 1 E= prop [2] $end
$var wire 1 F= prop [1] $end
$var wire 1 G= prop [0] $end
$var wire 1 H= carry [2] $end
$var wire 1 I= carry [1] $end
$var wire 1 J= carry [0] $end
$var wire 1 K= fa_sum [3] $end
$var wire 1 L= fa_sum [2] $end
$var wire 1 M= fa_sum [1] $end
$var wire 1 N= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 N= s $end
$var wire 1 O= c_out $end
$var wire 1 |6 a $end
$var wire 1 .7 b $end
$var wire 1 <; c_in $end
$var wire 1 P= xor_AB $end
$var wire 1 Q= xor_ABCin $end
$var wire 1 R= NAND_AB $end
$var wire 1 S= not_NAND_AB $end
$var wire 1 T= NAND_Cin_xor_AB $end
$var wire 1 U= not_NAND_Cin_xor_AB $end
$var wire 1 V= NOR_2NAND $end
$var wire 1 W= not_NOR_2NAND $end
$var wire 1 X= Cin $end

$scope module xor1 $end
$var wire 1 |6 in1 $end
$var wire 1 .7 in2 $end
$var wire 1 P= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P= in1 $end
$var wire 1 <; in2 $end
$var wire 1 Q= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 |6 in1 $end
$var wire 1 .7 in2 $end
$var wire 1 R= out $end
$upscope $end

$scope module not1 $end
$var wire 1 R= in1 $end
$var wire 1 S= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X= in1 $end
$var wire 1 P= in2 $end
$var wire 1 T= out $end
$upscope $end

$scope module not2 $end
$var wire 1 T= in1 $end
$var wire 1 U= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S= in1 $end
$var wire 1 U= in2 $end
$var wire 1 V= out $end
$upscope $end

$scope module not3 $end
$var wire 1 V= in1 $end
$var wire 1 W= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 M= s $end
$var wire 1 Y= c_out $end
$var wire 1 {6 a $end
$var wire 1 -7 b $end
$var wire 1 J= c_in $end
$var wire 1 Z= xor_AB $end
$var wire 1 [= xor_ABCin $end
$var wire 1 \= NAND_AB $end
$var wire 1 ]= not_NAND_AB $end
$var wire 1 ^= NAND_Cin_xor_AB $end
$var wire 1 _= not_NAND_Cin_xor_AB $end
$var wire 1 `= NOR_2NAND $end
$var wire 1 a= not_NOR_2NAND $end
$var wire 1 b= Cin $end

$scope module xor1 $end
$var wire 1 {6 in1 $end
$var wire 1 -7 in2 $end
$var wire 1 Z= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 Z= in1 $end
$var wire 1 J= in2 $end
$var wire 1 [= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 {6 in1 $end
$var wire 1 -7 in2 $end
$var wire 1 \= out $end
$upscope $end

$scope module not1 $end
$var wire 1 \= in1 $end
$var wire 1 ]= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 b= in1 $end
$var wire 1 Z= in2 $end
$var wire 1 ^= out $end
$upscope $end

$scope module not2 $end
$var wire 1 ^= in1 $end
$var wire 1 _= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ]= in1 $end
$var wire 1 _= in2 $end
$var wire 1 `= out $end
$upscope $end

$scope module not3 $end
$var wire 1 `= in1 $end
$var wire 1 a= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 L= s $end
$var wire 1 c= c_out $end
$var wire 1 z6 a $end
$var wire 1 ,7 b $end
$var wire 1 I= c_in $end
$var wire 1 d= xor_AB $end
$var wire 1 e= xor_ABCin $end
$var wire 1 f= NAND_AB $end
$var wire 1 g= not_NAND_AB $end
$var wire 1 h= NAND_Cin_xor_AB $end
$var wire 1 i= not_NAND_Cin_xor_AB $end
$var wire 1 j= NOR_2NAND $end
$var wire 1 k= not_NOR_2NAND $end
$var wire 1 l= Cin $end

$scope module xor1 $end
$var wire 1 z6 in1 $end
$var wire 1 ,7 in2 $end
$var wire 1 d= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d= in1 $end
$var wire 1 I= in2 $end
$var wire 1 e= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 z6 in1 $end
$var wire 1 ,7 in2 $end
$var wire 1 f= out $end
$upscope $end

$scope module not1 $end
$var wire 1 f= in1 $end
$var wire 1 g= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l= in1 $end
$var wire 1 d= in2 $end
$var wire 1 h= out $end
$upscope $end

$scope module not2 $end
$var wire 1 h= in1 $end
$var wire 1 i= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g= in1 $end
$var wire 1 i= in2 $end
$var wire 1 j= out $end
$upscope $end

$scope module not3 $end
$var wire 1 j= in1 $end
$var wire 1 k= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 K= s $end
$var wire 1 m= c_out $end
$var wire 1 y6 a $end
$var wire 1 +7 b $end
$var wire 1 H= c_in $end
$var wire 1 n= xor_AB $end
$var wire 1 o= xor_ABCin $end
$var wire 1 p= NAND_AB $end
$var wire 1 q= not_NAND_AB $end
$var wire 1 r= NAND_Cin_xor_AB $end
$var wire 1 s= not_NAND_Cin_xor_AB $end
$var wire 1 t= NOR_2NAND $end
$var wire 1 u= not_NOR_2NAND $end
$var wire 1 v= Cin $end

$scope module xor1 $end
$var wire 1 y6 in1 $end
$var wire 1 +7 in2 $end
$var wire 1 n= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n= in1 $end
$var wire 1 H= in2 $end
$var wire 1 o= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 y6 in1 $end
$var wire 1 +7 in2 $end
$var wire 1 p= out $end
$upscope $end

$scope module not1 $end
$var wire 1 p= in1 $end
$var wire 1 q= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v= in1 $end
$var wire 1 n= in2 $end
$var wire 1 r= out $end
$upscope $end

$scope module not2 $end
$var wire 1 r= in1 $end
$var wire 1 s= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q= in1 $end
$var wire 1 s= in2 $end
$var wire 1 t= out $end
$upscope $end

$scope module not3 $end
$var wire 1 t= in1 $end
$var wire 1 u= out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 42 InA [15] $end
$var wire 1 52 InA [14] $end
$var wire 1 62 InA [13] $end
$var wire 1 72 InA [12] $end
$var wire 1 82 InA [11] $end
$var wire 1 92 InA [10] $end
$var wire 1 :2 InA [9] $end
$var wire 1 ;2 InA [8] $end
$var wire 1 <2 InA [7] $end
$var wire 1 =2 InA [6] $end
$var wire 1 >2 InA [5] $end
$var wire 1 ?2 InA [4] $end
$var wire 1 @2 InA [3] $end
$var wire 1 A2 InA [2] $end
$var wire 1 B2 InA [1] $end
$var wire 1 C2 InA [0] $end
$var wire 1 w= InB [15] $end
$var wire 1 x= InB [14] $end
$var wire 1 y= InB [13] $end
$var wire 1 z= InB [12] $end
$var wire 1 {= InB [11] $end
$var wire 1 |= InB [10] $end
$var wire 1 }= InB [9] $end
$var wire 1 ~= InB [8] $end
$var wire 1 !> InB [7] $end
$var wire 1 "> InB [6] $end
$var wire 1 #> InB [5] $end
$var wire 1 $> InB [4] $end
$var wire 1 %> InB [3] $end
$var wire 1 &> InB [2] $end
$var wire 1 '> InB [1] $end
$var wire 1 (> InB [0] $end
$var wire 1 }7 Out $end
$var wire 1 )> difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 l2 Out $end
$var wire 1 *> difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 ]3 Out $end
$var wire 1 +> difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 l( SendNOP_In $end
$var wire 1 i( SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 i( q $end
$var wire 1 l( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 /$ SgnExt [15] $end
$var wire 1 0$ SgnExt [14] $end
$var wire 1 1$ SgnExt [13] $end
$var wire 1 2$ SgnExt [12] $end
$var wire 1 3$ SgnExt [11] $end
$var wire 1 4$ SgnExt [10] $end
$var wire 1 5$ SgnExt [9] $end
$var wire 1 6$ SgnExt [8] $end
$var wire 1 7$ SgnExt [7] $end
$var wire 1 8$ SgnExt [6] $end
$var wire 1 9$ SgnExt [5] $end
$var wire 1 :$ SgnExt [4] $end
$var wire 1 ;$ SgnExt [3] $end
$var wire 1 <$ SgnExt [2] $end
$var wire 1 =$ SgnExt [1] $end
$var wire 1 >$ SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 ;? MuxImmSrc [15] $end
$var wire 1 <? MuxImmSrc [14] $end
$var wire 1 =? MuxImmSrc [13] $end
$var wire 1 >? MuxImmSrc [12] $end
$var wire 1 ?? MuxImmSrc [11] $end
$var wire 1 @? MuxImmSrc [10] $end
$var wire 1 A? MuxImmSrc [9] $end
$var wire 1 B? MuxImmSrc [8] $end
$var wire 1 C? MuxImmSrc [7] $end
$var wire 1 D? MuxImmSrc [6] $end
$var wire 1 E? MuxImmSrc [5] $end
$var wire 1 F? MuxImmSrc [4] $end
$var wire 1 G? MuxImmSrc [3] $end
$var wire 1 H? MuxImmSrc [2] $end
$var wire 1 I? MuxImmSrc [1] $end
$var wire 1 J? MuxImmSrc [0] $end
$var wire 1 K? adderOut [15] $end
$var wire 1 L? adderOut [14] $end
$var wire 1 M? adderOut [13] $end
$var wire 1 N? adderOut [12] $end
$var wire 1 O? adderOut [11] $end
$var wire 1 P? adderOut [10] $end
$var wire 1 Q? adderOut [9] $end
$var wire 1 R? adderOut [8] $end
$var wire 1 S? adderOut [7] $end
$var wire 1 T? adderOut [6] $end
$var wire 1 U? adderOut [5] $end
$var wire 1 V? adderOut [4] $end
$var wire 1 W? adderOut [3] $end
$var wire 1 X? adderOut [2] $end
$var wire 1 Y? adderOut [1] $end
$var wire 1 Z? adderOut [0] $end
$var wire 1 [? MuxBranchSrc [15] $end
$var wire 1 \? MuxBranchSrc [14] $end
$var wire 1 ]? MuxBranchSrc [13] $end
$var wire 1 ^? MuxBranchSrc [12] $end
$var wire 1 _? MuxBranchSrc [11] $end
$var wire 1 `? MuxBranchSrc [10] $end
$var wire 1 a? MuxBranchSrc [9] $end
$var wire 1 b? MuxBranchSrc [8] $end
$var wire 1 c? MuxBranchSrc [7] $end
$var wire 1 d? MuxBranchSrc [6] $end
$var wire 1 e? MuxBranchSrc [5] $end
$var wire 1 f? MuxBranchSrc [4] $end
$var wire 1 g? MuxBranchSrc [3] $end
$var wire 1 h? MuxBranchSrc [2] $end
$var wire 1 i? MuxBranchSrc [1] $end
$var wire 1 j? MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 ;? B [15] $end
$var wire 1 <? B [14] $end
$var wire 1 =? B [13] $end
$var wire 1 >? B [12] $end
$var wire 1 ?? B [11] $end
$var wire 1 @? B [10] $end
$var wire 1 A? B [9] $end
$var wire 1 B? B [8] $end
$var wire 1 C? B [7] $end
$var wire 1 D? B [6] $end
$var wire 1 E? B [5] $end
$var wire 1 F? B [4] $end
$var wire 1 G? B [3] $end
$var wire 1 H? B [2] $end
$var wire 1 I? B [1] $end
$var wire 1 J? B [0] $end
$var wire 1 K? S [15] $end
$var wire 1 L? S [14] $end
$var wire 1 M? S [13] $end
$var wire 1 N? S [12] $end
$var wire 1 O? S [11] $end
$var wire 1 P? S [10] $end
$var wire 1 Q? S [9] $end
$var wire 1 R? S [8] $end
$var wire 1 S? S [7] $end
$var wire 1 T? S [6] $end
$var wire 1 U? S [5] $end
$var wire 1 V? S [4] $end
$var wire 1 W? S [3] $end
$var wire 1 X? S [2] $end
$var wire 1 Y? S [1] $end
$var wire 1 Z? S [0] $end
$var wire 1 k? Cout $end
$var wire 1 l? Cout0 $end
$var wire 1 m? Cout1 $end
$var wire 1 n? Cout2 $end
$var wire 1 o? Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 G? B [3] $end
$var wire 1 H? B [2] $end
$var wire 1 I? B [1] $end
$var wire 1 J? B [0] $end
$var wire 1 o? Cin $end
$var wire 1 W? S [3] $end
$var wire 1 X? S [2] $end
$var wire 1 Y? S [1] $end
$var wire 1 Z? S [0] $end
$var wire 1 l? Cout $end
$var wire 1 p? Cout0 $end
$var wire 1 q? Cout1 $end
$var wire 1 r? Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 J? B $end
$var wire 1 o? Cin $end
$var wire 1 Z? S $end
$var wire 1 p? Cout $end
$var wire 1 s? xor_AB $end
$var wire 1 t? xor_ABCin $end
$var wire 1 u? NAND_AB $end
$var wire 1 v? not_NAND_AB $end
$var wire 1 w? NAND_Cin_xor_AB $end
$var wire 1 x? not_NAND_Cin_xor_AB $end
$var wire 1 y? NOR_2NAND $end
$var wire 1 z? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 J? in2 $end
$var wire 1 s? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s? in1 $end
$var wire 1 o? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 J? in2 $end
$var wire 1 u? out $end
$upscope $end

$scope module not1 $end
$var wire 1 u? in1 $end
$var wire 1 v? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o? in1 $end
$var wire 1 s? in2 $end
$var wire 1 w? out $end
$upscope $end

$scope module not2 $end
$var wire 1 w? in1 $end
$var wire 1 x? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v? in1 $end
$var wire 1 x? in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module not3 $end
$var wire 1 y? in1 $end
$var wire 1 z? out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 I? B $end
$var wire 1 p? Cin $end
$var wire 1 Y? S $end
$var wire 1 q? Cout $end
$var wire 1 {? xor_AB $end
$var wire 1 |? xor_ABCin $end
$var wire 1 }? NAND_AB $end
$var wire 1 ~? not_NAND_AB $end
$var wire 1 !@ NAND_Cin_xor_AB $end
$var wire 1 "@ not_NAND_Cin_xor_AB $end
$var wire 1 #@ NOR_2NAND $end
$var wire 1 $@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 I? in2 $end
$var wire 1 {? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 {? in1 $end
$var wire 1 p? in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 I? in2 $end
$var wire 1 }? out $end
$upscope $end

$scope module not1 $end
$var wire 1 }? in1 $end
$var wire 1 ~? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p? in1 $end
$var wire 1 {? in2 $end
$var wire 1 !@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 !@ in1 $end
$var wire 1 "@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ~? in1 $end
$var wire 1 "@ in2 $end
$var wire 1 #@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 #@ in1 $end
$var wire 1 $@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 H? B $end
$var wire 1 q? Cin $end
$var wire 1 X? S $end
$var wire 1 r? Cout $end
$var wire 1 %@ xor_AB $end
$var wire 1 &@ xor_ABCin $end
$var wire 1 '@ NAND_AB $end
$var wire 1 (@ not_NAND_AB $end
$var wire 1 )@ NAND_Cin_xor_AB $end
$var wire 1 *@ not_NAND_Cin_xor_AB $end
$var wire 1 +@ NOR_2NAND $end
$var wire 1 ,@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 H? in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %@ in1 $end
$var wire 1 q? in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 H? in2 $end
$var wire 1 '@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 '@ in1 $end
$var wire 1 (@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q? in1 $end
$var wire 1 %@ in2 $end
$var wire 1 )@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 )@ in1 $end
$var wire 1 *@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (@ in1 $end
$var wire 1 *@ in2 $end
$var wire 1 +@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 +@ in1 $end
$var wire 1 ,@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 G? B $end
$var wire 1 r? Cin $end
$var wire 1 W? S $end
$var wire 1 l? Cout $end
$var wire 1 -@ xor_AB $end
$var wire 1 .@ xor_ABCin $end
$var wire 1 /@ NAND_AB $end
$var wire 1 0@ not_NAND_AB $end
$var wire 1 1@ NAND_Cin_xor_AB $end
$var wire 1 2@ not_NAND_Cin_xor_AB $end
$var wire 1 3@ NOR_2NAND $end
$var wire 1 4@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 G? in2 $end
$var wire 1 -@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -@ in1 $end
$var wire 1 r? in2 $end
$var wire 1 .@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 G? in2 $end
$var wire 1 /@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 /@ in1 $end
$var wire 1 0@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r? in1 $end
$var wire 1 -@ in2 $end
$var wire 1 1@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 1@ in1 $end
$var wire 1 2@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0@ in1 $end
$var wire 1 2@ in2 $end
$var wire 1 3@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 3@ in1 $end
$var wire 1 4@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 C? B [3] $end
$var wire 1 D? B [2] $end
$var wire 1 E? B [1] $end
$var wire 1 F? B [0] $end
$var wire 1 l? Cin $end
$var wire 1 S? S [3] $end
$var wire 1 T? S [2] $end
$var wire 1 U? S [1] $end
$var wire 1 V? S [0] $end
$var wire 1 m? Cout $end
$var wire 1 5@ Cout0 $end
$var wire 1 6@ Cout1 $end
$var wire 1 7@ Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 F? B $end
$var wire 1 l? Cin $end
$var wire 1 V? S $end
$var wire 1 5@ Cout $end
$var wire 1 8@ xor_AB $end
$var wire 1 9@ xor_ABCin $end
$var wire 1 :@ NAND_AB $end
$var wire 1 ;@ not_NAND_AB $end
$var wire 1 <@ NAND_Cin_xor_AB $end
$var wire 1 =@ not_NAND_Cin_xor_AB $end
$var wire 1 >@ NOR_2NAND $end
$var wire 1 ?@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 F? in2 $end
$var wire 1 8@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8@ in1 $end
$var wire 1 l? in2 $end
$var wire 1 9@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 F? in2 $end
$var wire 1 :@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 :@ in1 $end
$var wire 1 ;@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l? in1 $end
$var wire 1 8@ in2 $end
$var wire 1 <@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 <@ in1 $end
$var wire 1 =@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;@ in1 $end
$var wire 1 =@ in2 $end
$var wire 1 >@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 >@ in1 $end
$var wire 1 ?@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 E? B $end
$var wire 1 5@ Cin $end
$var wire 1 U? S $end
$var wire 1 6@ Cout $end
$var wire 1 @@ xor_AB $end
$var wire 1 A@ xor_ABCin $end
$var wire 1 B@ NAND_AB $end
$var wire 1 C@ not_NAND_AB $end
$var wire 1 D@ NAND_Cin_xor_AB $end
$var wire 1 E@ not_NAND_Cin_xor_AB $end
$var wire 1 F@ NOR_2NAND $end
$var wire 1 G@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 E? in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 @@ in1 $end
$var wire 1 5@ in2 $end
$var wire 1 A@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 E? in2 $end
$var wire 1 B@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 B@ in1 $end
$var wire 1 C@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5@ in1 $end
$var wire 1 @@ in2 $end
$var wire 1 D@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 D@ in1 $end
$var wire 1 E@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 C@ in1 $end
$var wire 1 E@ in2 $end
$var wire 1 F@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 F@ in1 $end
$var wire 1 G@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 D? B $end
$var wire 1 6@ Cin $end
$var wire 1 T? S $end
$var wire 1 7@ Cout $end
$var wire 1 H@ xor_AB $end
$var wire 1 I@ xor_ABCin $end
$var wire 1 J@ NAND_AB $end
$var wire 1 K@ not_NAND_AB $end
$var wire 1 L@ NAND_Cin_xor_AB $end
$var wire 1 M@ not_NAND_Cin_xor_AB $end
$var wire 1 N@ NOR_2NAND $end
$var wire 1 O@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 D? in2 $end
$var wire 1 H@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 H@ in1 $end
$var wire 1 6@ in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 D? in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 J@ in1 $end
$var wire 1 K@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 6@ in1 $end
$var wire 1 H@ in2 $end
$var wire 1 L@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 L@ in1 $end
$var wire 1 M@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 K@ in1 $end
$var wire 1 M@ in2 $end
$var wire 1 N@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 N@ in1 $end
$var wire 1 O@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 C? B $end
$var wire 1 7@ Cin $end
$var wire 1 S? S $end
$var wire 1 m? Cout $end
$var wire 1 P@ xor_AB $end
$var wire 1 Q@ xor_ABCin $end
$var wire 1 R@ NAND_AB $end
$var wire 1 S@ not_NAND_AB $end
$var wire 1 T@ NAND_Cin_xor_AB $end
$var wire 1 U@ not_NAND_Cin_xor_AB $end
$var wire 1 V@ NOR_2NAND $end
$var wire 1 W@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 C? in2 $end
$var wire 1 P@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P@ in1 $end
$var wire 1 7@ in2 $end
$var wire 1 Q@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 C? in2 $end
$var wire 1 R@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 R@ in1 $end
$var wire 1 S@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7@ in1 $end
$var wire 1 P@ in2 $end
$var wire 1 T@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 T@ in1 $end
$var wire 1 U@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S@ in1 $end
$var wire 1 U@ in2 $end
$var wire 1 V@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 V@ in1 $end
$var wire 1 W@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 ?? B [3] $end
$var wire 1 @? B [2] $end
$var wire 1 A? B [1] $end
$var wire 1 B? B [0] $end
$var wire 1 m? Cin $end
$var wire 1 O? S [3] $end
$var wire 1 P? S [2] $end
$var wire 1 Q? S [1] $end
$var wire 1 R? S [0] $end
$var wire 1 n? Cout $end
$var wire 1 X@ Cout0 $end
$var wire 1 Y@ Cout1 $end
$var wire 1 Z@ Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 B? B $end
$var wire 1 m? Cin $end
$var wire 1 R? S $end
$var wire 1 X@ Cout $end
$var wire 1 [@ xor_AB $end
$var wire 1 \@ xor_ABCin $end
$var wire 1 ]@ NAND_AB $end
$var wire 1 ^@ not_NAND_AB $end
$var wire 1 _@ NAND_Cin_xor_AB $end
$var wire 1 `@ not_NAND_Cin_xor_AB $end
$var wire 1 a@ NOR_2NAND $end
$var wire 1 b@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 B? in2 $end
$var wire 1 [@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 [@ in1 $end
$var wire 1 m? in2 $end
$var wire 1 \@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 B? in2 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ]@ in1 $end
$var wire 1 ^@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 m? in1 $end
$var wire 1 [@ in2 $end
$var wire 1 _@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 _@ in1 $end
$var wire 1 `@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ^@ in1 $end
$var wire 1 `@ in2 $end
$var wire 1 a@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 a@ in1 $end
$var wire 1 b@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 A? B $end
$var wire 1 X@ Cin $end
$var wire 1 Q? S $end
$var wire 1 Y@ Cout $end
$var wire 1 c@ xor_AB $end
$var wire 1 d@ xor_ABCin $end
$var wire 1 e@ NAND_AB $end
$var wire 1 f@ not_NAND_AB $end
$var wire 1 g@ NAND_Cin_xor_AB $end
$var wire 1 h@ not_NAND_Cin_xor_AB $end
$var wire 1 i@ NOR_2NAND $end
$var wire 1 j@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 A? in2 $end
$var wire 1 c@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 c@ in1 $end
$var wire 1 X@ in2 $end
$var wire 1 d@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 A? in2 $end
$var wire 1 e@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 e@ in1 $end
$var wire 1 f@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X@ in1 $end
$var wire 1 c@ in2 $end
$var wire 1 g@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 g@ in1 $end
$var wire 1 h@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 f@ in1 $end
$var wire 1 h@ in2 $end
$var wire 1 i@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 i@ in1 $end
$var wire 1 j@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 @? B $end
$var wire 1 Y@ Cin $end
$var wire 1 P? S $end
$var wire 1 Z@ Cout $end
$var wire 1 k@ xor_AB $end
$var wire 1 l@ xor_ABCin $end
$var wire 1 m@ NAND_AB $end
$var wire 1 n@ not_NAND_AB $end
$var wire 1 o@ NAND_Cin_xor_AB $end
$var wire 1 p@ not_NAND_Cin_xor_AB $end
$var wire 1 q@ NOR_2NAND $end
$var wire 1 r@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 @? in2 $end
$var wire 1 k@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 k@ in1 $end
$var wire 1 Y@ in2 $end
$var wire 1 l@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 @? in2 $end
$var wire 1 m@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 m@ in1 $end
$var wire 1 n@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Y@ in1 $end
$var wire 1 k@ in2 $end
$var wire 1 o@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 o@ in1 $end
$var wire 1 p@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 n@ in1 $end
$var wire 1 p@ in2 $end
$var wire 1 q@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 q@ in1 $end
$var wire 1 r@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 ?? B $end
$var wire 1 Z@ Cin $end
$var wire 1 O? S $end
$var wire 1 n? Cout $end
$var wire 1 s@ xor_AB $end
$var wire 1 t@ xor_ABCin $end
$var wire 1 u@ NAND_AB $end
$var wire 1 v@ not_NAND_AB $end
$var wire 1 w@ NAND_Cin_xor_AB $end
$var wire 1 x@ not_NAND_Cin_xor_AB $end
$var wire 1 y@ NOR_2NAND $end
$var wire 1 z@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 ?? in2 $end
$var wire 1 s@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s@ in1 $end
$var wire 1 Z@ in2 $end
$var wire 1 t@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 ?? in2 $end
$var wire 1 u@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 u@ in1 $end
$var wire 1 v@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 w@ in1 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v@ in1 $end
$var wire 1 x@ in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 y@ in1 $end
$var wire 1 z@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 ;? B [3] $end
$var wire 1 <? B [2] $end
$var wire 1 =? B [1] $end
$var wire 1 >? B [0] $end
$var wire 1 n? Cin $end
$var wire 1 K? S [3] $end
$var wire 1 L? S [2] $end
$var wire 1 M? S [1] $end
$var wire 1 N? S [0] $end
$var wire 1 k? Cout $end
$var wire 1 {@ Cout0 $end
$var wire 1 |@ Cout1 $end
$var wire 1 }@ Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 >? B $end
$var wire 1 n? Cin $end
$var wire 1 N? S $end
$var wire 1 {@ Cout $end
$var wire 1 ~@ xor_AB $end
$var wire 1 !A xor_ABCin $end
$var wire 1 "A NAND_AB $end
$var wire 1 #A not_NAND_AB $end
$var wire 1 $A NAND_Cin_xor_AB $end
$var wire 1 %A not_NAND_Cin_xor_AB $end
$var wire 1 &A NOR_2NAND $end
$var wire 1 'A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 >? in2 $end
$var wire 1 ~@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~@ in1 $end
$var wire 1 n? in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 >? in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module not1 $end
$var wire 1 "A in1 $end
$var wire 1 #A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n? in1 $end
$var wire 1 ~@ in2 $end
$var wire 1 $A out $end
$upscope $end

$scope module not2 $end
$var wire 1 $A in1 $end
$var wire 1 %A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #A in1 $end
$var wire 1 %A in2 $end
$var wire 1 &A out $end
$upscope $end

$scope module not3 $end
$var wire 1 &A in1 $end
$var wire 1 'A out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 =? B $end
$var wire 1 {@ Cin $end
$var wire 1 M? S $end
$var wire 1 |@ Cout $end
$var wire 1 (A xor_AB $end
$var wire 1 )A xor_ABCin $end
$var wire 1 *A NAND_AB $end
$var wire 1 +A not_NAND_AB $end
$var wire 1 ,A NAND_Cin_xor_AB $end
$var wire 1 -A not_NAND_Cin_xor_AB $end
$var wire 1 .A NOR_2NAND $end
$var wire 1 /A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 =? in2 $end
$var wire 1 (A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 (A in1 $end
$var wire 1 {@ in2 $end
$var wire 1 )A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 =? in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module not1 $end
$var wire 1 *A in1 $end
$var wire 1 +A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 {@ in1 $end
$var wire 1 (A in2 $end
$var wire 1 ,A out $end
$upscope $end

$scope module not2 $end
$var wire 1 ,A in1 $end
$var wire 1 -A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 +A in1 $end
$var wire 1 -A in2 $end
$var wire 1 .A out $end
$upscope $end

$scope module not3 $end
$var wire 1 .A in1 $end
$var wire 1 /A out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 <? B $end
$var wire 1 |@ Cin $end
$var wire 1 L? S $end
$var wire 1 }@ Cout $end
$var wire 1 0A xor_AB $end
$var wire 1 1A xor_ABCin $end
$var wire 1 2A NAND_AB $end
$var wire 1 3A not_NAND_AB $end
$var wire 1 4A NAND_Cin_xor_AB $end
$var wire 1 5A not_NAND_Cin_xor_AB $end
$var wire 1 6A NOR_2NAND $end
$var wire 1 7A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 <? in2 $end
$var wire 1 0A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 0A in1 $end
$var wire 1 |@ in2 $end
$var wire 1 1A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 <? in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module not1 $end
$var wire 1 2A in1 $end
$var wire 1 3A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 |@ in1 $end
$var wire 1 0A in2 $end
$var wire 1 4A out $end
$upscope $end

$scope module not2 $end
$var wire 1 4A in1 $end
$var wire 1 5A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 3A in1 $end
$var wire 1 5A in2 $end
$var wire 1 6A out $end
$upscope $end

$scope module not3 $end
$var wire 1 6A in1 $end
$var wire 1 7A out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 ;? B $end
$var wire 1 }@ Cin $end
$var wire 1 K? S $end
$var wire 1 k? Cout $end
$var wire 1 8A xor_AB $end
$var wire 1 9A xor_ABCin $end
$var wire 1 :A NAND_AB $end
$var wire 1 ;A not_NAND_AB $end
$var wire 1 <A NAND_Cin_xor_AB $end
$var wire 1 =A not_NAND_Cin_xor_AB $end
$var wire 1 >A NOR_2NAND $end
$var wire 1 ?A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 ;? in2 $end
$var wire 1 8A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8A in1 $end
$var wire 1 }@ in2 $end
$var wire 1 9A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 ;? in2 $end
$var wire 1 :A out $end
$upscope $end

$scope module not1 $end
$var wire 1 :A in1 $end
$var wire 1 ;A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }@ in1 $end
$var wire 1 8A in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module not2 $end
$var wire 1 <A in1 $end
$var wire 1 =A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;A in1 $end
$var wire 1 =A in2 $end
$var wire 1 >A out $end
$upscope $end

$scope module not3 $end
$var wire 1 >A in1 $end
$var wire 1 ?A out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 @A enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 i( SendNOP_In $end
$var wire 1 j( SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end
$var wire 1 k% b_in $end
$var wire 1 `' b_out $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 j( q $end
$var wire 1 i( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 `' q $end
$var wire 1 k% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1:!
1;!
x=!
1m(
1n(
0|*
0{*
0z*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
1i*
b0 j*
0.+
0-+
0,+
0++
0*+
0)+
0(+
0'+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
b100000000000 >+
b100000000000 =+
b100000000000 <+
b100000000000 ;+
b100000000000 :+
b100000000000 9+
b100000000000 8+
b100000000000 7+
b100000000000 6+
b100000000000 5+
b100000000000 4+
b100000000000 3+
b100000000000 2+
b100000000000 1+
b100000000000 0+
b100000000000 /+
0N+
0M+
0L+
0K+
0J+
0I+
0H+
0G+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
x1,
x2,
bx 3,
x4,
x5,
bx 6,
bx 7,
x8,
x9,
x:,
x;,
x<,
x=,
bx >,
x?,
x@,
bx A,
bx B,
00.
0..
0,.
0*.
0(.
0&.
0$.
0".
0~-
0|-
0z-
0x-
0v-
0t-
0r-
0p-
0Q.
0O.
0M.
0K.
0I.
0G.
0E.
0C.
0A.
0?.
0=.
0;.
09.
07.
05.
03.
0r.
0p.
0n.
0l.
0j.
0h.
0f.
0d.
0b.
0`.
0^.
0\.
0Z.
0X.
0V.
0T.
05/
03/
01/
0//
0-/
0+/
0)/
0'/
0%/
0#/
0!/
0}.
0{.
0y.
0w.
0u.
0V/
0T/
0R/
0P/
0N/
0L/
0J/
0H/
0F/
0D/
0B/
0@/
0>/
0</
0:/
08/
0w/
0u/
0s/
0q/
0o/
0m/
0k/
0i/
0g/
0e/
0c/
0a/
0_/
0]/
0[/
0Y/
0:0
080
060
040
020
000
0.0
0,0
0*0
0(0
0&0
0$0
0"0
0~/
0|/
0z/
0[0
0Y0
0W0
0U0
0S0
0Q0
0O0
0M0
0K0
0I0
0G0
0E0
0C0
0A0
0?0
0=0
0r0
0q0
0f0
0g0
0u0
0t0
0s0
0w0
0v0
0h0
0i0
0z0
0y0
0x0
0j0
0,1
0+1
0*1
0)1
0(1
0'1
0&1
0%1
0$1
0#1
0"1
0!1
0~0
0}0
0|0
0{0
0<1
0;1
0:1
091
081
071
061
051
041
031
021
011
001
0/1
0.1
0-1
0L1
0K1
0J1
0I1
0H1
0G1
0F1
0E1
0D1
0C1
0B1
0A1
0@1
0?1
0>1
0=1
0\1
0[1
0Z1
0Y1
0X1
0W1
0V1
0U1
0T1
0S1
0R1
0Q1
0P1
0O1
0N1
0M1
0l1
0k1
0j1
0i1
0h1
0g1
0f1
0e1
0d1
0c1
0b1
0a1
0`1
0_1
0^1
0]1
0k0
0l0
0m0
0n0
0|1
0{1
0z1
0y1
0x1
0w1
0v1
0u1
0t1
0s1
0r1
0q1
0p1
0o1
0n1
0m1
0o0
0p0
0~1
0}1
002
0/2
0.2
0-2
0,2
0+2
0*2
0)2
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
032
022
012
0C>
0B>
0A>
0@>
0?>
0>>
0=>
0<>
0;>
0:>
09>
08>
07>
06>
05>
04>
0S>
0R>
0Q>
0P>
0O>
0N>
0M>
0L>
0K>
0J>
0I>
0H>
0G>
0F>
0E>
0D>
0,>
0->
0.>
0/>
00>
01>
0c>
0b>
0a>
0`>
0_>
0^>
0]>
0\>
0[>
0Z>
0Y>
0X>
0W>
0V>
0U>
0T>
0s>
0r>
0q>
0p>
0o>
0n>
0m>
0l>
0k>
0j>
0i>
0h>
0g>
0f>
0e>
0d>
0%?
0$?
0#?
0"?
0!?
0~>
0}>
0|>
0{>
0z>
0y>
0x>
0w>
0v>
0u>
0t>
05?
04?
03?
02?
01?
00?
0/?
0.?
0-?
0,?
0+?
0*?
0)?
0(?
0'?
0&?
02>
03>
07?
06?
0:?
09?
08?
1AA
b0 BA
0IA
0HA
0YA
0XA
0WA
0VA
0UA
0TA
0SA
0RA
0QA
0PA
0OA
0NA
0MA
0LA
0KA
0JA
0iA
0hA
0gA
0fA
0eA
0dA
0cA
0bA
0aA
0`A
0_A
0^A
0]A
0\A
0[A
0ZA
0yA
0xA
0wA
0vA
0uA
0tA
0sA
0rA
0qA
0pA
0oA
0nA
0mA
0lA
0kA
0jA
0+B
0*B
0)B
0(B
0'B
0&B
0%B
0$B
0#B
0"B
0!B
0~A
0}A
0|A
0{A
0zA
0EA
0FA
0.B
0-B
0,B
0GA
b10000 C,
b10000 n-
b10000 1.
b10000 R.
b10000 s.
b10000 6/
b10000 W/
b10000 x/
b10000 ;0
b10000 ~3
b100 !4
b10 "4
b10000 i4
b100 j4
b10000 =5
b100 >5
b10000 o5
b100 p5
b10000 C6
b100 D6
b10000 u6
b11 v6
b10000 ~7
b100 !8
b10 "8
b10000 c8
b100 d8
b10000 79
b100 89
b10000 i9
b100 j9
b10000 =:
b100 >:
b10000 o:
b10 p:
b10000 q:
b100 O;
b100 *<
b100 c<
b100 >=
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 <!
b1 p(
bx k*
b10000000000000000 l*
bx CA
b10000000000000000 DA
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x)!
x*!
x+!
x,!
x-!
17!
x8!
19!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
xN!
z^!
z]!
z\!
z[!
zZ!
zY!
zX!
zW!
zV!
zU!
zT!
zS!
zR!
zQ!
zP!
zO!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
xQ"
xR"
xT"
xS"
xV"
xU"
xW"
xX"
xY"
xZ"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xa$
x`$
x_$
xd$
xc$
xb$
xe$
xf$
xh$
xg$
xj$
xi$
xk$
xl$
xm$
xn$
xq$
xp$
xo$
xt$
xs$
xr$
xu$
xv$
xw$
xx$
xz$
xy$
x|$
x{$
x}$
x~$
x!%
x"%
x%%
x$%
x#%
x(%
x'%
x&%
x)%
x*%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xk%
xl%
xm%
xn%
xo%
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xR&
xT&
xS&
xW&
xV&
xU&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x;'
x:'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
xL'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
x_'
x^'
x]'
x`'
1a'
xb'
xr'
xq'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
xE(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
x$)
x%)
x&)
0')
0()
x))
x*)
x+)
x,)
1-)
0.)
1/)
00)
11)
02)
x3)
x4)
x5)
x6)
17)
08)
x9)
x:)
x;)
x<)
1=)
0>)
x?)
x@)
xA)
xB)
xC)
xD)
1E)
0F)
xG)
xH)
xI)
xJ)
xK)
xL)
xM)
xN)
xO)
1P)
0Q)
xR)
xS)
xT)
xU)
xV)
xW)
1X)
0Y)
xZ)
x[)
x\)
x])
x^)
x_)
1`)
0a)
xb)
xc)
xd)
xe)
xf)
xg)
1h)
0i)
xj)
xk)
xl)
xm)
xn)
xo)
xp)
xq)
xr)
1s)
0t)
xu)
xv)
xw)
xx)
xy)
xz)
1{)
0|)
x})
x~)
x!*
x"*
x#*
x$*
1%*
0&*
x'*
x(*
x)*
x**
x+*
x,*
1-*
0.*
x/*
x0*
x1*
x2*
x3*
x4*
x5*
x6*
x7*
18*
09*
x:*
x;*
x<*
x=*
x>*
x?*
1@*
0A*
xB*
xC*
xD*
xE*
xF*
xG*
1H*
0I*
xJ*
xK*
xL*
xM*
xN*
xO*
1P*
0Q*
xR*
xS*
xT*
xU*
xf(
xg(
xh(
xi(
xj(
xk(
xl(
x^+
x]+
x\+
x[+
xZ+
xY+
xX+
xW+
xV+
xU+
xT+
xS+
xR+
xQ+
xP+
xO+
xn+
xm+
xl+
xk+
xj+
0i+
0h+
0g+
0f+
0e+
0d+
0c+
0b+
0a+
0`+
0_+
x~+
x}+
x|+
x{+
xz+
xy+
xx+
xw+
xv+
xu+
xt+
xs+
xr+
xq+
xp+
xo+
x0,
x/,
x.,
x-,
x,,
x+,
x*,
x),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
xD,
xE,
xF,
xG,
xH,
xI,
xJ,
xK,
xL,
xM,
xN,
xO,
xP,
xQ,
xR,
xS,
xT,
xU,
xV,
xW,
xX,
xY,
xZ,
x[,
x\,
x],
x^,
x_,
x`,
xa,
xb,
xc,
xd,
xe,
xf,
xg,
xh,
xi,
xj,
xk,
xl,
xm,
xn,
xo,
xp,
xq,
xr,
xs,
xt,
xu,
xv,
xw,
xx,
xy,
xz,
x{,
x|,
x},
x~,
x!-
x"-
x#-
x$-
x%-
x&-
x'-
x(-
x)-
x*-
x+-
x,-
x--
x.-
x/-
x0-
x1-
x2-
x3-
x4-
x5-
x6-
x7-
x8-
x9-
x:-
x;-
x<-
x=-
x>-
x?-
x@-
xA-
xB-
xC-
xD-
xE-
xF-
xG-
xH-
xI-
xJ-
xK-
xL-
xM-
xN-
xO-
xP-
xQ-
xR-
xS-
xT-
xU-
xV-
xW-
xX-
xY-
xZ-
x[-
x\-
x]-
x^-
x_-
x`-
xa-
xb-
xc-
xd-
xe-
xf-
xg-
xh-
xi-
xj-
xk-
xl-
xm-
x\0
x_0
x^0
x]0
xb0
xa0
x`0
xc0
xd0
xe0
xC2
xB2
xA2
x@2
x?2
x>2
x=2
x<2
x;2
x:2
x92
x82
x72
x62
x52
x42
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
xK2
xJ2
xI2
xH2
xG2
xF2
xE2
xD2
xT2
084
074
064
054
044
034
024
014
x04
x/4
x.4
x-4
x,4
x+4
x*4
x)4
xH4
xG4
xF4
xE4
xD4
xC4
xB4
xA4
x@4
x?4
x>4
x=4
x<4
x;4
x:4
x94
xX4
xW4
xV4
xU4
xT4
xS4
xR4
xQ4
0P4
0O4
0N4
0M4
0L4
0K4
0J4
0I4
xh4
xg4
xf4
xe4
xd4
xc4
xb4
xa4
x`4
x_4
x^4
x]4
x\4
x[4
xZ4
xY4
xz4
xy4
xx4
xw4
xv4
xu4
xt4
xs4
xr4
xq4
xp4
xo4
xn4
xm4
xl4
xk4
x,5
x+5
x*5
x)5
x(5
x'5
x&5
x%5
x$5
x#5
x"5
x!5
x~4
x}4
x|4
x{4
x<5
x;5
x:5
x95
x85
x75
x65
x55
x45
x35
x25
x15
x05
x/5
x.5
x-5
xN5
xM5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xB5
xA5
x@5
x?5
x^5
x]5
x\5
x[5
xZ5
xY5
xX5
xW5
xV5
xU5
xT5
xS5
xR5
xQ5
xP5
xO5
xn5
xm5
xl5
xk5
xj5
xi5
xh5
xg5
xf5
xe5
xd5
xc5
xb5
xa5
x`5
x_5
x"6
x!6
x~5
x}5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
xr5
xq5
x26
x16
x06
x/6
x.6
x-6
x,6
x+6
x*6
x)6
x(6
x'6
x&6
x%6
x$6
x#6
xB6
xA6
x@6
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
x56
x46
x36
xT6
xS6
xR6
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xE6
xd6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xt6
xs6
xr6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
xe6
xd2
xc2
xb2
xa2
x`2
x_2
x^2
x]2
x\2
x[2
xZ2
xY2
xX2
xW2
xV2
xU2
xe2
xf2
xg2
xh2
x*7
x)7
x(7
x'7
x&7
x%7
x$7
x#7
x"7
x!7
x~6
x}6
x|6
x{6
xz6
xy6
x:7
x97
x87
x77
x67
x57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
xJ7
xI7
xH7
xG7
xF7
xE7
xD7
xC7
xB7
xA7
x@7
x?7
x>7
x=7
x<7
x;7
xZ7
xY7
xX7
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xj7
xi7
xh7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xz7
xy7
xx7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
x28
x18
x08
x/8
x.8
x-8
x,8
x+8
x*8
x)8
x(8
x'8
x&8
x%8
x$8
x#8
xB8
xA8
x@8
x?8
x>8
x=8
x<8
x;8
x:8
x98
x88
x78
x68
x58
x48
x38
xR8
xQ8
xP8
xO8
xN8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xb8
xa8
x`8
x_8
x^8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
xU8
xT8
xS8
xt8
xs8
xr8
xq8
xp8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
x&9
x%9
x$9
x#9
x"9
x!9
x~8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
x69
x59
x49
x39
x29
x19
x09
x/9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
xH9
xG9
xF9
xE9
xD9
xC9
xB9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
xX9
xW9
xV9
xU9
xT9
xS9
xR9
xQ9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
xI9
xh9
xg9
xf9
xe9
xd9
xc9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
xY9
xz9
xy9
xx9
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
x,:
x+:
x*:
x):
x(:
x':
x&:
x%:
x$:
x#:
x":
x!:
x~9
x}9
x|9
x{9
x<:
x;:
x::
x9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
x/:
x.:
x-:
xN:
xM:
xL:
xK:
xJ:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
x?:
x^:
x]:
x\:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xn:
xm:
xl:
xk:
xj:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x{7
x|7
x#;
x";
x!;
x~:
x}:
x|:
x{:
xz:
xy:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
x';
x&;
x%;
x$;
x7;
x6;
x5;
x4;
x3;
x2;
x1;
x0;
x/;
x.;
x-;
x,;
x+;
x*;
x);
x(;
x;;
x:;
x9;
x8;
x>;
x=;
x<;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
xC;
xB;
xA;
x@;
x?;
xT;
xS;
xR;
xQ;
xX;
xW;
xV;
xU;
x[;
xZ;
xY;
x_;
x^;
x];
x\;
xa;
xb;
xc;
xd;
xe;
xf;
xg;
xh;
zi;
xk;
xl;
xm;
xn;
xo;
xp;
xq;
xr;
zs;
xu;
xv;
xw;
xx;
xy;
xz;
x{;
x|;
z};
x!<
x"<
x#<
x$<
x%<
x&<
x'<
x(<
z)<
x/<
x.<
x-<
x,<
x3<
x2<
x1<
x0<
x6<
x5<
x4<
x:<
x9<
x8<
x7<
x<<
x=<
x><
x?<
x@<
xA<
xB<
xC<
zD<
xF<
xG<
xH<
xI<
xJ<
xK<
xL<
xM<
zN<
xP<
xQ<
xR<
xS<
xT<
xU<
xV<
xW<
zX<
xZ<
x[<
x\<
x]<
x^<
x_<
x`<
xa<
zb<
xh<
xg<
xf<
xe<
xl<
xk<
xj<
xi<
xo<
xn<
xm<
xs<
xr<
xq<
xp<
xu<
xv<
xw<
xx<
xy<
xz<
x{<
x|<
z}<
x!=
x"=
x#=
x$=
x%=
x&=
x'=
x(=
z)=
x+=
x,=
x-=
x.=
x/=
x0=
x1=
x2=
z3=
x5=
x6=
x7=
x8=
x9=
x:=
x;=
x<=
z==
xC=
xB=
xA=
x@=
xG=
xF=
xE=
xD=
xJ=
xI=
xH=
xN=
xM=
xL=
xK=
xP=
xQ=
xR=
xS=
xT=
xU=
xV=
xW=
zX=
xZ=
x[=
x\=
x]=
x^=
x_=
x`=
xa=
zb=
xd=
xe=
xf=
xg=
xh=
xi=
xj=
xk=
zl=
xn=
xo=
xp=
xq=
xr=
xs=
xt=
xu=
zv=
x}7
x)>
xi2
xk2
xj2
xl2
x|2
0{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0p2
0o2
0n2
0m2
x~2
x}2
x03
0/3
0.3
0-3
0,3
0+3
0*3
0)3
0(3
0'3
0&3
0%3
0$3
0#3
0"3
0!3
x23
x13
x33
xC3
0B3
0A3
0@3
0?3
0>3
0=3
0<3
0;3
0:3
093
083
073
063
053
043
xD3
xF3
xE3
xV3
0U3
0T3
0S3
0R3
0Q3
0P3
0O3
0N3
0M3
0L3
0K3
0J3
0I3
0H3
0G3
xX3
xW3
xY3
xZ3
x[3
x\3
x*>
x]3
x+>
xm3
xl3
xk3
xj3
xi3
xh3
xg3
xf3
xe3
xd3
xc3
xb3
xa3
x`3
x_3
x^3
x}3
x|3
x{3
xz3
xy3
xx3
xw3
xv3
xu3
xt3
xs3
xr3
xq3
xp3
xo3
xn3
xJ?
xI?
xH?
xG?
xF?
xE?
xD?
xC?
xB?
xA?
x@?
x??
x>?
x=?
x<?
x;?
xZ?
xY?
xX?
xW?
xV?
xU?
xT?
xS?
xR?
xQ?
xP?
xO?
xN?
xM?
xL?
xK?
xl?
xm?
xn?
0o?
xp?
xq?
xr?
xs?
xt?
xu?
xv?
1w?
0x?
xy?
xz?
x{?
x|?
x}?
x~?
x!@
x"@
x#@
x$@
x%@
x&@
x'@
x(@
x)@
x*@
x+@
x,@
x-@
x.@
x/@
x0@
x1@
x2@
x3@
x4@
x5@
x6@
x7@
x8@
x9@
x:@
x;@
x<@
x=@
x>@
x?@
x@@
xA@
xB@
xC@
xD@
xE@
xF@
xG@
xH@
xI@
xJ@
xK@
xL@
xM@
xN@
xO@
xP@
xQ@
xR@
xS@
xT@
xU@
xV@
xW@
xX@
xY@
xZ@
x[@
x\@
x]@
x^@
x_@
x`@
xa@
xb@
xc@
xd@
xe@
xf@
xg@
xh@
xi@
xj@
xk@
xl@
xm@
xn@
xo@
xp@
xq@
xr@
xs@
xt@
xu@
xv@
xw@
xx@
xy@
xz@
x{@
x|@
x}@
x~@
x!A
x"A
x#A
x$A
x%A
x&A
x'A
x(A
x)A
x*A
x+A
x,A
x-A
x.A
x/A
x0A
x1A
x2A
x3A
x4A
x5A
x6A
x7A
x8A
x9A
x:A
x;A
x<A
x=A
x>A
x?A
xj?
xi?
xh?
xg?
xf?
xe?
xd?
xc?
xb?
xa?
x`?
x_?
x^?
x]?
x\?
x[?
x6!
x5!
xo(
0h*
0g*
1f*
0e*
0d*
0c*
0b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
0X*
0W*
0V*
0")
1!)
0~(
0}(
0|(
0{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
0s(
0r(
0q(
x#)
x/.
x-.
x+.
x).
x'.
x%.
x#.
x!.
x}-
x{-
xy-
xw-
xu-
xs-
xq-
xo-
xP.
xN.
xL.
xJ.
xH.
xF.
xD.
xB.
x@.
x>.
x<.
x:.
x8.
x6.
x4.
x2.
xq.
xo.
xm.
xk.
xi.
xg.
xe.
xc.
xa.
x_.
x].
x[.
xY.
xW.
xU.
xS.
x4/
x2/
x0/
x./
x,/
x*/
x(/
x&/
x$/
x"/
x~.
x|.
xz.
xx.
xv.
xt.
xU/
xS/
xQ/
xO/
xM/
xK/
xI/
xG/
xE/
xC/
xA/
x?/
x=/
x;/
x9/
x7/
xv/
xt/
xr/
xp/
xn/
xl/
xj/
xh/
xf/
xd/
xb/
x`/
x^/
x\/
xZ/
xX/
x90
x70
x50
x30
x10
x/0
x-0
x+0
x)0
x'0
x%0
x#0
x!0
x}/
x{/
xy/
xZ0
xX0
xV0
xT0
xR0
xP0
xN0
xL0
xJ0
xH0
xF0
xD0
xB0
x@0
x>0
x<0
xx6
xw6
1(4
0'4
0&4
0%4
0$4
1#4
0(>
0'>
0&>
0%>
0$>
0#>
0">
0!>
0~=
0}=
0|=
0{=
0z=
0y=
0x=
0w=
xP;
x`;
xj;
xt;
x~;
x+<
x;<
xE<
xO<
xY<
xd<
xt<
x~<
x*=
x4=
x?=
xO=
xY=
xc=
xm=
1@A
xk?
$end
#1
0`'
0]'
0^'
0_'
0j(
0L'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0*'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0['
0\'
0h&
0i&
0j&
0k&
0l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0:'
0;'
0U&
0V&
0W&
0S&
0T&
0i(
0R&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
0P&
0Q&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
0@&
0A&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
00&
01&
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0~%
0!&
0o%
0n%
0m%
0l%
0k%
0*%
0[%
0\%
0]%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
0i%
0j%
0;%
0<%
0=%
0>%
0?%
0@%
0A%
0B%
0C%
0D%
0E%
0F%
0G%
0H%
0I%
0J%
0&%
0'%
0(%
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0{$
0|$
0h(
0"%
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0~$
0x$
0v$
0f$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
0R"
0r$
0s$
0t$
0n$
0l$
0i$
0j$
0b$
0c$
0d$
0Z"
0X"
0U"
0V"
0S,
0R,
0Q,
0P,
0O,
0N,
0M,
0L,
0K,
0J,
0I,
0H,
0G,
0F,
0E,
0D,
0c,
0b,
0a,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0s,
0r,
0q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0f,
0e,
0d,
0%-
0$-
0#-
0"-
0!-
0~,
0},
0|,
0{,
0z,
0y,
0x,
0w,
0v,
0u,
0t,
05-
04-
03-
02-
01-
00-
0/-
0.-
0--
0,-
0+-
0*-
0)-
0(-
0'-
0&-
0E-
0D-
0C-
0B-
0A-
0@-
0?-
0>-
0=-
0<-
0;-
0:-
09-
08-
07-
06-
0U-
0T-
0S-
0R-
0Q-
0P-
0O-
0N-
0M-
0L-
0K-
0J-
0I-
0H-
0G-
0F-
0e-
0d-
0c-
0b-
0a-
0`-
0_-
0^-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
05(
06(
07(
08(
09(
0:(
0;(
0<(
0=(
0>(
0?(
0@(
0A(
0B(
0C(
0D(
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0%(
0&(
0'(
0((
0)(
0*(
0+(
0,(
0-(
0.(
0/(
00(
01(
02(
03(
04(
0+)
13)
15)
0;)
0C)
0N)
0V)
0^)
0f)
0q)
0y)
0#*
0+*
06*
0>*
0F*
0N*
0o!
0p!
0q!
0r!
1s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
0x6
0w6
0T2
0b'
0)%
0l(
1u?
1}?
1'@
1/@
1:@
1B@
1J@
1R@
1]@
1e@
1m@
1u@
1"A
1*A
12A
1:A
0;A
03A
0+A
0#A
0v@
0n@
0f@
0^@
0S@
0K@
0C@
0;@
00@
0(@
0~?
0v?
0\0
1R*
1J*
1B*
1:*
1/*
1'*
1})
1u)
1j)
1b)
1Z)
1R)
1G)
1?)
06)
14)
0,)
00"
1/"
19)
0@)
0H)
0S)
0[)
0c)
0k)
0v)
0~)
0(*
00*
0;*
0C*
0K*
0S*
1y?
0z?
1T*
1L*
1D*
1<*
11*
1)*
1!*
1w)
1l)
1d)
1\)
1T)
1I)
1A)
0:)
0))
0B)
0J)
0U)
0])
0e)
0m)
0x)
0"*
0**
02*
0=*
0E*
0M*
0U*
0p?
1!@
0#)
05*
04*
03*
0&)
0p)
0o)
0n)
0%)
0M)
0L)
0K)
0$)
0*)
0<)
0."
0D)
0O)
0W)
0_)
0g)
0r)
0z)
0$*
0,*
07*
0?*
0G*
0O*
0"@
1#@
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0$@
0q?
1)@
0*@
1+@
0,@
0r?
11@
02@
13@
04@
0l?
1<@
0=@
1>@
0?@
05@
1D@
0E@
1F@
0G@
06@
1L@
0M@
1N@
0O@
07@
1T@
0U@
1V@
0W@
0m?
1_@
0`@
1a@
0b@
0X@
1g@
0h@
1i@
0j@
0Y@
1o@
0p@
1q@
0r@
0Z@
1w@
0x@
1y@
0z@
0n?
1$A
0%A
1&A
0'A
0{@
1,A
0-A
1.A
0/A
0|@
14A
05A
16A
07A
0}@
1<A
0=A
1>A
0?A
0k?
0a'
0f-
0g-
0h-
0i-
0j-
0k-
0l-
0m-
0A
0-!
0U
0E(
0n+
0m+
0l+
0k+
0j+
0^+
0]+
0\+
0[+
0Z+
0Y+
0X+
0W+
0V+
0U+
0T+
0S+
0R+
0Q+
0P+
0O+
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0~+
0}+
0|+
0{+
0z+
0y+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0b0
0a0
0`0
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0_0
0^0
0]0
1n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
1f!
0e!
0d!
0c!
0b!
0a!
1`!
1_!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0e(
1d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0Z7
0Y7
0X7
0W7
0V7
0U7
0T7
0S7
0R7
0Q7
0P7
0O7
0N7
0M7
0L7
0K7
0X3
0W3
0z4
0y4
0x4
0w4
0v4
0u4
0t4
0s4
0r4
0q4
0p4
0o4
0n4
0m4
0l4
0k4
0N5
0M5
0L5
0K5
0J5
0I5
0H5
0G5
0F5
0E5
0D5
0C5
0B5
0A5
0@5
0?5
0"6
0!6
0~5
0}5
0|5
0{5
0z5
0y5
0x5
0w5
0v5
0u5
0t5
0s5
0r5
0q5
0T6
0S6
0R6
0Q6
0P6
0O6
0N6
0M6
0L6
0K6
0J6
0I6
0H6
0G6
0F6
0E6
0C2
0B2
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
0}3
0|3
0{3
0z3
0y3
0x3
0w3
0v3
0u3
0t3
0s3
0r3
0q3
0p3
0o3
0n3
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0r'
1q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
1g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
1_&
0^&
0]&
0\&
0[&
0Z&
1Y&
1X&
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0j?
0i?
0h?
0g?
0f?
0e?
0d?
0c?
0b?
0a?
0`?
0_?
0^?
0]?
0\?
0[?
0J?
0I?
0H?
0G?
0F?
0E?
0D?
0C?
0B?
0A?
0@?
0??
0>?
0=?
0<?
0;?
06!
05!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0D
0C
0B
08A
00A
0(A
0~@
0s@
0k@
0c@
0[@
0P@
0H@
0@@
08@
0-@
0%@
0{?
0s?
0e$
0!%
0k$
0t?
0|?
0&@
0.@
09@
0A@
0I@
0Q@
0\@
0d@
0l@
0t@
0!A
0)A
01A
09A
0K?
0L?
0M?
0N?
0O?
0P?
0Q?
0R?
0S?
0T?
0U?
0V?
0W?
0X?
0Y?
0Z?
1e0
1d0
1c0
0\3
1[3
0Z3
0Y3
0}7
0)>
1g2
0]3
0+>
133
0l2
0*>
1)!
1+!
1*!
1,!
0V
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
1(!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
1~
0}
0|
0{
0z
0y
1x
1w
0:7
097
087
077
067
057
047
037
027
017
007
0/7
0.7
0-7
0,7
0+7
0*7
0)7
0(7
0'7
0&7
0%7
0$7
0#7
0"7
0!7
0~6
0}6
0|6
0{6
0z6
0y6
0d6
0c6
0b6
0a6
0`6
0_6
0^6
0]6
0\6
0[6
0Z6
0Y6
0X6
0W6
0V6
0U6
026
016
006
0/6
0.6
0-6
0,6
0+6
0*6
0)6
0(6
0'6
0&6
0%6
0$6
0#6
0^5
0]5
0\5
0[5
0Z5
0Y5
0X5
0W5
0V5
0U5
0T5
0S5
0R5
0Q5
0P5
0O5
0,5
0+5
0*5
0)5
0(5
0'5
0&5
0%5
0$5
0#5
0"5
0!5
0~4
0}4
0|4
0{4
1@
0?
0>
0=
0<
0;
0:
09
18
07
06
05
04
03
12
11
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0$(
1#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
1U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
1M(
0L(
0K(
0J(
0I(
0H(
1G(
1F(
0/.
0-.
0+.
0).
0'.
0%.
0#.
0!.
0}-
0{-
0y-
0w-
0u-
0s-
0q-
0o-
0P.
0N.
0L.
0J.
0H.
0F.
0D.
0B.
0@.
0>.
0<.
0:.
08.
06.
04.
02.
0q.
0o.
0m.
0k.
0i.
0g.
0e.
0c.
0a.
0_.
0].
0[.
0Y.
0W.
0U.
0S.
04/
02/
00/
0./
0,/
0*/
0(/
0&/
0$/
0"/
0~.
0|.
0z.
0x.
0v.
0t.
0U/
0S/
0Q/
0O/
0M/
0K/
0I/
0G/
0E/
0C/
0A/
0?/
0=/
0;/
09/
07/
0v/
0t/
0r/
0p/
0n/
0l/
0j/
0h/
0f/
0d/
0b/
0`/
0^/
0\/
0Z/
0X/
090
070
050
030
010
0/0
0-0
0+0
0)0
0'0
0%0
0#0
0!0
0}/
0{/
0y/
0Z0
0X0
0V0
0T0
0R0
0P0
0N0
0L0
0J0
0H0
0F0
0D0
0B0
0@0
0>0
0<0
0n=
0(;
0d=
0);
0Z=
0*;
0P=
0+;
05=
0,;
0+=
0-;
0!=
0.;
0u<
0/;
0Z<
00;
0P<
01;
0F<
02;
0<<
03;
0!<
04;
0u;
05;
0k;
06;
0a;
07;
1p=
0r:
1f=
0s:
1\=
0t:
1R=
0u:
17=
0v:
1-=
0w:
1#=
0x:
1w<
0y:
1\<
0z:
1R<
0{:
1H<
0|:
1><
0}:
1#<
0~:
1w;
0!;
1m;
0";
1c;
0#;
1D3
1e2
0d;
0n;
0x;
0';
0$<
0?<
0I<
0S<
0&;
0]<
0x<
0$=
0.=
0%;
08=
0S=
0]=
0g=
0$;
0q=
0b;
1e;
1o;
1y;
0;;
1%<
1@<
1J<
1T<
0:;
1^<
1y<
1%=
1/=
09;
19=
1T=
1^=
1h=
08;
1r=
0s=
0{7
0i=
0_=
0U=
0:=
0<;
00=
0&=
0z<
0_<
0=;
0U<
0K<
0A<
0&<
0z;
0p;
0f;
0_;
0>;
0=<
1g;
1q;
1{;
1'<
1B<
1L<
1V<
0v<
1`<
1{<
1'=
11=
0Q=
1;=
1V=
1`=
1j=
0h2
0f2
1t=
0u=
0k=
0a=
0W=
0<=
0N=
02=
0(=
0|<
0a<
0s<
0W<
0M<
0C<
0(<
0|;
0r;
0h;
0:<
0`;
0j;
0t;
0~;
0;<
0E<
0O<
0Y<
0t<
0~<
0*=
04=
0O=
0Y=
0c=
0m=
1i2
0J;
0F;
0B;
0N;
0<5
0;5
0:5
095
085
075
065
055
045
035
025
015
005
0/5
0.5
0-5
0n5
0m5
0l5
0k5
0j5
0i5
0h5
0g5
0f5
0e5
0d5
0c5
0b5
0a5
0`5
0_5
0B6
0A6
0@6
0?6
0>6
0=6
0<6
0;6
0:6
096
086
076
066
056
046
036
0t6
0s6
0r6
0q6
0p6
0o6
0n6
0m6
0l6
0k6
0j6
0i6
0h6
0g6
0f6
0e6
0C=
0B=
0A=
0@=
0G=
0F=
0E=
0D=
0h<
0g<
0f<
0e<
0l<
0k<
0j<
0i<
0/<
0.<
0-<
0,<
03<
02<
01<
00<
0t8
0s8
0r8
0q8
0p8
0o8
0n8
0m8
0l8
0k8
0j8
0i8
0h8
0g8
0f8
0e8
0H9
0G9
0F9
0E9
0D9
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
0z9
0y9
0x9
0w9
0v9
0u9
0t9
0s9
0r9
0q9
0p9
0o9
0n9
0m9
0l9
0k9
0N:
0M:
0L:
0K:
0J:
0I:
0H:
0G:
0F:
0E:
0D:
0C:
0B:
0A:
0@:
0?:
0T;
0S;
0R;
0Q;
0X;
0W;
0V;
0U;
0k2
0j2
0~2
0}2
123
113
1F3
0E3
0P;
0Y;
0Z;
0[;
0+<
04<
05<
06<
0d<
0m<
0n<
0o<
0?=
0H=
0I=
0J=
0[=
0e=
0o=
0"=
0,=
06=
0G<
0Q<
0[<
0l;
0v;
0"<
0\;
0];
0^;
07<
08<
09<
0p<
0q<
0r<
0K=
0L=
0M=
0A;
0@;
0?;
0E;
0D;
0C;
0I;
0H;
0G;
0M;
0L;
0K;
1C3
0|2
0^:
0]:
0\:
0[:
0Z:
0Y:
0X:
0W:
0V:
0U:
0T:
0S:
0R:
0Q:
0P:
0O:
0,:
0+:
0*:
0):
0(:
0':
0&:
0%:
0$:
0#:
0":
0!:
0~9
0}9
0|9
0{9
0X9
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
0K9
0J9
0I9
0&9
0%9
0$9
0#9
0"9
0!9
0~8
0}8
0|8
0{8
0z8
0y8
0x8
0w8
0v8
0u8
0h4
0g4
0f4
0e4
0d4
0c4
0b4
0a4
0`4
0_4
0^4
0]4
0\4
0[4
0Z4
0Y4
0X4
0W4
0V4
0U4
0T4
0S4
0R4
0Q4
0H4
0G4
0F4
0E4
0D4
0C4
0B4
0A4
0@4
0?4
0>4
0=4
0<4
0;4
0:4
094
004
0/4
0.4
0-4
0,4
0+4
0*4
0)4
0j7
0f7
0b7
0^7
0z7
0v7
0r7
0n7
0K2
0J2
0I2
0H2
0G2
0F2
0E2
0D2
069
059
049
039
029
019
009
0/9
0.9
0-9
0,9
0+9
0*9
0)9
0(9
0'9
0h9
0g9
0f9
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0<:
0;:
0::
09:
08:
07:
06:
05:
04:
03:
02:
01:
00:
0/:
0.:
0-:
0n:
0m:
0l:
0k:
0j:
0i:
0h:
0g:
0f:
0e:
0d:
0c:
0b:
0a:
0`:
0_:
003
1V3
0i7
0h7
0g7
0e7
0d7
0c7
0a7
0`7
0_7
0]7
0\7
0[7
0|7
0y7
0x7
0w7
0u7
0t7
0s7
0q7
0p7
0o7
0m7
0l7
0k7
0b8
0a8
0`8
0_8
0^8
0]8
0\8
0[8
0Z8
0Y8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0Q8
0P8
0O8
0N8
0M8
0L8
0K8
0J8
0I8
0H8
0G8
0F8
0E8
0D8
0C8
0B8
0A8
0@8
0?8
0>8
0=8
0<8
0;8
0:8
098
088
078
068
058
048
038
028
018
008
0/8
0.8
0-8
0,8
0+8
0*8
0)8
0(8
0'8
0&8
0%8
0$8
0#8
0J7
0I7
0H7
0G7
0F7
0E7
0D7
0C7
0B7
0A7
0@7
0?7
0>7
0=7
0<7
0;7
0d2
0c2
0b2
0a2
0`2
0_2
0^2
0]2
0\2
0[2
0Z2
0Y2
0X2
0W2
0V2
0U2
0m3
0l3
0k3
0j3
0i3
0h3
0g3
0f3
0e3
0d3
0c3
0b3
0a3
0`3
0_3
0^3
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
01,
02,
b0 3,
0@,
b0 A,
0?,
b0 6,
b0 7,
08,
09,
0:,
0;,
0<,
0=,
b0 >,
05,
b0 B,
04,
0g(
0k(
0m$
0W"
0Y"
0N!
0f(
0u$
0w$
0Q"
0q$
0p$
0o$
0z$
0y$
0T"
0S"
0a$
0`$
0_$
0h$
0g$
0%%
0$%
0#%
0}$
#50
0:!
0m(
07!
#100
1:!
1m(
17!
b10 p(
b10 <!
#150
0:!
0m(
07!
#200
1:!
1m(
17!
b11 p(
b11 <!
#201
0;!
0n(
09!
#250
0:!
0m(
07!
#300
1:!
1m(
17!
1{*
1-+
b1100000100000001 >+
b1100000100000001 =+
b1100000100000001 <+
b1100000100000001 ;+
b1100000100000001 :+
b1100000100000001 9+
b1100000100000001 8+
b1100000100000001 7+
b1100000100000001 6+
b1100000100000001 5+
b1100000100000001 4+
b1100000100000001 3+
b1100000100000001 2+
b1100000100000001 1+
b1100000100000001 0+
b1100000100000001 /+
1YA
1QA
1KA
1JA
b100 p(
b100 <!
b1 1!
b1 2!
b1 3!
b1 4!
#301
1h&
1i&
1o&
1w&
1?"
13(
03)
05)
1o!
1p!
0s!
1v!
1~!
16)
04)
0/"
09)
1:)
1))
1<)
1."
1E(
0q'
1p'
1n+
1^+
10,
1~+
1N$
1.$
1&$
1_0
0n!
1m!
0f!
1e!
1/
0@
1?
08
17
1l#
1L#
0#(
1"(
0U(
1T(
0M(
1L(
0d(
1c(
12,
b1 3,
b10 7,
b11 >,
1g(
1z$
1y$
1S"
1%%
1!%
0e0
0d0
0c0
#350
0:!
0m(
07!
#400
1:!
1m(
17!
0{*
1z*
0-+
1,+
b1100001000000010 >+
b1100001000000010 =+
b1100001000000010 <+
b1100001000000010 ;+
b1100001000000010 :+
b1100001000000010 9+
b1100001000000010 8+
b1100001000000010 7+
b1100001000000010 6+
b1100001000000010 5+
b1100001000000010 4+
b1100001000000010 3+
b1100001000000010 2+
b1100001000000010 1+
b1100001000000010 0+
b1100001000000010 /+
1M+
1q0
1L1
1\1
1l1
1|1
1t1
1o0
1p0
1~1
1}1
1/2
132
b101 p(
b101 <!
b10 1!
b10 2!
b10 3!
b10 4!
#401
1(%
1O"
1{$
1|$
1h(
1"%
16$
1>$
1^$
1|#
1\#
1U"
1C(
1>"
0?"
12(
03(
13)
15)
1;)
1u!
0v!
1}!
0~!
1l(
0<)
0?)
06)
14)
1/"
19)
1@)
0."
0A)
0:)
0))
1B)
1*)
1<)
1?)
0@)
1."
1D)
1-"
1A)
0B)
0*)
0D)
0-"
1c0
1q'
0n+
1m+
0^+
1]+
00,
1/,
0~+
1}+
0N$
1M$
0%%
1$%
0.$
1-$
0&$
1%$
0_0
1^0
1n!
0m!
0e!
1d!
0/
1.
1d(
1Z%
1J?
1B?
1[@
1s?
1\0
1t?
1\@
1R?
1Z?
0c0
033
1*>
1:7
1U(
0T(
0L(
1K(
1@
0?
07
16
0l#
1k#
0L#
1K#
1#(
0E(
0!%
1a;
17;
0\0
1b;
xe;
xf;
1_;
xg;
xh;
x`;
1l2
1E(
1N;
0#(
0U(
1T(
1L(
0K(
0d(
1X;
023
1!%
0C3
1j7
1#(
1U(
0T(
0L(
1K(
1d(
1~2
1z7
0V3
02,
b0 3,
b0 7,
b0 >,
12,
b1 3,
b10 7,
b11 >,
#450
0:!
0m(
07!
#500
1:!
1m(
17!
1{*
1-+
b1100010000000001 >+
b1100010000000001 =+
b1100010000000001 <+
b1100010000000001 ;+
b1100010000000001 :+
b1100010000000001 9+
b1100010000000001 8+
b1100010000000001 7+
b1100010000000001 6+
b1100010000000001 5+
b1100010000000001 4+
b1100010000000001 3+
b1100010000000001 2+
b1100010000000001 1+
b1100010000000001 0+
b1100010000000001 /+
0M+
1L+
0L1
1K1
0\1
1[1
0l1
1k1
0|1
1{1
0t1
1s1
0/2
1.2
032
122
1S>
1c>
1[>
1$?
15?
12>
13>
17?
16?
1:?
b110 p(
b110 <!
b11 1!
b11 2!
b11 3!
b11 4!
#501
1W&
1S&
1T&
1i(
1R&
1Q&
1@&
1w%
1!&
1j%
1'%
0(%
1N"
0O"
15$
06$
1=$
0>$
1]$
0^$
1{#
0|#
1[#
0\#
1B(
0C(
1?"
13(
03)
05)
1t!
0u!
0}!
1~!
1{?
1|?
16)
04)
0/"
09)
1Y?
1:)
1))
0<)
0?)
1@)
0."
0A)
1B)
1*)
1D)
1-"
1c0
0q'
0p'
1o'
1n+
0m+
1^+
0]+
10,
0/,
1~+
0}+
1N$
0M$
0$%
1#%
1.$
0-$
0%$
1$$
1#$
1"$
1!$
1~#
1}#
0^0
1]0
0n!
1l!
1k!
1h!
1f!
0d!
1c!
1a!
1/
0d(
0c(
1b(
0Z%
1Y%
1i?
0J?
1I?
0B?
1A?
1c@
0[@
0{?
0}?
0s?
1\0
0t?
1~?
0|?
0\@
1d@
1Q?
0R?
0Y?
0#@
0Z?
1$@
1q?
1&@
1X?
0c0
1('
0:7
197
0U(
1S(
1R(
1O(
1M(
0K(
1J(
1H(
0@
1>
1=
1:
18
06
15
13
1l#
0k#
1L#
0K#
0#(
0"(
1!(
0E(
0!%
1k;
16;
0a;
07;
0\0
0b;
1e;
1l;
xo;
xp;
1^;
0f;
0_;
1g;
xq;
xr;
0h;
0`;
xj;
1E(
0N;
1M;
1#(
1"(
0!(
1U(
0S(
0R(
0O(
0M(
1K(
0J(
0H(
1d(
1c(
0b(
0X;
1W;
1!%
0j7
1i7
0#(
0"(
1!(
0U(
1S(
1R(
1O(
1M(
0K(
1J(
1H(
0d(
0c(
1b(
0z7
1y7
02,
b0 3,
b0 7,
b0 >,
12,
b1 3,
b10 7,
b11 >,
#550
0:!
0m(
07!
#600
1:!
1m(
17!
0{*
0z*
1y*
0-+
0,+
1++
b1110100101001100 >+
b1110100101001100 =+
b1110100101001100 <+
b1110100101001100 ;+
b1110100101001100 :+
b1110100101001100 9+
b1110100101001100 8+
b1110100101001100 7+
b1110100101001100 6+
b1110100101001100 5+
b1110100101001100 4+
b1110100101001100 3+
b1110100101001100 2+
b1110100101001100 1+
b1110100101001100 0+
b1110100101001100 /+
1M+
1L1
0K1
1\1
0[1
1l1
0k1
1|1
0{1
0s1
1r1
1q1
1p1
1o1
1n1
1m1
1/2
022
112
0S>
1R>
0c>
1b>
0[>
1Z>
0$?
1#?
05?
14?
0:?
19?
1IA
1HA
1xA
1+B
1EA
1FA
1.B
b111 p(
b111 <!
b100 1!
b100 2!
b100 3!
b100 4!
#601
1_'
1j(
1L'
1K'
18'
1:'
1;'
1V&
0W&
1P&
0Q&
1?&
0@&
1v%
0w%
1~%
0!&
1i%
0j%
1&%
0'%
1O"
1/$
10$
11$
12$
13$
14$
05$
0=$
1>$
0]$
1^$
0{#
1|#
0[#
1\#
1C(
1="
0>"
0?"
11(
02(
03(
13)
15)
0;)
1C)
1q!
1s!
0t!
1v!
1x!
1{!
1|!
0~!
1{?
1}?
1%@
0&@
0)@
0~?
1|?
0D)
0G)
1<)
1?)
06)
14)
1/"
19)
0@)
1."
1H)
0-"
1Y?
1#@
1*@
0X?
0+@
0$@
0I)
1A)
0:)
0))
0B)
1J)
0q?
1,@
1r?
1&@
1)@
1$)
0*)
0<)
0."
1D)
1G)
1O)
0*@
1X?
1.@
1W?
1+@
1,"
0H)
1-"
1I)
0,@
0r?
0J)
0$)
0.@
0W?
0O)
0,"
1l-
1A
1c0
1q'
0n+
1l+
1k+
0^+
1\+
1[+
00,
1.,
1-,
1*,
0~+
1|+
1{+
1x+
0N$
1L$
1K$
1H$
1a0
1%%
0#%
0.$
1,$
1+$
1($
1&$
0$$
0#$
0"$
0!$
0~#
0}#
1_0
0]0
1m!
0l!
0k!
0h!
1e!
0c!
0_!
0/
0.
1-
1d(
1Z%
0Y%
0i?
1h?
1J?
0I?
0A?
1@?
1??
1>?
1=?
1<?
1;?
16!
15!
1M!
1D
18A
10A
1(A
1~@
1s@
1k@
0c@
0{?
1s?
1\0
1t?
0|?
0d@
1l@
1t@
1!A
1)A
11A
19A
1K?
1L?
1M?
1N?
1O?
1P?
0Q?
0Y?
1Z?
1e0
0c0
1T
0('
1''
1:7
097
1T(
0S(
0R(
0O(
1L(
0J(
0F(
1?
0>
0=
0:
17
05
01
0l#
1j#
1i#
1f#
0L#
1J#
1I#
1#(
1P.
0E(
0!%
0k;
06;
1a;
17;
1b;
xe;
0l;
1o;
0p;
0^;
xf;
1_;
xg;
1q;
0r;
xh;
x`;
0j;
1N;
0M;
0#(
0T(
1S(
1R(
1O(
0L(
1J(
1F(
0d(
1X;
0W;
1j7
0i7
1z7
0y7
02,
b0 3,
b0 7,
b0 >,
12,
b10 >,
b10 3,
b101 B,
1q$
1o$
0z$
0S"
1$%
1d0
#650
0:!
0m(
07!
#700
1:!
1m(
17!
1-+
0M+
0L+
1K+
1Q.
0q0
1z0
1x0
0L1
1J1
1I1
0\1
1Z1
1Y1
1V1
0l1
1j1
1i1
1f1
0|1
1z1
1y1
1v1
1t1
0r1
0q1
0p1
0o1
0n1
0m1
0o0
0p0
0~1
0/2
0.2
1-2
132
122
012
1S>
0R>
1c>
0b>
0Z>
1Y>
1X>
1W>
1V>
1U>
1T>
1$?
15?
04?
09?
18?
0xA
1wA
0+B
1*B
0.B
1-B
b1000 p(
b1000 <!
b1 .!
b101 1!
b101 2!
b101 3!
b101 4!
#701
1^'
0_'
1J'
0K'
17'
08'
1U&
0V&
0P&
1Q&
1@&
1p%
1q%
1r%
1s%
1t%
1u%
0v%
0~%
1!&
0i%
1j%
0&%
1'%
1(%
1M"
0N"
0O"
0|$
0h(
0"%
0/$
00$
01$
02$
03$
04$
16$
18$
1;$
1<$
0>$
1X$
1[$
1\$
0^$
1v#
1y#
1z#
0|#
1Y#
1Z#
0\#
1r$
1t$
0U"
1F-
1A(
0B(
0C(
1?"
0l(
1{?
1|?
1Y?
1k-
0l-
0d0
1d(
1j"
1X3
0Z%
1i?
0J?
1H?
1G?
1D?
1B?
0@?
0??
0>?
0=?
0<?
0;?
0M!
1L!
0D
1C
08A
00A
0(A
0~@
0s@
0k@
1[@
1H@
1-@
0%@
0'@
0s?
0t?
1(@
0&@
1.@
1I@
1\@
0l@
0t@
0!A
0)A
01A
09A
0K?
0L?
0M?
0N?
0O?
0P?
1R?
1T?
1W?
0X?
0+@
0Z?
1,@
1r?
0.@
01@
12@
0W?
03@
14@
1l?
19@
1V?
0[3
1Z3
133
0l2
0*>
0T
1S
1('
0:7
1o.
0a;
07;
0b;
1e;
0f;
0_;
1g;
0h;
0`;
0N;
0X;
0~2
1}2
123
013
0j7
0z7
#750
0:!
0m(
07!
#800
1:!
1m(
17!
1p.
1,1
1/2
0S>
0c>
1a>
1`>
1]>
1[>
0Y>
0X>
0W>
0V>
0U>
0T>
0$?
0#?
1"?
05?
13?
12?
1/?
02>
03>
07?
1:?
19?
08?
1xA
1+B
0*B
0-B
1,B
b1001 p(
b1001 <!
b10 .!
b110 1!
b110 2!
b110 3!
b110 4!
#801
1]'
0^'
0J'
1K'
18'
0U&
1V&
1W&
0T&
0i(
0R&
1K&
1N&
1O&
0Q&
1>&
0?&
0@&
0p%
0q%
0r%
0s%
0t%
0u%
1w%
1y%
1|%
1}%
0!&
0j%
1O"
1z"
17-
0{?
1%@
1'@
0-@
0/@
10@
1.@
11@
0(@
1&@
0|?
0Y?
1X?
1+@
02@
1W?
0,@
0r?
0.@
0W?
0e0
1i-
0k-
1+>
033
1+#
1z4
1N5
1"6
1T6
1C2
1n3
0i?
0h?
1g?
1M!
0L!
0C
1B
0\0
1]3
0g2
1T
0S
0('
0''
1&'
1*7
1d6
126
1^5
1,5
023
1U/
1E(
1!%
1a;
17;
0D3
1b;
xe;
xf;
1_;
xg;
xh;
x`;
0i2
1N;
0F3
1#(
1T(
0S(
0R(
0O(
1L(
0J(
0F(
1<5
1n5
1B6
1t6
1t8
1H9
1z9
1N:
1X;
1^:
1,:
1X9
1&9
1`4
1@4
104
1j7
1z7
1K2
169
1h9
1<:
1n:
1b8
1R8
1B8
128
1J7
1d2
1m3
#850
0:!
0m(
07!
#900
1:!
1m(
17!
1{*
b110001100000010 >+
b110001100000010 =+
b110001100000010 <+
b110001100000010 ;+
b110001100000010 :+
b110001100000010 9+
b110001100000010 8+
b110001100000010 7+
b110001100000010 6+
b110001100000010 5+
b110001100000010 4+
b110001100000010 3+
b110001100000010 2+
b110001100000010 1+
b110001100000010 0+
b110001100000010 /+
1V/
1;1
1o0
1p0
1$?
0IA
0xA
0wA
1vA
0+B
0EA
0FA
1.B
1-B
0,B
b1010 p(
b1010 <!
b11 .!
b111 1!
b111 2!
b111 3!
b111 4!
#901
0]'
1^'
1_'
0j(
0L'
0K'
16'
07'
08'
0;'
1@&
1h(
1"%
1;#
1t,
13(
03)
05)
0o!
0s!
1u!
0x!
0{!
0|!
1}!
1l(
1{?
1|?
16)
04)
0/"
09)
1Y?
1:)
1))
1<)
1."
0i-
0A
0q'
1p'
1m+
0l+
0k+
1]+
0\+
0[+
1/,
0.,
0-,
0*,
1}+
0|+
0{+
0x+
1M$
0L$
0K$
0H$
0a0
0%%
0$%
1-$
0,$
0+$
0($
1%$
1^0
0d(
1c(
1n!
0m!
1g!
0f!
0e!
1d!
0a!
1/
0j"
0+#
1Y%
1i?
06!
0M!
1D
1C
0B
1e0
1d0
1c0
0+>
1*>
0T
1('
197
1U(
0T(
1N(
0M(
0L(
1K(
0H(
1@
0?
19
08
07
16
03
1k#
0j#
0i#
0f#
1K#
0J#
0I#
0#(
1"(
1k;
16;
1\0
1l;
xo;
xp;
1^;
xq;
xr;
xj;
0]3
1l2
0E(
1M;
0&9
1$9
0X9
1V9
0,:
0^:
1P:
1W;
0!%
1D3
1F3
0n:
1`:
0<:
0h9
1f9
069
149
1i7
1#(
0"(
0U(
1T(
0N(
1M(
1L(
0K(
1H(
1d(
0c(
1~2
103
1y7
028
108
0B8
1@8
0R8
0b8
1T8
0J7
1H7
1C3
1V3
0d2
1b2
0m3
1k3
1:%
02,
b0 3,
b0 >,
b0 B,
b100 6,
1@,
0g(
1_$
0q$
0o$
0y$
1k(
#950
0:!
0m(
07!
#1000
1:!
1m(
17!
0-+
1,+
1M+
1s0
0z0
0x0
0,1
0;1
1K1
0J1
0I1
1[1
0Z1
0Y1
0V1
1k1
0j1
0i1
0f1
1{1
0z1
0y1
0v1
1s1
0o0
0p0
0}1
032
022
1C>
1R>
1r>
12>
13>
1xA
b1011 p(
b1011 <!
b1000 1!
b1000 2!
b1000 3!
b1000 4!
#1001
18'
1i(
1R&
10&
1i%
1J%
0'%
0(%
0{$
0h(
0"%
15$
08$
0;$
0<$
1=$
0X$
0[$
0\$
1]$
0v#
0y#
0z#
1{#
0Y#
0Z#
1[#
0;#
0z"
0r$
0t$
1b$
1C(
1>"
0?"
0l(
0d(
1c(
1d2
1c2
0b2
0X3
0:%
18%
0z4
0N5
0"6
0T6
0C2
0n3
0Y%
1I?
0H?
0G?
0D?
1A?
0g&
1f&
1a&
1`&
0Y&
0X&
1f
1u
1c@
0H@
1-@
1/@
0%@
0{?
0}?
1~?
0|?
0&@
00@
1.@
0I@
1d@
1Q?
0T?
1W?
13@
0X?
0Y?
0#@
1$@
04@
0l?
1q?
1&@
09@
0V?
1X?
1[3
0Z3
1g2
133
0l2
0*>
0)!
0+!
0*!
0,!
0(!
1'!
1"!
1!!
0x
0w
097
0*7
0d6
026
0^5
0,5
1m3
1l3
0k3
0a;
07;
0k;
06;
0l;
1o;
0b;
1e;
0f;
0_;
0p;
0^;
1q;
1g;
0h;
0r;
0j;
0`;
1i2
0N;
0M;
1:%
19%
08%
0<5
0n5
0B6
0t6
0t8
0H9
0z9
0N:
1&9
0$9
1X9
0V9
1,:
1^:
0P:
0X;
0W;
0~2
0}2
123
113
003
1n:
0`:
1<:
1h9
0f9
169
049
0^:
0,:
0X9
0&9
0`4
0@4
004
0j7
0i7
0z7
0y7
0K2
069
0h9
0<:
0n:
128
008
1B8
0@8
1R8
1b8
0T8
1J7
0H7
0b8
0R8
0B8
028
0d2
0c2
0m3
0l3
0J7
0:%
09%
#1050
0:!
0m(
07!
#1100
1:!
1m(
17!
0/2
1.2
0C>
0R>
1b>
0a>
0`>
0]>
1Z>
0r>
14?
03?
02?
0/?
02>
03>
06?
0:?
09?
0YA
1XA
1SA
1RA
0KA
0JA
1iA
1*B
1EA
1FA
b1100 p(
b1100 <!
#1101
1j(
1L'
1J'
1\'
0h&
0i&
1p&
1q&
1v&
0w&
0V&
0W&
0S&
0i(
0R&
0K&
0N&
0O&
1P&
00&
1v%
0y%
0|%
0}%
1~%
0i%
0J%
1N"
0O"
1A
1j-
1g&
0f&
0a&
0`&
1Y&
1X&
0f
0u
1M!
1)!
1+!
1*!
1,!
1T
1(!
0'!
0"!
0!!
1x
1w
14/
#1150
0:!
0m(
07!
#1200
1:!
1m(
17!
15/
0$?
1#?
0HA
1YA
0XA
0SA
0RA
1KA
1JA
0iA
0*B
0EA
0FA
0.B
0-B
b1101 p(
b1101 <!
b100 .!
b1001 1!
b1001 2!
b1001 3!
b1001 4!
#1201
0^'
0_'
0j(
0L'
0J'
0\'
1h&
1i&
0p&
0q&
0v&
1w&
0:'
1?&
0@&
1&-
1{?
1}?
1%@
0\0
0&@
0)@
0~?
1|?
1Y?
1#@
1*@
0X?
0+@
0$@
0q?
1,@
1r?
1&@
1)@
0*@
1X?
0.@
01@
12@
0W?
1+@
0,@
03@
14@
0r?
1.@
11@
1l?
19@
02@
1W?
13@
1V?
04@
0l?
09@
0V?
0j-
0A
1j"
0i?
1h?
05!
0M!
1L!
1J!
0D
0C
1E(
1k$
0#(
1"(
1U(
0T(
1N(
0M(
0L(
1K(
0H(
0T
1S
1Q
0('
1''
#1250
0:!
0m(
07!
#1300
1:!
1m(
17!
0{*
1z*
b100010010000001 >+
b100010010000001 =+
b100010010000001 <+
b100010010000001 ;+
b100010010000001 :+
b100010010000001 9+
b100010010000001 8+
b100010010000001 7+
b100010010000001 6+
b100010010000001 5+
b100010010000001 4+
b100010010000001 3+
b100010010000001 2+
b100010010000001 1+
b100010010000001 0+
b100010010000001 /+
1h0
1,1
1p0
0xA
1wA
b1110 p(
b1110 <!
b1010 1!
b1010 2!
b1010 3!
b1010 4!
#1301
17'
08'
1h(
1z"
1l$
12(
03(
13)
15)
1;)
0q!
1t!
0u!
0v!
1w!
0}!
1~!
1b'
1)%
0<)
0?)
06)
14)
1/"
19)
1@)
0."
0A)
0:)
0))
1B)
1*)
1<)
1?)
0@)
1."
0D)
0G)
1H)
0-"
1A)
0B)
0I)
1J)
0*)
1D)
1G)
1$)
1O)
0H)
1-"
1I)
1,"
0J)
0$)
0O)
0,"
1+>
033
1q'
1n+
0m+
1^+
0]+
1,#
10,
0/,
1),
1~+
0}+
1w+
1v+
1u+
1t+
1s+
1r+
1q+
1p+
1o+
1N$
0M$
1G$
1`0
1#%
1.$
0-$
1'$
0&$
0%$
1$$
1#$
1"$
1!$
1~#
1}#
0_0
0^0
1]0
0n!
1m!
0g!
1f!
0d!
1_!
0/
1.
1z4
1N5
1"6
1T6
1C2
1n3
0L!
1K!
1]3
0e0
0d0
0c0
0g2
0S
1R
1*7
1d6
126
1^5
1,5
0@
1?
09
18
06
11
1l#
0k#
1e#
1d#
1c#
1b#
1a#
1`#
1_#
1^#
1]#
1L#
0K#
1#(
023
1a;
17;
0D3
1b;
xe;
xf;
1_;
xg;
xh;
x`;
0i2
1N;
0F3
0C3
1<5
1n5
1B6
1t6
1t8
1H9
1z9
1N:
1X;
0)%
1^:
1,:
1X9
1&9
1`4
1@4
104
0V3
1j7
1z7
1K2
169
1h9
1<:
1n:
1b8
1R8
1B8
128
1d2
1m3
1J7
1:%
0@,
b0 6,
12,
b1 7,
b10 >,
b100 6,
0k(
1g(
1y$
1T"
0k$
#1350
0:!
0m(
07!
#1400
1:!
1m(
17!
1{*
1-+
0M+
1L+
1r0
0h0
1<1
1L1
0K1
1\1
0[1
1U1
1T1
1S1
1R1
1Q1
1P1
1O1
1N1
1M1
1l1
0k1
1e1
1|1
0{1
1u1
0t1
0s1
1r1
1q1
1p1
1o1
1n1
1m1
1}1
112
1C>
1->
b1111 p(
b1111 <!
b1011 1!
b1011 2!
b1011 3!
b1011 4!
#1401
1k%
1J%
1&%
1{$
1/$
10$
11$
12$
13$
14$
05$
06$
17$
0=$
1>$
1W$
0]$
1^$
1m#
1n#
1o#
1p#
1q#
1r#
1s#
1t#
1u#
0{#
1|#
0[#
1\#
1<#
0l$
1V"
1B(
0C(
1?"
13(
03)
05)
1l(
16)
04)
0/"
09)
1:)
1))
0<)
0?)
1@)
0."
0A)
1B)
1*)
0D)
0G)
1H)
0-"
0I)
1J)
1$)
1O)
1,"
1c0
0q'
0p'
0o'
1n'
1n!
0m!
0f!
1e!
1/
1d(
1Z%
1J?
0I?
1C?
0B?
0A?
1@?
1??
1>?
1=?
1<?
1;?
0g&
1f&
1a&
1`&
0Y&
0X&
1f
18A
10A
1(A
1~@
1s@
1k@
0c@
0[@
1P@
0{?
1s?
1\0
1t?
0|?
1Q@
0\@
0d@
1l@
1t@
1!A
1)A
11A
19A
1K?
1L?
1M?
1N?
1O?
1P?
0Q?
0R?
1S?
0Y?
1Z?
0]3
0+>
133
0)!
0+!
0*!
0,!
0(!
1'!
1"!
1!!
0x
0w
1:7
1@
0?
08
17
0#(
0"(
0!(
1~'
0E(
0a;
0c;
1#;
07;
1D3
1d;
0b;
1e;
0f;
0_;
0g;
1h;
1`;
0N;
1F3
1#(
1"(
1!(
0~'
0t8
1s8
0H9
1G9
0z9
0N:
1?:
1T;
0X;
123
1[;
1l;
1^;
1M;
1C3
0^:
1O:
0,:
0X9
1W9
0&9
1%9
0j7
0z7
069
159
0h9
1g9
0<:
0n:
1_:
1V3
1i7
1y7
0b8
1S8
0R8
0B8
1A8
028
118
0d2
0m3
0J7
1I7
1c2
1l3
0:%
19%
#1450
0:!
0m(
07!
#1500
1:!
1m(
17!
0-+
0,+
0++
1*+
1M+
0p0
1/2
0C>
1B>
1S>
0->
1c>
0b>
1\>
0[>
0Z>
1Y>
1X>
1W>
1V>
1U>
1T>
1s>
15?
04?
1.?
1-?
1,?
1+?
1*?
1)?
1(?
1'?
1&?
13>
16?
18?
0YA
1XA
1SA
1RA
0KA
0JA
1iA
1GA
b10000 p(
b10000 <!
#1501
1`'
1\'
0h&
0i&
1p&
1q&
1v&
0w&
1U&
1S&
1i(
1B&
1C&
1D&
1E&
1F&
1G&
1H&
1I&
1J&
0P&
1Q&
11&
1p%
1q%
1r%
1s%
1t%
1u%
0v%
0w%
1x%
0~%
1!&
0k%
1j%
1I%
0J%
1O"
0h(
1C(
1<"
0="
0>"
0?"
0l(
0b'
0\0
1d0
0d(
0c(
0b(
1a(
0a&
0`&
0_&
1^&
1Y&
1X&
0f
1e
1v
1E(
1!%
1\0
0#(
0"(
0!(
1~'
0N(
1L(
0K(
1F(
0"!
0!!
0~
1}
1x
1w
0E(
0!%
1#(
1"(
1!(
0~'
1N(
0L(
1K(
0F(
#1550
0:!
0m(
07!
#1600
1:!
1m(
17!
0/2
0.2
0-2
1,2
1$?
03>
1HA
0SA
0RA
0QA
1PA
1KA
1JA
0iA
1hA
1+B
1FA
1,B
0GA
b10001 p(
b10001 <!
#1601
0`'
1]'
1j(
1K'
1['
0\'
1h&
1i&
1n&
0o&
0p&
0q&
1:'
0i(
1@&
1L"
0M"
0N"
0O"
1{?
0\0
1|?
1Y?
1e0
1i?
15!
1L!
0K!
0J!
1B
1E(
1!%
1\0
0#(
0"(
0!(
1~'
0N(
1L(
0K(
1F(
1S
0R
0Q
1('
0E(
0!%
1#(
1"(
1!(
0~'
1N(
0L(
1K(
0F(
#1650
0:!
0m(
07!
#1700
1:!
1m(
17!
0$?
0#?
0"?
1!?
1xA
0FA
b10010 p(
b10010 <!
#1701
0j(
18'
1=&
0>&
0?&
0@&
0{?
0%@
0-@
18@
0\0
19@
0.@
0&@
0|?
0Y?
0X?
0W?
1V?
0i?
0h?
0g?
1f?
1E(
1!%
0#(
0"(
0!(
1~'
0N(
1L(
0K(
1F(
0('
0''
0&'
1%'
#1750
0:!
0m(
07!
#1800
1:!
1m(
17!
0{*
0z*
0y*
1x*
b1100001000000001 >+
b1100001000000001 =+
b1100001000000001 <+
b1100001000000001 ;+
b1100001000000001 :+
b1100001000000001 9+
b1100001000000001 8+
b1100001000000001 7+
b1100001000000001 6+
b1100001000000001 5+
b1100001000000001 4+
b1100001000000001 3+
b1100001000000001 2+
b1100001000000001 1+
b1100001000000001 0+
b1100001000000001 /+
1o0
1p0
0xA
0wA
0vA
1uA
b10011 p(
b10011 <!
#1801
15'
06'
07'
08'
1h(
1"%
10(
01(
02(
03(
13)
15)
0;)
0C)
1N)
1o!
0t!
1u!
0w!
1l(
1\0
0O)
0R)
1D)
1G)
1<)
1?)
06)
14)
1/"
19)
0@)
1."
0H)
1-"
1S)
0,"
0T)
1I)
1A)
0:)
0))
0B)
0J)
1U)
1K)
0$)
0*)
0<)
0."
0D)
1O)
1R)
1W)
1+"
0S)
1,"
0-"
1T)
0U)
0K)
0W)
0+"
0E(
1q'
0,#
0),
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0G$
0`0
0j"
1i"
0#%
0'$
1%$
0$$
0#$
0"$
0!$
0~#
0}#
1^0
0]0
1d(
0n!
1l!
1k!
1h!
1f!
0e!
1c!
1a!
0/
0.
0-
1,
0!%
0e0
0d0
0c0
0@
1>
1=
1:
18
07
15
13
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0d(
0\0
1E(
1!%
1#(
0U(
1S(
1R(
1O(
1M(
0L(
1J(
1H(
1d(
02,
b0 6,
b0 7,
b0 >,
12,
b1 3,
b10 7,
b11 >,
1$%
1z$
0T"
1S"
0_$
#1850
0:!
0m(
07!
#1900
1:!
1m(
17!
1{*
1-+
b1110100101001100 >+
b1110100101001100 =+
b1110100101001100 <+
b1110100101001100 ;+
b1110100101001100 :+
b1110100101001100 9+
b1110100101001100 8+
b1110100101001100 7+
b1110100101001100 6+
b1110100101001100 5+
b1110100101001100 4+
b1110100101001100 3+
b1110100101001100 2+
b1110100101001100 1+
b1110100101001100 0+
b1110100101001100 /+
0M+
0L+
0K+
1J+
0r0
1q0
0s0
0,1
1+1
0<1
0U1
0T1
0S1
0R1
0Q1
0P1
0O1
0N1
0M1
0e1
0u1
1s1
0r1
0q1
0p1
0o1
0n1
0m1
1~1
122
012
12>
13>
b10100 p(
b10100 <!
#1901
1i(
1R&
0&%
1'%
1|$
0/$
00$
01$
02$
03$
04$
15$
07$
0W$
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0<#
1y"
0z"
0b$
1U"
0V"
1@(
0A(
0B(
0C(
1?"
13(
03)
05)
1q!
1s!
0u!
1v!
1x!
1{!
1|!
0~!
16)
04)
0/"
09)
1:)
1))
1<)
1."
1c0
1+>
033
0q'
1p'
0n+
1l+
1k+
0^+
1\+
1[+
1+#
00,
1.,
1-,
1*,
0~+
1|+
1{+
1x+
0N$
1L$
1K$
1H$
1a0
1j"
0i"
1%%
0$%
0.$
1,$
1+$
1($
1&$
0%$
1_0
0^0
0k!
0h!
1e!
0c!
0_!
1/
0d(
1c(
0z4
1y4
0N5
1M5
0"6
1!6
0T6
1S6
0C2
1B2
1o3
0n3
0C?
1A?
0@?
0??
0>?
0=?
0<?
0;?
08A
00A
0(A
0~@
0s@
0k@
1c@
0P@
1\0
0Q@
1d@
0l@
0t@
0!A
0)A
01A
09A
0K?
0L?
0M?
0N?
0O?
0P?
1Q?
0S?
1]3
0c0
0*7
1)7
0d6
1c6
026
116
0^5
1]5
0,5
1+5
0R(
0O(
1L(
0J(
0F(
0=
0:
17
05
01
0l#
1j#
1i#
1f#
0L#
1J#
1I#
0#(
1"(
023
0E(
0!%
1k;
16;
1a;
1c;
0#;
17;
0\0
0D3
0d;
1b;
xe;
0l;
xo;
xp;
0^;
xf;
1_;
xg;
xh;
xq;
xr;
x`;
xj;
1E(
1N;
0M;
0F3
1#(
0"(
1R(
1O(
0L(
1J(
1F(
1d(
0c(
0C3
0<5
1;5
0n5
1m5
0B6
1A6
0t6
1s6
0s8
1r8
0G9
1F9
1z9
1N:
0?:
0T;
1X;
1W;
1Z;
0[;
1!%
1l;
0Z;
1^;
1M;
1^:
0O:
1,:
0W9
1V9
0%9
1$9
0`4
1_4
0@4
1?4
004
1/4
0V3
1j7
0i7
0#(
1"(
0R(
0O(
1L(
0J(
0F(
0d(
1c(
1z7
0y7
0K2
1J2
059
149
0g9
1f9
1<:
1n:
0_:
1i7
1y7
1b8
0S8
1R8
0A8
1@8
018
108
0I7
1H7
0c2
1b2
0l3
1k3
09%
18%
02,
b0 3,
b0 7,
b0 >,
12,
b10 >,
b10 3,
b101 B,
1q$
1o$
0z$
0S"
1$%
1c0
1\0
0E(
0!%
1#(
0"(
1R(
1O(
0L(
1J(
1F(
1d(
0c(
#1950
0:!
0m(
07!
#2000
1:!
1m(
17!
0-+
1,+
1M+
0q0
1z0
1x0
1,1
0+1
1;1
0L1
1J1
1I1
0\1
1Z1
1Y1
1V1
0l1
1j1
1i1
1f1
0|1
1z1
1y1
1v1
1t1
0s1
0o0
0p0
0~1
1/2
132
0B>
1A>
0\>
1Z>
0Y>
0X>
0W>
0V>
0U>
0T>
0s>
0.?
0-?
0,?
0+?
0*?
0)?
0(?
0'?
0&?
17?
19?
08?
1EA
1FA
b10101 p(
b10101 <!
#2001
1j(
1L'
0U&
1V&
1T&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
01&
0p%
0q%
0r%
0s%
0t%
0u%
1v%
0x%
1H%
0I%
1(%
1O"
0|$
0h(
0"%
05$
16$
18$
1;$
1<$
0>$
1X$
1[$
1\$
0^$
1v#
1y#
1z#
0|#
1Y#
1Z#
0\#
1;#
0y"
1z"
1r$
1t$
0U"
1C(
1>"
0?"
0l(
0\0
1A
1i-
1d0
0c0
0]3
0+>
133
0d(
1c(
1X3
08%
1z4
0y4
1N5
0M5
1"6
0!6
1T6
0S6
1C2
0B2
0o3
1n3
0Z%
1Y%
1g&
0f&
0^&
1]&
0e
1d
0v
0J?
1H?
1G?
1D?
1B?
0A?
1E(
1!%
0c@
1[@
1H@
1-@
1%@
0s?
1D3
1\0
0t?
1&@
1.@
1I@
1\@
0d@
0Q?
1R?
1T?
1W?
1X?
0Z?
0[3
1Z3
033
1*>
1)!
1+!
1*!
1,!
1F3
0#(
1"(
0R(
0O(
1L(
0J(
0F(
1(!
0'!
0}
1|
0:7
197
1*7
0)7
1d6
0c6
126
016
1^5
0]5
1,5
0+5
123
0U/
1S/
0E(
0!%
1l2
1#(
0"(
1R(
1O(
0L(
1J(
1F(
1C3
1<5
0;5
1n5
0m5
1B6
0A6
1t6
0s6
0$9
1"9
0V9
1T9
0,:
0^:
1P:
1t8
0r8
1H9
0F9
1}2
023
013
0C3
1V9
0T9
1$9
0"9
0n:
1`:
0<:
0f9
1d9
049
129
1`4
0_4
1@4
0?4
104
0/4
1V3
1~2
103
1:%
1K2
0J2
008
1.8
0@8
1>8
0R8
0b8
1T8
149
029
1f9
0d9
0V3
0:%
1@8
0>8
108
0.8
0H7
1F7
1C3
1V3
0b2
1`2
1H7
0F7
1b2
0`2
0k3
1i3
1:%
1k3
0i3
#2050
0:!
0m(
07!
#2100
1:!
1m(
17!
0V/
1T/
0/2
1.2
1C>
0A>
0S>
1R>
0c>
1a>
1`>
1]>
1[>
0Z>
1r>
1$?
05?
13?
12?
1/?
02>
03>
07?
1:?
1IA
1YA
0XA
0PA
1OA
0hA
1gA
1-B
0,B
b10110 p(
b10110 <!
b101 .!
b1100 1!
b1100 2!
b1100 3!
b1100 4!
#2101
0]'
1^'
1Z'
0['
1m&
0n&
0v&
1w&
1;'
1W&
0T&
0i(
0R&
1K&
1N&
1O&
0Q&
1@&
10&
0v%
1w%
1y%
1|%
1}%
0!&
1i%
0j%
0H%
1J%
1N"
0O"
1u,
0t,
1{?
0\0
1|?
1Y?
1e0
0i-
1k-
0d0
0g&
1f&
1a&
1`&
1_&
0]&
0Y&
0X&
1f
0d
1u
1i?
16!
1M!
0L!
1C
0B
1E(
1!%
1\0
0)!
0+!
0*!
0,!
0#(
1"(
0R(
0O(
1L(
0J(
0F(
1T
0S
1('
0(!
1'!
1"!
1!!
1~
0|
0x
0w
1q.
0o.
0E(
0!%
1#(
0"(
1R(
1O(
0L(
1J(
1F(
#2150
0:!
0m(
07!
#2200
1:!
1m(
17!
1r.
0p.
0$?
1#?
0IA
0YA
1XA
1SA
1RA
1QA
0OA
0KA
0JA
1iA
0gA
1xA
0+B
1*B
0EA
0FA
1.B
b10111 p(
b10111 <!
b110 .!
#2201
1_'
0j(
0L'
1J'
0K'
18'
0Z'
1\'
0h&
0i&
0m&
1o&
1p&
1q&
1v&
0w&
0;'
1?&
0@&
07-
16-
0{?
0%@
0'@
0\0
1(@
0&@
0|?
0Y?
0X?
0+@
1,@
1r?
0.@
01@
12@
0W?
03@
14@
1l?
09@
0<@
1=@
0V?
0>@
1?@
15@
1A@
1U?
0e0
0k-
0A
1,#
0+#
0i?
1h?
06!
1D
1E(
1!%
0#(
1"(
0R(
0O(
1L(
0J(
0F(
0('
1''
#2250
0:!
0m(
07!
#2300
1:!
1m(
17!
0{*
1z*
b110001100000100 >+
b110001100000100 =+
b110001100000100 <+
b110001100000100 ;+
b110001100000100 :+
b110001100000100 9+
b110001100000100 8+
b110001100000100 7+
b110001100000100 6+
b110001100000100 5+
b110001100000100 4+
b110001100000100 3+
b110001100000100 2+
b110001100000100 1+
b110001100000100 0+
b110001100000100 /+
1<1
0;1
1o0
1p0
0xA
1wA
b11000 p(
b11000 <!
#2301
17'
08'
1h(
1"%
0;#
1<#
12(
03(
13)
15)
1;)
0o!
0s!
1u!
0x!
0{!
1l(
0<)
0?)
06)
14)
1/"
19)
1@)
0."
0A)
0:)
0))
1B)
1*)
1<)
1?)
0@)
1."
1D)
1-"
1A)
0B)
0*)
0D)
0-"
1q'
0k+
0[+
0,#
0-,
0*,
0{+
0x+
0K$
0H$
0a0
0$%
0+$
0($
1%$
1^0
1d(
1g!
0f!
0e!
1d!
0a!
0/
1.
1Z%
0Y%
1e0
1d0
1c0
133
0l2
0*>
1:7
097
1N(
0M(
0L(
1K(
0H(
19
08
07
16
03
0i#
0f#
0I#
1#(
0k;
06;
0a;
0c;
1#;
07;
1\0
1d;
0b;
1e;
0l;
1o;
0p;
0^;
0f;
0_;
0g;
1h;
1q;
0r;
1`;
0j;
0E(
0N;
0M;
1&9
0$9
1X9
0V9
1,:
1^:
0P:
0t8
1s8
0H9
1G9
0z9
0N:
1?:
1T;
0X;
0W;
0~2
123
1[;
0!%
1l;
1^;
1M;
003
0^:
1O:
0,:
0X9
1W9
0&9
1%9
1n:
0`:
1<:
1h9
0f9
169
049
0j7
0i7
0#(
0N(
1M(
1L(
0K(
1H(
0d(
0z7
0y7
128
008
1B8
0@8
1R8
1b8
0T8
069
159
0h9
1g9
0<:
0n:
1_:
0C3
1i7
1y7
0V3
0b8
1S8
0R8
0B8
1A8
028
118
1J7
0H7
0J7
1I7
0:%
1d2
0b2
1m3
0k3
0d2
1c2
0m3
1l3
02,
b0 3,
b0 >,
b0 B,
b100 6,
1@,
0g(
1_$
0q$
0o$
0y$
0%%
1k(
#2350
0:!
0m(
07!
#2400
1:!
1m(
17!
1-+
0M+
1L+
1s0
0z0
0x0
0<1
0I1
0Y1
0V1
0i1
0f1
0y1
0v1
1s1
0o0
0p0
0}1
032
022
0C>
1S>
0R>
1s>
0r>
12>
13>
b11001 p(
b11001 <!
#2401
1i(
1R&
00&
11&
0i%
1j%
0J%
0'%
0(%
0{$
0h(
0"%
15$
08$
0;$
0X$
0[$
0v#
0y#
0Y#
0<#
0r$
0t$
1b$
1B(
0C(
1?"
0l(
1d(
0X3
19%
0Z%
0G?
0D?
1A?
1g&
0f&
0a&
0`&
1Y&
1X&
0f
1v
0u
1c@
0H@
0-@
1.@
11@
0I@
1d@
1Q?
0T?
02@
1W?
13@
04@
0l?
19@
1<@
0=@
1V?
1>@
0?@
05@
0A@
0U?
1[3
0Z3
1+>
033
1)!
1+!
1*!
1,!
1(!
0'!
0"!
0!!
1x
1w
0:7
1a;
1c;
0#;
17;
0d;
1b;
xe;
xf;
1_;
xg;
xh;
x`;
1]3
1N;
1t8
0s8
1H9
0G9
1z9
1N:
0?:
0T;
1X;
0}2
023
113
0[;
0D3
0l;
0^;
0M;
0F3
1^:
0O:
1,:
1X9
0W9
1&9
0%9
1j7
1z7
169
059
1h9
0g9
1<:
1n:
0_:
0i7
0y7
1b8
0S8
1R8
1B8
0A8
128
018
1d2
1m3
1J7
0I7
0c2
0l3
1:%
09%
#2450
0:!
0m(
07!
#2500
1:!
1m(
17!
1/2
1C>
0S>
0`>
0]>
1Z>
0s>
02?
0/?
02>
03>
06?
0:?
09?
1YA
0XA
0SA
0RA
1KA
1JA
0iA
1+B
0*B
1EA
1FA
b11010 p(
b11010 <!
b1101 1!
b1101 2!
b1101 3!
b1101 4!
#2501
1j(
1L'
0J'
1K'
0\'
1h&
1i&
0p&
0q&
0v&
1w&
0V&
0W&
0S&
0i(
0R&
0K&
0N&
01&
1v%
0y%
0|%
0j%
1J%
1O"
1A
1j-
0g&
1f&
1a&
1`&
0Y&
0X&
1f
0v
0M!
0)!
0+!
0*!
0,!
0T
0(!
1'!
1"!
1!!
0x
0w
04/
#2550
0:!
0m(
07!
#2600
1:!
1m(
17!
05/
1$?
0HA
0YA
1XA
1SA
1RA
0KA
0JA
1iA
0+B
0EA
0FA
0.B
0-B
b11011 p(
b11011 <!
b111 .!
#2601
0^'
0_'
0j(
0L'
0K'
1\'
0h&
0i&
1p&
1q&
1v&
0w&
0:'
1@&
0&-
1{?
0\0
1|?
1Y?
0j-
0A
0j"
1i?
05!
1K!
1I!
0D
0C
1E(
1k$
1#(
1N(
0M(
0L(
1K(
0H(
1R
1P
1('
#2650
0:!
0m(
07!
#2700
1:!
1m(
17!
1{*
b100010010000100 >+
b100010010000100 =+
b100010010000100 <+
b100010010000100 ;+
b100010010000100 :+
b100010010000100 9+
b100010010000100 8+
b100010010000100 7+
b100010010000100 6+
b100010010000100 5+
b100010010000100 4+
b100010010000100 3+
b100010010000100 2+
b100010010000100 1+
b100010010000100 0+
b100010010000100 /+
1h0
0,1
1p0
1xA
b11100 p(
b11100 <!
#2701
18'
1h(
0z"
1l$
13(
03)
05)
0q!
1t!
0u!
0v!
1w!
1b'
16)
04)
0/"
09)
1:)
1))
0<)
0?)
1@)
0."
0A)
1B)
1*)
1D)
1-"
0]3
0+>
133
0q'
0p'
1o'
1+#
1),
1w+
1v+
1u+
1t+
1s+
1r+
1q+
1p+
1o+
1G$
1`0
1i"
1#%
1'$
0&$
0%$
1$$
1#$
1"$
1!$
1~#
1}#
0_0
0^0
1]0
0l!
0g!
0d!
0`!
1/
0z4
0N5
0"6
0T6
0C2
0n3
1L!
1D3
0e0
0d0
0c0
1g2
1F3
1S
0*7
0d6
026
0^5
0,5
0>
09
06
02
1e#
1d#
1c#
1b#
1a#
1`#
1_#
1^#
1]#
0#(
0"(
1!(
123
0a;
07;
0b;
1e;
0f;
0_;
1g;
0h;
0`;
1i2
0N;
1C3
0<5
0n5
0B6
0t6
0t8
0H9
0z9
0N:
0X;
1)%
0^:
0,:
0X9
0&9
0`4
0@4
004
1V3
0j7
0z7
0K2
069
0h9
0<:
0n:
0b8
0R8
0B8
028
0d2
0m3
0J7
0:%
0@,
b0 6,
12,
b1 7,
b10 >,
b100 6,
0k(
1g(
1y$
1T"
0k$
#2750
0:!
0m(
07!
#2800
1:!
1m(
17!
0{*
0z*
1y*
0-+
0,+
1++
1M+
1r0
0h0
1+1
1;1
1U1
1T1
1S1
1R1
1Q1
1P1
1O1
1N1
1M1
1e1
1u1
0t1
0s1
1r1
1q1
1p1
1o1
1n1
1m1
1}1
112
0C>
1,>
1->
b11101 p(
b11101 <!
#2801
1k%
1*%
0J%
1&%
1{$
1/$
10$
11$
12$
13$
14$
05$
06$
17$
1W$
1m#
1n#
1o#
1p#
1q#
1r#
1s#
1t#
1u#
1;#
1y"
0l$
1V"
1C(
1="
0>"
0?"
11(
02(
03(
13)
15)
0;)
1C)
1l(
0)%
0D)
0G)
1<)
1?)
06)
14)
1/"
19)
0@)
1."
1H)
0-"
0I)
1A)
0:)
0))
0B)
1J)
1$)
0*)
0<)
0."
1D)
1G)
0O)
0R)
1S)
0,"
0H)
1-"
1I)
0T)
1U)
0J)
0$)
1K)
1W)
1O)
1R)
0S)
1,"
1+"
1T)
0U)
0K)
0W)
0+"
1c0
1+>
033
1m!
1g!
1d!
1`!
0/
0.
1-
0d(
0c(
1b(
1y4
1M5
1!6
1S6
1B2
1o3
1X%
1g&
0f&
0a&
0`&
1Y&
1X&
0f
1q'
1p'
0o'
0B?
0A?
0h?
1g?
1b?
1a?
0c@
0[@
1\0
0\@
0d@
0Q?
0R?
1]3
0g2
0+>
1*>
1)!
1+!
1*!
1,!
0E(
0b?
0a?
0''
1&'
1!'
1~&
1#(
1"(
0!(
1(!
0'!
0"!
0!!
1x
1w
187
1)7
1c6
116
1]5
1+5
1?
19
16
12
023
1k;
16;
1u;
15;
0D3
1v;
xy;
1l;
xo;
xp;
1^;
xz;
1];
x{;
xq;
xr;
x|;
xt;
xj;
0i2
0]3
1l2
1M;
1L;
0F3
0C3
1;5
1m5
1A6
1s6
1s8
1G9
1y9
1M:
1W;
1V;
0p'
1o'
1j'
1i'
0!'
0~&
0#(
0"(
1!(
1D3
1F3
0j'
0i'
1]:
1+:
1W9
1%9
1_4
1?4
1/4
0V3
1i7
1h7
1~2
1y7
1x7
1J2
119
1c9
1a:
1U8
1=8
1-8
1c2
1b2
1l3
1k3
1E7
19%
18%
#2850
0:!
0m(
07!
#2900
1:!
1m(
17!
1-+
0M+
0L+
1K+
0p0
0/2
0.2
1-2
1B>
1A>
1Q>
0,>
0->
1\>
0[>
0Z>
1Y>
1X>
1W>
1V>
1U>
1T>
1r>
1.?
1-?
1,?
1+?
1*?
1)?
1(?
1'?
1&?
13>
16?
18?
1YA
0XA
0SA
0RA
1KA
1JA
0iA
1GA
b11110 p(
b11110 <!
b1110 1!
b1110 2!
b1110 3!
b1110 4!
#2901
1`'
0\'
1h&
1i&
0p&
0q&
0v&
1w&
1U&
1S&
1i(
1B&
1C&
1D&
1E&
1F&
1G&
1H&
1I&
1J&
10&
1p%
1q%
1r%
1s%
1t%
1u%
0v%
0w%
1x%
0k%
0*%
1h%
1H%
1I%
1M"
0N"
0O"
0h(
1A(
0B(
0C(
1?"
0l(
0b'
0\0
1d0
1d(
0g&
1e&
1d&
1a&
1\&
1Z&
1e
1d
1h?
0g?
1u
1C?
1@?
1??
1>?
1=?
1<?
1;?
1E(
1!%
18A
10A
1(A
1~@
1s@
1k@
1P@
1\0
1Q@
1l@
1t@
1!A
1)A
11A
19A
1K?
1L?
1M?
1N?
1O?
1P?
1S?
0)!
0+!
0*!
0,!
1#(
1T(
0S(
1''
0&'
0(!
1&!
1%!
1"!
1{
1y
0E(
0!%
0#(
0T(
1S(
#2950
0:!
0m(
07!
#3000
1:!
1m(
17!
1/2
0$?
0#?
1"?
03>
1HA
0YA
1WA
1VA
1SA
1NA
1LA
1hA
1gA
1)B
1FA
1,B
0GA
b11111 p(
b11111 <!
#3001
0`'
1]'
1j(
1I'
1Z'
1['
1j&
1l&
1q&
1t&
1u&
0w&
1:'
0i(
1>&
0?&
0@&
1O"
0{?
1%@
1'@
1-@
0\0
0.@
01@
0(@
1&@
0|?
0Y?
1X?
1+@
12@
0W?
03@
0,@
0r?
14@
1l?
1.@
11@
02@
1W?
09@
0<@
1=@
0V?
13@
04@
0>@
1?@
0l?
19@
1<@
15@
1A@
0=@
1V?
1>@
1U?
0?@
05@
0A@
0U?
1e0
0i?
0h?
1g?
15!
0I!
1B
1E(
1!%
1\0
1#(
1T(
0S(
0P
0('
0''
1&'
0E(
0!%
0#(
0T(
1S(
#3050
0:!
0m(
07!
#3100
1:!
1m(
17!
1$?
0xA
0wA
1vA
0FA
b100000 p(
b100000 <!
#3101
0j(
16'
07'
08'
1@&
1{?
0\0
1|?
1Y?
1i?
1E(
1!%
1#(
1T(
0S(
1('
#3150
0:!
0m(
07!
#3200
1:!
1m(
17!
1{*
b100010010000010 >+
b100010010000010 =+
b100010010000010 <+
b100010010000010 ;+
b100010010000010 :+
b100010010000010 9+
b100010010000010 8+
b100010010000010 7+
b100010010000010 6+
b100010010000010 5+
b100010010000010 4+
b100010010000010 3+
b100010010000010 2+
b100010010000010 1+
b100010010000010 0+
b100010010000010 /+
1o0
1p0
1xA
b100001 p(
b100001 <!
#3201
18'
1h(
1"%
13(
03)
05)
0|!
1}!
1l(
1\0
16)
04)
0/"
09)
1:)
1))
1<)
1."
0E(
0q'
1p'
0d(
1c(
1m+
0l+
1]+
0\+
1/,
0.,
1}+
0|+
1M$
0L$
1-$
0,$
0m!
0g!
0d!
0`!
1/
0!%
0?
09
06
02
1k#
0j#
1K#
0J#
1d(
0c(
02,
b0 6,
b0 7,
b0 >,
12,
b1 7,
b10 >,
b100 6,
#3250
0:!
0m(
07!
#3300
1:!
1m(
17!
0-+
1,+
1M+
1K1
0J1
1[1
0Z1
1k1
0j1
1{1
0z1
0o0
0p0
12>
13>
b100010 p(
b100010 <!
#3301
1i(
1R&
0h(
0"%
0<$
1=$
0\$
1]$
0z#
1{#
0Z#
1[#
1C(
1>"
0?"
0l(
0d(
1c(
1Y%
0X%
1I?
0H?
0%@
0{?
0}?
1~?
0|?
0&@
0X?
0Y?
0#@
1$@
1q?
1&@
1X?
133
0l2
0*>
197
087
0u;
05;
0k;
0m;
1";
06;
1n;
0l;
1o;
0v;
1y;
0z;
0];
0p;
0^;
0q;
1r;
1{;
0|;
1j;
0t;
0M;
0L;
159
019
1g9
0c9
1;:
1m:
0a:
0%9
1#9
0W9
1U9
0+:
0]:
1O:
1S;
0W;
0V;
0~2
123
1Z;
1v;
1];
1L;
1C3
0m:
1_:
0;:
0g9
1e9
059
139
1a8
0U8
1Q8
1A8
0=8
118
0-8
0i7
0h7
0y7
0x7
1I7
0E7
018
1/8
0A8
1?8
0Q8
0a8
1S8
1V3
1h7
1x7
0I7
1G7
0c2
0b2
0l3
0k3
1b2
1k3
09%
08%
18%
#3350
0:!
0m(
07!
#3400
1:!
1m(
17!
0/2
1.2
0B>
1R>
0Q>
1b>
0a>
14?
03?
02>
03>
1EA
1FA
b100011 p(
b100011 <!
#3401
1j(
1L'
0i(
0R&
0O&
1P&
0}%
1~%
0h%
1i%
0I%
1N"
0O"
1A
1i-
1g&
0e&
0d&
0a&
0_&
1]&
0\&
0Z&
0e
1)!
1+!
1*!
1,!
1(!
0&!
0%!
0"!
0~
1|
0{
0y
1Q/
#3450
0:!
0m(
07!
#3500
1:!
1m(
17!
1R/
0$?
1#?
1YA
0WA
0VA
0SA
0QA
1OA
0NA
0LA
0hA
1*B
0)B
0EA
0FA
b100100 p(
b100100 <!
b1000 .!
b1111 1!
b1111 2!
b1111 3!
b1111 4!
#3501
0j(
0L'
0I'
1J'
0['
0j&
0l&
1m&
0o&
0q&
0t&
0u&
1w&
1?&
0@&
1v,
1{?
1}?
1%@
0\0
0&@
0)@
0~?
1|?
1Y?
1#@
1*@
0X?
0+@
0$@
0q?
1,@
1r?
1&@
1)@
0*@
1X?
0.@
01@
12@
0W?
1+@
0,@
03@
14@
0r?
1.@
11@
1l?
09@
0<@
02@
1W?
13@
1=@
0V?
0>@
04@
0l?
1?@
15@
19@
1<@
0=@
1V?
1A@
1U?
1>@
0?@
05@
0A@
0U?
0A
0i-
1h"
1*#
0i?
1h?
0L!
1E(
1!%
0#(
1"(
0T(
0N(
0K(
0G(
0S
0('
1''
#3550
0:!
0m(
07!
#3600
1:!
1m(
17!
0{*
1z*
b0 >+
b0 =+
b0 <+
b0 ;+
b0 :+
b0 9+
b0 8+
b0 7+
b0 6+
b0 5+
b0 4+
b0 3+
b0 2+
b0 1+
b0 0+
b0 /+
1*1
1:1
1o0
1p0
0xA
1wA
b100101 p(
b100101 <!
b10000 1!
b10000 2!
b10000 3!
b10000 4!
#3601
17'
08'
1h(
1"%
1:#
1x"
12(
03(
13)
15)
1;)
0p!
0t!
0w!
0}!
1l(
1\0
0<)
0?)
06)
14)
1/"
19)
1@)
0."
0A)
0:)
0))
1B)
1*)
1<)
1?)
0@)
1."
0D)
0G)
1H)
0-"
1A)
0B)
0I)
1J)
0*)
1D)
1G)
1$)
0O)
0R)
0H)
1-"
1I)
1S)
0,"
0T)
0J)
0$)
1U)
1K)
1O)
1R)
0S)
1,"
1W)
1+"
1T)
0U)
0K)
0W)
0+"
1+>
033
0E(
1q'
0m+
0]+
0+#
0*#
0/,
0),
0}+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0M$
0G$
0`0
0i"
0h"
0#%
0-$
0'$
0$$
0#$
0"$
0!$
0~#
0}#
0]0
1d(
0/
1.
1x4
1L5
1~5
1R6
1A2
1p3
0!%
1]3
0e0
0d0
0c0
1(7
1b6
106
1\5
1*5
0k#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0K#
0d(
023
1u;
15;
0\0
0D3
0v;
xy;
xz;
0];
x{;
x|;
xt;
1E(
0L;
0F3
0C3
1:5
1l5
1@6
1r6
1r8
1F9
1x9
1L:
1V;
1Y;
1!%
1"<
1\;
1K;
1^:
1,:
1T9
1"9
1^4
1>4
1.4
0V3
0h7
1#(
1d(
0x7
1I2
129
1d9
1<:
1n:
1g7
1w7
1b8
1R8
1>8
1.8
0b2
0k3
1F7
1a2
1j3
08%
17%
02,
b0 6,
b0 7,
b0 >,
14,
0g(
0y$
0T"
0_$
1}$
0!%
#3650
0:!
0m(
07!
#3700
1:!
1m(
17!
1{*
1-+
0M+
1L+
0r0
0s0
0+1
0*1
0;1
0:1
0K1
0[1
0U1
0T1
0S1
0R1
0Q1
0P1
0O1
0N1
0M1
0k1
0e1
1n0
0{1
0u1
0r1
0q1
0p1
0o1
0n1
0m1
0o0
0}1
012
0A>
1@>
1q>
12>
13>
b100110 p(
b100110 <!
b10001 1!
b10001 2!
b10001 3!
b10001 4!
#3701
1i(
1R&
1/&
1G%
0H%
0&%
0{$
0"%
0/$
00$
01$
02$
03$
04$
07$
0=$
1~$
0W$
0]$
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0{#
0[#
0:#
0;#
0x"
0y"
0b$
0V"
1B(
0C(
1?"
13(
03)
05)
16)
04)
0/"
09)
1:)
1))
0<)
0?)
1@)
0."
0A)
1B)
1*)
0D)
0G)
1H)
0-"
0I)
1J)
1$)
0O)
0R)
1S)
0,"
0T)
1U)
1K)
1W)
1+"
1c0
0+>
1*>
0q'
0p'
0o'
0n'
1m'
1/
0d(
0c(
0b(
0a(
1`(
1`2
0y4
0x4
0M5
0L5
0!6
0~5
0S6
0R6
0B2
0A2
0p3
0o3
0Y%
0I?
0C?
0@?
0??
0>?
0=?
0<?
0;?
0g&
1f&
1_&
1^&
0]&
1Z&
0X&
0d
1c
1t
08A
00A
0(A
0~@
0s@
0k@
0P@
0{?
1\0
0|?
0Q@
0l@
0t@
0!A
0)A
01A
09A
0K?
0L?
0M?
0N?
0O?
0P?
0S?
0Y?
0]3
1g2
133
0*>
0)!
0+!
0*!
0,!
0(!
1'!
1~
1}
0|
1y
0w
097
0)7
0(7
0c6
0b6
016
006
0]5
0\5
0+5
0*5
1i3
0#(
0"(
0!(
0~'
1}'
0E(
0u;
05;
1m;
0";
1D3
0n;
1v;
1y;
0z;
1];
1q;
0r;
1{;
0|;
0j;
0t;
1i2
1L;
1F3
1#(
1"(
1!(
1~'
0}'
1d(
1c(
1b(
1a(
0`(
16%
0;5
0:5
0m5
0l5
0A6
0@6
0s6
0r6
0s8
0r8
0G9
0F9
0y9
0x9
0M:
0L:
1%9
1$9
0#9
0"9
1W9
1V9
0U9
0T9
0,:
1+:
1*:
0^:
1]:
1\:
0O:
0S;
0V;
123
0Y;
0Z;
0v;
0"<
0\;
0];
0L;
0K;
1C3
0n:
1m:
1l:
0_:
0<:
1;:
1::
1g9
1f9
0e9
0d9
159
149
039
029
0]:
0\:
0+:
0*:
0W9
0V9
0%9
0$9
0_4
0^4
0?4
0>4
0/4
0.4
1h7
1x7
0J2
0I2
059
049
0g9
0f9
0;:
0::
0m:
0l:
118
108
0/8
0.8
1A8
1@8
0?8
0>8
0R8
1Q8
1P8
0b8
1a8
1`8
0S8
1V3
0h7
0g7
0x7
0w7
1I7
1H7
0G7
0F7
0a8
0`8
0Q8
0P8
0A8
0@8
018
008
0I7
0H7
1c2
1b2
0a2
0`2
1l3
1k3
0j3
0i3
0c2
0b2
0l3
0k3
19%
18%
07%
06%
09%
08%
#3750
0:!
0m(
07!
#3800
1:!
1m(
17!
0-+
0,+
0++
0*+
1)+
1M+
0p0
1/2
0@>
0R>
11>
0b>
0\>
0Y>
0X>
0W>
0V>
0U>
0T>
0r>
0q>
04?
0.?
0-?
0,?
0+?
0*?
0)?
0(?
0'?
0&?
02>
06?
08?
0YA
1XA
1QA
1PA
0OA
1LA
0JA
0gA
1fA
1EA
1FA
b100111 p(
b100111 <!
#3801
1j(
1L'
1Y'
0Z'
0h&
1j&
0m&
1n&
1o&
1v&
0w&
0U&
0S&
0R&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0P&
0/&
00&
0p%
0q%
0r%
0s%
0t%
0u%
0x%
0~%
1o%
0i%
0G%
1O"
0h(
1C(
1;"
0<"
0="
0>"
0?"
0l(
0\0
1A
1i-
1d0
1-!
0d(
0c(
0b(
0a(
1`(
1g&
0f&
0^&
0Z&
1X&
0c
0u
0t
0K!
1J!
1E(
1\0
1)!
1+!
1*!
1,!
0#(
0"(
0!(
0~'
1}'
0R
1Q
1(!
0'!
0}
0y
1w
0S/
0Q/
1O/
0E(
1#(
1"(
1!(
1~'
0}'
#3850
0:!
0m(
07!
#3900
1:!
1m(
17!
0T/
0R/
1P/
0/2
0.2
0-2
0,2
1+2
1$?
03>
b10000000000000000000000000000011 CA
b0 DA
b1 DA
b10 DA
0HA
1YA
0XA
0PA
0LA
1JA
0fA
0*B
0EA
0,B
b101000 p(
b101000 <!
b1001 .!
b10010 1!
b10010 2!
b10010 3!
b10010 4!
#3901
0]'
0L'
0J'
0Y'
1h&
0j&
0n&
0v&
1w&
0:'
0i(
1@&
1K"
0L"
0M"
0N"
0O"
1w,
0v,
0u,
1{?
0\0
1|?
1Y?
1e0
0i-
0A
1i?
05!
1K!
1I!
0B
1E(
1\0
0#(
0"(
0!(
0~'
1}'
1R
1P
1('
0E(
1#(
1"(
1!(
1~'
0}'
