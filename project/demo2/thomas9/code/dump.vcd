$date
	Sat Nov 16 13:24:46 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var reg 1 :! clk $end
$var reg 1 ;! rst $end
$var wire 1 8! err $end
$var integer 32 <! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =! err $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' branching_out_MEM_WB $end
$var wire 1 a' err1 $end
$var wire 1 b' branchNOP $end
$var wire 1 c' jumpNOP $end
$var wire 1 d' btake $end
$var wire 1 e' MUXFOUR [15] $end
$var wire 1 f' MUXFOUR [14] $end
$var wire 1 g' MUXFOUR [13] $end
$var wire 1 h' MUXFOUR [12] $end
$var wire 1 i' MUXFOUR [11] $end
$var wire 1 j' MUXFOUR [10] $end
$var wire 1 k' MUXFOUR [9] $end
$var wire 1 l' MUXFOUR [8] $end
$var wire 1 m' MUXFOUR [7] $end
$var wire 1 n' MUXFOUR [6] $end
$var wire 1 o' MUXFOUR [5] $end
$var wire 1 p' MUXFOUR [4] $end
$var wire 1 q' MUXFOUR [3] $end
$var wire 1 r' MUXFOUR [2] $end
$var wire 1 s' MUXFOUR [1] $end
$var wire 1 t' MUXFOUR [0] $end
$var wire 1 u' jmpthng $end
$var wire 1 v' jmpthng2 $end
$var wire 1 w' cycle [15] $end
$var wire 1 x' cycle [14] $end
$var wire 1 y' cycle [13] $end
$var wire 1 z' cycle [12] $end
$var wire 1 {' cycle [11] $end
$var wire 1 |' cycle [10] $end
$var wire 1 }' cycle [9] $end
$var wire 1 ~' cycle [8] $end
$var wire 1 !( cycle [7] $end
$var wire 1 "( cycle [6] $end
$var wire 1 #( cycle [5] $end
$var wire 1 $( cycle [4] $end
$var wire 1 %( cycle [3] $end
$var wire 1 &( cycle [2] $end
$var wire 1 '( cycle [1] $end
$var wire 1 (( cycle [0] $end
$var wire 1 )( cycleout [15] $end
$var wire 1 *( cycleout [14] $end
$var wire 1 +( cycleout [13] $end
$var wire 1 ,( cycleout [12] $end
$var wire 1 -( cycleout [11] $end
$var wire 1 .( cycleout [10] $end
$var wire 1 /( cycleout [9] $end
$var wire 1 0( cycleout [8] $end
$var wire 1 1( cycleout [7] $end
$var wire 1 2( cycleout [6] $end
$var wire 1 3( cycleout [5] $end
$var wire 1 4( cycleout [4] $end
$var wire 1 5( cycleout [3] $end
$var wire 1 6( cycleout [2] $end
$var wire 1 7( cycleout [1] $end
$var wire 1 8( cycleout [0] $end
$var wire 1 9( MUX_OUT_ONE [15] $end
$var wire 1 :( MUX_OUT_ONE [14] $end
$var wire 1 ;( MUX_OUT_ONE [13] $end
$var wire 1 <( MUX_OUT_ONE [12] $end
$var wire 1 =( MUX_OUT_ONE [11] $end
$var wire 1 >( MUX_OUT_ONE [10] $end
$var wire 1 ?( MUX_OUT_ONE [9] $end
$var wire 1 @( MUX_OUT_ONE [8] $end
$var wire 1 A( MUX_OUT_ONE [7] $end
$var wire 1 B( MUX_OUT_ONE [6] $end
$var wire 1 C( MUX_OUT_ONE [5] $end
$var wire 1 D( MUX_OUT_ONE [4] $end
$var wire 1 E( MUX_OUT_ONE [3] $end
$var wire 1 F( MUX_OUT_ONE [2] $end
$var wire 1 G( MUX_OUT_ONE [1] $end
$var wire 1 H( MUX_OUT_ONE [0] $end
$var wire 1 I( MUX_OUT_TWO [15] $end
$var wire 1 J( MUX_OUT_TWO [14] $end
$var wire 1 K( MUX_OUT_TWO [13] $end
$var wire 1 L( MUX_OUT_TWO [12] $end
$var wire 1 M( MUX_OUT_TWO [11] $end
$var wire 1 N( MUX_OUT_TWO [10] $end
$var wire 1 O( MUX_OUT_TWO [9] $end
$var wire 1 P( MUX_OUT_TWO [8] $end
$var wire 1 Q( MUX_OUT_TWO [7] $end
$var wire 1 R( MUX_OUT_TWO [6] $end
$var wire 1 S( MUX_OUT_TWO [5] $end
$var wire 1 T( MUX_OUT_TWO [4] $end
$var wire 1 U( MUX_OUT_TWO [3] $end
$var wire 1 V( MUX_OUT_TWO [2] $end
$var wire 1 W( MUX_OUT_TWO [1] $end
$var wire 1 X( MUX_OUT_TWO [0] $end
$var wire 1 Y( MUXTHREE [15] $end
$var wire 1 Z( MUXTHREE [14] $end
$var wire 1 [( MUXTHREE [13] $end
$var wire 1 \( MUXTHREE [12] $end
$var wire 1 ]( MUXTHREE [11] $end
$var wire 1 ^( MUXTHREE [10] $end
$var wire 1 _( MUXTHREE [9] $end
$var wire 1 `( MUXTHREE [8] $end
$var wire 1 a( MUXTHREE [7] $end
$var wire 1 b( MUXTHREE [6] $end
$var wire 1 c( MUXTHREE [5] $end
$var wire 1 d( MUXTHREE [4] $end
$var wire 1 e( MUXTHREE [3] $end
$var wire 1 f( MUXTHREE [2] $end
$var wire 1 g( MUXTHREE [1] $end
$var wire 1 h( MUXTHREE [0] $end
$var wire 1 i( PC_NO_PLUS_TWO [15] $end
$var wire 1 j( PC_NO_PLUS_TWO [14] $end
$var wire 1 k( PC_NO_PLUS_TWO [13] $end
$var wire 1 l( PC_NO_PLUS_TWO [12] $end
$var wire 1 m( PC_NO_PLUS_TWO [11] $end
$var wire 1 n( PC_NO_PLUS_TWO [10] $end
$var wire 1 o( PC_NO_PLUS_TWO [9] $end
$var wire 1 p( PC_NO_PLUS_TWO [8] $end
$var wire 1 q( PC_NO_PLUS_TWO [7] $end
$var wire 1 r( PC_NO_PLUS_TWO [6] $end
$var wire 1 s( PC_NO_PLUS_TWO [5] $end
$var wire 1 t( PC_NO_PLUS_TWO [4] $end
$var wire 1 u( PC_NO_PLUS_TWO [3] $end
$var wire 1 v( PC_NO_PLUS_TWO [2] $end
$var wire 1 w( PC_NO_PLUS_TWO [1] $end
$var wire 1 x( PC_NO_PLUS_TWO [0] $end
$var wire 1 y( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 z( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 {( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 |( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 }( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 ~( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 !) PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 ") PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 #) PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 $) PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 %) PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 &) PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 ') PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 () PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 )) PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 *) PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 +) SendNop $end
$var wire 1 ,) muxonecond $end
$var wire 1 -) branchfail $end
$var wire 1 .) bthng2 $end
$var wire 1 /) muxtwcond $end
$var wire 1 0) inst_again [15] $end
$var wire 1 1) inst_again [14] $end
$var wire 1 2) inst_again [13] $end
$var wire 1 3) inst_again [12] $end
$var wire 1 4) inst_again [11] $end
$var wire 1 5) inst_again [10] $end
$var wire 1 6) inst_again [9] $end
$var wire 1 7) inst_again [8] $end
$var wire 1 8) inst_again [7] $end
$var wire 1 9) inst_again [6] $end
$var wire 1 :) inst_again [5] $end
$var wire 1 ;) inst_again [4] $end
$var wire 1 <) inst_again [3] $end
$var wire 1 =) inst_again [2] $end
$var wire 1 >) inst_again [1] $end
$var wire 1 ?) inst_again [0] $end
$var wire 1 @) instagaincnd $end
$var wire 1 A) pcagain [15] $end
$var wire 1 B) pcagain [14] $end
$var wire 1 C) pcagain [13] $end
$var wire 1 D) pcagain [12] $end
$var wire 1 E) pcagain [11] $end
$var wire 1 F) pcagain [10] $end
$var wire 1 G) pcagain [9] $end
$var wire 1 H) pcagain [8] $end
$var wire 1 I) pcagain [7] $end
$var wire 1 J) pcagain [6] $end
$var wire 1 K) pcagain [5] $end
$var wire 1 L) pcagain [4] $end
$var wire 1 M) pcagain [3] $end
$var wire 1 N) pcagain [2] $end
$var wire 1 O) pcagain [1] $end
$var wire 1 P) pcagain [0] $end
$var wire 1 Q) MemWrt_Decode_Out $end
$var wire 1 R) RegWrt_Decode_Out $end
$var wire 1 S) NOP_Out_ID_EX $end
$var wire 1 T) NOP_Out_ID_MEM $end
$var wire 1 U) NOP_Out_ID_WB $end
$var wire 1 V) branching_Decode_Out $end
$var wire 1 W) Nop_or_Branch $end
$var wire 1 X) bNOP_OUTIDEX $end
$var wire 1 Y) nopmux [15] $end
$var wire 1 Z) nopmux [14] $end
$var wire 1 [) nopmux [13] $end
$var wire 1 \) nopmux [12] $end
$var wire 1 ]) nopmux [11] $end
$var wire 1 ^) nopmux [10] $end
$var wire 1 _) nopmux [9] $end
$var wire 1 `) nopmux [8] $end
$var wire 1 a) nopmux [7] $end
$var wire 1 b) nopmux [6] $end
$var wire 1 c) nopmux [5] $end
$var wire 1 d) nopmux [4] $end
$var wire 1 e) nopmux [3] $end
$var wire 1 f) nopmux [2] $end
$var wire 1 g) nopmux [1] $end
$var wire 1 h) nopmux [0] $end

$scope module my_clkrst $end
$var reg 1 i) clk $end
$var reg 1 j) rst $end
$var wire 1 k) err $end
$var integer 32 l) cycle_count $end
$upscope $end

$scope module jumper $end
$var wire 1 u' q $end
$var wire 1 m% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m) state $end
$upscope $end

$scope module jumper2 $end
$var wire 1 v' q $end
$var wire 1 l% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n) state $end
$upscope $end

$scope module bumper2 $end
$var wire 1 .) q $end
$var wire 1 -) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o) state $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 I( PC_in [15] $end
$var wire 1 J( PC_in [14] $end
$var wire 1 K( PC_in [13] $end
$var wire 1 L( PC_in [12] $end
$var wire 1 M( PC_in [11] $end
$var wire 1 N( PC_in [10] $end
$var wire 1 O( PC_in [9] $end
$var wire 1 P( PC_in [8] $end
$var wire 1 Q( PC_in [7] $end
$var wire 1 R( PC_in [6] $end
$var wire 1 S( PC_in [5] $end
$var wire 1 T( PC_in [4] $end
$var wire 1 U( PC_in [3] $end
$var wire 1 V( PC_in [2] $end
$var wire 1 W( PC_in [1] $end
$var wire 1 X( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 i( pc_temp [15] $end
$var wire 1 j( pc_temp [14] $end
$var wire 1 k( pc_temp [13] $end
$var wire 1 l( pc_temp [12] $end
$var wire 1 m( pc_temp [11] $end
$var wire 1 n( pc_temp [10] $end
$var wire 1 o( pc_temp [9] $end
$var wire 1 p( pc_temp [8] $end
$var wire 1 q( pc_temp [7] $end
$var wire 1 r( pc_temp [6] $end
$var wire 1 s( pc_temp [5] $end
$var wire 1 t( pc_temp [4] $end
$var wire 1 u( pc_temp [3] $end
$var wire 1 v( pc_temp [2] $end
$var wire 1 w( pc_temp [1] $end
$var wire 1 x( pc_temp [0] $end

$scope module fa $end
$var wire 1 i( A [15] $end
$var wire 1 j( A [14] $end
$var wire 1 k( A [13] $end
$var wire 1 l( A [12] $end
$var wire 1 m( A [11] $end
$var wire 1 n( A [10] $end
$var wire 1 o( A [9] $end
$var wire 1 p( A [8] $end
$var wire 1 q( A [7] $end
$var wire 1 r( A [6] $end
$var wire 1 s( A [5] $end
$var wire 1 t( A [4] $end
$var wire 1 u( A [3] $end
$var wire 1 v( A [2] $end
$var wire 1 w( A [1] $end
$var wire 1 x( A [0] $end
$var wire 1 p) B [15] $end
$var wire 1 q) B [14] $end
$var wire 1 r) B [13] $end
$var wire 1 s) B [12] $end
$var wire 1 t) B [11] $end
$var wire 1 u) B [10] $end
$var wire 1 v) B [9] $end
$var wire 1 w) B [8] $end
$var wire 1 x) B [7] $end
$var wire 1 y) B [6] $end
$var wire 1 z) B [5] $end
$var wire 1 {) B [4] $end
$var wire 1 |) B [3] $end
$var wire 1 }) B [2] $end
$var wire 1 ~) B [1] $end
$var wire 1 !* B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 "* Cout $end
$var wire 1 #* Cout0 $end
$var wire 1 $* Cout1 $end
$var wire 1 %* Cout2 $end
$var wire 1 &* Cin $end

$scope module f1 $end
$var wire 1 u( A [3] $end
$var wire 1 v( A [2] $end
$var wire 1 w( A [1] $end
$var wire 1 x( A [0] $end
$var wire 1 |) B [3] $end
$var wire 1 }) B [2] $end
$var wire 1 ~) B [1] $end
$var wire 1 !* B [0] $end
$var wire 1 &* Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 #* Cout $end
$var wire 1 '* Cout0 $end
$var wire 1 (* Cout1 $end
$var wire 1 )* Cout2 $end

$scope module f1 $end
$var wire 1 x( A $end
$var wire 1 !* B $end
$var wire 1 &* Cin $end
$var wire 1 0" S $end
$var wire 1 '* Cout $end
$var wire 1 ** xor_AB $end
$var wire 1 +* xor_ABCin $end
$var wire 1 ,* NAND_AB $end
$var wire 1 -* not_NAND_AB $end
$var wire 1 .* NAND_Cin_xor_AB $end
$var wire 1 /* not_NAND_Cin_xor_AB $end
$var wire 1 0* NOR_2NAND $end
$var wire 1 1* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 x( in1 $end
$var wire 1 !* in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ** in1 $end
$var wire 1 &* in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 x( in1 $end
$var wire 1 !* in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,* in1 $end
$var wire 1 -* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 &* in1 $end
$var wire 1 ** in2 $end
$var wire 1 .* out $end
$upscope $end

$scope module not2 $end
$var wire 1 .* in1 $end
$var wire 1 /* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -* in1 $end
$var wire 1 /* in2 $end
$var wire 1 0* out $end
$upscope $end

$scope module not3 $end
$var wire 1 0* in1 $end
$var wire 1 1* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 w( A $end
$var wire 1 ~) B $end
$var wire 1 '* Cin $end
$var wire 1 /" S $end
$var wire 1 (* Cout $end
$var wire 1 2* xor_AB $end
$var wire 1 3* xor_ABCin $end
$var wire 1 4* NAND_AB $end
$var wire 1 5* not_NAND_AB $end
$var wire 1 6* NAND_Cin_xor_AB $end
$var wire 1 7* not_NAND_Cin_xor_AB $end
$var wire 1 8* NOR_2NAND $end
$var wire 1 9* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 w( in1 $end
$var wire 1 ~) in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 2* in1 $end
$var wire 1 '* in2 $end
$var wire 1 3* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 w( in1 $end
$var wire 1 ~) in2 $end
$var wire 1 4* out $end
$upscope $end

$scope module not1 $end
$var wire 1 4* in1 $end
$var wire 1 5* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 '* in1 $end
$var wire 1 2* in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module not2 $end
$var wire 1 6* in1 $end
$var wire 1 7* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 5* in1 $end
$var wire 1 7* in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module not3 $end
$var wire 1 8* in1 $end
$var wire 1 9* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 v( A $end
$var wire 1 }) B $end
$var wire 1 (* Cin $end
$var wire 1 ." S $end
$var wire 1 )* Cout $end
$var wire 1 :* xor_AB $end
$var wire 1 ;* xor_ABCin $end
$var wire 1 <* NAND_AB $end
$var wire 1 =* not_NAND_AB $end
$var wire 1 >* NAND_Cin_xor_AB $end
$var wire 1 ?* not_NAND_Cin_xor_AB $end
$var wire 1 @* NOR_2NAND $end
$var wire 1 A* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 v( in1 $end
$var wire 1 }) in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 :* in1 $end
$var wire 1 (* in2 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 v( in1 $end
$var wire 1 }) in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not1 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 (* in1 $end
$var wire 1 :* in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not2 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 =* in1 $end
$var wire 1 ?* in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not3 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 u( A $end
$var wire 1 |) B $end
$var wire 1 )* Cin $end
$var wire 1 -" S $end
$var wire 1 #* Cout $end
$var wire 1 B* xor_AB $end
$var wire 1 C* xor_ABCin $end
$var wire 1 D* NAND_AB $end
$var wire 1 E* not_NAND_AB $end
$var wire 1 F* NAND_Cin_xor_AB $end
$var wire 1 G* not_NAND_Cin_xor_AB $end
$var wire 1 H* NOR_2NAND $end
$var wire 1 I* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 u( in1 $end
$var wire 1 |) in2 $end
$var wire 1 B* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 B* in1 $end
$var wire 1 )* in2 $end
$var wire 1 C* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 u( in1 $end
$var wire 1 |) in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module not1 $end
$var wire 1 D* in1 $end
$var wire 1 E* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )* in1 $end
$var wire 1 B* in2 $end
$var wire 1 F* out $end
$upscope $end

$scope module not2 $end
$var wire 1 F* in1 $end
$var wire 1 G* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 E* in1 $end
$var wire 1 G* in2 $end
$var wire 1 H* out $end
$upscope $end

$scope module not3 $end
$var wire 1 H* in1 $end
$var wire 1 I* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 q( A [3] $end
$var wire 1 r( A [2] $end
$var wire 1 s( A [1] $end
$var wire 1 t( A [0] $end
$var wire 1 x) B [3] $end
$var wire 1 y) B [2] $end
$var wire 1 z) B [1] $end
$var wire 1 {) B [0] $end
$var wire 1 #* Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 $* Cout $end
$var wire 1 J* Cout0 $end
$var wire 1 K* Cout1 $end
$var wire 1 L* Cout2 $end

$scope module f1 $end
$var wire 1 t( A $end
$var wire 1 {) B $end
$var wire 1 #* Cin $end
$var wire 1 ," S $end
$var wire 1 J* Cout $end
$var wire 1 M* xor_AB $end
$var wire 1 N* xor_ABCin $end
$var wire 1 O* NAND_AB $end
$var wire 1 P* not_NAND_AB $end
$var wire 1 Q* NAND_Cin_xor_AB $end
$var wire 1 R* not_NAND_Cin_xor_AB $end
$var wire 1 S* NOR_2NAND $end
$var wire 1 T* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 t( in1 $end
$var wire 1 {) in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 M* in1 $end
$var wire 1 #* in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 t( in1 $end
$var wire 1 {) in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module not1 $end
$var wire 1 O* in1 $end
$var wire 1 P* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #* in1 $end
$var wire 1 M* in2 $end
$var wire 1 Q* out $end
$upscope $end

$scope module not2 $end
$var wire 1 Q* in1 $end
$var wire 1 R* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 P* in1 $end
$var wire 1 R* in2 $end
$var wire 1 S* out $end
$upscope $end

$scope module not3 $end
$var wire 1 S* in1 $end
$var wire 1 T* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 s( A $end
$var wire 1 z) B $end
$var wire 1 J* Cin $end
$var wire 1 +" S $end
$var wire 1 K* Cout $end
$var wire 1 U* xor_AB $end
$var wire 1 V* xor_ABCin $end
$var wire 1 W* NAND_AB $end
$var wire 1 X* not_NAND_AB $end
$var wire 1 Y* NAND_Cin_xor_AB $end
$var wire 1 Z* not_NAND_Cin_xor_AB $end
$var wire 1 [* NOR_2NAND $end
$var wire 1 \* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 s( in1 $end
$var wire 1 z) in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 U* in1 $end
$var wire 1 J* in2 $end
$var wire 1 V* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 s( in1 $end
$var wire 1 z) in2 $end
$var wire 1 W* out $end
$upscope $end

$scope module not1 $end
$var wire 1 W* in1 $end
$var wire 1 X* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 J* in1 $end
$var wire 1 U* in2 $end
$var wire 1 Y* out $end
$upscope $end

$scope module not2 $end
$var wire 1 Y* in1 $end
$var wire 1 Z* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 X* in1 $end
$var wire 1 Z* in2 $end
$var wire 1 [* out $end
$upscope $end

$scope module not3 $end
$var wire 1 [* in1 $end
$var wire 1 \* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 r( A $end
$var wire 1 y) B $end
$var wire 1 K* Cin $end
$var wire 1 *" S $end
$var wire 1 L* Cout $end
$var wire 1 ]* xor_AB $end
$var wire 1 ^* xor_ABCin $end
$var wire 1 _* NAND_AB $end
$var wire 1 `* not_NAND_AB $end
$var wire 1 a* NAND_Cin_xor_AB $end
$var wire 1 b* not_NAND_Cin_xor_AB $end
$var wire 1 c* NOR_2NAND $end
$var wire 1 d* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 r( in1 $end
$var wire 1 y) in2 $end
$var wire 1 ]* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]* in1 $end
$var wire 1 K* in2 $end
$var wire 1 ^* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 r( in1 $end
$var wire 1 y) in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module not1 $end
$var wire 1 _* in1 $end
$var wire 1 `* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K* in1 $end
$var wire 1 ]* in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module not2 $end
$var wire 1 a* in1 $end
$var wire 1 b* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `* in1 $end
$var wire 1 b* in2 $end
$var wire 1 c* out $end
$upscope $end

$scope module not3 $end
$var wire 1 c* in1 $end
$var wire 1 d* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 q( A $end
$var wire 1 x) B $end
$var wire 1 L* Cin $end
$var wire 1 )" S $end
$var wire 1 $* Cout $end
$var wire 1 e* xor_AB $end
$var wire 1 f* xor_ABCin $end
$var wire 1 g* NAND_AB $end
$var wire 1 h* not_NAND_AB $end
$var wire 1 i* NAND_Cin_xor_AB $end
$var wire 1 j* not_NAND_Cin_xor_AB $end
$var wire 1 k* NOR_2NAND $end
$var wire 1 l* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 q( in1 $end
$var wire 1 x) in2 $end
$var wire 1 e* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 e* in1 $end
$var wire 1 L* in2 $end
$var wire 1 f* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 q( in1 $end
$var wire 1 x) in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module not1 $end
$var wire 1 g* in1 $end
$var wire 1 h* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L* in1 $end
$var wire 1 e* in2 $end
$var wire 1 i* out $end
$upscope $end

$scope module not2 $end
$var wire 1 i* in1 $end
$var wire 1 j* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 h* in1 $end
$var wire 1 j* in2 $end
$var wire 1 k* out $end
$upscope $end

$scope module not3 $end
$var wire 1 k* in1 $end
$var wire 1 l* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 m( A [3] $end
$var wire 1 n( A [2] $end
$var wire 1 o( A [1] $end
$var wire 1 p( A [0] $end
$var wire 1 t) B [3] $end
$var wire 1 u) B [2] $end
$var wire 1 v) B [1] $end
$var wire 1 w) B [0] $end
$var wire 1 $* Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 %* Cout $end
$var wire 1 m* Cout0 $end
$var wire 1 n* Cout1 $end
$var wire 1 o* Cout2 $end

$scope module f1 $end
$var wire 1 p( A $end
$var wire 1 w) B $end
$var wire 1 $* Cin $end
$var wire 1 (" S $end
$var wire 1 m* Cout $end
$var wire 1 p* xor_AB $end
$var wire 1 q* xor_ABCin $end
$var wire 1 r* NAND_AB $end
$var wire 1 s* not_NAND_AB $end
$var wire 1 t* NAND_Cin_xor_AB $end
$var wire 1 u* not_NAND_Cin_xor_AB $end
$var wire 1 v* NOR_2NAND $end
$var wire 1 w* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 p( in1 $end
$var wire 1 w) in2 $end
$var wire 1 p* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 p* in1 $end
$var wire 1 $* in2 $end
$var wire 1 q* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 p( in1 $end
$var wire 1 w) in2 $end
$var wire 1 r* out $end
$upscope $end

$scope module not1 $end
$var wire 1 r* in1 $end
$var wire 1 s* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 $* in1 $end
$var wire 1 p* in2 $end
$var wire 1 t* out $end
$upscope $end

$scope module not2 $end
$var wire 1 t* in1 $end
$var wire 1 u* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 s* in1 $end
$var wire 1 u* in2 $end
$var wire 1 v* out $end
$upscope $end

$scope module not3 $end
$var wire 1 v* in1 $end
$var wire 1 w* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 o( A $end
$var wire 1 v) B $end
$var wire 1 m* Cin $end
$var wire 1 '" S $end
$var wire 1 n* Cout $end
$var wire 1 x* xor_AB $end
$var wire 1 y* xor_ABCin $end
$var wire 1 z* NAND_AB $end
$var wire 1 {* not_NAND_AB $end
$var wire 1 |* NAND_Cin_xor_AB $end
$var wire 1 }* not_NAND_Cin_xor_AB $end
$var wire 1 ~* NOR_2NAND $end
$var wire 1 !+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 o( in1 $end
$var wire 1 v) in2 $end
$var wire 1 x* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x* in1 $end
$var wire 1 m* in2 $end
$var wire 1 y* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 o( in1 $end
$var wire 1 v) in2 $end
$var wire 1 z* out $end
$upscope $end

$scope module not1 $end
$var wire 1 z* in1 $end
$var wire 1 {* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 m* in1 $end
$var wire 1 x* in2 $end
$var wire 1 |* out $end
$upscope $end

$scope module not2 $end
$var wire 1 |* in1 $end
$var wire 1 }* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {* in1 $end
$var wire 1 }* in2 $end
$var wire 1 ~* out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~* in1 $end
$var wire 1 !+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 n( A $end
$var wire 1 u) B $end
$var wire 1 n* Cin $end
$var wire 1 &" S $end
$var wire 1 o* Cout $end
$var wire 1 "+ xor_AB $end
$var wire 1 #+ xor_ABCin $end
$var wire 1 $+ NAND_AB $end
$var wire 1 %+ not_NAND_AB $end
$var wire 1 &+ NAND_Cin_xor_AB $end
$var wire 1 '+ not_NAND_Cin_xor_AB $end
$var wire 1 (+ NOR_2NAND $end
$var wire 1 )+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 n( in1 $end
$var wire 1 u) in2 $end
$var wire 1 "+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 "+ in1 $end
$var wire 1 n* in2 $end
$var wire 1 #+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 n( in1 $end
$var wire 1 u) in2 $end
$var wire 1 $+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 $+ in1 $end
$var wire 1 %+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n* in1 $end
$var wire 1 "+ in2 $end
$var wire 1 &+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 &+ in1 $end
$var wire 1 '+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 %+ in1 $end
$var wire 1 '+ in2 $end
$var wire 1 (+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 (+ in1 $end
$var wire 1 )+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 m( A $end
$var wire 1 t) B $end
$var wire 1 o* Cin $end
$var wire 1 %" S $end
$var wire 1 %* Cout $end
$var wire 1 *+ xor_AB $end
$var wire 1 ++ xor_ABCin $end
$var wire 1 ,+ NAND_AB $end
$var wire 1 -+ not_NAND_AB $end
$var wire 1 .+ NAND_Cin_xor_AB $end
$var wire 1 /+ not_NAND_Cin_xor_AB $end
$var wire 1 0+ NOR_2NAND $end
$var wire 1 1+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 m( in1 $end
$var wire 1 t) in2 $end
$var wire 1 *+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 *+ in1 $end
$var wire 1 o* in2 $end
$var wire 1 ++ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 m( in1 $end
$var wire 1 t) in2 $end
$var wire 1 ,+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,+ in1 $end
$var wire 1 -+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o* in1 $end
$var wire 1 *+ in2 $end
$var wire 1 .+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 .+ in1 $end
$var wire 1 /+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -+ in1 $end
$var wire 1 /+ in2 $end
$var wire 1 0+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 0+ in1 $end
$var wire 1 1+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 i( A [3] $end
$var wire 1 j( A [2] $end
$var wire 1 k( A [1] $end
$var wire 1 l( A [0] $end
$var wire 1 p) B [3] $end
$var wire 1 q) B [2] $end
$var wire 1 r) B [1] $end
$var wire 1 s) B [0] $end
$var wire 1 %* Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 "* Cout $end
$var wire 1 2+ Cout0 $end
$var wire 1 3+ Cout1 $end
$var wire 1 4+ Cout2 $end

$scope module f1 $end
$var wire 1 l( A $end
$var wire 1 s) B $end
$var wire 1 %* Cin $end
$var wire 1 $" S $end
$var wire 1 2+ Cout $end
$var wire 1 5+ xor_AB $end
$var wire 1 6+ xor_ABCin $end
$var wire 1 7+ NAND_AB $end
$var wire 1 8+ not_NAND_AB $end
$var wire 1 9+ NAND_Cin_xor_AB $end
$var wire 1 :+ not_NAND_Cin_xor_AB $end
$var wire 1 ;+ NOR_2NAND $end
$var wire 1 <+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 l( in1 $end
$var wire 1 s) in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5+ in1 $end
$var wire 1 %* in2 $end
$var wire 1 6+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 l( in1 $end
$var wire 1 s) in2 $end
$var wire 1 7+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 7+ in1 $end
$var wire 1 8+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 %* in1 $end
$var wire 1 5+ in2 $end
$var wire 1 9+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 9+ in1 $end
$var wire 1 :+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8+ in1 $end
$var wire 1 :+ in2 $end
$var wire 1 ;+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;+ in1 $end
$var wire 1 <+ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 k( A $end
$var wire 1 r) B $end
$var wire 1 2+ Cin $end
$var wire 1 #" S $end
$var wire 1 3+ Cout $end
$var wire 1 =+ xor_AB $end
$var wire 1 >+ xor_ABCin $end
$var wire 1 ?+ NAND_AB $end
$var wire 1 @+ not_NAND_AB $end
$var wire 1 A+ NAND_Cin_xor_AB $end
$var wire 1 B+ not_NAND_Cin_xor_AB $end
$var wire 1 C+ NOR_2NAND $end
$var wire 1 D+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 k( in1 $end
$var wire 1 r) in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 =+ in1 $end
$var wire 1 2+ in2 $end
$var wire 1 >+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 k( in1 $end
$var wire 1 r) in2 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ?+ in1 $end
$var wire 1 @+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 2+ in1 $end
$var wire 1 =+ in2 $end
$var wire 1 A+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 A+ in1 $end
$var wire 1 B+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 @+ in1 $end
$var wire 1 B+ in2 $end
$var wire 1 C+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 C+ in1 $end
$var wire 1 D+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 j( A $end
$var wire 1 q) B $end
$var wire 1 3+ Cin $end
$var wire 1 "" S $end
$var wire 1 4+ Cout $end
$var wire 1 E+ xor_AB $end
$var wire 1 F+ xor_ABCin $end
$var wire 1 G+ NAND_AB $end
$var wire 1 H+ not_NAND_AB $end
$var wire 1 I+ NAND_Cin_xor_AB $end
$var wire 1 J+ not_NAND_Cin_xor_AB $end
$var wire 1 K+ NOR_2NAND $end
$var wire 1 L+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 j( in1 $end
$var wire 1 q) in2 $end
$var wire 1 E+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 E+ in1 $end
$var wire 1 3+ in2 $end
$var wire 1 F+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 j( in1 $end
$var wire 1 q) in2 $end
$var wire 1 G+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 G+ in1 $end
$var wire 1 H+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3+ in1 $end
$var wire 1 E+ in2 $end
$var wire 1 I+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 I+ in1 $end
$var wire 1 J+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 H+ in1 $end
$var wire 1 J+ in2 $end
$var wire 1 K+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 K+ in1 $end
$var wire 1 L+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 i( A $end
$var wire 1 p) B $end
$var wire 1 4+ Cin $end
$var wire 1 !" S $end
$var wire 1 "* Cout $end
$var wire 1 M+ xor_AB $end
$var wire 1 N+ xor_ABCin $end
$var wire 1 O+ NAND_AB $end
$var wire 1 P+ not_NAND_AB $end
$var wire 1 Q+ NAND_Cin_xor_AB $end
$var wire 1 R+ not_NAND_Cin_xor_AB $end
$var wire 1 S+ NOR_2NAND $end
$var wire 1 T+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 i( in1 $end
$var wire 1 p) in2 $end
$var wire 1 M+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 M+ in1 $end
$var wire 1 4+ in2 $end
$var wire 1 N+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 i( in1 $end
$var wire 1 p) in2 $end
$var wire 1 O+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 O+ in1 $end
$var wire 1 P+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 4+ in1 $end
$var wire 1 M+ in2 $end
$var wire 1 Q+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 Q+ in1 $end
$var wire 1 R+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 P+ in1 $end
$var wire 1 R+ in2 $end
$var wire 1 S+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 S+ in1 $end
$var wire 1 T+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 U+ data_in [15] $end
$var wire 1 V+ data_in [14] $end
$var wire 1 W+ data_in [13] $end
$var wire 1 X+ data_in [12] $end
$var wire 1 Y+ data_in [11] $end
$var wire 1 Z+ data_in [10] $end
$var wire 1 [+ data_in [9] $end
$var wire 1 \+ data_in [8] $end
$var wire 1 ]+ data_in [7] $end
$var wire 1 ^+ data_in [6] $end
$var wire 1 _+ data_in [5] $end
$var wire 1 `+ data_in [4] $end
$var wire 1 a+ data_in [3] $end
$var wire 1 b+ data_in [2] $end
$var wire 1 c+ data_in [1] $end
$var wire 1 d+ data_in [0] $end
$var wire 1 i( addr [15] $end
$var wire 1 j( addr [14] $end
$var wire 1 k( addr [13] $end
$var wire 1 l( addr [12] $end
$var wire 1 m( addr [11] $end
$var wire 1 n( addr [10] $end
$var wire 1 o( addr [9] $end
$var wire 1 p( addr [8] $end
$var wire 1 q( addr [7] $end
$var wire 1 r( addr [6] $end
$var wire 1 s( addr [5] $end
$var wire 1 t( addr [4] $end
$var wire 1 u( addr [3] $end
$var wire 1 v( addr [2] $end
$var wire 1 w( addr [1] $end
$var wire 1 x( addr [0] $end
$var wire 1 e+ enable $end
$var wire 1 f+ wr $end
$var wire 1 g+ createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h+ loaded $end
$var reg 17 i+ largest [16:0] $end
$var integer 32 j+ mcd $end
$var integer 32 k+ i $end
$upscope $end

$scope module pc[15] $end
$var wire 1 i( q $end
$var wire 1 I( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l+ state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 j( q $end
$var wire 1 J( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m+ state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 k( q $end
$var wire 1 K( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 l( q $end
$var wire 1 L( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o+ state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 m( q $end
$var wire 1 M( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p+ state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 n( q $end
$var wire 1 N( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q+ state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 o( q $end
$var wire 1 O( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r+ state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 p( q $end
$var wire 1 P( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s+ state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 q( q $end
$var wire 1 Q( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t+ state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 r( q $end
$var wire 1 R( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u+ state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 s( q $end
$var wire 1 S( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v+ state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 t( q $end
$var wire 1 T( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w+ state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 u( q $end
$var wire 1 U( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x+ state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 v( q $end
$var wire 1 V( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y+ state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 w( q $end
$var wire 1 W( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z+ state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 x( q $end
$var wire 1 X( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {+ state $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 A) PC_next_in [15] $end
$var wire 1 B) PC_next_in [14] $end
$var wire 1 C) PC_next_in [13] $end
$var wire 1 D) PC_next_in [12] $end
$var wire 1 E) PC_next_in [11] $end
$var wire 1 F) PC_next_in [10] $end
$var wire 1 G) PC_next_in [9] $end
$var wire 1 H) PC_next_in [8] $end
$var wire 1 I) PC_next_in [7] $end
$var wire 1 J) PC_next_in [6] $end
$var wire 1 K) PC_next_in [5] $end
$var wire 1 L) PC_next_in [4] $end
$var wire 1 M) PC_next_in [3] $end
$var wire 1 N) PC_next_in [2] $end
$var wire 1 O) PC_next_in [1] $end
$var wire 1 P) PC_next_in [0] $end
$var wire 1 0) instruction_in [15] $end
$var wire 1 1) instruction_in [14] $end
$var wire 1 2) instruction_in [13] $end
$var wire 1 3) instruction_in [12] $end
$var wire 1 4) instruction_in [11] $end
$var wire 1 5) instruction_in [10] $end
$var wire 1 6) instruction_in [9] $end
$var wire 1 7) instruction_in [8] $end
$var wire 1 8) instruction_in [7] $end
$var wire 1 9) instruction_in [6] $end
$var wire 1 :) instruction_in [5] $end
$var wire 1 ;) instruction_in [4] $end
$var wire 1 <) instruction_in [3] $end
$var wire 1 =) instruction_in [2] $end
$var wire 1 >) instruction_in [1] $end
$var wire 1 ?) instruction_in [0] $end
$var wire 1 i( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 j( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 k( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 l( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 m( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 n( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 o( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 p( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 q( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 r( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 s( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 t( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 u( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 v( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 w( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 x( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 y( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 z( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 {( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 |( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 }( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 ~( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 !) PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 ") PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 #) PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 $) PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 %) PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 &) PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 ') PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 () PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 )) PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 *) PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 A) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |+ state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 B) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }+ state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 C) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~+ state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 D) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !, state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 E) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ", state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 F) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #, state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 G) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $, state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 H) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %, state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 I) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &, state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 J) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ', state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 K) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (, state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 L) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ), state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 M) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *, state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 N) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +, state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 O) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,, state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 P) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -, state $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ., state [15:0] $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 /, state [15:0] $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 0, state [15:0] $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 1, state [15:0] $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 2, state [15:0] $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 3, state [15:0] $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 4, state [15:0] $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 5, state [15:0] $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 6, state [15:0] $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 7, state [15:0] $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 8, state [15:0] $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 9, state [15:0] $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 :, state [15:0] $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 ;, state [15:0] $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 <, state [15:0] $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 =, state [15:0] $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 y( q $end
$var wire 1 i( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >, state $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 z( q $end
$var wire 1 j( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?, state $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 {( q $end
$var wire 1 k( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @, state $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 |( q $end
$var wire 1 l( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A, state $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 }( q $end
$var wire 1 m( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B, state $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 ~( q $end
$var wire 1 n( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C, state $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 !) q $end
$var wire 1 o( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D, state $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 ") q $end
$var wire 1 p( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E, state $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 #) q $end
$var wire 1 q( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F, state $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 $) q $end
$var wire 1 r( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G, state $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 %) q $end
$var wire 1 s( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H, state $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 &) q $end
$var wire 1 t( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I, state $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 ') q $end
$var wire 1 u( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J, state $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 () q $end
$var wire 1 v( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K, state $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 )) q $end
$var wire 1 w( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L, state $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 *) q $end
$var wire 1 x( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M, state $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 a' err $end
$var wire 1 Y) instruction [15] $end
$var wire 1 Z) instruction [14] $end
$var wire 1 [) instruction [13] $end
$var wire 1 \) instruction [12] $end
$var wire 1 ]) instruction [11] $end
$var wire 1 ^) instruction [10] $end
$var wire 1 _) instruction [9] $end
$var wire 1 `) instruction [8] $end
$var wire 1 a) instruction [7] $end
$var wire 1 b) instruction [6] $end
$var wire 1 c) instruction [5] $end
$var wire 1 d) instruction [4] $end
$var wire 1 e) instruction [3] $end
$var wire 1 f) instruction [2] $end
$var wire 1 g) instruction [1] $end
$var wire 1 h) instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 N, signed_i_1 [15] $end
$var wire 1 O, signed_i_1 [14] $end
$var wire 1 P, signed_i_1 [13] $end
$var wire 1 Q, signed_i_1 [12] $end
$var wire 1 R, signed_i_1 [11] $end
$var wire 1 S, signed_i_1 [10] $end
$var wire 1 T, signed_i_1 [9] $end
$var wire 1 U, signed_i_1 [8] $end
$var wire 1 V, signed_i_1 [7] $end
$var wire 1 W, signed_i_1 [6] $end
$var wire 1 X, signed_i_1 [5] $end
$var wire 1 Y, signed_i_1 [4] $end
$var wire 1 Z, signed_i_1 [3] $end
$var wire 1 [, signed_i_1 [2] $end
$var wire 1 \, signed_i_1 [1] $end
$var wire 1 ], signed_i_1 [0] $end
$var wire 1 ^, zero_i_1 [15] $end
$var wire 1 _, zero_i_1 [14] $end
$var wire 1 `, zero_i_1 [13] $end
$var wire 1 a, zero_i_1 [12] $end
$var wire 1 b, zero_i_1 [11] $end
$var wire 1 c, zero_i_1 [10] $end
$var wire 1 d, zero_i_1 [9] $end
$var wire 1 e, zero_i_1 [8] $end
$var wire 1 f, zero_i_1 [7] $end
$var wire 1 g, zero_i_1 [6] $end
$var wire 1 h, zero_i_1 [5] $end
$var wire 1 i, zero_i_1 [4] $end
$var wire 1 j, zero_i_1 [3] $end
$var wire 1 k, zero_i_1 [2] $end
$var wire 1 l, zero_i_1 [1] $end
$var wire 1 m, zero_i_1 [0] $end
$var wire 1 n, signed_i_2 [15] $end
$var wire 1 o, signed_i_2 [14] $end
$var wire 1 p, signed_i_2 [13] $end
$var wire 1 q, signed_i_2 [12] $end
$var wire 1 r, signed_i_2 [11] $end
$var wire 1 s, signed_i_2 [10] $end
$var wire 1 t, signed_i_2 [9] $end
$var wire 1 u, signed_i_2 [8] $end
$var wire 1 v, signed_i_2 [7] $end
$var wire 1 w, signed_i_2 [6] $end
$var wire 1 x, signed_i_2 [5] $end
$var wire 1 y, signed_i_2 [4] $end
$var wire 1 z, signed_i_2 [3] $end
$var wire 1 {, signed_i_2 [2] $end
$var wire 1 |, signed_i_2 [1] $end
$var wire 1 }, signed_i_2 [0] $end
$var wire 1 ~, zero_i_2 [15] $end
$var wire 1 !- zero_i_2 [14] $end
$var wire 1 "- zero_i_2 [13] $end
$var wire 1 #- zero_i_2 [12] $end
$var wire 1 $- zero_i_2 [11] $end
$var wire 1 %- zero_i_2 [10] $end
$var wire 1 &- zero_i_2 [9] $end
$var wire 1 '- zero_i_2 [8] $end
$var wire 1 (- zero_i_2 [7] $end
$var wire 1 )- zero_i_2 [6] $end
$var wire 1 *- zero_i_2 [5] $end
$var wire 1 +- zero_i_2 [4] $end
$var wire 1 ,- zero_i_2 [3] $end
$var wire 1 -- zero_i_2 [2] $end
$var wire 1 .- zero_i_2 [1] $end
$var wire 1 /- zero_i_2 [0] $end
$var reg 1 0- OExt $end
$var reg 1 1- RegWrt $end
$var reg 2 2- RegDst [1:0] $end
$var reg 1 3- halt $end
$var reg 1 4- BTR $end
$var reg 3 5- ALUOpr [2:0] $end
$var reg 2 6- Bsrc [1:0] $end
$var reg 1 7- InvB $end
$var reg 1 8- InvA $end
$var reg 1 9- ImmSrc $end
$var reg 1 :- MemWrt $end
$var reg 1 ;- ALUJMP $end
$var reg 1 <- PC_or_add $end
$var reg 2 =- RegSrc [1:0] $end
$var reg 1 >- SLBI $end
$var reg 1 ?- branching $end
$var reg 2 @- branch_command [1:0] $end
$var reg 3 A- SetCtrl [2:0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end

$scope module registerfile $end
$var parameter 32 B- bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 ^) read1RegSel [2] $end
$var wire 1 _) read1RegSel [1] $end
$var wire 1 `) read1RegSel [0] $end
$var wire 1 a) read2RegSel [2] $end
$var wire 1 b) read2RegSel [1] $end
$var wire 1 c) read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 a' err $end
$var wire 1 C- registers [0] $end
$var wire 1 D- registers [1] $end
$var wire 1 E- registers [2] $end
$var wire 1 F- registers [3] $end
$var wire 1 G- registers [4] $end
$var wire 1 H- registers [5] $end
$var wire 1 I- registers [6] $end
$var wire 1 J- registers [7] $end
$var wire 1 K- registers [8] $end
$var wire 1 L- registers [9] $end
$var wire 1 M- registers [10] $end
$var wire 1 N- registers [11] $end
$var wire 1 O- registers [12] $end
$var wire 1 P- registers [13] $end
$var wire 1 Q- registers [14] $end
$var wire 1 R- registers [15] $end
$var wire 1 S- registers [16] $end
$var wire 1 T- registers [17] $end
$var wire 1 U- registers [18] $end
$var wire 1 V- registers [19] $end
$var wire 1 W- registers [20] $end
$var wire 1 X- registers [21] $end
$var wire 1 Y- registers [22] $end
$var wire 1 Z- registers [23] $end
$var wire 1 [- registers [24] $end
$var wire 1 \- registers [25] $end
$var wire 1 ]- registers [26] $end
$var wire 1 ^- registers [27] $end
$var wire 1 _- registers [28] $end
$var wire 1 `- registers [29] $end
$var wire 1 a- registers [30] $end
$var wire 1 b- registers [31] $end
$var wire 1 c- registers [32] $end
$var wire 1 d- registers [33] $end
$var wire 1 e- registers [34] $end
$var wire 1 f- registers [35] $end
$var wire 1 g- registers [36] $end
$var wire 1 h- registers [37] $end
$var wire 1 i- registers [38] $end
$var wire 1 j- registers [39] $end
$var wire 1 k- registers [40] $end
$var wire 1 l- registers [41] $end
$var wire 1 m- registers [42] $end
$var wire 1 n- registers [43] $end
$var wire 1 o- registers [44] $end
$var wire 1 p- registers [45] $end
$var wire 1 q- registers [46] $end
$var wire 1 r- registers [47] $end
$var wire 1 s- registers [48] $end
$var wire 1 t- registers [49] $end
$var wire 1 u- registers [50] $end
$var wire 1 v- registers [51] $end
$var wire 1 w- registers [52] $end
$var wire 1 x- registers [53] $end
$var wire 1 y- registers [54] $end
$var wire 1 z- registers [55] $end
$var wire 1 {- registers [56] $end
$var wire 1 |- registers [57] $end
$var wire 1 }- registers [58] $end
$var wire 1 ~- registers [59] $end
$var wire 1 !. registers [60] $end
$var wire 1 ". registers [61] $end
$var wire 1 #. registers [62] $end
$var wire 1 $. registers [63] $end
$var wire 1 %. registers [64] $end
$var wire 1 &. registers [65] $end
$var wire 1 '. registers [66] $end
$var wire 1 (. registers [67] $end
$var wire 1 ). registers [68] $end
$var wire 1 *. registers [69] $end
$var wire 1 +. registers [70] $end
$var wire 1 ,. registers [71] $end
$var wire 1 -. registers [72] $end
$var wire 1 .. registers [73] $end
$var wire 1 /. registers [74] $end
$var wire 1 0. registers [75] $end
$var wire 1 1. registers [76] $end
$var wire 1 2. registers [77] $end
$var wire 1 3. registers [78] $end
$var wire 1 4. registers [79] $end
$var wire 1 5. registers [80] $end
$var wire 1 6. registers [81] $end
$var wire 1 7. registers [82] $end
$var wire 1 8. registers [83] $end
$var wire 1 9. registers [84] $end
$var wire 1 :. registers [85] $end
$var wire 1 ;. registers [86] $end
$var wire 1 <. registers [87] $end
$var wire 1 =. registers [88] $end
$var wire 1 >. registers [89] $end
$var wire 1 ?. registers [90] $end
$var wire 1 @. registers [91] $end
$var wire 1 A. registers [92] $end
$var wire 1 B. registers [93] $end
$var wire 1 C. registers [94] $end
$var wire 1 D. registers [95] $end
$var wire 1 E. registers [96] $end
$var wire 1 F. registers [97] $end
$var wire 1 G. registers [98] $end
$var wire 1 H. registers [99] $end
$var wire 1 I. registers [100] $end
$var wire 1 J. registers [101] $end
$var wire 1 K. registers [102] $end
$var wire 1 L. registers [103] $end
$var wire 1 M. registers [104] $end
$var wire 1 N. registers [105] $end
$var wire 1 O. registers [106] $end
$var wire 1 P. registers [107] $end
$var wire 1 Q. registers [108] $end
$var wire 1 R. registers [109] $end
$var wire 1 S. registers [110] $end
$var wire 1 T. registers [111] $end
$var wire 1 U. registers [112] $end
$var wire 1 V. registers [113] $end
$var wire 1 W. registers [114] $end
$var wire 1 X. registers [115] $end
$var wire 1 Y. registers [116] $end
$var wire 1 Z. registers [117] $end
$var wire 1 [. registers [118] $end
$var wire 1 \. registers [119] $end
$var wire 1 ]. registers [120] $end
$var wire 1 ^. registers [121] $end
$var wire 1 _. registers [122] $end
$var wire 1 `. registers [123] $end
$var wire 1 a. registers [124] $end
$var wire 1 b. registers [125] $end
$var wire 1 c. registers [126] $end
$var wire 1 d. registers [127] $end
$var wire 1 e. mask_1 [0] $end
$var wire 1 f. mask_1 [1] $end
$var wire 1 g. mask_1 [2] $end
$var wire 1 h. mask_1 [3] $end
$var wire 1 i. mask_1 [4] $end
$var wire 1 j. mask_1 [5] $end
$var wire 1 k. mask_1 [6] $end
$var wire 1 l. mask_1 [7] $end

$scope module ind_reg1 $end
$var parameter 32 m. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 l. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 d. read [15] $end
$var wire 1 c. read [14] $end
$var wire 1 b. read [13] $end
$var wire 1 a. read [12] $end
$var wire 1 `. read [11] $end
$var wire 1 _. read [10] $end
$var wire 1 ^. read [9] $end
$var wire 1 ]. read [8] $end
$var wire 1 \. read [7] $end
$var wire 1 [. read [6] $end
$var wire 1 Z. read [5] $end
$var wire 1 Y. read [4] $end
$var wire 1 X. read [3] $end
$var wire 1 W. read [2] $end
$var wire 1 V. read [1] $end
$var wire 1 U. read [0] $end

$scope module flop[15] $end
$var wire 1 d. q $end
$var wire 1 n. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 c. q $end
$var wire 1 p. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 b. q $end
$var wire 1 r. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 a. q $end
$var wire 1 t. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 `. q $end
$var wire 1 v. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 _. q $end
$var wire 1 x. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ^. q $end
$var wire 1 z. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {. state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ]. q $end
$var wire 1 |. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }. state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 \. q $end
$var wire 1 ~. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 [. q $end
$var wire 1 "/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 Z. q $end
$var wire 1 $/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 Y. q $end
$var wire 1 &/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 X. q $end
$var wire 1 (/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 W. q $end
$var wire 1 */ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 V. q $end
$var wire 1 ,/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 U. q $end
$var wire 1 ./ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 // state $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var parameter 32 0/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 k. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 T. read [15] $end
$var wire 1 S. read [14] $end
$var wire 1 R. read [13] $end
$var wire 1 Q. read [12] $end
$var wire 1 P. read [11] $end
$var wire 1 O. read [10] $end
$var wire 1 N. read [9] $end
$var wire 1 M. read [8] $end
$var wire 1 L. read [7] $end
$var wire 1 K. read [6] $end
$var wire 1 J. read [5] $end
$var wire 1 I. read [4] $end
$var wire 1 H. read [3] $end
$var wire 1 G. read [2] $end
$var wire 1 F. read [1] $end
$var wire 1 E. read [0] $end

$scope module flop[15] $end
$var wire 1 T. q $end
$var wire 1 1/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 S. q $end
$var wire 1 3/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 R. q $end
$var wire 1 5/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 Q. q $end
$var wire 1 7/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 P. q $end
$var wire 1 9/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 O. q $end
$var wire 1 ;/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 </ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 N. q $end
$var wire 1 =/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 M. q $end
$var wire 1 ?/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 L. q $end
$var wire 1 A/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 K. q $end
$var wire 1 C/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 J. q $end
$var wire 1 E/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 I. q $end
$var wire 1 G/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 H. q $end
$var wire 1 I/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 G. q $end
$var wire 1 K/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 F. q $end
$var wire 1 M/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 E. q $end
$var wire 1 O/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P/ state $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var parameter 32 Q/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 j. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 D. read [15] $end
$var wire 1 C. read [14] $end
$var wire 1 B. read [13] $end
$var wire 1 A. read [12] $end
$var wire 1 @. read [11] $end
$var wire 1 ?. read [10] $end
$var wire 1 >. read [9] $end
$var wire 1 =. read [8] $end
$var wire 1 <. read [7] $end
$var wire 1 ;. read [6] $end
$var wire 1 :. read [5] $end
$var wire 1 9. read [4] $end
$var wire 1 8. read [3] $end
$var wire 1 7. read [2] $end
$var wire 1 6. read [1] $end
$var wire 1 5. read [0] $end

$scope module flop[15] $end
$var wire 1 D. q $end
$var wire 1 R/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 C. q $end
$var wire 1 T/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 B. q $end
$var wire 1 V/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 A. q $end
$var wire 1 X/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 @. q $end
$var wire 1 Z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ?. q $end
$var wire 1 \/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 >. q $end
$var wire 1 ^/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 =. q $end
$var wire 1 `/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 <. q $end
$var wire 1 b/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 ;. q $end
$var wire 1 d/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 :. q $end
$var wire 1 f/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 9. q $end
$var wire 1 h/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 8. q $end
$var wire 1 j/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 7. q $end
$var wire 1 l/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 6. q $end
$var wire 1 n/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 5. q $end
$var wire 1 p/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q/ state $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var parameter 32 r/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 i. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 4. read [15] $end
$var wire 1 3. read [14] $end
$var wire 1 2. read [13] $end
$var wire 1 1. read [12] $end
$var wire 1 0. read [11] $end
$var wire 1 /. read [10] $end
$var wire 1 .. read [9] $end
$var wire 1 -. read [8] $end
$var wire 1 ,. read [7] $end
$var wire 1 +. read [6] $end
$var wire 1 *. read [5] $end
$var wire 1 ). read [4] $end
$var wire 1 (. read [3] $end
$var wire 1 '. read [2] $end
$var wire 1 &. read [1] $end
$var wire 1 %. read [0] $end

$scope module flop[15] $end
$var wire 1 4. q $end
$var wire 1 s/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 3. q $end
$var wire 1 u/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 2. q $end
$var wire 1 w/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 1. q $end
$var wire 1 y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 0. q $end
$var wire 1 {/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 /. q $end
$var wire 1 }/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 .. q $end
$var wire 1 !0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 -. q $end
$var wire 1 #0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 ,. q $end
$var wire 1 %0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 +. q $end
$var wire 1 '0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 *. q $end
$var wire 1 )0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 ). q $end
$var wire 1 +0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 (. q $end
$var wire 1 -0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 '. q $end
$var wire 1 /0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 00 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 &. q $end
$var wire 1 10 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 20 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 %. q $end
$var wire 1 30 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 40 state $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var parameter 32 50 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 h. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 $. read [15] $end
$var wire 1 #. read [14] $end
$var wire 1 ". read [13] $end
$var wire 1 !. read [12] $end
$var wire 1 ~- read [11] $end
$var wire 1 }- read [10] $end
$var wire 1 |- read [9] $end
$var wire 1 {- read [8] $end
$var wire 1 z- read [7] $end
$var wire 1 y- read [6] $end
$var wire 1 x- read [5] $end
$var wire 1 w- read [4] $end
$var wire 1 v- read [3] $end
$var wire 1 u- read [2] $end
$var wire 1 t- read [1] $end
$var wire 1 s- read [0] $end

$scope module flop[15] $end
$var wire 1 $. q $end
$var wire 1 60 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 70 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 #. q $end
$var wire 1 80 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 90 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ". q $end
$var wire 1 :0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 !. q $end
$var wire 1 <0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ~- q $end
$var wire 1 >0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 }- q $end
$var wire 1 @0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 |- q $end
$var wire 1 B0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 {- q $end
$var wire 1 D0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 z- q $end
$var wire 1 F0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 y- q $end
$var wire 1 H0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 x- q $end
$var wire 1 J0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 w- q $end
$var wire 1 L0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 v- q $end
$var wire 1 N0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 u- q $end
$var wire 1 P0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 t- q $end
$var wire 1 R0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 s- q $end
$var wire 1 T0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U0 state $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var parameter 32 V0 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 g. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 r- read [15] $end
$var wire 1 q- read [14] $end
$var wire 1 p- read [13] $end
$var wire 1 o- read [12] $end
$var wire 1 n- read [11] $end
$var wire 1 m- read [10] $end
$var wire 1 l- read [9] $end
$var wire 1 k- read [8] $end
$var wire 1 j- read [7] $end
$var wire 1 i- read [6] $end
$var wire 1 h- read [5] $end
$var wire 1 g- read [4] $end
$var wire 1 f- read [3] $end
$var wire 1 e- read [2] $end
$var wire 1 d- read [1] $end
$var wire 1 c- read [0] $end

$scope module flop[15] $end
$var wire 1 r- q $end
$var wire 1 W0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 q- q $end
$var wire 1 Y0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 p- q $end
$var wire 1 [0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 o- q $end
$var wire 1 ]0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^0 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 n- q $end
$var wire 1 _0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 m- q $end
$var wire 1 a0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 l- q $end
$var wire 1 c0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 k- q $end
$var wire 1 e0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 j- q $end
$var wire 1 g0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 i- q $end
$var wire 1 i0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 h- q $end
$var wire 1 k0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 g- q $end
$var wire 1 m0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n0 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 f- q $end
$var wire 1 o0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p0 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 e- q $end
$var wire 1 q0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r0 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 d- q $end
$var wire 1 s0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t0 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 c- q $end
$var wire 1 u0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v0 state $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var parameter 32 w0 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 f. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 b- read [15] $end
$var wire 1 a- read [14] $end
$var wire 1 `- read [13] $end
$var wire 1 _- read [12] $end
$var wire 1 ^- read [11] $end
$var wire 1 ]- read [10] $end
$var wire 1 \- read [9] $end
$var wire 1 [- read [8] $end
$var wire 1 Z- read [7] $end
$var wire 1 Y- read [6] $end
$var wire 1 X- read [5] $end
$var wire 1 W- read [4] $end
$var wire 1 V- read [3] $end
$var wire 1 U- read [2] $end
$var wire 1 T- read [1] $end
$var wire 1 S- read [0] $end

$scope module flop[15] $end
$var wire 1 b- q $end
$var wire 1 x0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y0 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 a- q $end
$var wire 1 z0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {0 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 `- q $end
$var wire 1 |0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }0 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 _- q $end
$var wire 1 ~0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !1 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ^- q $end
$var wire 1 "1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #1 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ]- q $end
$var wire 1 $1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %1 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 \- q $end
$var wire 1 &1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '1 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 [- q $end
$var wire 1 (1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 Z- q $end
$var wire 1 *1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 Y- q $end
$var wire 1 ,1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 X- q $end
$var wire 1 .1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 W- q $end
$var wire 1 01 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 11 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 V- q $end
$var wire 1 21 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 31 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 U- q $end
$var wire 1 41 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 51 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 T- q $end
$var wire 1 61 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 71 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 S- q $end
$var wire 1 81 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 91 state $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var parameter 32 :1 bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 e. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 R- read [15] $end
$var wire 1 Q- read [14] $end
$var wire 1 P- read [13] $end
$var wire 1 O- read [12] $end
$var wire 1 N- read [11] $end
$var wire 1 M- read [10] $end
$var wire 1 L- read [9] $end
$var wire 1 K- read [8] $end
$var wire 1 J- read [7] $end
$var wire 1 I- read [6] $end
$var wire 1 H- read [5] $end
$var wire 1 G- read [4] $end
$var wire 1 F- read [3] $end
$var wire 1 E- read [2] $end
$var wire 1 D- read [1] $end
$var wire 1 C- read [0] $end

$scope module flop[15] $end
$var wire 1 R- q $end
$var wire 1 ;1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <1 state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 Q- q $end
$var wire 1 =1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >1 state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 P- q $end
$var wire 1 ?1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @1 state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 O- q $end
$var wire 1 A1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B1 state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 N- q $end
$var wire 1 C1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D1 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 M- q $end
$var wire 1 E1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F1 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 L- q $end
$var wire 1 G1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H1 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 K- q $end
$var wire 1 I1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J1 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 J- q $end
$var wire 1 K1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L1 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 I- q $end
$var wire 1 M1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N1 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 H- q $end
$var wire 1 O1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P1 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 G- q $end
$var wire 1 Q1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R1 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 F- q $end
$var wire 1 S1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T1 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 E- q $end
$var wire 1 U1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V1 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 D- q $end
$var wire 1 W1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X1 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 C- q $end
$var wire 1 Y1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z1 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 W) NOPEx $end
$var wire 1 T) NOPMem $end
$var wire 1 U) NOPWB $end
$var wire 1 +) sendNOP $end
$var wire 1 [1 regEqual $end
$var wire 1 \1 regEqual2 $end
$var wire 1 ]1 MEMWRT $end
$var wire 1 ^1 sendNOP_not_st $end
$var wire 1 _1 RegS [2] $end
$var wire 1 `1 RegS [1] $end
$var wire 1 a1 RegS [0] $end
$var wire 1 b1 RegT [2] $end
$var wire 1 c1 RegT [1] $end
$var wire 1 d1 RegT [0] $end
$var wire 1 R& WRMEM $end
$var wire 1 L' WRWB $end
$var wire 1 e1 compEx $end
$var wire 1 f1 compMem $end
$var wire 1 g1 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 h1 halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 X) SendNOP_In $end
$var wire 1 S) SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i1 state $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j1 state $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k1 state $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l1 state $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m1 state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n1 state $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o1 state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p1 state $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 h1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q1 state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r1 state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 S) q $end
$var wire 1 X) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s1 state $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t1 state $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u1 state $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v1 state $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w1 state $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x1 state $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y1 state $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z1 state $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {1 state $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |1 state $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }1 state $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~1 state $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !2 state $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "2 state $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #2 state $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $2 state $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %2 state $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &2 state $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '2 state $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (2 state $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )2 state $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *2 state $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +2 state $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,2 state $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -2 state $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .2 state $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /2 state $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 02 state $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 12 state $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 22 state $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 32 state $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 42 state $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 52 state $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 62 state $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 72 state $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 82 state $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 92 state $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :2 state $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;2 state $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <2 state $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =2 state $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >2 state $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?2 state $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @2 state $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A2 state $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B2 state $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C2 state $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D2 state $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E2 state $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F2 state $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G2 state $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H2 state $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I2 state $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J2 state $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K2 state $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L2 state $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M2 state $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N2 state $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O2 state $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P2 state $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q2 state $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R2 state $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S2 state $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T2 state $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U2 state $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V2 state $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W2 state $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X2 state $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y2 state $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z2 state $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [2 state $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \2 state $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]2 state $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^2 state $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _2 state $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `2 state $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a2 state $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b2 state $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c2 state $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d2 state $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e2 state $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f2 state $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g2 state $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h2 state $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i2 state $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j2 state $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k2 state $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l2 state $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m2 state $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n2 state $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o2 state $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p2 state $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q2 state $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r2 state $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s2 state $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t2 state $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u2 state $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v2 state $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w2 state $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x2 state $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y2 state $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z2 state $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {2 state $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |2 state $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }2 state $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~2 state $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !3 state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "3 state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #3 state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $3 state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %3 state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &3 state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '3 state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (3 state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )3 state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *3 state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +3 state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,3 state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -3 state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .3 state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /3 state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 03 state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 13 state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 23 state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 33 state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 43 state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 53 state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 63 state $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 73 possibleslbi [15] $end
$var wire 1 83 possibleslbi [14] $end
$var wire 1 93 possibleslbi [13] $end
$var wire 1 :3 possibleslbi [12] $end
$var wire 1 ;3 possibleslbi [11] $end
$var wire 1 <3 possibleslbi [10] $end
$var wire 1 =3 possibleslbi [9] $end
$var wire 1 >3 possibleslbi [8] $end
$var wire 1 ?3 possibleslbi [7] $end
$var wire 1 @3 possibleslbi [6] $end
$var wire 1 A3 possibleslbi [5] $end
$var wire 1 B3 possibleslbi [4] $end
$var wire 1 C3 possibleslbi [3] $end
$var wire 1 D3 possibleslbi [2] $end
$var wire 1 E3 possibleslbi [1] $end
$var wire 1 F3 possibleslbi [0] $end
$var wire 1 G3 shiftedA [15] $end
$var wire 1 H3 shiftedA [14] $end
$var wire 1 I3 shiftedA [13] $end
$var wire 1 J3 shiftedA [12] $end
$var wire 1 K3 shiftedA [11] $end
$var wire 1 L3 shiftedA [10] $end
$var wire 1 M3 shiftedA [9] $end
$var wire 1 N3 shiftedA [8] $end
$var wire 1 O3 shiftedA [7] $end
$var wire 1 P3 shiftedA [6] $end
$var wire 1 Q3 shiftedA [5] $end
$var wire 1 R3 shiftedA [4] $end
$var wire 1 S3 shiftedA [3] $end
$var wire 1 T3 shiftedA [2] $end
$var wire 1 U3 shiftedA [1] $end
$var wire 1 V3 shiftedA [0] $end
$var wire 1 W3 slbiOper $end
$var wire 1 X3 aluout [15] $end
$var wire 1 Y3 aluout [14] $end
$var wire 1 Z3 aluout [13] $end
$var wire 1 [3 aluout [12] $end
$var wire 1 \3 aluout [11] $end
$var wire 1 ]3 aluout [10] $end
$var wire 1 ^3 aluout [9] $end
$var wire 1 _3 aluout [8] $end
$var wire 1 `3 aluout [7] $end
$var wire 1 a3 aluout [6] $end
$var wire 1 b3 aluout [5] $end
$var wire 1 c3 aluout [4] $end
$var wire 1 d3 aluout [3] $end
$var wire 1 e3 aluout [2] $end
$var wire 1 f3 aluout [1] $end
$var wire 1 g3 aluout [0] $end
$var wire 1 h3 conditional $end
$var wire 1 i3 CF $end
$var wire 1 j3 Zero $end
$var wire 1 k3 Overflow $end
$var wire 1 l3 Brchcnd $end
$var wire 1 m3 Oper [1] $end
$var wire 1 n3 Oper [0] $end
$var wire 1 o3 altb $end
$var wire 1 p3 coout [15] $end
$var wire 1 q3 coout [14] $end
$var wire 1 r3 coout [13] $end
$var wire 1 s3 coout [12] $end
$var wire 1 t3 coout [11] $end
$var wire 1 u3 coout [10] $end
$var wire 1 v3 coout [9] $end
$var wire 1 w3 coout [8] $end
$var wire 1 x3 coout [7] $end
$var wire 1 y3 coout [6] $end
$var wire 1 z3 coout [5] $end
$var wire 1 {3 coout [4] $end
$var wire 1 |3 coout [3] $end
$var wire 1 }3 coout [2] $end
$var wire 1 ~3 coout [1] $end
$var wire 1 !4 coout [0] $end
$var wire 1 "4 sltoper [1] $end
$var wire 1 #4 sltoper [0] $end
$var wire 1 $4 ltout [15] $end
$var wire 1 %4 ltout [14] $end
$var wire 1 &4 ltout [13] $end
$var wire 1 '4 ltout [12] $end
$var wire 1 (4 ltout [11] $end
$var wire 1 )4 ltout [10] $end
$var wire 1 *4 ltout [9] $end
$var wire 1 +4 ltout [8] $end
$var wire 1 ,4 ltout [7] $end
$var wire 1 -4 ltout [6] $end
$var wire 1 .4 ltout [5] $end
$var wire 1 /4 ltout [4] $end
$var wire 1 04 ltout [3] $end
$var wire 1 14 ltout [2] $end
$var wire 1 24 ltout [1] $end
$var wire 1 34 ltout [0] $end
$var wire 1 44 seqoper [1] $end
$var wire 1 54 seqoper [0] $end
$var wire 1 64 aeqb $end
$var wire 1 74 seqout [15] $end
$var wire 1 84 seqout [14] $end
$var wire 1 94 seqout [13] $end
$var wire 1 :4 seqout [12] $end
$var wire 1 ;4 seqout [11] $end
$var wire 1 <4 seqout [10] $end
$var wire 1 =4 seqout [9] $end
$var wire 1 >4 seqout [8] $end
$var wire 1 ?4 seqout [7] $end
$var wire 1 @4 seqout [6] $end
$var wire 1 A4 seqout [5] $end
$var wire 1 B4 seqout [4] $end
$var wire 1 C4 seqout [3] $end
$var wire 1 D4 seqout [2] $end
$var wire 1 E4 seqout [1] $end
$var wire 1 F4 seqout [0] $end
$var wire 1 G4 alteb $end
$var wire 1 H4 sleoper [1] $end
$var wire 1 I4 sleoper [0] $end
$var wire 1 J4 sleout [15] $end
$var wire 1 K4 sleout [14] $end
$var wire 1 L4 sleout [13] $end
$var wire 1 M4 sleout [12] $end
$var wire 1 N4 sleout [11] $end
$var wire 1 O4 sleout [10] $end
$var wire 1 P4 sleout [9] $end
$var wire 1 Q4 sleout [8] $end
$var wire 1 R4 sleout [7] $end
$var wire 1 S4 sleout [6] $end
$var wire 1 T4 sleout [5] $end
$var wire 1 U4 sleout [4] $end
$var wire 1 V4 sleout [3] $end
$var wire 1 W4 sleout [2] $end
$var wire 1 X4 sleout [1] $end
$var wire 1 Y4 sleout [0] $end
$var wire 1 Z4 SetCtrl [1] $end
$var wire 1 [4 SetCtrl [0] $end
$var wire 1 \4 carry $end
$var wire 1 ]4 SLT $end
$var wire 1 ^4 SEQ $end
$var wire 1 _4 SLE $end
$var wire 1 `4 greater $end
$var wire 1 a4 ReverseOut [15] $end
$var wire 1 b4 ReverseOut [14] $end
$var wire 1 c4 ReverseOut [13] $end
$var wire 1 d4 ReverseOut [12] $end
$var wire 1 e4 ReverseOut [11] $end
$var wire 1 f4 ReverseOut [10] $end
$var wire 1 g4 ReverseOut [9] $end
$var wire 1 h4 ReverseOut [8] $end
$var wire 1 i4 ReverseOut [7] $end
$var wire 1 j4 ReverseOut [6] $end
$var wire 1 k4 ReverseOut [5] $end
$var wire 1 l4 ReverseOut [4] $end
$var wire 1 m4 ReverseOut [3] $end
$var wire 1 n4 ReverseOut [2] $end
$var wire 1 o4 ReverseOut [1] $end
$var wire 1 p4 ReverseOut [0] $end
$var wire 1 q4 reverse [15] $end
$var wire 1 r4 reverse [14] $end
$var wire 1 s4 reverse [13] $end
$var wire 1 t4 reverse [12] $end
$var wire 1 u4 reverse [11] $end
$var wire 1 v4 reverse [10] $end
$var wire 1 w4 reverse [9] $end
$var wire 1 x4 reverse [8] $end
$var wire 1 y4 reverse [7] $end
$var wire 1 z4 reverse [6] $end
$var wire 1 {4 reverse [5] $end
$var wire 1 |4 reverse [4] $end
$var wire 1 }4 reverse [3] $end
$var wire 1 ~4 reverse [2] $end
$var wire 1 !5 reverse [1] $end
$var wire 1 "5 reverse [0] $end

$scope module shift $end
$var parameter 32 #5 OPERAND_WIDTH $end
$var parameter 32 $5 SHAMT_WIDTH $end
$var parameter 32 %5 NUM_OPERATIONS $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 *5 Oper [1] $end
$var wire 1 +5 Oper [0] $end
$var wire 1 G3 Out [15] $end
$var wire 1 H3 Out [14] $end
$var wire 1 I3 Out [13] $end
$var wire 1 J3 Out [12] $end
$var wire 1 K3 Out [11] $end
$var wire 1 L3 Out [10] $end
$var wire 1 M3 Out [9] $end
$var wire 1 N3 Out [8] $end
$var wire 1 O3 Out [7] $end
$var wire 1 P3 Out [6] $end
$var wire 1 Q3 Out [5] $end
$var wire 1 R3 Out [4] $end
$var wire 1 S3 Out [3] $end
$var wire 1 T3 Out [2] $end
$var wire 1 U3 Out [1] $end
$var wire 1 V3 Out [0] $end
$var wire 1 ,5 shift_left_r [15] $end
$var wire 1 -5 shift_left_r [14] $end
$var wire 1 .5 shift_left_r [13] $end
$var wire 1 /5 shift_left_r [12] $end
$var wire 1 05 shift_left_r [11] $end
$var wire 1 15 shift_left_r [10] $end
$var wire 1 25 shift_left_r [9] $end
$var wire 1 35 shift_left_r [8] $end
$var wire 1 45 shift_left_r [7] $end
$var wire 1 55 shift_left_r [6] $end
$var wire 1 65 shift_left_r [5] $end
$var wire 1 75 shift_left_r [4] $end
$var wire 1 85 shift_left_r [3] $end
$var wire 1 95 shift_left_r [2] $end
$var wire 1 :5 shift_left_r [1] $end
$var wire 1 ;5 shift_left_r [0] $end
$var wire 1 <5 rotate_left_r [15] $end
$var wire 1 =5 rotate_left_r [14] $end
$var wire 1 >5 rotate_left_r [13] $end
$var wire 1 ?5 rotate_left_r [12] $end
$var wire 1 @5 rotate_left_r [11] $end
$var wire 1 A5 rotate_left_r [10] $end
$var wire 1 B5 rotate_left_r [9] $end
$var wire 1 C5 rotate_left_r [8] $end
$var wire 1 D5 rotate_left_r [7] $end
$var wire 1 E5 rotate_left_r [6] $end
$var wire 1 F5 rotate_left_r [5] $end
$var wire 1 G5 rotate_left_r [4] $end
$var wire 1 H5 rotate_left_r [3] $end
$var wire 1 I5 rotate_left_r [2] $end
$var wire 1 J5 rotate_left_r [1] $end
$var wire 1 K5 rotate_left_r [0] $end
$var wire 1 L5 shift_right_l_r [15] $end
$var wire 1 M5 shift_right_l_r [14] $end
$var wire 1 N5 shift_right_l_r [13] $end
$var wire 1 O5 shift_right_l_r [12] $end
$var wire 1 P5 shift_right_l_r [11] $end
$var wire 1 Q5 shift_right_l_r [10] $end
$var wire 1 R5 shift_right_l_r [9] $end
$var wire 1 S5 shift_right_l_r [8] $end
$var wire 1 T5 shift_right_l_r [7] $end
$var wire 1 U5 shift_right_l_r [6] $end
$var wire 1 V5 shift_right_l_r [5] $end
$var wire 1 W5 shift_right_l_r [4] $end
$var wire 1 X5 shift_right_l_r [3] $end
$var wire 1 Y5 shift_right_l_r [2] $end
$var wire 1 Z5 shift_right_l_r [1] $end
$var wire 1 [5 shift_right_l_r [0] $end
$var wire 1 \5 rotate_right_r [15] $end
$var wire 1 ]5 rotate_right_r [14] $end
$var wire 1 ^5 rotate_right_r [13] $end
$var wire 1 _5 rotate_right_r [12] $end
$var wire 1 `5 rotate_right_r [11] $end
$var wire 1 a5 rotate_right_r [10] $end
$var wire 1 b5 rotate_right_r [9] $end
$var wire 1 c5 rotate_right_r [8] $end
$var wire 1 d5 rotate_right_r [7] $end
$var wire 1 e5 rotate_right_r [6] $end
$var wire 1 f5 rotate_right_r [5] $end
$var wire 1 g5 rotate_right_r [4] $end
$var wire 1 h5 rotate_right_r [3] $end
$var wire 1 i5 rotate_right_r [2] $end
$var wire 1 j5 rotate_right_r [1] $end
$var wire 1 k5 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 l5 OPERAND_WIDTH $end
$var parameter 32 m5 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 ,5 result [15] $end
$var wire 1 -5 result [14] $end
$var wire 1 .5 result [13] $end
$var wire 1 /5 result [12] $end
$var wire 1 05 result [11] $end
$var wire 1 15 result [10] $end
$var wire 1 25 result [9] $end
$var wire 1 35 result [8] $end
$var wire 1 45 result [7] $end
$var wire 1 55 result [6] $end
$var wire 1 65 result [5] $end
$var wire 1 75 result [4] $end
$var wire 1 85 result [3] $end
$var wire 1 95 result [2] $end
$var wire 1 :5 result [1] $end
$var wire 1 ;5 result [0] $end
$var wire 1 n5 temp1 [15] $end
$var wire 1 o5 temp1 [14] $end
$var wire 1 p5 temp1 [13] $end
$var wire 1 q5 temp1 [12] $end
$var wire 1 r5 temp1 [11] $end
$var wire 1 s5 temp1 [10] $end
$var wire 1 t5 temp1 [9] $end
$var wire 1 u5 temp1 [8] $end
$var wire 1 v5 temp1 [7] $end
$var wire 1 w5 temp1 [6] $end
$var wire 1 x5 temp1 [5] $end
$var wire 1 y5 temp1 [4] $end
$var wire 1 z5 temp1 [3] $end
$var wire 1 {5 temp1 [2] $end
$var wire 1 |5 temp1 [1] $end
$var wire 1 }5 temp1 [0] $end
$var wire 1 ~5 temp2 [15] $end
$var wire 1 !6 temp2 [14] $end
$var wire 1 "6 temp2 [13] $end
$var wire 1 #6 temp2 [12] $end
$var wire 1 $6 temp2 [11] $end
$var wire 1 %6 temp2 [10] $end
$var wire 1 &6 temp2 [9] $end
$var wire 1 '6 temp2 [8] $end
$var wire 1 (6 temp2 [7] $end
$var wire 1 )6 temp2 [6] $end
$var wire 1 *6 temp2 [5] $end
$var wire 1 +6 temp2 [4] $end
$var wire 1 ,6 temp2 [3] $end
$var wire 1 -6 temp2 [2] $end
$var wire 1 .6 temp2 [1] $end
$var wire 1 /6 temp2 [0] $end
$var wire 1 06 temp3 [15] $end
$var wire 1 16 temp3 [14] $end
$var wire 1 26 temp3 [13] $end
$var wire 1 36 temp3 [12] $end
$var wire 1 46 temp3 [11] $end
$var wire 1 56 temp3 [10] $end
$var wire 1 66 temp3 [9] $end
$var wire 1 76 temp3 [8] $end
$var wire 1 86 temp3 [7] $end
$var wire 1 96 temp3 [6] $end
$var wire 1 :6 temp3 [5] $end
$var wire 1 ;6 temp3 [4] $end
$var wire 1 <6 temp3 [3] $end
$var wire 1 =6 temp3 [2] $end
$var wire 1 >6 temp3 [1] $end
$var wire 1 ?6 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 @6 OPERAND_WIDTH $end
$var parameter 32 A6 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 <5 result [15] $end
$var wire 1 =5 result [14] $end
$var wire 1 >5 result [13] $end
$var wire 1 ?5 result [12] $end
$var wire 1 @5 result [11] $end
$var wire 1 A5 result [10] $end
$var wire 1 B5 result [9] $end
$var wire 1 C5 result [8] $end
$var wire 1 D5 result [7] $end
$var wire 1 E5 result [6] $end
$var wire 1 F5 result [5] $end
$var wire 1 G5 result [4] $end
$var wire 1 H5 result [3] $end
$var wire 1 I5 result [2] $end
$var wire 1 J5 result [1] $end
$var wire 1 K5 result [0] $end
$var wire 1 B6 temp1 [15] $end
$var wire 1 C6 temp1 [14] $end
$var wire 1 D6 temp1 [13] $end
$var wire 1 E6 temp1 [12] $end
$var wire 1 F6 temp1 [11] $end
$var wire 1 G6 temp1 [10] $end
$var wire 1 H6 temp1 [9] $end
$var wire 1 I6 temp1 [8] $end
$var wire 1 J6 temp1 [7] $end
$var wire 1 K6 temp1 [6] $end
$var wire 1 L6 temp1 [5] $end
$var wire 1 M6 temp1 [4] $end
$var wire 1 N6 temp1 [3] $end
$var wire 1 O6 temp1 [2] $end
$var wire 1 P6 temp1 [1] $end
$var wire 1 Q6 temp1 [0] $end
$var wire 1 R6 temp2 [15] $end
$var wire 1 S6 temp2 [14] $end
$var wire 1 T6 temp2 [13] $end
$var wire 1 U6 temp2 [12] $end
$var wire 1 V6 temp2 [11] $end
$var wire 1 W6 temp2 [10] $end
$var wire 1 X6 temp2 [9] $end
$var wire 1 Y6 temp2 [8] $end
$var wire 1 Z6 temp2 [7] $end
$var wire 1 [6 temp2 [6] $end
$var wire 1 \6 temp2 [5] $end
$var wire 1 ]6 temp2 [4] $end
$var wire 1 ^6 temp2 [3] $end
$var wire 1 _6 temp2 [2] $end
$var wire 1 `6 temp2 [1] $end
$var wire 1 a6 temp2 [0] $end
$var wire 1 b6 temp3 [15] $end
$var wire 1 c6 temp3 [14] $end
$var wire 1 d6 temp3 [13] $end
$var wire 1 e6 temp3 [12] $end
$var wire 1 f6 temp3 [11] $end
$var wire 1 g6 temp3 [10] $end
$var wire 1 h6 temp3 [9] $end
$var wire 1 i6 temp3 [8] $end
$var wire 1 j6 temp3 [7] $end
$var wire 1 k6 temp3 [6] $end
$var wire 1 l6 temp3 [5] $end
$var wire 1 m6 temp3 [4] $end
$var wire 1 n6 temp3 [3] $end
$var wire 1 o6 temp3 [2] $end
$var wire 1 p6 temp3 [1] $end
$var wire 1 q6 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 r6 OPERAND_WIDTH $end
$var parameter 32 s6 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 L5 result [15] $end
$var wire 1 M5 result [14] $end
$var wire 1 N5 result [13] $end
$var wire 1 O5 result [12] $end
$var wire 1 P5 result [11] $end
$var wire 1 Q5 result [10] $end
$var wire 1 R5 result [9] $end
$var wire 1 S5 result [8] $end
$var wire 1 T5 result [7] $end
$var wire 1 U5 result [6] $end
$var wire 1 V5 result [5] $end
$var wire 1 W5 result [4] $end
$var wire 1 X5 result [3] $end
$var wire 1 Y5 result [2] $end
$var wire 1 Z5 result [1] $end
$var wire 1 [5 result [0] $end
$var wire 1 t6 temp1 [15] $end
$var wire 1 u6 temp1 [14] $end
$var wire 1 v6 temp1 [13] $end
$var wire 1 w6 temp1 [12] $end
$var wire 1 x6 temp1 [11] $end
$var wire 1 y6 temp1 [10] $end
$var wire 1 z6 temp1 [9] $end
$var wire 1 {6 temp1 [8] $end
$var wire 1 |6 temp1 [7] $end
$var wire 1 }6 temp1 [6] $end
$var wire 1 ~6 temp1 [5] $end
$var wire 1 !7 temp1 [4] $end
$var wire 1 "7 temp1 [3] $end
$var wire 1 #7 temp1 [2] $end
$var wire 1 $7 temp1 [1] $end
$var wire 1 %7 temp1 [0] $end
$var wire 1 &7 temp2 [15] $end
$var wire 1 '7 temp2 [14] $end
$var wire 1 (7 temp2 [13] $end
$var wire 1 )7 temp2 [12] $end
$var wire 1 *7 temp2 [11] $end
$var wire 1 +7 temp2 [10] $end
$var wire 1 ,7 temp2 [9] $end
$var wire 1 -7 temp2 [8] $end
$var wire 1 .7 temp2 [7] $end
$var wire 1 /7 temp2 [6] $end
$var wire 1 07 temp2 [5] $end
$var wire 1 17 temp2 [4] $end
$var wire 1 27 temp2 [3] $end
$var wire 1 37 temp2 [2] $end
$var wire 1 47 temp2 [1] $end
$var wire 1 57 temp2 [0] $end
$var wire 1 67 temp3 [15] $end
$var wire 1 77 temp3 [14] $end
$var wire 1 87 temp3 [13] $end
$var wire 1 97 temp3 [12] $end
$var wire 1 :7 temp3 [11] $end
$var wire 1 ;7 temp3 [10] $end
$var wire 1 <7 temp3 [9] $end
$var wire 1 =7 temp3 [8] $end
$var wire 1 >7 temp3 [7] $end
$var wire 1 ?7 temp3 [6] $end
$var wire 1 @7 temp3 [5] $end
$var wire 1 A7 temp3 [4] $end
$var wire 1 B7 temp3 [3] $end
$var wire 1 C7 temp3 [2] $end
$var wire 1 D7 temp3 [1] $end
$var wire 1 E7 temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 F7 OPERAND_WIDTH $end
$var parameter 32 G7 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 \5 result [15] $end
$var wire 1 ]5 result [14] $end
$var wire 1 ^5 result [13] $end
$var wire 1 _5 result [12] $end
$var wire 1 `5 result [11] $end
$var wire 1 a5 result [10] $end
$var wire 1 b5 result [9] $end
$var wire 1 c5 result [8] $end
$var wire 1 d5 result [7] $end
$var wire 1 e5 result [6] $end
$var wire 1 f5 result [5] $end
$var wire 1 g5 result [4] $end
$var wire 1 h5 result [3] $end
$var wire 1 i5 result [2] $end
$var wire 1 j5 result [1] $end
$var wire 1 k5 result [0] $end
$var wire 1 H7 temp1 [15] $end
$var wire 1 I7 temp1 [14] $end
$var wire 1 J7 temp1 [13] $end
$var wire 1 K7 temp1 [12] $end
$var wire 1 L7 temp1 [11] $end
$var wire 1 M7 temp1 [10] $end
$var wire 1 N7 temp1 [9] $end
$var wire 1 O7 temp1 [8] $end
$var wire 1 P7 temp1 [7] $end
$var wire 1 Q7 temp1 [6] $end
$var wire 1 R7 temp1 [5] $end
$var wire 1 S7 temp1 [4] $end
$var wire 1 T7 temp1 [3] $end
$var wire 1 U7 temp1 [2] $end
$var wire 1 V7 temp1 [1] $end
$var wire 1 W7 temp1 [0] $end
$var wire 1 X7 temp2 [15] $end
$var wire 1 Y7 temp2 [14] $end
$var wire 1 Z7 temp2 [13] $end
$var wire 1 [7 temp2 [12] $end
$var wire 1 \7 temp2 [11] $end
$var wire 1 ]7 temp2 [10] $end
$var wire 1 ^7 temp2 [9] $end
$var wire 1 _7 temp2 [8] $end
$var wire 1 `7 temp2 [7] $end
$var wire 1 a7 temp2 [6] $end
$var wire 1 b7 temp2 [5] $end
$var wire 1 c7 temp2 [4] $end
$var wire 1 d7 temp2 [3] $end
$var wire 1 e7 temp2 [2] $end
$var wire 1 f7 temp2 [1] $end
$var wire 1 g7 temp2 [0] $end
$var wire 1 h7 temp3 [15] $end
$var wire 1 i7 temp3 [14] $end
$var wire 1 j7 temp3 [13] $end
$var wire 1 k7 temp3 [12] $end
$var wire 1 l7 temp3 [11] $end
$var wire 1 m7 temp3 [10] $end
$var wire 1 n7 temp3 [9] $end
$var wire 1 o7 temp3 [8] $end
$var wire 1 p7 temp3 [7] $end
$var wire 1 q7 temp3 [6] $end
$var wire 1 r7 temp3 [5] $end
$var wire 1 s7 temp3 [4] $end
$var wire 1 t7 temp3 [3] $end
$var wire 1 u7 temp3 [2] $end
$var wire 1 v7 temp3 [1] $end
$var wire 1 w7 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 x7 OPERAND_WIDTH $end
$var parameter 32 y7 NUM_OPERATIONS $end
$var wire 1 73 InA [15] $end
$var wire 1 83 InA [14] $end
$var wire 1 93 InA [13] $end
$var wire 1 :3 InA [12] $end
$var wire 1 ;3 InA [11] $end
$var wire 1 <3 InA [10] $end
$var wire 1 =3 InA [9] $end
$var wire 1 >3 InA [8] $end
$var wire 1 ?3 InA [7] $end
$var wire 1 @3 InA [6] $end
$var wire 1 A3 InA [5] $end
$var wire 1 B3 InA [4] $end
$var wire 1 C3 InA [3] $end
$var wire 1 D3 InA [2] $end
$var wire 1 E3 InA [1] $end
$var wire 1 F3 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 z7 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 {7 sign $end
$var wire 1 X3 Out [15] $end
$var wire 1 Y3 Out [14] $end
$var wire 1 Z3 Out [13] $end
$var wire 1 [3 Out [12] $end
$var wire 1 \3 Out [11] $end
$var wire 1 ]3 Out [10] $end
$var wire 1 ^3 Out [9] $end
$var wire 1 _3 Out [8] $end
$var wire 1 `3 Out [7] $end
$var wire 1 a3 Out [6] $end
$var wire 1 b3 Out [5] $end
$var wire 1 c3 Out [4] $end
$var wire 1 d3 Out [3] $end
$var wire 1 e3 Out [2] $end
$var wire 1 f3 Out [1] $end
$var wire 1 g3 Out [0] $end
$var wire 1 h3 signOut $end
$var wire 1 k3 Ofl $end
$var wire 1 j3 Zero $end
$var wire 1 i3 carryFlag $end
$var wire 1 |7 InA_invA [15] $end
$var wire 1 }7 InA_invA [14] $end
$var wire 1 ~7 InA_invA [13] $end
$var wire 1 !8 InA_invA [12] $end
$var wire 1 "8 InA_invA [11] $end
$var wire 1 #8 InA_invA [10] $end
$var wire 1 $8 InA_invA [9] $end
$var wire 1 %8 InA_invA [8] $end
$var wire 1 &8 InA_invA [7] $end
$var wire 1 '8 InA_invA [6] $end
$var wire 1 (8 InA_invA [5] $end
$var wire 1 )8 InA_invA [4] $end
$var wire 1 *8 InA_invA [3] $end
$var wire 1 +8 InA_invA [2] $end
$var wire 1 ,8 InA_invA [1] $end
$var wire 1 -8 InA_invA [0] $end
$var wire 1 .8 InB_invB [15] $end
$var wire 1 /8 InB_invB [14] $end
$var wire 1 08 InB_invB [13] $end
$var wire 1 18 InB_invB [12] $end
$var wire 1 28 InB_invB [11] $end
$var wire 1 38 InB_invB [10] $end
$var wire 1 48 InB_invB [9] $end
$var wire 1 58 InB_invB [8] $end
$var wire 1 68 InB_invB [7] $end
$var wire 1 78 InB_invB [6] $end
$var wire 1 88 InB_invB [5] $end
$var wire 1 98 InB_invB [4] $end
$var wire 1 :8 InB_invB [3] $end
$var wire 1 ;8 InB_invB [2] $end
$var wire 1 <8 InB_invB [1] $end
$var wire 1 =8 InB_invB [0] $end
$var wire 1 >8 barrel [15] $end
$var wire 1 ?8 barrel [14] $end
$var wire 1 @8 barrel [13] $end
$var wire 1 A8 barrel [12] $end
$var wire 1 B8 barrel [11] $end
$var wire 1 C8 barrel [10] $end
$var wire 1 D8 barrel [9] $end
$var wire 1 E8 barrel [8] $end
$var wire 1 F8 barrel [7] $end
$var wire 1 G8 barrel [6] $end
$var wire 1 H8 barrel [5] $end
$var wire 1 I8 barrel [4] $end
$var wire 1 J8 barrel [3] $end
$var wire 1 K8 barrel [2] $end
$var wire 1 L8 barrel [1] $end
$var wire 1 M8 barrel [0] $end
$var wire 1 N8 logic_gates_r [15] $end
$var wire 1 O8 logic_gates_r [14] $end
$var wire 1 P8 logic_gates_r [13] $end
$var wire 1 Q8 logic_gates_r [12] $end
$var wire 1 R8 logic_gates_r [11] $end
$var wire 1 S8 logic_gates_r [10] $end
$var wire 1 T8 logic_gates_r [9] $end
$var wire 1 U8 logic_gates_r [8] $end
$var wire 1 V8 logic_gates_r [7] $end
$var wire 1 W8 logic_gates_r [6] $end
$var wire 1 X8 logic_gates_r [5] $end
$var wire 1 Y8 logic_gates_r [4] $end
$var wire 1 Z8 logic_gates_r [3] $end
$var wire 1 [8 logic_gates_r [2] $end
$var wire 1 \8 logic_gates_r [1] $end
$var wire 1 ]8 logic_gates_r [0] $end
$var wire 1 ^8 addition [15] $end
$var wire 1 _8 addition [14] $end
$var wire 1 `8 addition [13] $end
$var wire 1 a8 addition [12] $end
$var wire 1 b8 addition [11] $end
$var wire 1 c8 addition [10] $end
$var wire 1 d8 addition [9] $end
$var wire 1 e8 addition [8] $end
$var wire 1 f8 addition [7] $end
$var wire 1 g8 addition [6] $end
$var wire 1 h8 addition [5] $end
$var wire 1 i8 addition [4] $end
$var wire 1 j8 addition [3] $end
$var wire 1 k8 addition [2] $end
$var wire 1 l8 addition [1] $end
$var wire 1 m8 addition [0] $end
$var wire 1 n8 addition_logic [15] $end
$var wire 1 o8 addition_logic [14] $end
$var wire 1 p8 addition_logic [13] $end
$var wire 1 q8 addition_logic [12] $end
$var wire 1 r8 addition_logic [11] $end
$var wire 1 s8 addition_logic [10] $end
$var wire 1 t8 addition_logic [9] $end
$var wire 1 u8 addition_logic [8] $end
$var wire 1 v8 addition_logic [7] $end
$var wire 1 w8 addition_logic [6] $end
$var wire 1 x8 addition_logic [5] $end
$var wire 1 y8 addition_logic [4] $end
$var wire 1 z8 addition_logic [3] $end
$var wire 1 {8 addition_logic [2] $end
$var wire 1 |8 addition_logic [1] $end
$var wire 1 }8 addition_logic [0] $end
$var wire 1 ~8 carry $end
$var wire 1 !9 signed_over $end
$var wire 1 "9 less $end

$scope module shift $end
$var parameter 32 #9 OPERAND_WIDTH $end
$var parameter 32 $9 SHAMT_WIDTH $end
$var parameter 32 %9 NUM_OPERATIONS $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 >8 Out [15] $end
$var wire 1 ?8 Out [14] $end
$var wire 1 @8 Out [13] $end
$var wire 1 A8 Out [12] $end
$var wire 1 B8 Out [11] $end
$var wire 1 C8 Out [10] $end
$var wire 1 D8 Out [9] $end
$var wire 1 E8 Out [8] $end
$var wire 1 F8 Out [7] $end
$var wire 1 G8 Out [6] $end
$var wire 1 H8 Out [5] $end
$var wire 1 I8 Out [4] $end
$var wire 1 J8 Out [3] $end
$var wire 1 K8 Out [2] $end
$var wire 1 L8 Out [1] $end
$var wire 1 M8 Out [0] $end
$var wire 1 &9 shift_left_r [15] $end
$var wire 1 '9 shift_left_r [14] $end
$var wire 1 (9 shift_left_r [13] $end
$var wire 1 )9 shift_left_r [12] $end
$var wire 1 *9 shift_left_r [11] $end
$var wire 1 +9 shift_left_r [10] $end
$var wire 1 ,9 shift_left_r [9] $end
$var wire 1 -9 shift_left_r [8] $end
$var wire 1 .9 shift_left_r [7] $end
$var wire 1 /9 shift_left_r [6] $end
$var wire 1 09 shift_left_r [5] $end
$var wire 1 19 shift_left_r [4] $end
$var wire 1 29 shift_left_r [3] $end
$var wire 1 39 shift_left_r [2] $end
$var wire 1 49 shift_left_r [1] $end
$var wire 1 59 shift_left_r [0] $end
$var wire 1 69 rotate_left_r [15] $end
$var wire 1 79 rotate_left_r [14] $end
$var wire 1 89 rotate_left_r [13] $end
$var wire 1 99 rotate_left_r [12] $end
$var wire 1 :9 rotate_left_r [11] $end
$var wire 1 ;9 rotate_left_r [10] $end
$var wire 1 <9 rotate_left_r [9] $end
$var wire 1 =9 rotate_left_r [8] $end
$var wire 1 >9 rotate_left_r [7] $end
$var wire 1 ?9 rotate_left_r [6] $end
$var wire 1 @9 rotate_left_r [5] $end
$var wire 1 A9 rotate_left_r [4] $end
$var wire 1 B9 rotate_left_r [3] $end
$var wire 1 C9 rotate_left_r [2] $end
$var wire 1 D9 rotate_left_r [1] $end
$var wire 1 E9 rotate_left_r [0] $end
$var wire 1 F9 shift_right_l_r [15] $end
$var wire 1 G9 shift_right_l_r [14] $end
$var wire 1 H9 shift_right_l_r [13] $end
$var wire 1 I9 shift_right_l_r [12] $end
$var wire 1 J9 shift_right_l_r [11] $end
$var wire 1 K9 shift_right_l_r [10] $end
$var wire 1 L9 shift_right_l_r [9] $end
$var wire 1 M9 shift_right_l_r [8] $end
$var wire 1 N9 shift_right_l_r [7] $end
$var wire 1 O9 shift_right_l_r [6] $end
$var wire 1 P9 shift_right_l_r [5] $end
$var wire 1 Q9 shift_right_l_r [4] $end
$var wire 1 R9 shift_right_l_r [3] $end
$var wire 1 S9 shift_right_l_r [2] $end
$var wire 1 T9 shift_right_l_r [1] $end
$var wire 1 U9 shift_right_l_r [0] $end
$var wire 1 V9 rotate_right_r [15] $end
$var wire 1 W9 rotate_right_r [14] $end
$var wire 1 X9 rotate_right_r [13] $end
$var wire 1 Y9 rotate_right_r [12] $end
$var wire 1 Z9 rotate_right_r [11] $end
$var wire 1 [9 rotate_right_r [10] $end
$var wire 1 \9 rotate_right_r [9] $end
$var wire 1 ]9 rotate_right_r [8] $end
$var wire 1 ^9 rotate_right_r [7] $end
$var wire 1 _9 rotate_right_r [6] $end
$var wire 1 `9 rotate_right_r [5] $end
$var wire 1 a9 rotate_right_r [4] $end
$var wire 1 b9 rotate_right_r [3] $end
$var wire 1 c9 rotate_right_r [2] $end
$var wire 1 d9 rotate_right_r [1] $end
$var wire 1 e9 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 f9 OPERAND_WIDTH $end
$var parameter 32 g9 SHAMT_WIDTH $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 &9 result [15] $end
$var wire 1 '9 result [14] $end
$var wire 1 (9 result [13] $end
$var wire 1 )9 result [12] $end
$var wire 1 *9 result [11] $end
$var wire 1 +9 result [10] $end
$var wire 1 ,9 result [9] $end
$var wire 1 -9 result [8] $end
$var wire 1 .9 result [7] $end
$var wire 1 /9 result [6] $end
$var wire 1 09 result [5] $end
$var wire 1 19 result [4] $end
$var wire 1 29 result [3] $end
$var wire 1 39 result [2] $end
$var wire 1 49 result [1] $end
$var wire 1 59 result [0] $end
$var wire 1 h9 temp1 [15] $end
$var wire 1 i9 temp1 [14] $end
$var wire 1 j9 temp1 [13] $end
$var wire 1 k9 temp1 [12] $end
$var wire 1 l9 temp1 [11] $end
$var wire 1 m9 temp1 [10] $end
$var wire 1 n9 temp1 [9] $end
$var wire 1 o9 temp1 [8] $end
$var wire 1 p9 temp1 [7] $end
$var wire 1 q9 temp1 [6] $end
$var wire 1 r9 temp1 [5] $end
$var wire 1 s9 temp1 [4] $end
$var wire 1 t9 temp1 [3] $end
$var wire 1 u9 temp1 [2] $end
$var wire 1 v9 temp1 [1] $end
$var wire 1 w9 temp1 [0] $end
$var wire 1 x9 temp2 [15] $end
$var wire 1 y9 temp2 [14] $end
$var wire 1 z9 temp2 [13] $end
$var wire 1 {9 temp2 [12] $end
$var wire 1 |9 temp2 [11] $end
$var wire 1 }9 temp2 [10] $end
$var wire 1 ~9 temp2 [9] $end
$var wire 1 !: temp2 [8] $end
$var wire 1 ": temp2 [7] $end
$var wire 1 #: temp2 [6] $end
$var wire 1 $: temp2 [5] $end
$var wire 1 %: temp2 [4] $end
$var wire 1 &: temp2 [3] $end
$var wire 1 ': temp2 [2] $end
$var wire 1 (: temp2 [1] $end
$var wire 1 ): temp2 [0] $end
$var wire 1 *: temp3 [15] $end
$var wire 1 +: temp3 [14] $end
$var wire 1 ,: temp3 [13] $end
$var wire 1 -: temp3 [12] $end
$var wire 1 .: temp3 [11] $end
$var wire 1 /: temp3 [10] $end
$var wire 1 0: temp3 [9] $end
$var wire 1 1: temp3 [8] $end
$var wire 1 2: temp3 [7] $end
$var wire 1 3: temp3 [6] $end
$var wire 1 4: temp3 [5] $end
$var wire 1 5: temp3 [4] $end
$var wire 1 6: temp3 [3] $end
$var wire 1 7: temp3 [2] $end
$var wire 1 8: temp3 [1] $end
$var wire 1 9: temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 :: OPERAND_WIDTH $end
$var parameter 32 ;: SHAMT_WIDTH $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 69 result [15] $end
$var wire 1 79 result [14] $end
$var wire 1 89 result [13] $end
$var wire 1 99 result [12] $end
$var wire 1 :9 result [11] $end
$var wire 1 ;9 result [10] $end
$var wire 1 <9 result [9] $end
$var wire 1 =9 result [8] $end
$var wire 1 >9 result [7] $end
$var wire 1 ?9 result [6] $end
$var wire 1 @9 result [5] $end
$var wire 1 A9 result [4] $end
$var wire 1 B9 result [3] $end
$var wire 1 C9 result [2] $end
$var wire 1 D9 result [1] $end
$var wire 1 E9 result [0] $end
$var wire 1 <: temp1 [15] $end
$var wire 1 =: temp1 [14] $end
$var wire 1 >: temp1 [13] $end
$var wire 1 ?: temp1 [12] $end
$var wire 1 @: temp1 [11] $end
$var wire 1 A: temp1 [10] $end
$var wire 1 B: temp1 [9] $end
$var wire 1 C: temp1 [8] $end
$var wire 1 D: temp1 [7] $end
$var wire 1 E: temp1 [6] $end
$var wire 1 F: temp1 [5] $end
$var wire 1 G: temp1 [4] $end
$var wire 1 H: temp1 [3] $end
$var wire 1 I: temp1 [2] $end
$var wire 1 J: temp1 [1] $end
$var wire 1 K: temp1 [0] $end
$var wire 1 L: temp2 [15] $end
$var wire 1 M: temp2 [14] $end
$var wire 1 N: temp2 [13] $end
$var wire 1 O: temp2 [12] $end
$var wire 1 P: temp2 [11] $end
$var wire 1 Q: temp2 [10] $end
$var wire 1 R: temp2 [9] $end
$var wire 1 S: temp2 [8] $end
$var wire 1 T: temp2 [7] $end
$var wire 1 U: temp2 [6] $end
$var wire 1 V: temp2 [5] $end
$var wire 1 W: temp2 [4] $end
$var wire 1 X: temp2 [3] $end
$var wire 1 Y: temp2 [2] $end
$var wire 1 Z: temp2 [1] $end
$var wire 1 [: temp2 [0] $end
$var wire 1 \: temp3 [15] $end
$var wire 1 ]: temp3 [14] $end
$var wire 1 ^: temp3 [13] $end
$var wire 1 _: temp3 [12] $end
$var wire 1 `: temp3 [11] $end
$var wire 1 a: temp3 [10] $end
$var wire 1 b: temp3 [9] $end
$var wire 1 c: temp3 [8] $end
$var wire 1 d: temp3 [7] $end
$var wire 1 e: temp3 [6] $end
$var wire 1 f: temp3 [5] $end
$var wire 1 g: temp3 [4] $end
$var wire 1 h: temp3 [3] $end
$var wire 1 i: temp3 [2] $end
$var wire 1 j: temp3 [1] $end
$var wire 1 k: temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 l: OPERAND_WIDTH $end
$var parameter 32 m: SHAMT_WIDTH $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 F9 result [15] $end
$var wire 1 G9 result [14] $end
$var wire 1 H9 result [13] $end
$var wire 1 I9 result [12] $end
$var wire 1 J9 result [11] $end
$var wire 1 K9 result [10] $end
$var wire 1 L9 result [9] $end
$var wire 1 M9 result [8] $end
$var wire 1 N9 result [7] $end
$var wire 1 O9 result [6] $end
$var wire 1 P9 result [5] $end
$var wire 1 Q9 result [4] $end
$var wire 1 R9 result [3] $end
$var wire 1 S9 result [2] $end
$var wire 1 T9 result [1] $end
$var wire 1 U9 result [0] $end
$var wire 1 n: temp1 [15] $end
$var wire 1 o: temp1 [14] $end
$var wire 1 p: temp1 [13] $end
$var wire 1 q: temp1 [12] $end
$var wire 1 r: temp1 [11] $end
$var wire 1 s: temp1 [10] $end
$var wire 1 t: temp1 [9] $end
$var wire 1 u: temp1 [8] $end
$var wire 1 v: temp1 [7] $end
$var wire 1 w: temp1 [6] $end
$var wire 1 x: temp1 [5] $end
$var wire 1 y: temp1 [4] $end
$var wire 1 z: temp1 [3] $end
$var wire 1 {: temp1 [2] $end
$var wire 1 |: temp1 [1] $end
$var wire 1 }: temp1 [0] $end
$var wire 1 ~: temp2 [15] $end
$var wire 1 !; temp2 [14] $end
$var wire 1 "; temp2 [13] $end
$var wire 1 #; temp2 [12] $end
$var wire 1 $; temp2 [11] $end
$var wire 1 %; temp2 [10] $end
$var wire 1 &; temp2 [9] $end
$var wire 1 '; temp2 [8] $end
$var wire 1 (; temp2 [7] $end
$var wire 1 ); temp2 [6] $end
$var wire 1 *; temp2 [5] $end
$var wire 1 +; temp2 [4] $end
$var wire 1 ,; temp2 [3] $end
$var wire 1 -; temp2 [2] $end
$var wire 1 .; temp2 [1] $end
$var wire 1 /; temp2 [0] $end
$var wire 1 0; temp3 [15] $end
$var wire 1 1; temp3 [14] $end
$var wire 1 2; temp3 [13] $end
$var wire 1 3; temp3 [12] $end
$var wire 1 4; temp3 [11] $end
$var wire 1 5; temp3 [10] $end
$var wire 1 6; temp3 [9] $end
$var wire 1 7; temp3 [8] $end
$var wire 1 8; temp3 [7] $end
$var wire 1 9; temp3 [6] $end
$var wire 1 :; temp3 [5] $end
$var wire 1 ;; temp3 [4] $end
$var wire 1 <; temp3 [3] $end
$var wire 1 =; temp3 [2] $end
$var wire 1 >; temp3 [1] $end
$var wire 1 ?; temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 @; OPERAND_WIDTH $end
$var parameter 32 A; SHAMT_WIDTH $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 V9 result [15] $end
$var wire 1 W9 result [14] $end
$var wire 1 X9 result [13] $end
$var wire 1 Y9 result [12] $end
$var wire 1 Z9 result [11] $end
$var wire 1 [9 result [10] $end
$var wire 1 \9 result [9] $end
$var wire 1 ]9 result [8] $end
$var wire 1 ^9 result [7] $end
$var wire 1 _9 result [6] $end
$var wire 1 `9 result [5] $end
$var wire 1 a9 result [4] $end
$var wire 1 b9 result [3] $end
$var wire 1 c9 result [2] $end
$var wire 1 d9 result [1] $end
$var wire 1 e9 result [0] $end
$var wire 1 B; temp1 [15] $end
$var wire 1 C; temp1 [14] $end
$var wire 1 D; temp1 [13] $end
$var wire 1 E; temp1 [12] $end
$var wire 1 F; temp1 [11] $end
$var wire 1 G; temp1 [10] $end
$var wire 1 H; temp1 [9] $end
$var wire 1 I; temp1 [8] $end
$var wire 1 J; temp1 [7] $end
$var wire 1 K; temp1 [6] $end
$var wire 1 L; temp1 [5] $end
$var wire 1 M; temp1 [4] $end
$var wire 1 N; temp1 [3] $end
$var wire 1 O; temp1 [2] $end
$var wire 1 P; temp1 [1] $end
$var wire 1 Q; temp1 [0] $end
$var wire 1 R; temp2 [15] $end
$var wire 1 S; temp2 [14] $end
$var wire 1 T; temp2 [13] $end
$var wire 1 U; temp2 [12] $end
$var wire 1 V; temp2 [11] $end
$var wire 1 W; temp2 [10] $end
$var wire 1 X; temp2 [9] $end
$var wire 1 Y; temp2 [8] $end
$var wire 1 Z; temp2 [7] $end
$var wire 1 [; temp2 [6] $end
$var wire 1 \; temp2 [5] $end
$var wire 1 ]; temp2 [4] $end
$var wire 1 ^; temp2 [3] $end
$var wire 1 _; temp2 [2] $end
$var wire 1 `; temp2 [1] $end
$var wire 1 a; temp2 [0] $end
$var wire 1 b; temp3 [15] $end
$var wire 1 c; temp3 [14] $end
$var wire 1 d; temp3 [13] $end
$var wire 1 e; temp3 [12] $end
$var wire 1 f; temp3 [11] $end
$var wire 1 g; temp3 [10] $end
$var wire 1 h; temp3 [9] $end
$var wire 1 i; temp3 [8] $end
$var wire 1 j; temp3 [7] $end
$var wire 1 k; temp3 [6] $end
$var wire 1 l; temp3 [5] $end
$var wire 1 m; temp3 [4] $end
$var wire 1 n; temp3 [3] $end
$var wire 1 o; temp3 [2] $end
$var wire 1 p; temp3 [1] $end
$var wire 1 q; temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var parameter 32 r; OPERAND_WIDTH $end
$var parameter 32 s; NUM_OPERATIONS $end
$var wire 1 |7 A [15] $end
$var wire 1 }7 A [14] $end
$var wire 1 ~7 A [13] $end
$var wire 1 !8 A [12] $end
$var wire 1 "8 A [11] $end
$var wire 1 #8 A [10] $end
$var wire 1 $8 A [9] $end
$var wire 1 %8 A [8] $end
$var wire 1 &8 A [7] $end
$var wire 1 '8 A [6] $end
$var wire 1 (8 A [5] $end
$var wire 1 )8 A [4] $end
$var wire 1 *8 A [3] $end
$var wire 1 +8 A [2] $end
$var wire 1 ,8 A [1] $end
$var wire 1 -8 A [0] $end
$var wire 1 .8 B [15] $end
$var wire 1 /8 B [14] $end
$var wire 1 08 B [13] $end
$var wire 1 18 B [12] $end
$var wire 1 28 B [11] $end
$var wire 1 38 B [10] $end
$var wire 1 48 B [9] $end
$var wire 1 58 B [8] $end
$var wire 1 68 B [7] $end
$var wire 1 78 B [6] $end
$var wire 1 88 B [5] $end
$var wire 1 98 B [4] $end
$var wire 1 :8 B [3] $end
$var wire 1 ;8 B [2] $end
$var wire 1 <8 B [1] $end
$var wire 1 =8 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 N8 Result [15] $end
$var wire 1 O8 Result [14] $end
$var wire 1 P8 Result [13] $end
$var wire 1 Q8 Result [12] $end
$var wire 1 R8 Result [11] $end
$var wire 1 S8 Result [10] $end
$var wire 1 T8 Result [9] $end
$var wire 1 U8 Result [8] $end
$var wire 1 V8 Result [7] $end
$var wire 1 W8 Result [6] $end
$var wire 1 X8 Result [5] $end
$var wire 1 Y8 Result [4] $end
$var wire 1 Z8 Result [3] $end
$var wire 1 [8 Result [2] $end
$var wire 1 \8 Result [1] $end
$var wire 1 ]8 Result [0] $end
$upscope $end

$scope module adding $end
$var parameter 32 t; N $end
$var wire 1 ^8 sum [15] $end
$var wire 1 _8 sum [14] $end
$var wire 1 `8 sum [13] $end
$var wire 1 a8 sum [12] $end
$var wire 1 b8 sum [11] $end
$var wire 1 c8 sum [10] $end
$var wire 1 d8 sum [9] $end
$var wire 1 e8 sum [8] $end
$var wire 1 f8 sum [7] $end
$var wire 1 g8 sum [6] $end
$var wire 1 h8 sum [5] $end
$var wire 1 i8 sum [4] $end
$var wire 1 j8 sum [3] $end
$var wire 1 k8 sum [2] $end
$var wire 1 l8 sum [1] $end
$var wire 1 m8 sum [0] $end
$var wire 1 ~8 c_out $end
$var wire 1 |7 a [15] $end
$var wire 1 }7 a [14] $end
$var wire 1 ~7 a [13] $end
$var wire 1 !8 a [12] $end
$var wire 1 "8 a [11] $end
$var wire 1 #8 a [10] $end
$var wire 1 $8 a [9] $end
$var wire 1 %8 a [8] $end
$var wire 1 &8 a [7] $end
$var wire 1 '8 a [6] $end
$var wire 1 (8 a [5] $end
$var wire 1 )8 a [4] $end
$var wire 1 *8 a [3] $end
$var wire 1 +8 a [2] $end
$var wire 1 ,8 a [1] $end
$var wire 1 -8 a [0] $end
$var wire 1 .8 b [15] $end
$var wire 1 /8 b [14] $end
$var wire 1 08 b [13] $end
$var wire 1 18 b [12] $end
$var wire 1 28 b [11] $end
$var wire 1 38 b [10] $end
$var wire 1 48 b [9] $end
$var wire 1 58 b [8] $end
$var wire 1 68 b [7] $end
$var wire 1 78 b [6] $end
$var wire 1 88 b [5] $end
$var wire 1 98 b [4] $end
$var wire 1 :8 b [3] $end
$var wire 1 ;8 b [2] $end
$var wire 1 <8 b [1] $end
$var wire 1 =8 b [0] $end
$var wire 1 z7 c_in $end
$var wire 1 u; gen [15] $end
$var wire 1 v; gen [14] $end
$var wire 1 w; gen [13] $end
$var wire 1 x; gen [12] $end
$var wire 1 y; gen [11] $end
$var wire 1 z; gen [10] $end
$var wire 1 {; gen [9] $end
$var wire 1 |; gen [8] $end
$var wire 1 }; gen [7] $end
$var wire 1 ~; gen [6] $end
$var wire 1 !< gen [5] $end
$var wire 1 "< gen [4] $end
$var wire 1 #< gen [3] $end
$var wire 1 $< gen [2] $end
$var wire 1 %< gen [1] $end
$var wire 1 &< gen [0] $end
$var wire 1 '< four_gen [3] $end
$var wire 1 (< four_gen [2] $end
$var wire 1 )< four_gen [1] $end
$var wire 1 *< four_gen [0] $end
$var wire 1 +< prop [15] $end
$var wire 1 ,< prop [14] $end
$var wire 1 -< prop [13] $end
$var wire 1 .< prop [12] $end
$var wire 1 /< prop [11] $end
$var wire 1 0< prop [10] $end
$var wire 1 1< prop [9] $end
$var wire 1 2< prop [8] $end
$var wire 1 3< prop [7] $end
$var wire 1 4< prop [6] $end
$var wire 1 5< prop [5] $end
$var wire 1 6< prop [4] $end
$var wire 1 7< prop [3] $end
$var wire 1 8< prop [2] $end
$var wire 1 9< prop [1] $end
$var wire 1 :< prop [0] $end
$var wire 1 ;< four_prop [3] $end
$var wire 1 << four_prop [2] $end
$var wire 1 =< four_prop [1] $end
$var wire 1 >< four_prop [0] $end
$var wire 1 ?< carry [2] $end
$var wire 1 @< carry [1] $end
$var wire 1 A< carry [0] $end
$var wire 1 B< fa_sum [15] $end
$var wire 1 C< fa_sum [14] $end
$var wire 1 D< fa_sum [13] $end
$var wire 1 E< fa_sum [12] $end
$var wire 1 F< fa_sum [11] $end
$var wire 1 G< fa_sum [10] $end
$var wire 1 H< fa_sum [9] $end
$var wire 1 I< fa_sum [8] $end
$var wire 1 J< fa_sum [7] $end
$var wire 1 K< fa_sum [6] $end
$var wire 1 L< fa_sum [5] $end
$var wire 1 M< fa_sum [4] $end
$var wire 1 N< fa_sum [3] $end
$var wire 1 O< fa_sum [2] $end
$var wire 1 P< fa_sum [1] $end
$var wire 1 Q< fa_sum [0] $end

$scope module cla1 $end
$var parameter 32 R< N $end
$var wire 1 N< sum [3] $end
$var wire 1 O< sum [2] $end
$var wire 1 P< sum [1] $end
$var wire 1 Q< sum [0] $end
$var wire 1 S< c_out $end
$var wire 1 *8 a [3] $end
$var wire 1 +8 a [2] $end
$var wire 1 ,8 a [1] $end
$var wire 1 -8 a [0] $end
$var wire 1 :8 b [3] $end
$var wire 1 ;8 b [2] $end
$var wire 1 <8 b [1] $end
$var wire 1 =8 b [0] $end
$var wire 1 z7 c_in $end
$var wire 1 T< gen [3] $end
$var wire 1 U< gen [2] $end
$var wire 1 V< gen [1] $end
$var wire 1 W< gen [0] $end
$var wire 1 X< prop [3] $end
$var wire 1 Y< prop [2] $end
$var wire 1 Z< prop [1] $end
$var wire 1 [< prop [0] $end
$var wire 1 \< carry [2] $end
$var wire 1 ]< carry [1] $end
$var wire 1 ^< carry [0] $end
$var wire 1 _< fa_sum [3] $end
$var wire 1 `< fa_sum [2] $end
$var wire 1 a< fa_sum [1] $end
$var wire 1 b< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 b< s $end
$var wire 1 c< c_out $end
$var wire 1 -8 a $end
$var wire 1 =8 b $end
$var wire 1 z7 c_in $end
$var wire 1 d< xor_AB $end
$var wire 1 e< xor_ABCin $end
$var wire 1 f< NAND_AB $end
$var wire 1 g< not_NAND_AB $end
$var wire 1 h< NAND_Cin_xor_AB $end
$var wire 1 i< not_NAND_Cin_xor_AB $end
$var wire 1 j< NOR_2NAND $end
$var wire 1 k< not_NOR_2NAND $end
$var wire 1 l< Cin $end

$scope module xor1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 d< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d< in1 $end
$var wire 1 z7 in2 $end
$var wire 1 e< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 f< out $end
$upscope $end

$scope module not1 $end
$var wire 1 f< in1 $end
$var wire 1 g< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l< in1 $end
$var wire 1 d< in2 $end
$var wire 1 h< out $end
$upscope $end

$scope module not2 $end
$var wire 1 h< in1 $end
$var wire 1 i< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g< in1 $end
$var wire 1 i< in2 $end
$var wire 1 j< out $end
$upscope $end

$scope module not3 $end
$var wire 1 j< in1 $end
$var wire 1 k< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 a< s $end
$var wire 1 m< c_out $end
$var wire 1 ,8 a $end
$var wire 1 <8 b $end
$var wire 1 ^< c_in $end
$var wire 1 n< xor_AB $end
$var wire 1 o< xor_ABCin $end
$var wire 1 p< NAND_AB $end
$var wire 1 q< not_NAND_AB $end
$var wire 1 r< NAND_Cin_xor_AB $end
$var wire 1 s< not_NAND_Cin_xor_AB $end
$var wire 1 t< NOR_2NAND $end
$var wire 1 u< not_NOR_2NAND $end
$var wire 1 v< Cin $end

$scope module xor1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 n< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n< in1 $end
$var wire 1 ^< in2 $end
$var wire 1 o< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 p< out $end
$upscope $end

$scope module not1 $end
$var wire 1 p< in1 $end
$var wire 1 q< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v< in1 $end
$var wire 1 n< in2 $end
$var wire 1 r< out $end
$upscope $end

$scope module not2 $end
$var wire 1 r< in1 $end
$var wire 1 s< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q< in1 $end
$var wire 1 s< in2 $end
$var wire 1 t< out $end
$upscope $end

$scope module not3 $end
$var wire 1 t< in1 $end
$var wire 1 u< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 `< s $end
$var wire 1 w< c_out $end
$var wire 1 +8 a $end
$var wire 1 ;8 b $end
$var wire 1 ]< c_in $end
$var wire 1 x< xor_AB $end
$var wire 1 y< xor_ABCin $end
$var wire 1 z< NAND_AB $end
$var wire 1 {< not_NAND_AB $end
$var wire 1 |< NAND_Cin_xor_AB $end
$var wire 1 }< not_NAND_Cin_xor_AB $end
$var wire 1 ~< NOR_2NAND $end
$var wire 1 != not_NOR_2NAND $end
$var wire 1 "= Cin $end

$scope module xor1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 x< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x< in1 $end
$var wire 1 ]< in2 $end
$var wire 1 y< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 z< out $end
$upscope $end

$scope module not1 $end
$var wire 1 z< in1 $end
$var wire 1 {< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "= in1 $end
$var wire 1 x< in2 $end
$var wire 1 |< out $end
$upscope $end

$scope module not2 $end
$var wire 1 |< in1 $end
$var wire 1 }< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {< in1 $end
$var wire 1 }< in2 $end
$var wire 1 ~< out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~< in1 $end
$var wire 1 != out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 _< s $end
$var wire 1 #= c_out $end
$var wire 1 *8 a $end
$var wire 1 :8 b $end
$var wire 1 \< c_in $end
$var wire 1 $= xor_AB $end
$var wire 1 %= xor_ABCin $end
$var wire 1 &= NAND_AB $end
$var wire 1 '= not_NAND_AB $end
$var wire 1 (= NAND_Cin_xor_AB $end
$var wire 1 )= not_NAND_Cin_xor_AB $end
$var wire 1 *= NOR_2NAND $end
$var wire 1 += not_NOR_2NAND $end
$var wire 1 ,= Cin $end

$scope module xor1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 $= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $= in1 $end
$var wire 1 \< in2 $end
$var wire 1 %= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 &= out $end
$upscope $end

$scope module not1 $end
$var wire 1 &= in1 $end
$var wire 1 '= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ,= in1 $end
$var wire 1 $= in2 $end
$var wire 1 (= out $end
$upscope $end

$scope module not2 $end
$var wire 1 (= in1 $end
$var wire 1 )= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '= in1 $end
$var wire 1 )= in2 $end
$var wire 1 *= out $end
$upscope $end

$scope module not3 $end
$var wire 1 *= in1 $end
$var wire 1 += out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var parameter 32 -= N $end
$var wire 1 J< sum [3] $end
$var wire 1 K< sum [2] $end
$var wire 1 L< sum [1] $end
$var wire 1 M< sum [0] $end
$var wire 1 .= c_out $end
$var wire 1 &8 a [3] $end
$var wire 1 '8 a [2] $end
$var wire 1 (8 a [1] $end
$var wire 1 )8 a [0] $end
$var wire 1 68 b [3] $end
$var wire 1 78 b [2] $end
$var wire 1 88 b [1] $end
$var wire 1 98 b [0] $end
$var wire 1 A< c_in $end
$var wire 1 /= gen [3] $end
$var wire 1 0= gen [2] $end
$var wire 1 1= gen [1] $end
$var wire 1 2= gen [0] $end
$var wire 1 3= prop [3] $end
$var wire 1 4= prop [2] $end
$var wire 1 5= prop [1] $end
$var wire 1 6= prop [0] $end
$var wire 1 7= carry [2] $end
$var wire 1 8= carry [1] $end
$var wire 1 9= carry [0] $end
$var wire 1 := fa_sum [3] $end
$var wire 1 ;= fa_sum [2] $end
$var wire 1 <= fa_sum [1] $end
$var wire 1 == fa_sum [0] $end

$scope module fa1 $end
$var wire 1 == s $end
$var wire 1 >= c_out $end
$var wire 1 )8 a $end
$var wire 1 98 b $end
$var wire 1 A< c_in $end
$var wire 1 ?= xor_AB $end
$var wire 1 @= xor_ABCin $end
$var wire 1 A= NAND_AB $end
$var wire 1 B= not_NAND_AB $end
$var wire 1 C= NAND_Cin_xor_AB $end
$var wire 1 D= not_NAND_Cin_xor_AB $end
$var wire 1 E= NOR_2NAND $end
$var wire 1 F= not_NOR_2NAND $end
$var wire 1 G= Cin $end

$scope module xor1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 ?= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ?= in1 $end
$var wire 1 A< in2 $end
$var wire 1 @= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 A= out $end
$upscope $end

$scope module not1 $end
$var wire 1 A= in1 $end
$var wire 1 B= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G= in1 $end
$var wire 1 ?= in2 $end
$var wire 1 C= out $end
$upscope $end

$scope module not2 $end
$var wire 1 C= in1 $end
$var wire 1 D= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 B= in1 $end
$var wire 1 D= in2 $end
$var wire 1 E= out $end
$upscope $end

$scope module not3 $end
$var wire 1 E= in1 $end
$var wire 1 F= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 <= s $end
$var wire 1 H= c_out $end
$var wire 1 (8 a $end
$var wire 1 88 b $end
$var wire 1 9= c_in $end
$var wire 1 I= xor_AB $end
$var wire 1 J= xor_ABCin $end
$var wire 1 K= NAND_AB $end
$var wire 1 L= not_NAND_AB $end
$var wire 1 M= NAND_Cin_xor_AB $end
$var wire 1 N= not_NAND_Cin_xor_AB $end
$var wire 1 O= NOR_2NAND $end
$var wire 1 P= not_NOR_2NAND $end
$var wire 1 Q= Cin $end

$scope module xor1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 I= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 I= in1 $end
$var wire 1 9= in2 $end
$var wire 1 J= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 K= out $end
$upscope $end

$scope module not1 $end
$var wire 1 K= in1 $end
$var wire 1 L= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q= in1 $end
$var wire 1 I= in2 $end
$var wire 1 M= out $end
$upscope $end

$scope module not2 $end
$var wire 1 M= in1 $end
$var wire 1 N= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 L= in1 $end
$var wire 1 N= in2 $end
$var wire 1 O= out $end
$upscope $end

$scope module not3 $end
$var wire 1 O= in1 $end
$var wire 1 P= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 ;= s $end
$var wire 1 R= c_out $end
$var wire 1 '8 a $end
$var wire 1 78 b $end
$var wire 1 8= c_in $end
$var wire 1 S= xor_AB $end
$var wire 1 T= xor_ABCin $end
$var wire 1 U= NAND_AB $end
$var wire 1 V= not_NAND_AB $end
$var wire 1 W= NAND_Cin_xor_AB $end
$var wire 1 X= not_NAND_Cin_xor_AB $end
$var wire 1 Y= NOR_2NAND $end
$var wire 1 Z= not_NOR_2NAND $end
$var wire 1 [= Cin $end

$scope module xor1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 S= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S= in1 $end
$var wire 1 8= in2 $end
$var wire 1 T= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 U= out $end
$upscope $end

$scope module not1 $end
$var wire 1 U= in1 $end
$var wire 1 V= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [= in1 $end
$var wire 1 S= in2 $end
$var wire 1 W= out $end
$upscope $end

$scope module not2 $end
$var wire 1 W= in1 $end
$var wire 1 X= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V= in1 $end
$var wire 1 X= in2 $end
$var wire 1 Y= out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y= in1 $end
$var wire 1 Z= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 := s $end
$var wire 1 \= c_out $end
$var wire 1 &8 a $end
$var wire 1 68 b $end
$var wire 1 7= c_in $end
$var wire 1 ]= xor_AB $end
$var wire 1 ^= xor_ABCin $end
$var wire 1 _= NAND_AB $end
$var wire 1 `= not_NAND_AB $end
$var wire 1 a= NAND_Cin_xor_AB $end
$var wire 1 b= not_NAND_Cin_xor_AB $end
$var wire 1 c= NOR_2NAND $end
$var wire 1 d= not_NOR_2NAND $end
$var wire 1 e= Cin $end

$scope module xor1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 ]= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]= in1 $end
$var wire 1 7= in2 $end
$var wire 1 ^= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 _= out $end
$upscope $end

$scope module not1 $end
$var wire 1 _= in1 $end
$var wire 1 `= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e= in1 $end
$var wire 1 ]= in2 $end
$var wire 1 a= out $end
$upscope $end

$scope module not2 $end
$var wire 1 a= in1 $end
$var wire 1 b= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `= in1 $end
$var wire 1 b= in2 $end
$var wire 1 c= out $end
$upscope $end

$scope module not3 $end
$var wire 1 c= in1 $end
$var wire 1 d= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var parameter 32 f= N $end
$var wire 1 F< sum [3] $end
$var wire 1 G< sum [2] $end
$var wire 1 H< sum [1] $end
$var wire 1 I< sum [0] $end
$var wire 1 g= c_out $end
$var wire 1 "8 a [3] $end
$var wire 1 #8 a [2] $end
$var wire 1 $8 a [1] $end
$var wire 1 %8 a [0] $end
$var wire 1 28 b [3] $end
$var wire 1 38 b [2] $end
$var wire 1 48 b [1] $end
$var wire 1 58 b [0] $end
$var wire 1 @< c_in $end
$var wire 1 h= gen [3] $end
$var wire 1 i= gen [2] $end
$var wire 1 j= gen [1] $end
$var wire 1 k= gen [0] $end
$var wire 1 l= prop [3] $end
$var wire 1 m= prop [2] $end
$var wire 1 n= prop [1] $end
$var wire 1 o= prop [0] $end
$var wire 1 p= carry [2] $end
$var wire 1 q= carry [1] $end
$var wire 1 r= carry [0] $end
$var wire 1 s= fa_sum [3] $end
$var wire 1 t= fa_sum [2] $end
$var wire 1 u= fa_sum [1] $end
$var wire 1 v= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 v= s $end
$var wire 1 w= c_out $end
$var wire 1 %8 a $end
$var wire 1 58 b $end
$var wire 1 @< c_in $end
$var wire 1 x= xor_AB $end
$var wire 1 y= xor_ABCin $end
$var wire 1 z= NAND_AB $end
$var wire 1 {= not_NAND_AB $end
$var wire 1 |= NAND_Cin_xor_AB $end
$var wire 1 }= not_NAND_Cin_xor_AB $end
$var wire 1 ~= NOR_2NAND $end
$var wire 1 !> not_NOR_2NAND $end
$var wire 1 "> Cin $end

$scope module xor1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 x= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x= in1 $end
$var wire 1 @< in2 $end
$var wire 1 y= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 z= out $end
$upscope $end

$scope module not1 $end
$var wire 1 z= in1 $end
$var wire 1 {= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "> in1 $end
$var wire 1 x= in2 $end
$var wire 1 |= out $end
$upscope $end

$scope module not2 $end
$var wire 1 |= in1 $end
$var wire 1 }= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {= in1 $end
$var wire 1 }= in2 $end
$var wire 1 ~= out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~= in1 $end
$var wire 1 !> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 u= s $end
$var wire 1 #> c_out $end
$var wire 1 $8 a $end
$var wire 1 48 b $end
$var wire 1 r= c_in $end
$var wire 1 $> xor_AB $end
$var wire 1 %> xor_ABCin $end
$var wire 1 &> NAND_AB $end
$var wire 1 '> not_NAND_AB $end
$var wire 1 (> NAND_Cin_xor_AB $end
$var wire 1 )> not_NAND_Cin_xor_AB $end
$var wire 1 *> NOR_2NAND $end
$var wire 1 +> not_NOR_2NAND $end
$var wire 1 ,> Cin $end

$scope module xor1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 $> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $> in1 $end
$var wire 1 r= in2 $end
$var wire 1 %> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 &> out $end
$upscope $end

$scope module not1 $end
$var wire 1 &> in1 $end
$var wire 1 '> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ,> in1 $end
$var wire 1 $> in2 $end
$var wire 1 (> out $end
$upscope $end

$scope module not2 $end
$var wire 1 (> in1 $end
$var wire 1 )> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '> in1 $end
$var wire 1 )> in2 $end
$var wire 1 *> out $end
$upscope $end

$scope module not3 $end
$var wire 1 *> in1 $end
$var wire 1 +> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 t= s $end
$var wire 1 -> c_out $end
$var wire 1 #8 a $end
$var wire 1 38 b $end
$var wire 1 q= c_in $end
$var wire 1 .> xor_AB $end
$var wire 1 /> xor_ABCin $end
$var wire 1 0> NAND_AB $end
$var wire 1 1> not_NAND_AB $end
$var wire 1 2> NAND_Cin_xor_AB $end
$var wire 1 3> not_NAND_Cin_xor_AB $end
$var wire 1 4> NOR_2NAND $end
$var wire 1 5> not_NOR_2NAND $end
$var wire 1 6> Cin $end

$scope module xor1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 .> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 .> in1 $end
$var wire 1 q= in2 $end
$var wire 1 /> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 0> out $end
$upscope $end

$scope module not1 $end
$var wire 1 0> in1 $end
$var wire 1 1> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 6> in1 $end
$var wire 1 .> in2 $end
$var wire 1 2> out $end
$upscope $end

$scope module not2 $end
$var wire 1 2> in1 $end
$var wire 1 3> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 1> in1 $end
$var wire 1 3> in2 $end
$var wire 1 4> out $end
$upscope $end

$scope module not3 $end
$var wire 1 4> in1 $end
$var wire 1 5> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 s= s $end
$var wire 1 7> c_out $end
$var wire 1 "8 a $end
$var wire 1 28 b $end
$var wire 1 p= c_in $end
$var wire 1 8> xor_AB $end
$var wire 1 9> xor_ABCin $end
$var wire 1 :> NAND_AB $end
$var wire 1 ;> not_NAND_AB $end
$var wire 1 <> NAND_Cin_xor_AB $end
$var wire 1 => not_NAND_Cin_xor_AB $end
$var wire 1 >> NOR_2NAND $end
$var wire 1 ?> not_NOR_2NAND $end
$var wire 1 @> Cin $end

$scope module xor1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 8> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8> in1 $end
$var wire 1 p= in2 $end
$var wire 1 9> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 :> out $end
$upscope $end

$scope module not1 $end
$var wire 1 :> in1 $end
$var wire 1 ;> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @> in1 $end
$var wire 1 8> in2 $end
$var wire 1 <> out $end
$upscope $end

$scope module not2 $end
$var wire 1 <> in1 $end
$var wire 1 => out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;> in1 $end
$var wire 1 => in2 $end
$var wire 1 >> out $end
$upscope $end

$scope module not3 $end
$var wire 1 >> in1 $end
$var wire 1 ?> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var parameter 32 A> N $end
$var wire 1 B< sum [3] $end
$var wire 1 C< sum [2] $end
$var wire 1 D< sum [1] $end
$var wire 1 E< sum [0] $end
$var wire 1 B> c_out $end
$var wire 1 |7 a [3] $end
$var wire 1 }7 a [2] $end
$var wire 1 ~7 a [1] $end
$var wire 1 !8 a [0] $end
$var wire 1 .8 b [3] $end
$var wire 1 /8 b [2] $end
$var wire 1 08 b [1] $end
$var wire 1 18 b [0] $end
$var wire 1 ?< c_in $end
$var wire 1 C> gen [3] $end
$var wire 1 D> gen [2] $end
$var wire 1 E> gen [1] $end
$var wire 1 F> gen [0] $end
$var wire 1 G> prop [3] $end
$var wire 1 H> prop [2] $end
$var wire 1 I> prop [1] $end
$var wire 1 J> prop [0] $end
$var wire 1 K> carry [2] $end
$var wire 1 L> carry [1] $end
$var wire 1 M> carry [0] $end
$var wire 1 N> fa_sum [3] $end
$var wire 1 O> fa_sum [2] $end
$var wire 1 P> fa_sum [1] $end
$var wire 1 Q> fa_sum [0] $end

$scope module fa1 $end
$var wire 1 Q> s $end
$var wire 1 R> c_out $end
$var wire 1 !8 a $end
$var wire 1 18 b $end
$var wire 1 ?< c_in $end
$var wire 1 S> xor_AB $end
$var wire 1 T> xor_ABCin $end
$var wire 1 U> NAND_AB $end
$var wire 1 V> not_NAND_AB $end
$var wire 1 W> NAND_Cin_xor_AB $end
$var wire 1 X> not_NAND_Cin_xor_AB $end
$var wire 1 Y> NOR_2NAND $end
$var wire 1 Z> not_NOR_2NAND $end
$var wire 1 [> Cin $end

$scope module xor1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 S> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S> in1 $end
$var wire 1 ?< in2 $end
$var wire 1 T> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 U> out $end
$upscope $end

$scope module not1 $end
$var wire 1 U> in1 $end
$var wire 1 V> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [> in1 $end
$var wire 1 S> in2 $end
$var wire 1 W> out $end
$upscope $end

$scope module not2 $end
$var wire 1 W> in1 $end
$var wire 1 X> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V> in1 $end
$var wire 1 X> in2 $end
$var wire 1 Y> out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y> in1 $end
$var wire 1 Z> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 P> s $end
$var wire 1 \> c_out $end
$var wire 1 ~7 a $end
$var wire 1 08 b $end
$var wire 1 M> c_in $end
$var wire 1 ]> xor_AB $end
$var wire 1 ^> xor_ABCin $end
$var wire 1 _> NAND_AB $end
$var wire 1 `> not_NAND_AB $end
$var wire 1 a> NAND_Cin_xor_AB $end
$var wire 1 b> not_NAND_Cin_xor_AB $end
$var wire 1 c> NOR_2NAND $end
$var wire 1 d> not_NOR_2NAND $end
$var wire 1 e> Cin $end

$scope module xor1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 ]> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]> in1 $end
$var wire 1 M> in2 $end
$var wire 1 ^> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 _> out $end
$upscope $end

$scope module not1 $end
$var wire 1 _> in1 $end
$var wire 1 `> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e> in1 $end
$var wire 1 ]> in2 $end
$var wire 1 a> out $end
$upscope $end

$scope module not2 $end
$var wire 1 a> in1 $end
$var wire 1 b> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `> in1 $end
$var wire 1 b> in2 $end
$var wire 1 c> out $end
$upscope $end

$scope module not3 $end
$var wire 1 c> in1 $end
$var wire 1 d> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 O> s $end
$var wire 1 f> c_out $end
$var wire 1 }7 a $end
$var wire 1 /8 b $end
$var wire 1 L> c_in $end
$var wire 1 g> xor_AB $end
$var wire 1 h> xor_ABCin $end
$var wire 1 i> NAND_AB $end
$var wire 1 j> not_NAND_AB $end
$var wire 1 k> NAND_Cin_xor_AB $end
$var wire 1 l> not_NAND_Cin_xor_AB $end
$var wire 1 m> NOR_2NAND $end
$var wire 1 n> not_NOR_2NAND $end
$var wire 1 o> Cin $end

$scope module xor1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 g> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 g> in1 $end
$var wire 1 L> in2 $end
$var wire 1 h> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 i> out $end
$upscope $end

$scope module not1 $end
$var wire 1 i> in1 $end
$var wire 1 j> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o> in1 $end
$var wire 1 g> in2 $end
$var wire 1 k> out $end
$upscope $end

$scope module not2 $end
$var wire 1 k> in1 $end
$var wire 1 l> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 j> in1 $end
$var wire 1 l> in2 $end
$var wire 1 m> out $end
$upscope $end

$scope module not3 $end
$var wire 1 m> in1 $end
$var wire 1 n> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 N> s $end
$var wire 1 p> c_out $end
$var wire 1 |7 a $end
$var wire 1 .8 b $end
$var wire 1 K> c_in $end
$var wire 1 q> xor_AB $end
$var wire 1 r> xor_ABCin $end
$var wire 1 s> NAND_AB $end
$var wire 1 t> not_NAND_AB $end
$var wire 1 u> NAND_Cin_xor_AB $end
$var wire 1 v> not_NAND_Cin_xor_AB $end
$var wire 1 w> NOR_2NAND $end
$var wire 1 x> not_NOR_2NAND $end
$var wire 1 y> Cin $end

$scope module xor1 $end
$var wire 1 |7 in1 $end
$var wire 1 .8 in2 $end
$var wire 1 q> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 q> in1 $end
$var wire 1 K> in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 |7 in1 $end
$var wire 1 .8 in2 $end
$var wire 1 s> out $end
$upscope $end

$scope module not1 $end
$var wire 1 s> in1 $end
$var wire 1 t> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 y> in1 $end
$var wire 1 q> in2 $end
$var wire 1 u> out $end
$upscope $end

$scope module not2 $end
$var wire 1 u> in1 $end
$var wire 1 v> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 t> in1 $end
$var wire 1 v> in2 $end
$var wire 1 w> out $end
$upscope $end

$scope module not3 $end
$var wire 1 w> in1 $end
$var wire 1 x> out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 73 InA [15] $end
$var wire 1 83 InA [14] $end
$var wire 1 93 InA [13] $end
$var wire 1 :3 InA [12] $end
$var wire 1 ;3 InA [11] $end
$var wire 1 <3 InA [10] $end
$var wire 1 =3 InA [9] $end
$var wire 1 >3 InA [8] $end
$var wire 1 ?3 InA [7] $end
$var wire 1 @3 InA [6] $end
$var wire 1 A3 InA [5] $end
$var wire 1 B3 InA [4] $end
$var wire 1 C3 InA [3] $end
$var wire 1 D3 InA [2] $end
$var wire 1 E3 InA [1] $end
$var wire 1 F3 InA [0] $end
$var wire 1 z> InB [15] $end
$var wire 1 {> InB [14] $end
$var wire 1 |> InB [13] $end
$var wire 1 }> InB [12] $end
$var wire 1 ~> InB [11] $end
$var wire 1 !? InB [10] $end
$var wire 1 "? InB [9] $end
$var wire 1 #? InB [8] $end
$var wire 1 $? InB [7] $end
$var wire 1 %? InB [6] $end
$var wire 1 &? InB [5] $end
$var wire 1 '? InB [4] $end
$var wire 1 (? InB [3] $end
$var wire 1 )? InB [2] $end
$var wire 1 *? InB [1] $end
$var wire 1 +? InB [0] $end
$var wire 1 "9 Out $end
$var wire 1 ,? difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 o3 Out $end
$var wire 1 -? difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 `4 Out $end
$var wire 1 .? difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 W) SendNOP_In $end
$var wire 1 T) SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /? state $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0? state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1? state $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2? state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3? state $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4? state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5? state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 T) q $end
$var wire 1 W) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6? state $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7? state $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8? state $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9? state $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :? state $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;? state $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <? state $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =? state $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >? state $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?? state $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @? state $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A? state $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B? state $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C? state $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D? state $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E? state $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F? state $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G? state $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H? state $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I? state $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J? state $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K? state $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L? state $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M? state $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N? state $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O? state $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P? state $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q? state $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R? state $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S? state $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T? state $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U? state $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V? state $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W? state $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X? state $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y? state $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z? state $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [? state $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \? state $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]? state $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^? state $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _? state $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `? state $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a? state $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b? state $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c? state $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d? state $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e? state $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f? state $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g? state $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h? state $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i? state $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j? state $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k? state $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l? state $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m? state $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n? state $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o? state $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p? state $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q? state $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r? state $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s? state $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t? state $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u? state $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v? state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w? state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x? state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y? state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z? state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {? state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |? state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }? state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~? state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !@ state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "@ state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #@ state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $@ state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %@ state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &@ state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '@ state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (@ state $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )@ state $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *@ state $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +@ state $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,@ state $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -@ state $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .@ state $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /@ state $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0@ state $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1@ state $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2@ state $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3@ state $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4@ state $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5@ state $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6@ state $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7@ state $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8@ state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9@ state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :@ state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;@ state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <@ state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =@ state $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 p% SgnExt [15] $end
$var wire 1 q% SgnExt [14] $end
$var wire 1 r% SgnExt [13] $end
$var wire 1 s% SgnExt [12] $end
$var wire 1 t% SgnExt [11] $end
$var wire 1 u% SgnExt [10] $end
$var wire 1 v% SgnExt [9] $end
$var wire 1 w% SgnExt [8] $end
$var wire 1 x% SgnExt [7] $end
$var wire 1 y% SgnExt [6] $end
$var wire 1 z% SgnExt [5] $end
$var wire 1 {% SgnExt [4] $end
$var wire 1 |% SgnExt [3] $end
$var wire 1 }% SgnExt [2] $end
$var wire 1 ~% SgnExt [1] $end
$var wire 1 !& SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 >@ MuxImmSrc [15] $end
$var wire 1 ?@ MuxImmSrc [14] $end
$var wire 1 @@ MuxImmSrc [13] $end
$var wire 1 A@ MuxImmSrc [12] $end
$var wire 1 B@ MuxImmSrc [11] $end
$var wire 1 C@ MuxImmSrc [10] $end
$var wire 1 D@ MuxImmSrc [9] $end
$var wire 1 E@ MuxImmSrc [8] $end
$var wire 1 F@ MuxImmSrc [7] $end
$var wire 1 G@ MuxImmSrc [6] $end
$var wire 1 H@ MuxImmSrc [5] $end
$var wire 1 I@ MuxImmSrc [4] $end
$var wire 1 J@ MuxImmSrc [3] $end
$var wire 1 K@ MuxImmSrc [2] $end
$var wire 1 L@ MuxImmSrc [1] $end
$var wire 1 M@ MuxImmSrc [0] $end
$var wire 1 N@ adderOut [15] $end
$var wire 1 O@ adderOut [14] $end
$var wire 1 P@ adderOut [13] $end
$var wire 1 Q@ adderOut [12] $end
$var wire 1 R@ adderOut [11] $end
$var wire 1 S@ adderOut [10] $end
$var wire 1 T@ adderOut [9] $end
$var wire 1 U@ adderOut [8] $end
$var wire 1 V@ adderOut [7] $end
$var wire 1 W@ adderOut [6] $end
$var wire 1 X@ adderOut [5] $end
$var wire 1 Y@ adderOut [4] $end
$var wire 1 Z@ adderOut [3] $end
$var wire 1 [@ adderOut [2] $end
$var wire 1 \@ adderOut [1] $end
$var wire 1 ]@ adderOut [0] $end
$var wire 1 ^@ MuxBranchSrc [15] $end
$var wire 1 _@ MuxBranchSrc [14] $end
$var wire 1 `@ MuxBranchSrc [13] $end
$var wire 1 a@ MuxBranchSrc [12] $end
$var wire 1 b@ MuxBranchSrc [11] $end
$var wire 1 c@ MuxBranchSrc [10] $end
$var wire 1 d@ MuxBranchSrc [9] $end
$var wire 1 e@ MuxBranchSrc [8] $end
$var wire 1 f@ MuxBranchSrc [7] $end
$var wire 1 g@ MuxBranchSrc [6] $end
$var wire 1 h@ MuxBranchSrc [5] $end
$var wire 1 i@ MuxBranchSrc [4] $end
$var wire 1 j@ MuxBranchSrc [3] $end
$var wire 1 k@ MuxBranchSrc [2] $end
$var wire 1 l@ MuxBranchSrc [1] $end
$var wire 1 m@ MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 >@ B [15] $end
$var wire 1 ?@ B [14] $end
$var wire 1 @@ B [13] $end
$var wire 1 A@ B [12] $end
$var wire 1 B@ B [11] $end
$var wire 1 C@ B [10] $end
$var wire 1 D@ B [9] $end
$var wire 1 E@ B [8] $end
$var wire 1 F@ B [7] $end
$var wire 1 G@ B [6] $end
$var wire 1 H@ B [5] $end
$var wire 1 I@ B [4] $end
$var wire 1 J@ B [3] $end
$var wire 1 K@ B [2] $end
$var wire 1 L@ B [1] $end
$var wire 1 M@ B [0] $end
$var wire 1 N@ S [15] $end
$var wire 1 O@ S [14] $end
$var wire 1 P@ S [13] $end
$var wire 1 Q@ S [12] $end
$var wire 1 R@ S [11] $end
$var wire 1 S@ S [10] $end
$var wire 1 T@ S [9] $end
$var wire 1 U@ S [8] $end
$var wire 1 V@ S [7] $end
$var wire 1 W@ S [6] $end
$var wire 1 X@ S [5] $end
$var wire 1 Y@ S [4] $end
$var wire 1 Z@ S [3] $end
$var wire 1 [@ S [2] $end
$var wire 1 \@ S [1] $end
$var wire 1 ]@ S [0] $end
$var wire 1 n@ Cout $end
$var wire 1 o@ Cout0 $end
$var wire 1 p@ Cout1 $end
$var wire 1 q@ Cout2 $end
$var wire 1 r@ Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 J@ B [3] $end
$var wire 1 K@ B [2] $end
$var wire 1 L@ B [1] $end
$var wire 1 M@ B [0] $end
$var wire 1 r@ Cin $end
$var wire 1 Z@ S [3] $end
$var wire 1 [@ S [2] $end
$var wire 1 \@ S [1] $end
$var wire 1 ]@ S [0] $end
$var wire 1 o@ Cout $end
$var wire 1 s@ Cout0 $end
$var wire 1 t@ Cout1 $end
$var wire 1 u@ Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 M@ B $end
$var wire 1 r@ Cin $end
$var wire 1 ]@ S $end
$var wire 1 s@ Cout $end
$var wire 1 v@ xor_AB $end
$var wire 1 w@ xor_ABCin $end
$var wire 1 x@ NAND_AB $end
$var wire 1 y@ not_NAND_AB $end
$var wire 1 z@ NAND_Cin_xor_AB $end
$var wire 1 {@ not_NAND_Cin_xor_AB $end
$var wire 1 |@ NOR_2NAND $end
$var wire 1 }@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 v@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 v@ in1 $end
$var wire 1 r@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 x@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 x@ in1 $end
$var wire 1 y@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r@ in1 $end
$var wire 1 v@ in2 $end
$var wire 1 z@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 z@ in1 $end
$var wire 1 {@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 y@ in1 $end
$var wire 1 {@ in2 $end
$var wire 1 |@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 |@ in1 $end
$var wire 1 }@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 L@ B $end
$var wire 1 s@ Cin $end
$var wire 1 \@ S $end
$var wire 1 t@ Cout $end
$var wire 1 ~@ xor_AB $end
$var wire 1 !A xor_ABCin $end
$var wire 1 "A NAND_AB $end
$var wire 1 #A not_NAND_AB $end
$var wire 1 $A NAND_Cin_xor_AB $end
$var wire 1 %A not_NAND_Cin_xor_AB $end
$var wire 1 &A NOR_2NAND $end
$var wire 1 'A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 ~@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module not1 $end
$var wire 1 "A in1 $end
$var wire 1 #A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s@ in1 $end
$var wire 1 ~@ in2 $end
$var wire 1 $A out $end
$upscope $end

$scope module not2 $end
$var wire 1 $A in1 $end
$var wire 1 %A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #A in1 $end
$var wire 1 %A in2 $end
$var wire 1 &A out $end
$upscope $end

$scope module not3 $end
$var wire 1 &A in1 $end
$var wire 1 'A out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 K@ B $end
$var wire 1 t@ Cin $end
$var wire 1 [@ S $end
$var wire 1 u@ Cout $end
$var wire 1 (A xor_AB $end
$var wire 1 )A xor_ABCin $end
$var wire 1 *A NAND_AB $end
$var wire 1 +A not_NAND_AB $end
$var wire 1 ,A NAND_Cin_xor_AB $end
$var wire 1 -A not_NAND_Cin_xor_AB $end
$var wire 1 .A NOR_2NAND $end
$var wire 1 /A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 (A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 (A in1 $end
$var wire 1 t@ in2 $end
$var wire 1 )A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module not1 $end
$var wire 1 *A in1 $end
$var wire 1 +A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t@ in1 $end
$var wire 1 (A in2 $end
$var wire 1 ,A out $end
$upscope $end

$scope module not2 $end
$var wire 1 ,A in1 $end
$var wire 1 -A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 +A in1 $end
$var wire 1 -A in2 $end
$var wire 1 .A out $end
$upscope $end

$scope module not3 $end
$var wire 1 .A in1 $end
$var wire 1 /A out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 J@ B $end
$var wire 1 u@ Cin $end
$var wire 1 Z@ S $end
$var wire 1 o@ Cout $end
$var wire 1 0A xor_AB $end
$var wire 1 1A xor_ABCin $end
$var wire 1 2A NAND_AB $end
$var wire 1 3A not_NAND_AB $end
$var wire 1 4A NAND_Cin_xor_AB $end
$var wire 1 5A not_NAND_Cin_xor_AB $end
$var wire 1 6A NOR_2NAND $end
$var wire 1 7A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 0A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 0A in1 $end
$var wire 1 u@ in2 $end
$var wire 1 1A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module not1 $end
$var wire 1 2A in1 $end
$var wire 1 3A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 u@ in1 $end
$var wire 1 0A in2 $end
$var wire 1 4A out $end
$upscope $end

$scope module not2 $end
$var wire 1 4A in1 $end
$var wire 1 5A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 3A in1 $end
$var wire 1 5A in2 $end
$var wire 1 6A out $end
$upscope $end

$scope module not3 $end
$var wire 1 6A in1 $end
$var wire 1 7A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 F@ B [3] $end
$var wire 1 G@ B [2] $end
$var wire 1 H@ B [1] $end
$var wire 1 I@ B [0] $end
$var wire 1 o@ Cin $end
$var wire 1 V@ S [3] $end
$var wire 1 W@ S [2] $end
$var wire 1 X@ S [1] $end
$var wire 1 Y@ S [0] $end
$var wire 1 p@ Cout $end
$var wire 1 8A Cout0 $end
$var wire 1 9A Cout1 $end
$var wire 1 :A Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 I@ B $end
$var wire 1 o@ Cin $end
$var wire 1 Y@ S $end
$var wire 1 8A Cout $end
$var wire 1 ;A xor_AB $end
$var wire 1 <A xor_ABCin $end
$var wire 1 =A NAND_AB $end
$var wire 1 >A not_NAND_AB $end
$var wire 1 ?A NAND_Cin_xor_AB $end
$var wire 1 @A not_NAND_Cin_xor_AB $end
$var wire 1 AA NOR_2NAND $end
$var wire 1 BA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 ;A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;A in1 $end
$var wire 1 o@ in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 =A out $end
$upscope $end

$scope module not1 $end
$var wire 1 =A in1 $end
$var wire 1 >A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o@ in1 $end
$var wire 1 ;A in2 $end
$var wire 1 ?A out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?A in1 $end
$var wire 1 @A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >A in1 $end
$var wire 1 @A in2 $end
$var wire 1 AA out $end
$upscope $end

$scope module not3 $end
$var wire 1 AA in1 $end
$var wire 1 BA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 H@ B $end
$var wire 1 8A Cin $end
$var wire 1 X@ S $end
$var wire 1 9A Cout $end
$var wire 1 CA xor_AB $end
$var wire 1 DA xor_ABCin $end
$var wire 1 EA NAND_AB $end
$var wire 1 FA not_NAND_AB $end
$var wire 1 GA NAND_Cin_xor_AB $end
$var wire 1 HA not_NAND_Cin_xor_AB $end
$var wire 1 IA NOR_2NAND $end
$var wire 1 JA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 CA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 CA in1 $end
$var wire 1 8A in2 $end
$var wire 1 DA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 EA out $end
$upscope $end

$scope module not1 $end
$var wire 1 EA in1 $end
$var wire 1 FA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 8A in1 $end
$var wire 1 CA in2 $end
$var wire 1 GA out $end
$upscope $end

$scope module not2 $end
$var wire 1 GA in1 $end
$var wire 1 HA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 FA in1 $end
$var wire 1 HA in2 $end
$var wire 1 IA out $end
$upscope $end

$scope module not3 $end
$var wire 1 IA in1 $end
$var wire 1 JA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 G@ B $end
$var wire 1 9A Cin $end
$var wire 1 W@ S $end
$var wire 1 :A Cout $end
$var wire 1 KA xor_AB $end
$var wire 1 LA xor_ABCin $end
$var wire 1 MA NAND_AB $end
$var wire 1 NA not_NAND_AB $end
$var wire 1 OA NAND_Cin_xor_AB $end
$var wire 1 PA not_NAND_Cin_xor_AB $end
$var wire 1 QA NOR_2NAND $end
$var wire 1 RA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 KA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 KA in1 $end
$var wire 1 9A in2 $end
$var wire 1 LA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 MA out $end
$upscope $end

$scope module not1 $end
$var wire 1 MA in1 $end
$var wire 1 NA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9A in1 $end
$var wire 1 KA in2 $end
$var wire 1 OA out $end
$upscope $end

$scope module not2 $end
$var wire 1 OA in1 $end
$var wire 1 PA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 NA in1 $end
$var wire 1 PA in2 $end
$var wire 1 QA out $end
$upscope $end

$scope module not3 $end
$var wire 1 QA in1 $end
$var wire 1 RA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 F@ B $end
$var wire 1 :A Cin $end
$var wire 1 V@ S $end
$var wire 1 p@ Cout $end
$var wire 1 SA xor_AB $end
$var wire 1 TA xor_ABCin $end
$var wire 1 UA NAND_AB $end
$var wire 1 VA not_NAND_AB $end
$var wire 1 WA NAND_Cin_xor_AB $end
$var wire 1 XA not_NAND_Cin_xor_AB $end
$var wire 1 YA NOR_2NAND $end
$var wire 1 ZA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 SA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 SA in1 $end
$var wire 1 :A in2 $end
$var wire 1 TA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 UA out $end
$upscope $end

$scope module not1 $end
$var wire 1 UA in1 $end
$var wire 1 VA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :A in1 $end
$var wire 1 SA in2 $end
$var wire 1 WA out $end
$upscope $end

$scope module not2 $end
$var wire 1 WA in1 $end
$var wire 1 XA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 VA in1 $end
$var wire 1 XA in2 $end
$var wire 1 YA out $end
$upscope $end

$scope module not3 $end
$var wire 1 YA in1 $end
$var wire 1 ZA out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 B@ B [3] $end
$var wire 1 C@ B [2] $end
$var wire 1 D@ B [1] $end
$var wire 1 E@ B [0] $end
$var wire 1 p@ Cin $end
$var wire 1 R@ S [3] $end
$var wire 1 S@ S [2] $end
$var wire 1 T@ S [1] $end
$var wire 1 U@ S [0] $end
$var wire 1 q@ Cout $end
$var wire 1 [A Cout0 $end
$var wire 1 \A Cout1 $end
$var wire 1 ]A Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 E@ B $end
$var wire 1 p@ Cin $end
$var wire 1 U@ S $end
$var wire 1 [A Cout $end
$var wire 1 ^A xor_AB $end
$var wire 1 _A xor_ABCin $end
$var wire 1 `A NAND_AB $end
$var wire 1 aA not_NAND_AB $end
$var wire 1 bA NAND_Cin_xor_AB $end
$var wire 1 cA not_NAND_Cin_xor_AB $end
$var wire 1 dA NOR_2NAND $end
$var wire 1 eA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 ^A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^A in1 $end
$var wire 1 p@ in2 $end
$var wire 1 _A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 `A out $end
$upscope $end

$scope module not1 $end
$var wire 1 `A in1 $end
$var wire 1 aA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p@ in1 $end
$var wire 1 ^A in2 $end
$var wire 1 bA out $end
$upscope $end

$scope module not2 $end
$var wire 1 bA in1 $end
$var wire 1 cA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 aA in1 $end
$var wire 1 cA in2 $end
$var wire 1 dA out $end
$upscope $end

$scope module not3 $end
$var wire 1 dA in1 $end
$var wire 1 eA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 D@ B $end
$var wire 1 [A Cin $end
$var wire 1 T@ S $end
$var wire 1 \A Cout $end
$var wire 1 fA xor_AB $end
$var wire 1 gA xor_ABCin $end
$var wire 1 hA NAND_AB $end
$var wire 1 iA not_NAND_AB $end
$var wire 1 jA NAND_Cin_xor_AB $end
$var wire 1 kA not_NAND_Cin_xor_AB $end
$var wire 1 lA NOR_2NAND $end
$var wire 1 mA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 fA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 fA in1 $end
$var wire 1 [A in2 $end
$var wire 1 gA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 hA out $end
$upscope $end

$scope module not1 $end
$var wire 1 hA in1 $end
$var wire 1 iA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [A in1 $end
$var wire 1 fA in2 $end
$var wire 1 jA out $end
$upscope $end

$scope module not2 $end
$var wire 1 jA in1 $end
$var wire 1 kA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 iA in1 $end
$var wire 1 kA in2 $end
$var wire 1 lA out $end
$upscope $end

$scope module not3 $end
$var wire 1 lA in1 $end
$var wire 1 mA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 C@ B $end
$var wire 1 \A Cin $end
$var wire 1 S@ S $end
$var wire 1 ]A Cout $end
$var wire 1 nA xor_AB $end
$var wire 1 oA xor_ABCin $end
$var wire 1 pA NAND_AB $end
$var wire 1 qA not_NAND_AB $end
$var wire 1 rA NAND_Cin_xor_AB $end
$var wire 1 sA not_NAND_Cin_xor_AB $end
$var wire 1 tA NOR_2NAND $end
$var wire 1 uA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 nA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 nA in1 $end
$var wire 1 \A in2 $end
$var wire 1 oA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 pA out $end
$upscope $end

$scope module not1 $end
$var wire 1 pA in1 $end
$var wire 1 qA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \A in1 $end
$var wire 1 nA in2 $end
$var wire 1 rA out $end
$upscope $end

$scope module not2 $end
$var wire 1 rA in1 $end
$var wire 1 sA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 qA in1 $end
$var wire 1 sA in2 $end
$var wire 1 tA out $end
$upscope $end

$scope module not3 $end
$var wire 1 tA in1 $end
$var wire 1 uA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 B@ B $end
$var wire 1 ]A Cin $end
$var wire 1 R@ S $end
$var wire 1 q@ Cout $end
$var wire 1 vA xor_AB $end
$var wire 1 wA xor_ABCin $end
$var wire 1 xA NAND_AB $end
$var wire 1 yA not_NAND_AB $end
$var wire 1 zA NAND_Cin_xor_AB $end
$var wire 1 {A not_NAND_Cin_xor_AB $end
$var wire 1 |A NOR_2NAND $end
$var wire 1 }A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 vA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 vA in1 $end
$var wire 1 ]A in2 $end
$var wire 1 wA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 xA out $end
$upscope $end

$scope module not1 $end
$var wire 1 xA in1 $end
$var wire 1 yA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]A in1 $end
$var wire 1 vA in2 $end
$var wire 1 zA out $end
$upscope $end

$scope module not2 $end
$var wire 1 zA in1 $end
$var wire 1 {A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 yA in1 $end
$var wire 1 {A in2 $end
$var wire 1 |A out $end
$upscope $end

$scope module not3 $end
$var wire 1 |A in1 $end
$var wire 1 }A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 >@ B [3] $end
$var wire 1 ?@ B [2] $end
$var wire 1 @@ B [1] $end
$var wire 1 A@ B [0] $end
$var wire 1 q@ Cin $end
$var wire 1 N@ S [3] $end
$var wire 1 O@ S [2] $end
$var wire 1 P@ S [1] $end
$var wire 1 Q@ S [0] $end
$var wire 1 n@ Cout $end
$var wire 1 ~A Cout0 $end
$var wire 1 !B Cout1 $end
$var wire 1 "B Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 A@ B $end
$var wire 1 q@ Cin $end
$var wire 1 Q@ S $end
$var wire 1 ~A Cout $end
$var wire 1 #B xor_AB $end
$var wire 1 $B xor_ABCin $end
$var wire 1 %B NAND_AB $end
$var wire 1 &B not_NAND_AB $end
$var wire 1 'B NAND_Cin_xor_AB $end
$var wire 1 (B not_NAND_Cin_xor_AB $end
$var wire 1 )B NOR_2NAND $end
$var wire 1 *B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 #B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 #B in1 $end
$var wire 1 q@ in2 $end
$var wire 1 $B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 %B out $end
$upscope $end

$scope module not1 $end
$var wire 1 %B in1 $end
$var wire 1 &B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q@ in1 $end
$var wire 1 #B in2 $end
$var wire 1 'B out $end
$upscope $end

$scope module not2 $end
$var wire 1 'B in1 $end
$var wire 1 (B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 &B in1 $end
$var wire 1 (B in2 $end
$var wire 1 )B out $end
$upscope $end

$scope module not3 $end
$var wire 1 )B in1 $end
$var wire 1 *B out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 @@ B $end
$var wire 1 ~A Cin $end
$var wire 1 P@ S $end
$var wire 1 !B Cout $end
$var wire 1 +B xor_AB $end
$var wire 1 ,B xor_ABCin $end
$var wire 1 -B NAND_AB $end
$var wire 1 .B not_NAND_AB $end
$var wire 1 /B NAND_Cin_xor_AB $end
$var wire 1 0B not_NAND_Cin_xor_AB $end
$var wire 1 1B NOR_2NAND $end
$var wire 1 2B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 +B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +B in1 $end
$var wire 1 ~A in2 $end
$var wire 1 ,B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 -B out $end
$upscope $end

$scope module not1 $end
$var wire 1 -B in1 $end
$var wire 1 .B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ~A in1 $end
$var wire 1 +B in2 $end
$var wire 1 /B out $end
$upscope $end

$scope module not2 $end
$var wire 1 /B in1 $end
$var wire 1 0B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .B in1 $end
$var wire 1 0B in2 $end
$var wire 1 1B out $end
$upscope $end

$scope module not3 $end
$var wire 1 1B in1 $end
$var wire 1 2B out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 ?@ B $end
$var wire 1 !B Cin $end
$var wire 1 O@ S $end
$var wire 1 "B Cout $end
$var wire 1 3B xor_AB $end
$var wire 1 4B xor_ABCin $end
$var wire 1 5B NAND_AB $end
$var wire 1 6B not_NAND_AB $end
$var wire 1 7B NAND_Cin_xor_AB $end
$var wire 1 8B not_NAND_Cin_xor_AB $end
$var wire 1 9B NOR_2NAND $end
$var wire 1 :B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 3B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 3B in1 $end
$var wire 1 !B in2 $end
$var wire 1 4B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 5B out $end
$upscope $end

$scope module not1 $end
$var wire 1 5B in1 $end
$var wire 1 6B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !B in1 $end
$var wire 1 3B in2 $end
$var wire 1 7B out $end
$upscope $end

$scope module not2 $end
$var wire 1 7B in1 $end
$var wire 1 8B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 6B in1 $end
$var wire 1 8B in2 $end
$var wire 1 9B out $end
$upscope $end

$scope module not3 $end
$var wire 1 9B in1 $end
$var wire 1 :B out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 >@ B $end
$var wire 1 "B Cin $end
$var wire 1 N@ S $end
$var wire 1 n@ Cout $end
$var wire 1 ;B xor_AB $end
$var wire 1 <B xor_ABCin $end
$var wire 1 =B NAND_AB $end
$var wire 1 >B not_NAND_AB $end
$var wire 1 ?B NAND_Cin_xor_AB $end
$var wire 1 @B not_NAND_Cin_xor_AB $end
$var wire 1 AB NOR_2NAND $end
$var wire 1 BB not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 >@ in2 $end
$var wire 1 ;B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;B in1 $end
$var wire 1 "B in2 $end
$var wire 1 <B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 >@ in2 $end
$var wire 1 =B out $end
$upscope $end

$scope module not1 $end
$var wire 1 =B in1 $end
$var wire 1 >B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "B in1 $end
$var wire 1 ;B in2 $end
$var wire 1 ?B out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?B in1 $end
$var wire 1 @B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >B in1 $end
$var wire 1 @B in2 $end
$var wire 1 AB out $end
$upscope $end

$scope module not3 $end
$var wire 1 AB in1 $end
$var wire 1 BB out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 CB enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 DB loaded $end
$var reg 17 EB largest [16:0] $end
$var integer 32 FB mcd $end
$var integer 32 GB i $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 T) SendNOP_In $end
$var wire 1 U) SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end
$var wire 1 k% b_in $end
$var wire 1 `' b_out $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 HB state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 U) q $end
$var wire 1 T) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 IB state $end
$upscope $end

$scope module branch $end
$var wire 1 `' q $end
$var wire 1 k% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 JB state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 KB state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 LB state $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 MB state $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 NB state $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 OB state $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 PB state $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 QB state $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 RB state $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 SB state $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 TB state $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 UB state $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 VB state $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 WB state $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 XB state $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 YB state $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ZB state $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [B state $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \B state $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]B state $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^B state $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _B state $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `B state $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 aB state $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 bB state $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 cB state $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 dB state $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 eB state $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 fB state $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 gB state $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 hB state $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 iB state $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 jB state $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 kB state $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 lB state $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 mB state $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 nB state $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 oB state $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 pB state $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 qB state $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 rB state $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 sB state $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 tB state $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 uB state $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 vB state $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 wB state $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 xB state $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 yB state $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 zB state $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {B state $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |B state $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }B state $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~B state $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !C state $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "C state $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #C state $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $C state $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %C state $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &C state $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 'C state $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (C state $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )C state $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *C state $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +C state $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,C state $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -C state $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .C state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /C state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0C state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1C state $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end

$scope module btaken[15] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2C state $end
$upscope $end

$scope module btaken[14] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3C state $end
$upscope $end

$scope module btaken[13] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4C state $end
$upscope $end

$scope module btaken[12] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5C state $end
$upscope $end

$scope module btaken[11] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6C state $end
$upscope $end

$scope module btaken[10] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7C state $end
$upscope $end

$scope module btaken[9] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8C state $end
$upscope $end

$scope module btaken[8] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9C state $end
$upscope $end

$scope module btaken[7] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :C state $end
$upscope $end

$scope module btaken[6] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;C state $end
$upscope $end

$scope module btaken[5] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <C state $end
$upscope $end

$scope module btaken[4] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =C state $end
$upscope $end

$scope module btaken[3] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >C state $end
$upscope $end

$scope module btaken[2] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?C state $end
$upscope $end

$scope module btaken[1] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @C state $end
$upscope $end

$scope module btaken[0] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 AC state $end
$upscope $end

$scope module cycles[15] $end
$var wire 1 )( q $end
$var wire 1 w' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 BC state $end
$upscope $end

$scope module cycles[14] $end
$var wire 1 *( q $end
$var wire 1 x' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 CC state $end
$upscope $end

$scope module cycles[13] $end
$var wire 1 +( q $end
$var wire 1 y' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 DC state $end
$upscope $end

$scope module cycles[12] $end
$var wire 1 ,( q $end
$var wire 1 z' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 EC state $end
$upscope $end

$scope module cycles[11] $end
$var wire 1 -( q $end
$var wire 1 {' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 FC state $end
$upscope $end

$scope module cycles[10] $end
$var wire 1 .( q $end
$var wire 1 |' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 GC state $end
$upscope $end

$scope module cycles[9] $end
$var wire 1 /( q $end
$var wire 1 }' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 HC state $end
$upscope $end

$scope module cycles[8] $end
$var wire 1 0( q $end
$var wire 1 ~' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 IC state $end
$upscope $end

$scope module cycles[7] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 JC state $end
$upscope $end

$scope module cycles[6] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 KC state $end
$upscope $end

$scope module cycles[5] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 LC state $end
$upscope $end

$scope module cycles[4] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 MC state $end
$upscope $end

$scope module cycles[3] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 NC state $end
$upscope $end

$scope module cycles[2] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 OC state $end
$upscope $end

$scope module cycles[1] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 PC state $end
$upscope $end

$scope module cycles[0] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 QC state $end
$upscope $end
$upscope $end
$upscope $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var wire 1 8! err $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' branching_out_MEM_WB $end
$var wire 1 a' err1 $end
$var wire 1 b' branchNOP $end
$var wire 1 c' jumpNOP $end
$var wire 1 d' btake $end
$var wire 1 e' MUXFOUR [15] $end
$var wire 1 f' MUXFOUR [14] $end
$var wire 1 g' MUXFOUR [13] $end
$var wire 1 h' MUXFOUR [12] $end
$var wire 1 i' MUXFOUR [11] $end
$var wire 1 j' MUXFOUR [10] $end
$var wire 1 k' MUXFOUR [9] $end
$var wire 1 l' MUXFOUR [8] $end
$var wire 1 m' MUXFOUR [7] $end
$var wire 1 n' MUXFOUR [6] $end
$var wire 1 o' MUXFOUR [5] $end
$var wire 1 p' MUXFOUR [4] $end
$var wire 1 q' MUXFOUR [3] $end
$var wire 1 r' MUXFOUR [2] $end
$var wire 1 s' MUXFOUR [1] $end
$var wire 1 t' MUXFOUR [0] $end
$var wire 1 u' jmpthng $end
$var wire 1 v' jmpthng2 $end
$var wire 1 w' cycle [15] $end
$var wire 1 x' cycle [14] $end
$var wire 1 y' cycle [13] $end
$var wire 1 z' cycle [12] $end
$var wire 1 {' cycle [11] $end
$var wire 1 |' cycle [10] $end
$var wire 1 }' cycle [9] $end
$var wire 1 ~' cycle [8] $end
$var wire 1 !( cycle [7] $end
$var wire 1 "( cycle [6] $end
$var wire 1 #( cycle [5] $end
$var wire 1 $( cycle [4] $end
$var wire 1 %( cycle [3] $end
$var wire 1 &( cycle [2] $end
$var wire 1 '( cycle [1] $end
$var wire 1 (( cycle [0] $end
$var wire 1 )( cycleout [15] $end
$var wire 1 *( cycleout [14] $end
$var wire 1 +( cycleout [13] $end
$var wire 1 ,( cycleout [12] $end
$var wire 1 -( cycleout [11] $end
$var wire 1 .( cycleout [10] $end
$var wire 1 /( cycleout [9] $end
$var wire 1 0( cycleout [8] $end
$var wire 1 1( cycleout [7] $end
$var wire 1 2( cycleout [6] $end
$var wire 1 3( cycleout [5] $end
$var wire 1 4( cycleout [4] $end
$var wire 1 5( cycleout [3] $end
$var wire 1 6( cycleout [2] $end
$var wire 1 7( cycleout [1] $end
$var wire 1 8( cycleout [0] $end
$var wire 1 9( MUX_OUT_ONE [15] $end
$var wire 1 :( MUX_OUT_ONE [14] $end
$var wire 1 ;( MUX_OUT_ONE [13] $end
$var wire 1 <( MUX_OUT_ONE [12] $end
$var wire 1 =( MUX_OUT_ONE [11] $end
$var wire 1 >( MUX_OUT_ONE [10] $end
$var wire 1 ?( MUX_OUT_ONE [9] $end
$var wire 1 @( MUX_OUT_ONE [8] $end
$var wire 1 A( MUX_OUT_ONE [7] $end
$var wire 1 B( MUX_OUT_ONE [6] $end
$var wire 1 C( MUX_OUT_ONE [5] $end
$var wire 1 D( MUX_OUT_ONE [4] $end
$var wire 1 E( MUX_OUT_ONE [3] $end
$var wire 1 F( MUX_OUT_ONE [2] $end
$var wire 1 G( MUX_OUT_ONE [1] $end
$var wire 1 H( MUX_OUT_ONE [0] $end
$var wire 1 I( MUX_OUT_TWO [15] $end
$var wire 1 J( MUX_OUT_TWO [14] $end
$var wire 1 K( MUX_OUT_TWO [13] $end
$var wire 1 L( MUX_OUT_TWO [12] $end
$var wire 1 M( MUX_OUT_TWO [11] $end
$var wire 1 N( MUX_OUT_TWO [10] $end
$var wire 1 O( MUX_OUT_TWO [9] $end
$var wire 1 P( MUX_OUT_TWO [8] $end
$var wire 1 Q( MUX_OUT_TWO [7] $end
$var wire 1 R( MUX_OUT_TWO [6] $end
$var wire 1 S( MUX_OUT_TWO [5] $end
$var wire 1 T( MUX_OUT_TWO [4] $end
$var wire 1 U( MUX_OUT_TWO [3] $end
$var wire 1 V( MUX_OUT_TWO [2] $end
$var wire 1 W( MUX_OUT_TWO [1] $end
$var wire 1 X( MUX_OUT_TWO [0] $end
$var wire 1 Y( MUXTHREE [15] $end
$var wire 1 Z( MUXTHREE [14] $end
$var wire 1 [( MUXTHREE [13] $end
$var wire 1 \( MUXTHREE [12] $end
$var wire 1 ]( MUXTHREE [11] $end
$var wire 1 ^( MUXTHREE [10] $end
$var wire 1 _( MUXTHREE [9] $end
$var wire 1 `( MUXTHREE [8] $end
$var wire 1 a( MUXTHREE [7] $end
$var wire 1 b( MUXTHREE [6] $end
$var wire 1 c( MUXTHREE [5] $end
$var wire 1 d( MUXTHREE [4] $end
$var wire 1 e( MUXTHREE [3] $end
$var wire 1 f( MUXTHREE [2] $end
$var wire 1 g( MUXTHREE [1] $end
$var wire 1 h( MUXTHREE [0] $end
$var wire 1 i( PC_NO_PLUS_TWO [15] $end
$var wire 1 j( PC_NO_PLUS_TWO [14] $end
$var wire 1 k( PC_NO_PLUS_TWO [13] $end
$var wire 1 l( PC_NO_PLUS_TWO [12] $end
$var wire 1 m( PC_NO_PLUS_TWO [11] $end
$var wire 1 n( PC_NO_PLUS_TWO [10] $end
$var wire 1 o( PC_NO_PLUS_TWO [9] $end
$var wire 1 p( PC_NO_PLUS_TWO [8] $end
$var wire 1 q( PC_NO_PLUS_TWO [7] $end
$var wire 1 r( PC_NO_PLUS_TWO [6] $end
$var wire 1 s( PC_NO_PLUS_TWO [5] $end
$var wire 1 t( PC_NO_PLUS_TWO [4] $end
$var wire 1 u( PC_NO_PLUS_TWO [3] $end
$var wire 1 v( PC_NO_PLUS_TWO [2] $end
$var wire 1 w( PC_NO_PLUS_TWO [1] $end
$var wire 1 x( PC_NO_PLUS_TWO [0] $end
$var wire 1 y( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 z( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 {( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 |( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 }( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 ~( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 !) PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 ") PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 #) PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 $) PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 %) PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 &) PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 ') PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 () PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 )) PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 *) PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 +) SendNop $end
$var wire 1 ,) muxonecond $end
$var wire 1 -) branchfail $end
$var wire 1 .) bthng2 $end
$var wire 1 /) muxtwcond $end
$var wire 1 0) inst_again [15] $end
$var wire 1 1) inst_again [14] $end
$var wire 1 2) inst_again [13] $end
$var wire 1 3) inst_again [12] $end
$var wire 1 4) inst_again [11] $end
$var wire 1 5) inst_again [10] $end
$var wire 1 6) inst_again [9] $end
$var wire 1 7) inst_again [8] $end
$var wire 1 8) inst_again [7] $end
$var wire 1 9) inst_again [6] $end
$var wire 1 :) inst_again [5] $end
$var wire 1 ;) inst_again [4] $end
$var wire 1 <) inst_again [3] $end
$var wire 1 =) inst_again [2] $end
$var wire 1 >) inst_again [1] $end
$var wire 1 ?) inst_again [0] $end
$var wire 1 @) instagaincnd $end
$var wire 1 A) pcagain [15] $end
$var wire 1 B) pcagain [14] $end
$var wire 1 C) pcagain [13] $end
$var wire 1 D) pcagain [12] $end
$var wire 1 E) pcagain [11] $end
$var wire 1 F) pcagain [10] $end
$var wire 1 G) pcagain [9] $end
$var wire 1 H) pcagain [8] $end
$var wire 1 I) pcagain [7] $end
$var wire 1 J) pcagain [6] $end
$var wire 1 K) pcagain [5] $end
$var wire 1 L) pcagain [4] $end
$var wire 1 M) pcagain [3] $end
$var wire 1 N) pcagain [2] $end
$var wire 1 O) pcagain [1] $end
$var wire 1 P) pcagain [0] $end
$var wire 1 Q) MemWrt_Decode_Out $end
$var wire 1 R) RegWrt_Decode_Out $end
$var wire 1 S) NOP_Out_ID_EX $end
$var wire 1 T) NOP_Out_ID_MEM $end
$var wire 1 U) NOP_Out_ID_WB $end
$var wire 1 V) branching_Decode_Out $end
$var wire 1 W) Nop_or_Branch $end
$var wire 1 X) bNOP_OUTIDEX $end
$var wire 1 Y) nopmux [15] $end
$var wire 1 Z) nopmux [14] $end
$var wire 1 [) nopmux [13] $end
$var wire 1 \) nopmux [12] $end
$var wire 1 ]) nopmux [11] $end
$var wire 1 ^) nopmux [10] $end
$var wire 1 _) nopmux [9] $end
$var wire 1 `) nopmux [8] $end
$var wire 1 a) nopmux [7] $end
$var wire 1 b) nopmux [6] $end
$var wire 1 c) nopmux [5] $end
$var wire 1 d) nopmux [4] $end
$var wire 1 e) nopmux [3] $end
$var wire 1 f) nopmux [2] $end
$var wire 1 g) nopmux [1] $end
$var wire 1 h) nopmux [0] $end

$scope module my_clkrst $end
$var wire 1 k) err $end
$upscope $end

$scope module jumper $end
$var wire 1 u' q $end
$var wire 1 m% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module jumper2 $end
$var wire 1 v' q $end
$var wire 1 l% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module bumper2 $end
$var wire 1 .) q $end
$var wire 1 -) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 I( PC_in [15] $end
$var wire 1 J( PC_in [14] $end
$var wire 1 K( PC_in [13] $end
$var wire 1 L( PC_in [12] $end
$var wire 1 M( PC_in [11] $end
$var wire 1 N( PC_in [10] $end
$var wire 1 O( PC_in [9] $end
$var wire 1 P( PC_in [8] $end
$var wire 1 Q( PC_in [7] $end
$var wire 1 R( PC_in [6] $end
$var wire 1 S( PC_in [5] $end
$var wire 1 T( PC_in [4] $end
$var wire 1 U( PC_in [3] $end
$var wire 1 V( PC_in [2] $end
$var wire 1 W( PC_in [1] $end
$var wire 1 X( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 i( pc_temp [15] $end
$var wire 1 j( pc_temp [14] $end
$var wire 1 k( pc_temp [13] $end
$var wire 1 l( pc_temp [12] $end
$var wire 1 m( pc_temp [11] $end
$var wire 1 n( pc_temp [10] $end
$var wire 1 o( pc_temp [9] $end
$var wire 1 p( pc_temp [8] $end
$var wire 1 q( pc_temp [7] $end
$var wire 1 r( pc_temp [6] $end
$var wire 1 s( pc_temp [5] $end
$var wire 1 t( pc_temp [4] $end
$var wire 1 u( pc_temp [3] $end
$var wire 1 v( pc_temp [2] $end
$var wire 1 w( pc_temp [1] $end
$var wire 1 x( pc_temp [0] $end

$scope module fa $end
$var wire 1 i( A [15] $end
$var wire 1 j( A [14] $end
$var wire 1 k( A [13] $end
$var wire 1 l( A [12] $end
$var wire 1 m( A [11] $end
$var wire 1 n( A [10] $end
$var wire 1 o( A [9] $end
$var wire 1 p( A [8] $end
$var wire 1 q( A [7] $end
$var wire 1 r( A [6] $end
$var wire 1 s( A [5] $end
$var wire 1 t( A [4] $end
$var wire 1 u( A [3] $end
$var wire 1 v( A [2] $end
$var wire 1 w( A [1] $end
$var wire 1 x( A [0] $end
$var wire 1 p) B [15] $end
$var wire 1 q) B [14] $end
$var wire 1 r) B [13] $end
$var wire 1 s) B [12] $end
$var wire 1 t) B [11] $end
$var wire 1 u) B [10] $end
$var wire 1 v) B [9] $end
$var wire 1 w) B [8] $end
$var wire 1 x) B [7] $end
$var wire 1 y) B [6] $end
$var wire 1 z) B [5] $end
$var wire 1 {) B [4] $end
$var wire 1 |) B [3] $end
$var wire 1 }) B [2] $end
$var wire 1 ~) B [1] $end
$var wire 1 !* B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 "* Cout $end
$var wire 1 #* Cout0 $end
$var wire 1 $* Cout1 $end
$var wire 1 %* Cout2 $end
$var wire 1 &* Cin $end

$scope module f1 $end
$var wire 1 u( A [3] $end
$var wire 1 v( A [2] $end
$var wire 1 w( A [1] $end
$var wire 1 x( A [0] $end
$var wire 1 |) B [3] $end
$var wire 1 }) B [2] $end
$var wire 1 ~) B [1] $end
$var wire 1 !* B [0] $end
$var wire 1 &* Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 #* Cout $end
$var wire 1 '* Cout0 $end
$var wire 1 (* Cout1 $end
$var wire 1 )* Cout2 $end

$scope module f1 $end
$var wire 1 x( A $end
$var wire 1 !* B $end
$var wire 1 &* Cin $end
$var wire 1 0" S $end
$var wire 1 '* Cout $end
$var wire 1 ** xor_AB $end
$var wire 1 +* xor_ABCin $end
$var wire 1 ,* NAND_AB $end
$var wire 1 -* not_NAND_AB $end
$var wire 1 .* NAND_Cin_xor_AB $end
$var wire 1 /* not_NAND_Cin_xor_AB $end
$var wire 1 0* NOR_2NAND $end
$var wire 1 1* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 x( in1 $end
$var wire 1 !* in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ** in1 $end
$var wire 1 &* in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 x( in1 $end
$var wire 1 !* in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,* in1 $end
$var wire 1 -* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 &* in1 $end
$var wire 1 ** in2 $end
$var wire 1 .* out $end
$upscope $end

$scope module not2 $end
$var wire 1 .* in1 $end
$var wire 1 /* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -* in1 $end
$var wire 1 /* in2 $end
$var wire 1 0* out $end
$upscope $end

$scope module not3 $end
$var wire 1 0* in1 $end
$var wire 1 1* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 w( A $end
$var wire 1 ~) B $end
$var wire 1 '* Cin $end
$var wire 1 /" S $end
$var wire 1 (* Cout $end
$var wire 1 2* xor_AB $end
$var wire 1 3* xor_ABCin $end
$var wire 1 4* NAND_AB $end
$var wire 1 5* not_NAND_AB $end
$var wire 1 6* NAND_Cin_xor_AB $end
$var wire 1 7* not_NAND_Cin_xor_AB $end
$var wire 1 8* NOR_2NAND $end
$var wire 1 9* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 w( in1 $end
$var wire 1 ~) in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 2* in1 $end
$var wire 1 '* in2 $end
$var wire 1 3* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 w( in1 $end
$var wire 1 ~) in2 $end
$var wire 1 4* out $end
$upscope $end

$scope module not1 $end
$var wire 1 4* in1 $end
$var wire 1 5* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 '* in1 $end
$var wire 1 2* in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module not2 $end
$var wire 1 6* in1 $end
$var wire 1 7* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 5* in1 $end
$var wire 1 7* in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module not3 $end
$var wire 1 8* in1 $end
$var wire 1 9* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 v( A $end
$var wire 1 }) B $end
$var wire 1 (* Cin $end
$var wire 1 ." S $end
$var wire 1 )* Cout $end
$var wire 1 :* xor_AB $end
$var wire 1 ;* xor_ABCin $end
$var wire 1 <* NAND_AB $end
$var wire 1 =* not_NAND_AB $end
$var wire 1 >* NAND_Cin_xor_AB $end
$var wire 1 ?* not_NAND_Cin_xor_AB $end
$var wire 1 @* NOR_2NAND $end
$var wire 1 A* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 v( in1 $end
$var wire 1 }) in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 :* in1 $end
$var wire 1 (* in2 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 v( in1 $end
$var wire 1 }) in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not1 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 (* in1 $end
$var wire 1 :* in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not2 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 =* in1 $end
$var wire 1 ?* in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not3 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 u( A $end
$var wire 1 |) B $end
$var wire 1 )* Cin $end
$var wire 1 -" S $end
$var wire 1 #* Cout $end
$var wire 1 B* xor_AB $end
$var wire 1 C* xor_ABCin $end
$var wire 1 D* NAND_AB $end
$var wire 1 E* not_NAND_AB $end
$var wire 1 F* NAND_Cin_xor_AB $end
$var wire 1 G* not_NAND_Cin_xor_AB $end
$var wire 1 H* NOR_2NAND $end
$var wire 1 I* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 u( in1 $end
$var wire 1 |) in2 $end
$var wire 1 B* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 B* in1 $end
$var wire 1 )* in2 $end
$var wire 1 C* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 u( in1 $end
$var wire 1 |) in2 $end
$var wire 1 D* out $end
$upscope $end

$scope module not1 $end
$var wire 1 D* in1 $end
$var wire 1 E* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 )* in1 $end
$var wire 1 B* in2 $end
$var wire 1 F* out $end
$upscope $end

$scope module not2 $end
$var wire 1 F* in1 $end
$var wire 1 G* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 E* in1 $end
$var wire 1 G* in2 $end
$var wire 1 H* out $end
$upscope $end

$scope module not3 $end
$var wire 1 H* in1 $end
$var wire 1 I* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 q( A [3] $end
$var wire 1 r( A [2] $end
$var wire 1 s( A [1] $end
$var wire 1 t( A [0] $end
$var wire 1 x) B [3] $end
$var wire 1 y) B [2] $end
$var wire 1 z) B [1] $end
$var wire 1 {) B [0] $end
$var wire 1 #* Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 $* Cout $end
$var wire 1 J* Cout0 $end
$var wire 1 K* Cout1 $end
$var wire 1 L* Cout2 $end

$scope module f1 $end
$var wire 1 t( A $end
$var wire 1 {) B $end
$var wire 1 #* Cin $end
$var wire 1 ," S $end
$var wire 1 J* Cout $end
$var wire 1 M* xor_AB $end
$var wire 1 N* xor_ABCin $end
$var wire 1 O* NAND_AB $end
$var wire 1 P* not_NAND_AB $end
$var wire 1 Q* NAND_Cin_xor_AB $end
$var wire 1 R* not_NAND_Cin_xor_AB $end
$var wire 1 S* NOR_2NAND $end
$var wire 1 T* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 t( in1 $end
$var wire 1 {) in2 $end
$var wire 1 M* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 M* in1 $end
$var wire 1 #* in2 $end
$var wire 1 N* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 t( in1 $end
$var wire 1 {) in2 $end
$var wire 1 O* out $end
$upscope $end

$scope module not1 $end
$var wire 1 O* in1 $end
$var wire 1 P* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 #* in1 $end
$var wire 1 M* in2 $end
$var wire 1 Q* out $end
$upscope $end

$scope module not2 $end
$var wire 1 Q* in1 $end
$var wire 1 R* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 P* in1 $end
$var wire 1 R* in2 $end
$var wire 1 S* out $end
$upscope $end

$scope module not3 $end
$var wire 1 S* in1 $end
$var wire 1 T* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 s( A $end
$var wire 1 z) B $end
$var wire 1 J* Cin $end
$var wire 1 +" S $end
$var wire 1 K* Cout $end
$var wire 1 U* xor_AB $end
$var wire 1 V* xor_ABCin $end
$var wire 1 W* NAND_AB $end
$var wire 1 X* not_NAND_AB $end
$var wire 1 Y* NAND_Cin_xor_AB $end
$var wire 1 Z* not_NAND_Cin_xor_AB $end
$var wire 1 [* NOR_2NAND $end
$var wire 1 \* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 s( in1 $end
$var wire 1 z) in2 $end
$var wire 1 U* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 U* in1 $end
$var wire 1 J* in2 $end
$var wire 1 V* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 s( in1 $end
$var wire 1 z) in2 $end
$var wire 1 W* out $end
$upscope $end

$scope module not1 $end
$var wire 1 W* in1 $end
$var wire 1 X* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 J* in1 $end
$var wire 1 U* in2 $end
$var wire 1 Y* out $end
$upscope $end

$scope module not2 $end
$var wire 1 Y* in1 $end
$var wire 1 Z* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 X* in1 $end
$var wire 1 Z* in2 $end
$var wire 1 [* out $end
$upscope $end

$scope module not3 $end
$var wire 1 [* in1 $end
$var wire 1 \* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 r( A $end
$var wire 1 y) B $end
$var wire 1 K* Cin $end
$var wire 1 *" S $end
$var wire 1 L* Cout $end
$var wire 1 ]* xor_AB $end
$var wire 1 ^* xor_ABCin $end
$var wire 1 _* NAND_AB $end
$var wire 1 `* not_NAND_AB $end
$var wire 1 a* NAND_Cin_xor_AB $end
$var wire 1 b* not_NAND_Cin_xor_AB $end
$var wire 1 c* NOR_2NAND $end
$var wire 1 d* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 r( in1 $end
$var wire 1 y) in2 $end
$var wire 1 ]* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]* in1 $end
$var wire 1 K* in2 $end
$var wire 1 ^* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 r( in1 $end
$var wire 1 y) in2 $end
$var wire 1 _* out $end
$upscope $end

$scope module not1 $end
$var wire 1 _* in1 $end
$var wire 1 `* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K* in1 $end
$var wire 1 ]* in2 $end
$var wire 1 a* out $end
$upscope $end

$scope module not2 $end
$var wire 1 a* in1 $end
$var wire 1 b* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `* in1 $end
$var wire 1 b* in2 $end
$var wire 1 c* out $end
$upscope $end

$scope module not3 $end
$var wire 1 c* in1 $end
$var wire 1 d* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 q( A $end
$var wire 1 x) B $end
$var wire 1 L* Cin $end
$var wire 1 )" S $end
$var wire 1 $* Cout $end
$var wire 1 e* xor_AB $end
$var wire 1 f* xor_ABCin $end
$var wire 1 g* NAND_AB $end
$var wire 1 h* not_NAND_AB $end
$var wire 1 i* NAND_Cin_xor_AB $end
$var wire 1 j* not_NAND_Cin_xor_AB $end
$var wire 1 k* NOR_2NAND $end
$var wire 1 l* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 q( in1 $end
$var wire 1 x) in2 $end
$var wire 1 e* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 e* in1 $end
$var wire 1 L* in2 $end
$var wire 1 f* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 q( in1 $end
$var wire 1 x) in2 $end
$var wire 1 g* out $end
$upscope $end

$scope module not1 $end
$var wire 1 g* in1 $end
$var wire 1 h* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L* in1 $end
$var wire 1 e* in2 $end
$var wire 1 i* out $end
$upscope $end

$scope module not2 $end
$var wire 1 i* in1 $end
$var wire 1 j* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 h* in1 $end
$var wire 1 j* in2 $end
$var wire 1 k* out $end
$upscope $end

$scope module not3 $end
$var wire 1 k* in1 $end
$var wire 1 l* out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 m( A [3] $end
$var wire 1 n( A [2] $end
$var wire 1 o( A [1] $end
$var wire 1 p( A [0] $end
$var wire 1 t) B [3] $end
$var wire 1 u) B [2] $end
$var wire 1 v) B [1] $end
$var wire 1 w) B [0] $end
$var wire 1 $* Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 %* Cout $end
$var wire 1 m* Cout0 $end
$var wire 1 n* Cout1 $end
$var wire 1 o* Cout2 $end

$scope module f1 $end
$var wire 1 p( A $end
$var wire 1 w) B $end
$var wire 1 $* Cin $end
$var wire 1 (" S $end
$var wire 1 m* Cout $end
$var wire 1 p* xor_AB $end
$var wire 1 q* xor_ABCin $end
$var wire 1 r* NAND_AB $end
$var wire 1 s* not_NAND_AB $end
$var wire 1 t* NAND_Cin_xor_AB $end
$var wire 1 u* not_NAND_Cin_xor_AB $end
$var wire 1 v* NOR_2NAND $end
$var wire 1 w* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 p( in1 $end
$var wire 1 w) in2 $end
$var wire 1 p* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 p* in1 $end
$var wire 1 $* in2 $end
$var wire 1 q* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 p( in1 $end
$var wire 1 w) in2 $end
$var wire 1 r* out $end
$upscope $end

$scope module not1 $end
$var wire 1 r* in1 $end
$var wire 1 s* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 $* in1 $end
$var wire 1 p* in2 $end
$var wire 1 t* out $end
$upscope $end

$scope module not2 $end
$var wire 1 t* in1 $end
$var wire 1 u* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 s* in1 $end
$var wire 1 u* in2 $end
$var wire 1 v* out $end
$upscope $end

$scope module not3 $end
$var wire 1 v* in1 $end
$var wire 1 w* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 o( A $end
$var wire 1 v) B $end
$var wire 1 m* Cin $end
$var wire 1 '" S $end
$var wire 1 n* Cout $end
$var wire 1 x* xor_AB $end
$var wire 1 y* xor_ABCin $end
$var wire 1 z* NAND_AB $end
$var wire 1 {* not_NAND_AB $end
$var wire 1 |* NAND_Cin_xor_AB $end
$var wire 1 }* not_NAND_Cin_xor_AB $end
$var wire 1 ~* NOR_2NAND $end
$var wire 1 !+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 o( in1 $end
$var wire 1 v) in2 $end
$var wire 1 x* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x* in1 $end
$var wire 1 m* in2 $end
$var wire 1 y* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 o( in1 $end
$var wire 1 v) in2 $end
$var wire 1 z* out $end
$upscope $end

$scope module not1 $end
$var wire 1 z* in1 $end
$var wire 1 {* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 m* in1 $end
$var wire 1 x* in2 $end
$var wire 1 |* out $end
$upscope $end

$scope module not2 $end
$var wire 1 |* in1 $end
$var wire 1 }* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {* in1 $end
$var wire 1 }* in2 $end
$var wire 1 ~* out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~* in1 $end
$var wire 1 !+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 n( A $end
$var wire 1 u) B $end
$var wire 1 n* Cin $end
$var wire 1 &" S $end
$var wire 1 o* Cout $end
$var wire 1 "+ xor_AB $end
$var wire 1 #+ xor_ABCin $end
$var wire 1 $+ NAND_AB $end
$var wire 1 %+ not_NAND_AB $end
$var wire 1 &+ NAND_Cin_xor_AB $end
$var wire 1 '+ not_NAND_Cin_xor_AB $end
$var wire 1 (+ NOR_2NAND $end
$var wire 1 )+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 n( in1 $end
$var wire 1 u) in2 $end
$var wire 1 "+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 "+ in1 $end
$var wire 1 n* in2 $end
$var wire 1 #+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 n( in1 $end
$var wire 1 u) in2 $end
$var wire 1 $+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 $+ in1 $end
$var wire 1 %+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n* in1 $end
$var wire 1 "+ in2 $end
$var wire 1 &+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 &+ in1 $end
$var wire 1 '+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 %+ in1 $end
$var wire 1 '+ in2 $end
$var wire 1 (+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 (+ in1 $end
$var wire 1 )+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 m( A $end
$var wire 1 t) B $end
$var wire 1 o* Cin $end
$var wire 1 %" S $end
$var wire 1 %* Cout $end
$var wire 1 *+ xor_AB $end
$var wire 1 ++ xor_ABCin $end
$var wire 1 ,+ NAND_AB $end
$var wire 1 -+ not_NAND_AB $end
$var wire 1 .+ NAND_Cin_xor_AB $end
$var wire 1 /+ not_NAND_Cin_xor_AB $end
$var wire 1 0+ NOR_2NAND $end
$var wire 1 1+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 m( in1 $end
$var wire 1 t) in2 $end
$var wire 1 *+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 *+ in1 $end
$var wire 1 o* in2 $end
$var wire 1 ++ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 m( in1 $end
$var wire 1 t) in2 $end
$var wire 1 ,+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,+ in1 $end
$var wire 1 -+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o* in1 $end
$var wire 1 *+ in2 $end
$var wire 1 .+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 .+ in1 $end
$var wire 1 /+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -+ in1 $end
$var wire 1 /+ in2 $end
$var wire 1 0+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 0+ in1 $end
$var wire 1 1+ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 i( A [3] $end
$var wire 1 j( A [2] $end
$var wire 1 k( A [1] $end
$var wire 1 l( A [0] $end
$var wire 1 p) B [3] $end
$var wire 1 q) B [2] $end
$var wire 1 r) B [1] $end
$var wire 1 s) B [0] $end
$var wire 1 %* Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 "* Cout $end
$var wire 1 2+ Cout0 $end
$var wire 1 3+ Cout1 $end
$var wire 1 4+ Cout2 $end

$scope module f1 $end
$var wire 1 l( A $end
$var wire 1 s) B $end
$var wire 1 %* Cin $end
$var wire 1 $" S $end
$var wire 1 2+ Cout $end
$var wire 1 5+ xor_AB $end
$var wire 1 6+ xor_ABCin $end
$var wire 1 7+ NAND_AB $end
$var wire 1 8+ not_NAND_AB $end
$var wire 1 9+ NAND_Cin_xor_AB $end
$var wire 1 :+ not_NAND_Cin_xor_AB $end
$var wire 1 ;+ NOR_2NAND $end
$var wire 1 <+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 l( in1 $end
$var wire 1 s) in2 $end
$var wire 1 5+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 5+ in1 $end
$var wire 1 %* in2 $end
$var wire 1 6+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 l( in1 $end
$var wire 1 s) in2 $end
$var wire 1 7+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 7+ in1 $end
$var wire 1 8+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 %* in1 $end
$var wire 1 5+ in2 $end
$var wire 1 9+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 9+ in1 $end
$var wire 1 :+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 8+ in1 $end
$var wire 1 :+ in2 $end
$var wire 1 ;+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 ;+ in1 $end
$var wire 1 <+ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 k( A $end
$var wire 1 r) B $end
$var wire 1 2+ Cin $end
$var wire 1 #" S $end
$var wire 1 3+ Cout $end
$var wire 1 =+ xor_AB $end
$var wire 1 >+ xor_ABCin $end
$var wire 1 ?+ NAND_AB $end
$var wire 1 @+ not_NAND_AB $end
$var wire 1 A+ NAND_Cin_xor_AB $end
$var wire 1 B+ not_NAND_Cin_xor_AB $end
$var wire 1 C+ NOR_2NAND $end
$var wire 1 D+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 k( in1 $end
$var wire 1 r) in2 $end
$var wire 1 =+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 =+ in1 $end
$var wire 1 2+ in2 $end
$var wire 1 >+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 k( in1 $end
$var wire 1 r) in2 $end
$var wire 1 ?+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ?+ in1 $end
$var wire 1 @+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 2+ in1 $end
$var wire 1 =+ in2 $end
$var wire 1 A+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 A+ in1 $end
$var wire 1 B+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 @+ in1 $end
$var wire 1 B+ in2 $end
$var wire 1 C+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 C+ in1 $end
$var wire 1 D+ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 j( A $end
$var wire 1 q) B $end
$var wire 1 3+ Cin $end
$var wire 1 "" S $end
$var wire 1 4+ Cout $end
$var wire 1 E+ xor_AB $end
$var wire 1 F+ xor_ABCin $end
$var wire 1 G+ NAND_AB $end
$var wire 1 H+ not_NAND_AB $end
$var wire 1 I+ NAND_Cin_xor_AB $end
$var wire 1 J+ not_NAND_Cin_xor_AB $end
$var wire 1 K+ NOR_2NAND $end
$var wire 1 L+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 j( in1 $end
$var wire 1 q) in2 $end
$var wire 1 E+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 E+ in1 $end
$var wire 1 3+ in2 $end
$var wire 1 F+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 j( in1 $end
$var wire 1 q) in2 $end
$var wire 1 G+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 G+ in1 $end
$var wire 1 H+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 3+ in1 $end
$var wire 1 E+ in2 $end
$var wire 1 I+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 I+ in1 $end
$var wire 1 J+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 H+ in1 $end
$var wire 1 J+ in2 $end
$var wire 1 K+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 K+ in1 $end
$var wire 1 L+ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 i( A $end
$var wire 1 p) B $end
$var wire 1 4+ Cin $end
$var wire 1 !" S $end
$var wire 1 "* Cout $end
$var wire 1 M+ xor_AB $end
$var wire 1 N+ xor_ABCin $end
$var wire 1 O+ NAND_AB $end
$var wire 1 P+ not_NAND_AB $end
$var wire 1 Q+ NAND_Cin_xor_AB $end
$var wire 1 R+ not_NAND_Cin_xor_AB $end
$var wire 1 S+ NOR_2NAND $end
$var wire 1 T+ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 i( in1 $end
$var wire 1 p) in2 $end
$var wire 1 M+ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 M+ in1 $end
$var wire 1 4+ in2 $end
$var wire 1 N+ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 i( in1 $end
$var wire 1 p) in2 $end
$var wire 1 O+ out $end
$upscope $end

$scope module not1 $end
$var wire 1 O+ in1 $end
$var wire 1 P+ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 4+ in1 $end
$var wire 1 M+ in2 $end
$var wire 1 Q+ out $end
$upscope $end

$scope module not2 $end
$var wire 1 Q+ in1 $end
$var wire 1 R+ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 P+ in1 $end
$var wire 1 R+ in2 $end
$var wire 1 S+ out $end
$upscope $end

$scope module not3 $end
$var wire 1 S+ in1 $end
$var wire 1 T+ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 U+ data_in [15] $end
$var wire 1 V+ data_in [14] $end
$var wire 1 W+ data_in [13] $end
$var wire 1 X+ data_in [12] $end
$var wire 1 Y+ data_in [11] $end
$var wire 1 Z+ data_in [10] $end
$var wire 1 [+ data_in [9] $end
$var wire 1 \+ data_in [8] $end
$var wire 1 ]+ data_in [7] $end
$var wire 1 ^+ data_in [6] $end
$var wire 1 _+ data_in [5] $end
$var wire 1 `+ data_in [4] $end
$var wire 1 a+ data_in [3] $end
$var wire 1 b+ data_in [2] $end
$var wire 1 c+ data_in [1] $end
$var wire 1 d+ data_in [0] $end
$var wire 1 i( addr [15] $end
$var wire 1 j( addr [14] $end
$var wire 1 k( addr [13] $end
$var wire 1 l( addr [12] $end
$var wire 1 m( addr [11] $end
$var wire 1 n( addr [10] $end
$var wire 1 o( addr [9] $end
$var wire 1 p( addr [8] $end
$var wire 1 q( addr [7] $end
$var wire 1 r( addr [6] $end
$var wire 1 s( addr [5] $end
$var wire 1 t( addr [4] $end
$var wire 1 u( addr [3] $end
$var wire 1 v( addr [2] $end
$var wire 1 w( addr [1] $end
$var wire 1 x( addr [0] $end
$var wire 1 e+ enable $end
$var wire 1 f+ wr $end
$var wire 1 g+ createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[15] $end
$var wire 1 i( q $end
$var wire 1 I( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 j( q $end
$var wire 1 J( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 k( q $end
$var wire 1 K( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 l( q $end
$var wire 1 L( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 m( q $end
$var wire 1 M( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 n( q $end
$var wire 1 N( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 o( q $end
$var wire 1 O( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 p( q $end
$var wire 1 P( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 q( q $end
$var wire 1 Q( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 r( q $end
$var wire 1 R( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 s( q $end
$var wire 1 S( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 t( q $end
$var wire 1 T( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 u( q $end
$var wire 1 U( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 v( q $end
$var wire 1 V( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 w( q $end
$var wire 1 W( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 x( q $end
$var wire 1 X( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 A) PC_next_in [15] $end
$var wire 1 B) PC_next_in [14] $end
$var wire 1 C) PC_next_in [13] $end
$var wire 1 D) PC_next_in [12] $end
$var wire 1 E) PC_next_in [11] $end
$var wire 1 F) PC_next_in [10] $end
$var wire 1 G) PC_next_in [9] $end
$var wire 1 H) PC_next_in [8] $end
$var wire 1 I) PC_next_in [7] $end
$var wire 1 J) PC_next_in [6] $end
$var wire 1 K) PC_next_in [5] $end
$var wire 1 L) PC_next_in [4] $end
$var wire 1 M) PC_next_in [3] $end
$var wire 1 N) PC_next_in [2] $end
$var wire 1 O) PC_next_in [1] $end
$var wire 1 P) PC_next_in [0] $end
$var wire 1 0) instruction_in [15] $end
$var wire 1 1) instruction_in [14] $end
$var wire 1 2) instruction_in [13] $end
$var wire 1 3) instruction_in [12] $end
$var wire 1 4) instruction_in [11] $end
$var wire 1 5) instruction_in [10] $end
$var wire 1 6) instruction_in [9] $end
$var wire 1 7) instruction_in [8] $end
$var wire 1 8) instruction_in [7] $end
$var wire 1 9) instruction_in [6] $end
$var wire 1 :) instruction_in [5] $end
$var wire 1 ;) instruction_in [4] $end
$var wire 1 <) instruction_in [3] $end
$var wire 1 =) instruction_in [2] $end
$var wire 1 >) instruction_in [1] $end
$var wire 1 ?) instruction_in [0] $end
$var wire 1 i( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 j( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 k( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 l( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 m( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 n( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 o( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 p( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 q( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 r( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 s( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 t( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 u( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 v( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 w( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 x( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 y( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 z( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 {( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 |( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 }( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 ~( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 !) PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 ") PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 #) PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 $) PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 %) PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 &) PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 ') PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 () PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 )) PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 *) PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 A) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 B) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 C) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 D) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 E) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 F) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 G) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 H) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 I) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 J) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 K) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 L) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 M) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 N) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 O) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 P) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[15] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[14] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[13] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[12] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[11] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[10] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[9] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[8] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[7] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[6] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[5] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[4] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[3] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[2] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[1] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module instruc[0] $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 0) d [15] $end
$var wire 1 1) d [14] $end
$var wire 1 2) d [13] $end
$var wire 1 3) d [12] $end
$var wire 1 4) d [11] $end
$var wire 1 5) d [10] $end
$var wire 1 6) d [9] $end
$var wire 1 7) d [8] $end
$var wire 1 8) d [7] $end
$var wire 1 9) d [6] $end
$var wire 1 :) d [5] $end
$var wire 1 ;) d [4] $end
$var wire 1 <) d [3] $end
$var wire 1 =) d [2] $end
$var wire 1 >) d [1] $end
$var wire 1 ?) d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 y( q $end
$var wire 1 i( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 z( q $end
$var wire 1 j( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 {( q $end
$var wire 1 k( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 |( q $end
$var wire 1 l( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 }( q $end
$var wire 1 m( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 ~( q $end
$var wire 1 n( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 !) q $end
$var wire 1 o( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 ") q $end
$var wire 1 p( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 #) q $end
$var wire 1 q( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 $) q $end
$var wire 1 r( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 %) q $end
$var wire 1 s( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 &) q $end
$var wire 1 t( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 ') q $end
$var wire 1 u( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 () q $end
$var wire 1 v( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 )) q $end
$var wire 1 w( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 *) q $end
$var wire 1 x( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 a' err $end
$var wire 1 Y) instruction [15] $end
$var wire 1 Z) instruction [14] $end
$var wire 1 [) instruction [13] $end
$var wire 1 \) instruction [12] $end
$var wire 1 ]) instruction [11] $end
$var wire 1 ^) instruction [10] $end
$var wire 1 _) instruction [9] $end
$var wire 1 `) instruction [8] $end
$var wire 1 a) instruction [7] $end
$var wire 1 b) instruction [6] $end
$var wire 1 c) instruction [5] $end
$var wire 1 d) instruction [4] $end
$var wire 1 e) instruction [3] $end
$var wire 1 f) instruction [2] $end
$var wire 1 g) instruction [1] $end
$var wire 1 h) instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 N, signed_i_1 [15] $end
$var wire 1 O, signed_i_1 [14] $end
$var wire 1 P, signed_i_1 [13] $end
$var wire 1 Q, signed_i_1 [12] $end
$var wire 1 R, signed_i_1 [11] $end
$var wire 1 S, signed_i_1 [10] $end
$var wire 1 T, signed_i_1 [9] $end
$var wire 1 U, signed_i_1 [8] $end
$var wire 1 V, signed_i_1 [7] $end
$var wire 1 W, signed_i_1 [6] $end
$var wire 1 X, signed_i_1 [5] $end
$var wire 1 Y, signed_i_1 [4] $end
$var wire 1 Z, signed_i_1 [3] $end
$var wire 1 [, signed_i_1 [2] $end
$var wire 1 \, signed_i_1 [1] $end
$var wire 1 ], signed_i_1 [0] $end
$var wire 1 ^, zero_i_1 [15] $end
$var wire 1 _, zero_i_1 [14] $end
$var wire 1 `, zero_i_1 [13] $end
$var wire 1 a, zero_i_1 [12] $end
$var wire 1 b, zero_i_1 [11] $end
$var wire 1 c, zero_i_1 [10] $end
$var wire 1 d, zero_i_1 [9] $end
$var wire 1 e, zero_i_1 [8] $end
$var wire 1 f, zero_i_1 [7] $end
$var wire 1 g, zero_i_1 [6] $end
$var wire 1 h, zero_i_1 [5] $end
$var wire 1 i, zero_i_1 [4] $end
$var wire 1 j, zero_i_1 [3] $end
$var wire 1 k, zero_i_1 [2] $end
$var wire 1 l, zero_i_1 [1] $end
$var wire 1 m, zero_i_1 [0] $end
$var wire 1 n, signed_i_2 [15] $end
$var wire 1 o, signed_i_2 [14] $end
$var wire 1 p, signed_i_2 [13] $end
$var wire 1 q, signed_i_2 [12] $end
$var wire 1 r, signed_i_2 [11] $end
$var wire 1 s, signed_i_2 [10] $end
$var wire 1 t, signed_i_2 [9] $end
$var wire 1 u, signed_i_2 [8] $end
$var wire 1 v, signed_i_2 [7] $end
$var wire 1 w, signed_i_2 [6] $end
$var wire 1 x, signed_i_2 [5] $end
$var wire 1 y, signed_i_2 [4] $end
$var wire 1 z, signed_i_2 [3] $end
$var wire 1 {, signed_i_2 [2] $end
$var wire 1 |, signed_i_2 [1] $end
$var wire 1 }, signed_i_2 [0] $end
$var wire 1 ~, zero_i_2 [15] $end
$var wire 1 !- zero_i_2 [14] $end
$var wire 1 "- zero_i_2 [13] $end
$var wire 1 #- zero_i_2 [12] $end
$var wire 1 $- zero_i_2 [11] $end
$var wire 1 %- zero_i_2 [10] $end
$var wire 1 &- zero_i_2 [9] $end
$var wire 1 '- zero_i_2 [8] $end
$var wire 1 (- zero_i_2 [7] $end
$var wire 1 )- zero_i_2 [6] $end
$var wire 1 *- zero_i_2 [5] $end
$var wire 1 +- zero_i_2 [4] $end
$var wire 1 ,- zero_i_2 [3] $end
$var wire 1 -- zero_i_2 [2] $end
$var wire 1 .- zero_i_2 [1] $end
$var wire 1 /- zero_i_2 [0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end

$scope module registerfile $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 ^) read1RegSel [2] $end
$var wire 1 _) read1RegSel [1] $end
$var wire 1 `) read1RegSel [0] $end
$var wire 1 a) read2RegSel [2] $end
$var wire 1 b) read2RegSel [1] $end
$var wire 1 c) read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 a' err $end
$var wire 1 C- registers [0] $end
$var wire 1 D- registers [1] $end
$var wire 1 E- registers [2] $end
$var wire 1 F- registers [3] $end
$var wire 1 G- registers [4] $end
$var wire 1 H- registers [5] $end
$var wire 1 I- registers [6] $end
$var wire 1 J- registers [7] $end
$var wire 1 K- registers [8] $end
$var wire 1 L- registers [9] $end
$var wire 1 M- registers [10] $end
$var wire 1 N- registers [11] $end
$var wire 1 O- registers [12] $end
$var wire 1 P- registers [13] $end
$var wire 1 Q- registers [14] $end
$var wire 1 R- registers [15] $end
$var wire 1 S- registers [16] $end
$var wire 1 T- registers [17] $end
$var wire 1 U- registers [18] $end
$var wire 1 V- registers [19] $end
$var wire 1 W- registers [20] $end
$var wire 1 X- registers [21] $end
$var wire 1 Y- registers [22] $end
$var wire 1 Z- registers [23] $end
$var wire 1 [- registers [24] $end
$var wire 1 \- registers [25] $end
$var wire 1 ]- registers [26] $end
$var wire 1 ^- registers [27] $end
$var wire 1 _- registers [28] $end
$var wire 1 `- registers [29] $end
$var wire 1 a- registers [30] $end
$var wire 1 b- registers [31] $end
$var wire 1 c- registers [32] $end
$var wire 1 d- registers [33] $end
$var wire 1 e- registers [34] $end
$var wire 1 f- registers [35] $end
$var wire 1 g- registers [36] $end
$var wire 1 h- registers [37] $end
$var wire 1 i- registers [38] $end
$var wire 1 j- registers [39] $end
$var wire 1 k- registers [40] $end
$var wire 1 l- registers [41] $end
$var wire 1 m- registers [42] $end
$var wire 1 n- registers [43] $end
$var wire 1 o- registers [44] $end
$var wire 1 p- registers [45] $end
$var wire 1 q- registers [46] $end
$var wire 1 r- registers [47] $end
$var wire 1 s- registers [48] $end
$var wire 1 t- registers [49] $end
$var wire 1 u- registers [50] $end
$var wire 1 v- registers [51] $end
$var wire 1 w- registers [52] $end
$var wire 1 x- registers [53] $end
$var wire 1 y- registers [54] $end
$var wire 1 z- registers [55] $end
$var wire 1 {- registers [56] $end
$var wire 1 |- registers [57] $end
$var wire 1 }- registers [58] $end
$var wire 1 ~- registers [59] $end
$var wire 1 !. registers [60] $end
$var wire 1 ". registers [61] $end
$var wire 1 #. registers [62] $end
$var wire 1 $. registers [63] $end
$var wire 1 %. registers [64] $end
$var wire 1 &. registers [65] $end
$var wire 1 '. registers [66] $end
$var wire 1 (. registers [67] $end
$var wire 1 ). registers [68] $end
$var wire 1 *. registers [69] $end
$var wire 1 +. registers [70] $end
$var wire 1 ,. registers [71] $end
$var wire 1 -. registers [72] $end
$var wire 1 .. registers [73] $end
$var wire 1 /. registers [74] $end
$var wire 1 0. registers [75] $end
$var wire 1 1. registers [76] $end
$var wire 1 2. registers [77] $end
$var wire 1 3. registers [78] $end
$var wire 1 4. registers [79] $end
$var wire 1 5. registers [80] $end
$var wire 1 6. registers [81] $end
$var wire 1 7. registers [82] $end
$var wire 1 8. registers [83] $end
$var wire 1 9. registers [84] $end
$var wire 1 :. registers [85] $end
$var wire 1 ;. registers [86] $end
$var wire 1 <. registers [87] $end
$var wire 1 =. registers [88] $end
$var wire 1 >. registers [89] $end
$var wire 1 ?. registers [90] $end
$var wire 1 @. registers [91] $end
$var wire 1 A. registers [92] $end
$var wire 1 B. registers [93] $end
$var wire 1 C. registers [94] $end
$var wire 1 D. registers [95] $end
$var wire 1 E. registers [96] $end
$var wire 1 F. registers [97] $end
$var wire 1 G. registers [98] $end
$var wire 1 H. registers [99] $end
$var wire 1 I. registers [100] $end
$var wire 1 J. registers [101] $end
$var wire 1 K. registers [102] $end
$var wire 1 L. registers [103] $end
$var wire 1 M. registers [104] $end
$var wire 1 N. registers [105] $end
$var wire 1 O. registers [106] $end
$var wire 1 P. registers [107] $end
$var wire 1 Q. registers [108] $end
$var wire 1 R. registers [109] $end
$var wire 1 S. registers [110] $end
$var wire 1 T. registers [111] $end
$var wire 1 U. registers [112] $end
$var wire 1 V. registers [113] $end
$var wire 1 W. registers [114] $end
$var wire 1 X. registers [115] $end
$var wire 1 Y. registers [116] $end
$var wire 1 Z. registers [117] $end
$var wire 1 [. registers [118] $end
$var wire 1 \. registers [119] $end
$var wire 1 ]. registers [120] $end
$var wire 1 ^. registers [121] $end
$var wire 1 _. registers [122] $end
$var wire 1 `. registers [123] $end
$var wire 1 a. registers [124] $end
$var wire 1 b. registers [125] $end
$var wire 1 c. registers [126] $end
$var wire 1 d. registers [127] $end
$var wire 1 e. mask_1 [0] $end
$var wire 1 f. mask_1 [1] $end
$var wire 1 g. mask_1 [2] $end
$var wire 1 h. mask_1 [3] $end
$var wire 1 i. mask_1 [4] $end
$var wire 1 j. mask_1 [5] $end
$var wire 1 k. mask_1 [6] $end
$var wire 1 l. mask_1 [7] $end

$scope module ind_reg1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 l. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 d. read [15] $end
$var wire 1 c. read [14] $end
$var wire 1 b. read [13] $end
$var wire 1 a. read [12] $end
$var wire 1 `. read [11] $end
$var wire 1 _. read [10] $end
$var wire 1 ^. read [9] $end
$var wire 1 ]. read [8] $end
$var wire 1 \. read [7] $end
$var wire 1 [. read [6] $end
$var wire 1 Z. read [5] $end
$var wire 1 Y. read [4] $end
$var wire 1 X. read [3] $end
$var wire 1 W. read [2] $end
$var wire 1 V. read [1] $end
$var wire 1 U. read [0] $end

$scope module flop[15] $end
$var wire 1 d. q $end
$var wire 1 n. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 c. q $end
$var wire 1 p. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 b. q $end
$var wire 1 r. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 a. q $end
$var wire 1 t. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 `. q $end
$var wire 1 v. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 _. q $end
$var wire 1 x. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ^. q $end
$var wire 1 z. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ]. q $end
$var wire 1 |. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 \. q $end
$var wire 1 ~. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 [. q $end
$var wire 1 "/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 Z. q $end
$var wire 1 $/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 Y. q $end
$var wire 1 &/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 X. q $end
$var wire 1 (/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 W. q $end
$var wire 1 */ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 V. q $end
$var wire 1 ,/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 U. q $end
$var wire 1 ./ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 k. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 T. read [15] $end
$var wire 1 S. read [14] $end
$var wire 1 R. read [13] $end
$var wire 1 Q. read [12] $end
$var wire 1 P. read [11] $end
$var wire 1 O. read [10] $end
$var wire 1 N. read [9] $end
$var wire 1 M. read [8] $end
$var wire 1 L. read [7] $end
$var wire 1 K. read [6] $end
$var wire 1 J. read [5] $end
$var wire 1 I. read [4] $end
$var wire 1 H. read [3] $end
$var wire 1 G. read [2] $end
$var wire 1 F. read [1] $end
$var wire 1 E. read [0] $end

$scope module flop[15] $end
$var wire 1 T. q $end
$var wire 1 1/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 S. q $end
$var wire 1 3/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 R. q $end
$var wire 1 5/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 Q. q $end
$var wire 1 7/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 P. q $end
$var wire 1 9/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 O. q $end
$var wire 1 ;/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 N. q $end
$var wire 1 =/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 M. q $end
$var wire 1 ?/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 L. q $end
$var wire 1 A/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 K. q $end
$var wire 1 C/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 J. q $end
$var wire 1 E/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 I. q $end
$var wire 1 G/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 H. q $end
$var wire 1 I/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 G. q $end
$var wire 1 K/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 F. q $end
$var wire 1 M/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 E. q $end
$var wire 1 O/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 j. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 D. read [15] $end
$var wire 1 C. read [14] $end
$var wire 1 B. read [13] $end
$var wire 1 A. read [12] $end
$var wire 1 @. read [11] $end
$var wire 1 ?. read [10] $end
$var wire 1 >. read [9] $end
$var wire 1 =. read [8] $end
$var wire 1 <. read [7] $end
$var wire 1 ;. read [6] $end
$var wire 1 :. read [5] $end
$var wire 1 9. read [4] $end
$var wire 1 8. read [3] $end
$var wire 1 7. read [2] $end
$var wire 1 6. read [1] $end
$var wire 1 5. read [0] $end

$scope module flop[15] $end
$var wire 1 D. q $end
$var wire 1 R/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 C. q $end
$var wire 1 T/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 B. q $end
$var wire 1 V/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 A. q $end
$var wire 1 X/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 @. q $end
$var wire 1 Z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ?. q $end
$var wire 1 \/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 >. q $end
$var wire 1 ^/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 =. q $end
$var wire 1 `/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 <. q $end
$var wire 1 b/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 ;. q $end
$var wire 1 d/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 :. q $end
$var wire 1 f/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 9. q $end
$var wire 1 h/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 8. q $end
$var wire 1 j/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 7. q $end
$var wire 1 l/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 6. q $end
$var wire 1 n/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 5. q $end
$var wire 1 p/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 i. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 4. read [15] $end
$var wire 1 3. read [14] $end
$var wire 1 2. read [13] $end
$var wire 1 1. read [12] $end
$var wire 1 0. read [11] $end
$var wire 1 /. read [10] $end
$var wire 1 .. read [9] $end
$var wire 1 -. read [8] $end
$var wire 1 ,. read [7] $end
$var wire 1 +. read [6] $end
$var wire 1 *. read [5] $end
$var wire 1 ). read [4] $end
$var wire 1 (. read [3] $end
$var wire 1 '. read [2] $end
$var wire 1 &. read [1] $end
$var wire 1 %. read [0] $end

$scope module flop[15] $end
$var wire 1 4. q $end
$var wire 1 s/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 3. q $end
$var wire 1 u/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 2. q $end
$var wire 1 w/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 1. q $end
$var wire 1 y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 0. q $end
$var wire 1 {/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 /. q $end
$var wire 1 }/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 .. q $end
$var wire 1 !0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 -. q $end
$var wire 1 #0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 ,. q $end
$var wire 1 %0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 +. q $end
$var wire 1 '0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 *. q $end
$var wire 1 )0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 ). q $end
$var wire 1 +0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 (. q $end
$var wire 1 -0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 '. q $end
$var wire 1 /0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 &. q $end
$var wire 1 10 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 %. q $end
$var wire 1 30 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 h. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 $. read [15] $end
$var wire 1 #. read [14] $end
$var wire 1 ". read [13] $end
$var wire 1 !. read [12] $end
$var wire 1 ~- read [11] $end
$var wire 1 }- read [10] $end
$var wire 1 |- read [9] $end
$var wire 1 {- read [8] $end
$var wire 1 z- read [7] $end
$var wire 1 y- read [6] $end
$var wire 1 x- read [5] $end
$var wire 1 w- read [4] $end
$var wire 1 v- read [3] $end
$var wire 1 u- read [2] $end
$var wire 1 t- read [1] $end
$var wire 1 s- read [0] $end

$scope module flop[15] $end
$var wire 1 $. q $end
$var wire 1 60 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 #. q $end
$var wire 1 80 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ". q $end
$var wire 1 :0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 !. q $end
$var wire 1 <0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ~- q $end
$var wire 1 >0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 }- q $end
$var wire 1 @0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 |- q $end
$var wire 1 B0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 {- q $end
$var wire 1 D0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 z- q $end
$var wire 1 F0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 y- q $end
$var wire 1 H0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 x- q $end
$var wire 1 J0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 w- q $end
$var wire 1 L0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 v- q $end
$var wire 1 N0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 u- q $end
$var wire 1 P0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 t- q $end
$var wire 1 R0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 s- q $end
$var wire 1 T0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 g. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 r- read [15] $end
$var wire 1 q- read [14] $end
$var wire 1 p- read [13] $end
$var wire 1 o- read [12] $end
$var wire 1 n- read [11] $end
$var wire 1 m- read [10] $end
$var wire 1 l- read [9] $end
$var wire 1 k- read [8] $end
$var wire 1 j- read [7] $end
$var wire 1 i- read [6] $end
$var wire 1 h- read [5] $end
$var wire 1 g- read [4] $end
$var wire 1 f- read [3] $end
$var wire 1 e- read [2] $end
$var wire 1 d- read [1] $end
$var wire 1 c- read [0] $end

$scope module flop[15] $end
$var wire 1 r- q $end
$var wire 1 W0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 q- q $end
$var wire 1 Y0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 p- q $end
$var wire 1 [0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 o- q $end
$var wire 1 ]0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 n- q $end
$var wire 1 _0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 m- q $end
$var wire 1 a0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 l- q $end
$var wire 1 c0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 k- q $end
$var wire 1 e0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 j- q $end
$var wire 1 g0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 i- q $end
$var wire 1 i0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 h- q $end
$var wire 1 k0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 g- q $end
$var wire 1 m0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 f- q $end
$var wire 1 o0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 e- q $end
$var wire 1 q0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 d- q $end
$var wire 1 s0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 c- q $end
$var wire 1 u0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 f. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 b- read [15] $end
$var wire 1 a- read [14] $end
$var wire 1 `- read [13] $end
$var wire 1 _- read [12] $end
$var wire 1 ^- read [11] $end
$var wire 1 ]- read [10] $end
$var wire 1 \- read [9] $end
$var wire 1 [- read [8] $end
$var wire 1 Z- read [7] $end
$var wire 1 Y- read [6] $end
$var wire 1 X- read [5] $end
$var wire 1 W- read [4] $end
$var wire 1 V- read [3] $end
$var wire 1 U- read [2] $end
$var wire 1 T- read [1] $end
$var wire 1 S- read [0] $end

$scope module flop[15] $end
$var wire 1 b- q $end
$var wire 1 x0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 a- q $end
$var wire 1 z0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 `- q $end
$var wire 1 |0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 _- q $end
$var wire 1 ~0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ^- q $end
$var wire 1 "1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ]- q $end
$var wire 1 $1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 \- q $end
$var wire 1 &1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 [- q $end
$var wire 1 (1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 Z- q $end
$var wire 1 *1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 Y- q $end
$var wire 1 ,1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 X- q $end
$var wire 1 .1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 W- q $end
$var wire 1 01 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 V- q $end
$var wire 1 21 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 U- q $end
$var wire 1 41 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 T- q $end
$var wire 1 61 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 S- q $end
$var wire 1 81 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 e. writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 R- read [15] $end
$var wire 1 Q- read [14] $end
$var wire 1 P- read [13] $end
$var wire 1 O- read [12] $end
$var wire 1 N- read [11] $end
$var wire 1 M- read [10] $end
$var wire 1 L- read [9] $end
$var wire 1 K- read [8] $end
$var wire 1 J- read [7] $end
$var wire 1 I- read [6] $end
$var wire 1 H- read [5] $end
$var wire 1 G- read [4] $end
$var wire 1 F- read [3] $end
$var wire 1 E- read [2] $end
$var wire 1 D- read [1] $end
$var wire 1 C- read [0] $end

$scope module flop[15] $end
$var wire 1 R- q $end
$var wire 1 ;1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 Q- q $end
$var wire 1 =1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 P- q $end
$var wire 1 ?1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 O- q $end
$var wire 1 A1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 N- q $end
$var wire 1 C1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 M- q $end
$var wire 1 E1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 L- q $end
$var wire 1 G1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 K- q $end
$var wire 1 I1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 J- q $end
$var wire 1 K1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 I- q $end
$var wire 1 M1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 H- q $end
$var wire 1 O1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 G- q $end
$var wire 1 Q1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 F- q $end
$var wire 1 S1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 E- q $end
$var wire 1 U1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 D- q $end
$var wire 1 W1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 C- q $end
$var wire 1 Y1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 W) NOPEx $end
$var wire 1 T) NOPMem $end
$var wire 1 U) NOPWB $end
$var wire 1 +) sendNOP $end
$var wire 1 [1 regEqual $end
$var wire 1 \1 regEqual2 $end
$var wire 1 ]1 MEMWRT $end
$var wire 1 ^1 sendNOP_not_st $end
$var wire 1 _1 RegS [2] $end
$var wire 1 `1 RegS [1] $end
$var wire 1 a1 RegS [0] $end
$var wire 1 b1 RegT [2] $end
$var wire 1 c1 RegT [1] $end
$var wire 1 d1 RegT [0] $end
$var wire 1 R& WRMEM $end
$var wire 1 L' WRWB $end
$var wire 1 e1 compEx $end
$var wire 1 f1 compMem $end
$var wire 1 g1 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 h1 halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 X) SendNOP_In $end
$var wire 1 S) SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 h1 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 S) q $end
$var wire 1 X) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 73 possibleslbi [15] $end
$var wire 1 83 possibleslbi [14] $end
$var wire 1 93 possibleslbi [13] $end
$var wire 1 :3 possibleslbi [12] $end
$var wire 1 ;3 possibleslbi [11] $end
$var wire 1 <3 possibleslbi [10] $end
$var wire 1 =3 possibleslbi [9] $end
$var wire 1 >3 possibleslbi [8] $end
$var wire 1 ?3 possibleslbi [7] $end
$var wire 1 @3 possibleslbi [6] $end
$var wire 1 A3 possibleslbi [5] $end
$var wire 1 B3 possibleslbi [4] $end
$var wire 1 C3 possibleslbi [3] $end
$var wire 1 D3 possibleslbi [2] $end
$var wire 1 E3 possibleslbi [1] $end
$var wire 1 F3 possibleslbi [0] $end
$var wire 1 G3 shiftedA [15] $end
$var wire 1 H3 shiftedA [14] $end
$var wire 1 I3 shiftedA [13] $end
$var wire 1 J3 shiftedA [12] $end
$var wire 1 K3 shiftedA [11] $end
$var wire 1 L3 shiftedA [10] $end
$var wire 1 M3 shiftedA [9] $end
$var wire 1 N3 shiftedA [8] $end
$var wire 1 O3 shiftedA [7] $end
$var wire 1 P3 shiftedA [6] $end
$var wire 1 Q3 shiftedA [5] $end
$var wire 1 R3 shiftedA [4] $end
$var wire 1 S3 shiftedA [3] $end
$var wire 1 T3 shiftedA [2] $end
$var wire 1 U3 shiftedA [1] $end
$var wire 1 V3 shiftedA [0] $end
$var wire 1 W3 slbiOper $end
$var wire 1 X3 aluout [15] $end
$var wire 1 Y3 aluout [14] $end
$var wire 1 Z3 aluout [13] $end
$var wire 1 [3 aluout [12] $end
$var wire 1 \3 aluout [11] $end
$var wire 1 ]3 aluout [10] $end
$var wire 1 ^3 aluout [9] $end
$var wire 1 _3 aluout [8] $end
$var wire 1 `3 aluout [7] $end
$var wire 1 a3 aluout [6] $end
$var wire 1 b3 aluout [5] $end
$var wire 1 c3 aluout [4] $end
$var wire 1 d3 aluout [3] $end
$var wire 1 e3 aluout [2] $end
$var wire 1 f3 aluout [1] $end
$var wire 1 g3 aluout [0] $end
$var wire 1 h3 conditional $end
$var wire 1 i3 CF $end
$var wire 1 j3 Zero $end
$var wire 1 k3 Overflow $end
$var wire 1 l3 Brchcnd $end
$var wire 1 m3 Oper [1] $end
$var wire 1 n3 Oper [0] $end
$var wire 1 o3 altb $end
$var wire 1 p3 coout [15] $end
$var wire 1 q3 coout [14] $end
$var wire 1 r3 coout [13] $end
$var wire 1 s3 coout [12] $end
$var wire 1 t3 coout [11] $end
$var wire 1 u3 coout [10] $end
$var wire 1 v3 coout [9] $end
$var wire 1 w3 coout [8] $end
$var wire 1 x3 coout [7] $end
$var wire 1 y3 coout [6] $end
$var wire 1 z3 coout [5] $end
$var wire 1 {3 coout [4] $end
$var wire 1 |3 coout [3] $end
$var wire 1 }3 coout [2] $end
$var wire 1 ~3 coout [1] $end
$var wire 1 !4 coout [0] $end
$var wire 1 "4 sltoper [1] $end
$var wire 1 #4 sltoper [0] $end
$var wire 1 $4 ltout [15] $end
$var wire 1 %4 ltout [14] $end
$var wire 1 &4 ltout [13] $end
$var wire 1 '4 ltout [12] $end
$var wire 1 (4 ltout [11] $end
$var wire 1 )4 ltout [10] $end
$var wire 1 *4 ltout [9] $end
$var wire 1 +4 ltout [8] $end
$var wire 1 ,4 ltout [7] $end
$var wire 1 -4 ltout [6] $end
$var wire 1 .4 ltout [5] $end
$var wire 1 /4 ltout [4] $end
$var wire 1 04 ltout [3] $end
$var wire 1 14 ltout [2] $end
$var wire 1 24 ltout [1] $end
$var wire 1 34 ltout [0] $end
$var wire 1 44 seqoper [1] $end
$var wire 1 54 seqoper [0] $end
$var wire 1 64 aeqb $end
$var wire 1 74 seqout [15] $end
$var wire 1 84 seqout [14] $end
$var wire 1 94 seqout [13] $end
$var wire 1 :4 seqout [12] $end
$var wire 1 ;4 seqout [11] $end
$var wire 1 <4 seqout [10] $end
$var wire 1 =4 seqout [9] $end
$var wire 1 >4 seqout [8] $end
$var wire 1 ?4 seqout [7] $end
$var wire 1 @4 seqout [6] $end
$var wire 1 A4 seqout [5] $end
$var wire 1 B4 seqout [4] $end
$var wire 1 C4 seqout [3] $end
$var wire 1 D4 seqout [2] $end
$var wire 1 E4 seqout [1] $end
$var wire 1 F4 seqout [0] $end
$var wire 1 G4 alteb $end
$var wire 1 H4 sleoper [1] $end
$var wire 1 I4 sleoper [0] $end
$var wire 1 J4 sleout [15] $end
$var wire 1 K4 sleout [14] $end
$var wire 1 L4 sleout [13] $end
$var wire 1 M4 sleout [12] $end
$var wire 1 N4 sleout [11] $end
$var wire 1 O4 sleout [10] $end
$var wire 1 P4 sleout [9] $end
$var wire 1 Q4 sleout [8] $end
$var wire 1 R4 sleout [7] $end
$var wire 1 S4 sleout [6] $end
$var wire 1 T4 sleout [5] $end
$var wire 1 U4 sleout [4] $end
$var wire 1 V4 sleout [3] $end
$var wire 1 W4 sleout [2] $end
$var wire 1 X4 sleout [1] $end
$var wire 1 Y4 sleout [0] $end
$var wire 1 Z4 SetCtrl [1] $end
$var wire 1 [4 SetCtrl [0] $end
$var wire 1 \4 carry $end
$var wire 1 ]4 SLT $end
$var wire 1 ^4 SEQ $end
$var wire 1 _4 SLE $end
$var wire 1 `4 greater $end
$var wire 1 a4 ReverseOut [15] $end
$var wire 1 b4 ReverseOut [14] $end
$var wire 1 c4 ReverseOut [13] $end
$var wire 1 d4 ReverseOut [12] $end
$var wire 1 e4 ReverseOut [11] $end
$var wire 1 f4 ReverseOut [10] $end
$var wire 1 g4 ReverseOut [9] $end
$var wire 1 h4 ReverseOut [8] $end
$var wire 1 i4 ReverseOut [7] $end
$var wire 1 j4 ReverseOut [6] $end
$var wire 1 k4 ReverseOut [5] $end
$var wire 1 l4 ReverseOut [4] $end
$var wire 1 m4 ReverseOut [3] $end
$var wire 1 n4 ReverseOut [2] $end
$var wire 1 o4 ReverseOut [1] $end
$var wire 1 p4 ReverseOut [0] $end
$var wire 1 q4 reverse [15] $end
$var wire 1 r4 reverse [14] $end
$var wire 1 s4 reverse [13] $end
$var wire 1 t4 reverse [12] $end
$var wire 1 u4 reverse [11] $end
$var wire 1 v4 reverse [10] $end
$var wire 1 w4 reverse [9] $end
$var wire 1 x4 reverse [8] $end
$var wire 1 y4 reverse [7] $end
$var wire 1 z4 reverse [6] $end
$var wire 1 {4 reverse [5] $end
$var wire 1 |4 reverse [4] $end
$var wire 1 }4 reverse [3] $end
$var wire 1 ~4 reverse [2] $end
$var wire 1 !5 reverse [1] $end
$var wire 1 "5 reverse [0] $end

$scope module shift $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 *5 Oper [1] $end
$var wire 1 +5 Oper [0] $end
$var wire 1 G3 Out [15] $end
$var wire 1 H3 Out [14] $end
$var wire 1 I3 Out [13] $end
$var wire 1 J3 Out [12] $end
$var wire 1 K3 Out [11] $end
$var wire 1 L3 Out [10] $end
$var wire 1 M3 Out [9] $end
$var wire 1 N3 Out [8] $end
$var wire 1 O3 Out [7] $end
$var wire 1 P3 Out [6] $end
$var wire 1 Q3 Out [5] $end
$var wire 1 R3 Out [4] $end
$var wire 1 S3 Out [3] $end
$var wire 1 T3 Out [2] $end
$var wire 1 U3 Out [1] $end
$var wire 1 V3 Out [0] $end
$var wire 1 ,5 shift_left_r [15] $end
$var wire 1 -5 shift_left_r [14] $end
$var wire 1 .5 shift_left_r [13] $end
$var wire 1 /5 shift_left_r [12] $end
$var wire 1 05 shift_left_r [11] $end
$var wire 1 15 shift_left_r [10] $end
$var wire 1 25 shift_left_r [9] $end
$var wire 1 35 shift_left_r [8] $end
$var wire 1 45 shift_left_r [7] $end
$var wire 1 55 shift_left_r [6] $end
$var wire 1 65 shift_left_r [5] $end
$var wire 1 75 shift_left_r [4] $end
$var wire 1 85 shift_left_r [3] $end
$var wire 1 95 shift_left_r [2] $end
$var wire 1 :5 shift_left_r [1] $end
$var wire 1 ;5 shift_left_r [0] $end
$var wire 1 <5 rotate_left_r [15] $end
$var wire 1 =5 rotate_left_r [14] $end
$var wire 1 >5 rotate_left_r [13] $end
$var wire 1 ?5 rotate_left_r [12] $end
$var wire 1 @5 rotate_left_r [11] $end
$var wire 1 A5 rotate_left_r [10] $end
$var wire 1 B5 rotate_left_r [9] $end
$var wire 1 C5 rotate_left_r [8] $end
$var wire 1 D5 rotate_left_r [7] $end
$var wire 1 E5 rotate_left_r [6] $end
$var wire 1 F5 rotate_left_r [5] $end
$var wire 1 G5 rotate_left_r [4] $end
$var wire 1 H5 rotate_left_r [3] $end
$var wire 1 I5 rotate_left_r [2] $end
$var wire 1 J5 rotate_left_r [1] $end
$var wire 1 K5 rotate_left_r [0] $end
$var wire 1 L5 shift_right_l_r [15] $end
$var wire 1 M5 shift_right_l_r [14] $end
$var wire 1 N5 shift_right_l_r [13] $end
$var wire 1 O5 shift_right_l_r [12] $end
$var wire 1 P5 shift_right_l_r [11] $end
$var wire 1 Q5 shift_right_l_r [10] $end
$var wire 1 R5 shift_right_l_r [9] $end
$var wire 1 S5 shift_right_l_r [8] $end
$var wire 1 T5 shift_right_l_r [7] $end
$var wire 1 U5 shift_right_l_r [6] $end
$var wire 1 V5 shift_right_l_r [5] $end
$var wire 1 W5 shift_right_l_r [4] $end
$var wire 1 X5 shift_right_l_r [3] $end
$var wire 1 Y5 shift_right_l_r [2] $end
$var wire 1 Z5 shift_right_l_r [1] $end
$var wire 1 [5 shift_right_l_r [0] $end
$var wire 1 \5 rotate_right_r [15] $end
$var wire 1 ]5 rotate_right_r [14] $end
$var wire 1 ^5 rotate_right_r [13] $end
$var wire 1 _5 rotate_right_r [12] $end
$var wire 1 `5 rotate_right_r [11] $end
$var wire 1 a5 rotate_right_r [10] $end
$var wire 1 b5 rotate_right_r [9] $end
$var wire 1 c5 rotate_right_r [8] $end
$var wire 1 d5 rotate_right_r [7] $end
$var wire 1 e5 rotate_right_r [6] $end
$var wire 1 f5 rotate_right_r [5] $end
$var wire 1 g5 rotate_right_r [4] $end
$var wire 1 h5 rotate_right_r [3] $end
$var wire 1 i5 rotate_right_r [2] $end
$var wire 1 j5 rotate_right_r [1] $end
$var wire 1 k5 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 ,5 result [15] $end
$var wire 1 -5 result [14] $end
$var wire 1 .5 result [13] $end
$var wire 1 /5 result [12] $end
$var wire 1 05 result [11] $end
$var wire 1 15 result [10] $end
$var wire 1 25 result [9] $end
$var wire 1 35 result [8] $end
$var wire 1 45 result [7] $end
$var wire 1 55 result [6] $end
$var wire 1 65 result [5] $end
$var wire 1 75 result [4] $end
$var wire 1 85 result [3] $end
$var wire 1 95 result [2] $end
$var wire 1 :5 result [1] $end
$var wire 1 ;5 result [0] $end
$var wire 1 n5 temp1 [15] $end
$var wire 1 o5 temp1 [14] $end
$var wire 1 p5 temp1 [13] $end
$var wire 1 q5 temp1 [12] $end
$var wire 1 r5 temp1 [11] $end
$var wire 1 s5 temp1 [10] $end
$var wire 1 t5 temp1 [9] $end
$var wire 1 u5 temp1 [8] $end
$var wire 1 v5 temp1 [7] $end
$var wire 1 w5 temp1 [6] $end
$var wire 1 x5 temp1 [5] $end
$var wire 1 y5 temp1 [4] $end
$var wire 1 z5 temp1 [3] $end
$var wire 1 {5 temp1 [2] $end
$var wire 1 |5 temp1 [1] $end
$var wire 1 }5 temp1 [0] $end
$var wire 1 ~5 temp2 [15] $end
$var wire 1 !6 temp2 [14] $end
$var wire 1 "6 temp2 [13] $end
$var wire 1 #6 temp2 [12] $end
$var wire 1 $6 temp2 [11] $end
$var wire 1 %6 temp2 [10] $end
$var wire 1 &6 temp2 [9] $end
$var wire 1 '6 temp2 [8] $end
$var wire 1 (6 temp2 [7] $end
$var wire 1 )6 temp2 [6] $end
$var wire 1 *6 temp2 [5] $end
$var wire 1 +6 temp2 [4] $end
$var wire 1 ,6 temp2 [3] $end
$var wire 1 -6 temp2 [2] $end
$var wire 1 .6 temp2 [1] $end
$var wire 1 /6 temp2 [0] $end
$var wire 1 06 temp3 [15] $end
$var wire 1 16 temp3 [14] $end
$var wire 1 26 temp3 [13] $end
$var wire 1 36 temp3 [12] $end
$var wire 1 46 temp3 [11] $end
$var wire 1 56 temp3 [10] $end
$var wire 1 66 temp3 [9] $end
$var wire 1 76 temp3 [8] $end
$var wire 1 86 temp3 [7] $end
$var wire 1 96 temp3 [6] $end
$var wire 1 :6 temp3 [5] $end
$var wire 1 ;6 temp3 [4] $end
$var wire 1 <6 temp3 [3] $end
$var wire 1 =6 temp3 [2] $end
$var wire 1 >6 temp3 [1] $end
$var wire 1 ?6 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 <5 result [15] $end
$var wire 1 =5 result [14] $end
$var wire 1 >5 result [13] $end
$var wire 1 ?5 result [12] $end
$var wire 1 @5 result [11] $end
$var wire 1 A5 result [10] $end
$var wire 1 B5 result [9] $end
$var wire 1 C5 result [8] $end
$var wire 1 D5 result [7] $end
$var wire 1 E5 result [6] $end
$var wire 1 F5 result [5] $end
$var wire 1 G5 result [4] $end
$var wire 1 H5 result [3] $end
$var wire 1 I5 result [2] $end
$var wire 1 J5 result [1] $end
$var wire 1 K5 result [0] $end
$var wire 1 B6 temp1 [15] $end
$var wire 1 C6 temp1 [14] $end
$var wire 1 D6 temp1 [13] $end
$var wire 1 E6 temp1 [12] $end
$var wire 1 F6 temp1 [11] $end
$var wire 1 G6 temp1 [10] $end
$var wire 1 H6 temp1 [9] $end
$var wire 1 I6 temp1 [8] $end
$var wire 1 J6 temp1 [7] $end
$var wire 1 K6 temp1 [6] $end
$var wire 1 L6 temp1 [5] $end
$var wire 1 M6 temp1 [4] $end
$var wire 1 N6 temp1 [3] $end
$var wire 1 O6 temp1 [2] $end
$var wire 1 P6 temp1 [1] $end
$var wire 1 Q6 temp1 [0] $end
$var wire 1 R6 temp2 [15] $end
$var wire 1 S6 temp2 [14] $end
$var wire 1 T6 temp2 [13] $end
$var wire 1 U6 temp2 [12] $end
$var wire 1 V6 temp2 [11] $end
$var wire 1 W6 temp2 [10] $end
$var wire 1 X6 temp2 [9] $end
$var wire 1 Y6 temp2 [8] $end
$var wire 1 Z6 temp2 [7] $end
$var wire 1 [6 temp2 [6] $end
$var wire 1 \6 temp2 [5] $end
$var wire 1 ]6 temp2 [4] $end
$var wire 1 ^6 temp2 [3] $end
$var wire 1 _6 temp2 [2] $end
$var wire 1 `6 temp2 [1] $end
$var wire 1 a6 temp2 [0] $end
$var wire 1 b6 temp3 [15] $end
$var wire 1 c6 temp3 [14] $end
$var wire 1 d6 temp3 [13] $end
$var wire 1 e6 temp3 [12] $end
$var wire 1 f6 temp3 [11] $end
$var wire 1 g6 temp3 [10] $end
$var wire 1 h6 temp3 [9] $end
$var wire 1 i6 temp3 [8] $end
$var wire 1 j6 temp3 [7] $end
$var wire 1 k6 temp3 [6] $end
$var wire 1 l6 temp3 [5] $end
$var wire 1 m6 temp3 [4] $end
$var wire 1 n6 temp3 [3] $end
$var wire 1 o6 temp3 [2] $end
$var wire 1 p6 temp3 [1] $end
$var wire 1 q6 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 L5 result [15] $end
$var wire 1 M5 result [14] $end
$var wire 1 N5 result [13] $end
$var wire 1 O5 result [12] $end
$var wire 1 P5 result [11] $end
$var wire 1 Q5 result [10] $end
$var wire 1 R5 result [9] $end
$var wire 1 S5 result [8] $end
$var wire 1 T5 result [7] $end
$var wire 1 U5 result [6] $end
$var wire 1 V5 result [5] $end
$var wire 1 W5 result [4] $end
$var wire 1 X5 result [3] $end
$var wire 1 Y5 result [2] $end
$var wire 1 Z5 result [1] $end
$var wire 1 [5 result [0] $end
$var wire 1 t6 temp1 [15] $end
$var wire 1 u6 temp1 [14] $end
$var wire 1 v6 temp1 [13] $end
$var wire 1 w6 temp1 [12] $end
$var wire 1 x6 temp1 [11] $end
$var wire 1 y6 temp1 [10] $end
$var wire 1 z6 temp1 [9] $end
$var wire 1 {6 temp1 [8] $end
$var wire 1 |6 temp1 [7] $end
$var wire 1 }6 temp1 [6] $end
$var wire 1 ~6 temp1 [5] $end
$var wire 1 !7 temp1 [4] $end
$var wire 1 "7 temp1 [3] $end
$var wire 1 #7 temp1 [2] $end
$var wire 1 $7 temp1 [1] $end
$var wire 1 %7 temp1 [0] $end
$var wire 1 &7 temp2 [15] $end
$var wire 1 '7 temp2 [14] $end
$var wire 1 (7 temp2 [13] $end
$var wire 1 )7 temp2 [12] $end
$var wire 1 *7 temp2 [11] $end
$var wire 1 +7 temp2 [10] $end
$var wire 1 ,7 temp2 [9] $end
$var wire 1 -7 temp2 [8] $end
$var wire 1 .7 temp2 [7] $end
$var wire 1 /7 temp2 [6] $end
$var wire 1 07 temp2 [5] $end
$var wire 1 17 temp2 [4] $end
$var wire 1 27 temp2 [3] $end
$var wire 1 37 temp2 [2] $end
$var wire 1 47 temp2 [1] $end
$var wire 1 57 temp2 [0] $end
$var wire 1 67 temp3 [15] $end
$var wire 1 77 temp3 [14] $end
$var wire 1 87 temp3 [13] $end
$var wire 1 97 temp3 [12] $end
$var wire 1 :7 temp3 [11] $end
$var wire 1 ;7 temp3 [10] $end
$var wire 1 <7 temp3 [9] $end
$var wire 1 =7 temp3 [8] $end
$var wire 1 >7 temp3 [7] $end
$var wire 1 ?7 temp3 [6] $end
$var wire 1 @7 temp3 [5] $end
$var wire 1 A7 temp3 [4] $end
$var wire 1 B7 temp3 [3] $end
$var wire 1 C7 temp3 [2] $end
$var wire 1 D7 temp3 [1] $end
$var wire 1 E7 temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 &5 ShAmt [3] $end
$var wire 1 '5 ShAmt [2] $end
$var wire 1 (5 ShAmt [1] $end
$var wire 1 )5 ShAmt [0] $end
$var wire 1 \5 result [15] $end
$var wire 1 ]5 result [14] $end
$var wire 1 ^5 result [13] $end
$var wire 1 _5 result [12] $end
$var wire 1 `5 result [11] $end
$var wire 1 a5 result [10] $end
$var wire 1 b5 result [9] $end
$var wire 1 c5 result [8] $end
$var wire 1 d5 result [7] $end
$var wire 1 e5 result [6] $end
$var wire 1 f5 result [5] $end
$var wire 1 g5 result [4] $end
$var wire 1 h5 result [3] $end
$var wire 1 i5 result [2] $end
$var wire 1 j5 result [1] $end
$var wire 1 k5 result [0] $end
$var wire 1 H7 temp1 [15] $end
$var wire 1 I7 temp1 [14] $end
$var wire 1 J7 temp1 [13] $end
$var wire 1 K7 temp1 [12] $end
$var wire 1 L7 temp1 [11] $end
$var wire 1 M7 temp1 [10] $end
$var wire 1 N7 temp1 [9] $end
$var wire 1 O7 temp1 [8] $end
$var wire 1 P7 temp1 [7] $end
$var wire 1 Q7 temp1 [6] $end
$var wire 1 R7 temp1 [5] $end
$var wire 1 S7 temp1 [4] $end
$var wire 1 T7 temp1 [3] $end
$var wire 1 U7 temp1 [2] $end
$var wire 1 V7 temp1 [1] $end
$var wire 1 W7 temp1 [0] $end
$var wire 1 X7 temp2 [15] $end
$var wire 1 Y7 temp2 [14] $end
$var wire 1 Z7 temp2 [13] $end
$var wire 1 [7 temp2 [12] $end
$var wire 1 \7 temp2 [11] $end
$var wire 1 ]7 temp2 [10] $end
$var wire 1 ^7 temp2 [9] $end
$var wire 1 _7 temp2 [8] $end
$var wire 1 `7 temp2 [7] $end
$var wire 1 a7 temp2 [6] $end
$var wire 1 b7 temp2 [5] $end
$var wire 1 c7 temp2 [4] $end
$var wire 1 d7 temp2 [3] $end
$var wire 1 e7 temp2 [2] $end
$var wire 1 f7 temp2 [1] $end
$var wire 1 g7 temp2 [0] $end
$var wire 1 h7 temp3 [15] $end
$var wire 1 i7 temp3 [14] $end
$var wire 1 j7 temp3 [13] $end
$var wire 1 k7 temp3 [12] $end
$var wire 1 l7 temp3 [11] $end
$var wire 1 m7 temp3 [10] $end
$var wire 1 n7 temp3 [9] $end
$var wire 1 o7 temp3 [8] $end
$var wire 1 p7 temp3 [7] $end
$var wire 1 q7 temp3 [6] $end
$var wire 1 r7 temp3 [5] $end
$var wire 1 s7 temp3 [4] $end
$var wire 1 t7 temp3 [3] $end
$var wire 1 u7 temp3 [2] $end
$var wire 1 v7 temp3 [1] $end
$var wire 1 w7 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var wire 1 73 InA [15] $end
$var wire 1 83 InA [14] $end
$var wire 1 93 InA [13] $end
$var wire 1 :3 InA [12] $end
$var wire 1 ;3 InA [11] $end
$var wire 1 <3 InA [10] $end
$var wire 1 =3 InA [9] $end
$var wire 1 >3 InA [8] $end
$var wire 1 ?3 InA [7] $end
$var wire 1 @3 InA [6] $end
$var wire 1 A3 InA [5] $end
$var wire 1 B3 InA [4] $end
$var wire 1 C3 InA [3] $end
$var wire 1 D3 InA [2] $end
$var wire 1 E3 InA [1] $end
$var wire 1 F3 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 z7 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 {7 sign $end
$var wire 1 X3 Out [15] $end
$var wire 1 Y3 Out [14] $end
$var wire 1 Z3 Out [13] $end
$var wire 1 [3 Out [12] $end
$var wire 1 \3 Out [11] $end
$var wire 1 ]3 Out [10] $end
$var wire 1 ^3 Out [9] $end
$var wire 1 _3 Out [8] $end
$var wire 1 `3 Out [7] $end
$var wire 1 a3 Out [6] $end
$var wire 1 b3 Out [5] $end
$var wire 1 c3 Out [4] $end
$var wire 1 d3 Out [3] $end
$var wire 1 e3 Out [2] $end
$var wire 1 f3 Out [1] $end
$var wire 1 g3 Out [0] $end
$var wire 1 h3 signOut $end
$var wire 1 k3 Ofl $end
$var wire 1 j3 Zero $end
$var wire 1 i3 carryFlag $end
$var wire 1 |7 InA_invA [15] $end
$var wire 1 }7 InA_invA [14] $end
$var wire 1 ~7 InA_invA [13] $end
$var wire 1 !8 InA_invA [12] $end
$var wire 1 "8 InA_invA [11] $end
$var wire 1 #8 InA_invA [10] $end
$var wire 1 $8 InA_invA [9] $end
$var wire 1 %8 InA_invA [8] $end
$var wire 1 &8 InA_invA [7] $end
$var wire 1 '8 InA_invA [6] $end
$var wire 1 (8 InA_invA [5] $end
$var wire 1 )8 InA_invA [4] $end
$var wire 1 *8 InA_invA [3] $end
$var wire 1 +8 InA_invA [2] $end
$var wire 1 ,8 InA_invA [1] $end
$var wire 1 -8 InA_invA [0] $end
$var wire 1 .8 InB_invB [15] $end
$var wire 1 /8 InB_invB [14] $end
$var wire 1 08 InB_invB [13] $end
$var wire 1 18 InB_invB [12] $end
$var wire 1 28 InB_invB [11] $end
$var wire 1 38 InB_invB [10] $end
$var wire 1 48 InB_invB [9] $end
$var wire 1 58 InB_invB [8] $end
$var wire 1 68 InB_invB [7] $end
$var wire 1 78 InB_invB [6] $end
$var wire 1 88 InB_invB [5] $end
$var wire 1 98 InB_invB [4] $end
$var wire 1 :8 InB_invB [3] $end
$var wire 1 ;8 InB_invB [2] $end
$var wire 1 <8 InB_invB [1] $end
$var wire 1 =8 InB_invB [0] $end
$var wire 1 >8 barrel [15] $end
$var wire 1 ?8 barrel [14] $end
$var wire 1 @8 barrel [13] $end
$var wire 1 A8 barrel [12] $end
$var wire 1 B8 barrel [11] $end
$var wire 1 C8 barrel [10] $end
$var wire 1 D8 barrel [9] $end
$var wire 1 E8 barrel [8] $end
$var wire 1 F8 barrel [7] $end
$var wire 1 G8 barrel [6] $end
$var wire 1 H8 barrel [5] $end
$var wire 1 I8 barrel [4] $end
$var wire 1 J8 barrel [3] $end
$var wire 1 K8 barrel [2] $end
$var wire 1 L8 barrel [1] $end
$var wire 1 M8 barrel [0] $end
$var wire 1 N8 logic_gates_r [15] $end
$var wire 1 O8 logic_gates_r [14] $end
$var wire 1 P8 logic_gates_r [13] $end
$var wire 1 Q8 logic_gates_r [12] $end
$var wire 1 R8 logic_gates_r [11] $end
$var wire 1 S8 logic_gates_r [10] $end
$var wire 1 T8 logic_gates_r [9] $end
$var wire 1 U8 logic_gates_r [8] $end
$var wire 1 V8 logic_gates_r [7] $end
$var wire 1 W8 logic_gates_r [6] $end
$var wire 1 X8 logic_gates_r [5] $end
$var wire 1 Y8 logic_gates_r [4] $end
$var wire 1 Z8 logic_gates_r [3] $end
$var wire 1 [8 logic_gates_r [2] $end
$var wire 1 \8 logic_gates_r [1] $end
$var wire 1 ]8 logic_gates_r [0] $end
$var wire 1 ^8 addition [15] $end
$var wire 1 _8 addition [14] $end
$var wire 1 `8 addition [13] $end
$var wire 1 a8 addition [12] $end
$var wire 1 b8 addition [11] $end
$var wire 1 c8 addition [10] $end
$var wire 1 d8 addition [9] $end
$var wire 1 e8 addition [8] $end
$var wire 1 f8 addition [7] $end
$var wire 1 g8 addition [6] $end
$var wire 1 h8 addition [5] $end
$var wire 1 i8 addition [4] $end
$var wire 1 j8 addition [3] $end
$var wire 1 k8 addition [2] $end
$var wire 1 l8 addition [1] $end
$var wire 1 m8 addition [0] $end
$var wire 1 n8 addition_logic [15] $end
$var wire 1 o8 addition_logic [14] $end
$var wire 1 p8 addition_logic [13] $end
$var wire 1 q8 addition_logic [12] $end
$var wire 1 r8 addition_logic [11] $end
$var wire 1 s8 addition_logic [10] $end
$var wire 1 t8 addition_logic [9] $end
$var wire 1 u8 addition_logic [8] $end
$var wire 1 v8 addition_logic [7] $end
$var wire 1 w8 addition_logic [6] $end
$var wire 1 x8 addition_logic [5] $end
$var wire 1 y8 addition_logic [4] $end
$var wire 1 z8 addition_logic [3] $end
$var wire 1 {8 addition_logic [2] $end
$var wire 1 |8 addition_logic [1] $end
$var wire 1 }8 addition_logic [0] $end
$var wire 1 ~8 carry $end
$var wire 1 !9 signed_over $end
$var wire 1 "9 less $end

$scope module shift $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 >8 Out [15] $end
$var wire 1 ?8 Out [14] $end
$var wire 1 @8 Out [13] $end
$var wire 1 A8 Out [12] $end
$var wire 1 B8 Out [11] $end
$var wire 1 C8 Out [10] $end
$var wire 1 D8 Out [9] $end
$var wire 1 E8 Out [8] $end
$var wire 1 F8 Out [7] $end
$var wire 1 G8 Out [6] $end
$var wire 1 H8 Out [5] $end
$var wire 1 I8 Out [4] $end
$var wire 1 J8 Out [3] $end
$var wire 1 K8 Out [2] $end
$var wire 1 L8 Out [1] $end
$var wire 1 M8 Out [0] $end
$var wire 1 &9 shift_left_r [15] $end
$var wire 1 '9 shift_left_r [14] $end
$var wire 1 (9 shift_left_r [13] $end
$var wire 1 )9 shift_left_r [12] $end
$var wire 1 *9 shift_left_r [11] $end
$var wire 1 +9 shift_left_r [10] $end
$var wire 1 ,9 shift_left_r [9] $end
$var wire 1 -9 shift_left_r [8] $end
$var wire 1 .9 shift_left_r [7] $end
$var wire 1 /9 shift_left_r [6] $end
$var wire 1 09 shift_left_r [5] $end
$var wire 1 19 shift_left_r [4] $end
$var wire 1 29 shift_left_r [3] $end
$var wire 1 39 shift_left_r [2] $end
$var wire 1 49 shift_left_r [1] $end
$var wire 1 59 shift_left_r [0] $end
$var wire 1 69 rotate_left_r [15] $end
$var wire 1 79 rotate_left_r [14] $end
$var wire 1 89 rotate_left_r [13] $end
$var wire 1 99 rotate_left_r [12] $end
$var wire 1 :9 rotate_left_r [11] $end
$var wire 1 ;9 rotate_left_r [10] $end
$var wire 1 <9 rotate_left_r [9] $end
$var wire 1 =9 rotate_left_r [8] $end
$var wire 1 >9 rotate_left_r [7] $end
$var wire 1 ?9 rotate_left_r [6] $end
$var wire 1 @9 rotate_left_r [5] $end
$var wire 1 A9 rotate_left_r [4] $end
$var wire 1 B9 rotate_left_r [3] $end
$var wire 1 C9 rotate_left_r [2] $end
$var wire 1 D9 rotate_left_r [1] $end
$var wire 1 E9 rotate_left_r [0] $end
$var wire 1 F9 shift_right_l_r [15] $end
$var wire 1 G9 shift_right_l_r [14] $end
$var wire 1 H9 shift_right_l_r [13] $end
$var wire 1 I9 shift_right_l_r [12] $end
$var wire 1 J9 shift_right_l_r [11] $end
$var wire 1 K9 shift_right_l_r [10] $end
$var wire 1 L9 shift_right_l_r [9] $end
$var wire 1 M9 shift_right_l_r [8] $end
$var wire 1 N9 shift_right_l_r [7] $end
$var wire 1 O9 shift_right_l_r [6] $end
$var wire 1 P9 shift_right_l_r [5] $end
$var wire 1 Q9 shift_right_l_r [4] $end
$var wire 1 R9 shift_right_l_r [3] $end
$var wire 1 S9 shift_right_l_r [2] $end
$var wire 1 T9 shift_right_l_r [1] $end
$var wire 1 U9 shift_right_l_r [0] $end
$var wire 1 V9 rotate_right_r [15] $end
$var wire 1 W9 rotate_right_r [14] $end
$var wire 1 X9 rotate_right_r [13] $end
$var wire 1 Y9 rotate_right_r [12] $end
$var wire 1 Z9 rotate_right_r [11] $end
$var wire 1 [9 rotate_right_r [10] $end
$var wire 1 \9 rotate_right_r [9] $end
$var wire 1 ]9 rotate_right_r [8] $end
$var wire 1 ^9 rotate_right_r [7] $end
$var wire 1 _9 rotate_right_r [6] $end
$var wire 1 `9 rotate_right_r [5] $end
$var wire 1 a9 rotate_right_r [4] $end
$var wire 1 b9 rotate_right_r [3] $end
$var wire 1 c9 rotate_right_r [2] $end
$var wire 1 d9 rotate_right_r [1] $end
$var wire 1 e9 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 &9 result [15] $end
$var wire 1 '9 result [14] $end
$var wire 1 (9 result [13] $end
$var wire 1 )9 result [12] $end
$var wire 1 *9 result [11] $end
$var wire 1 +9 result [10] $end
$var wire 1 ,9 result [9] $end
$var wire 1 -9 result [8] $end
$var wire 1 .9 result [7] $end
$var wire 1 /9 result [6] $end
$var wire 1 09 result [5] $end
$var wire 1 19 result [4] $end
$var wire 1 29 result [3] $end
$var wire 1 39 result [2] $end
$var wire 1 49 result [1] $end
$var wire 1 59 result [0] $end
$var wire 1 h9 temp1 [15] $end
$var wire 1 i9 temp1 [14] $end
$var wire 1 j9 temp1 [13] $end
$var wire 1 k9 temp1 [12] $end
$var wire 1 l9 temp1 [11] $end
$var wire 1 m9 temp1 [10] $end
$var wire 1 n9 temp1 [9] $end
$var wire 1 o9 temp1 [8] $end
$var wire 1 p9 temp1 [7] $end
$var wire 1 q9 temp1 [6] $end
$var wire 1 r9 temp1 [5] $end
$var wire 1 s9 temp1 [4] $end
$var wire 1 t9 temp1 [3] $end
$var wire 1 u9 temp1 [2] $end
$var wire 1 v9 temp1 [1] $end
$var wire 1 w9 temp1 [0] $end
$var wire 1 x9 temp2 [15] $end
$var wire 1 y9 temp2 [14] $end
$var wire 1 z9 temp2 [13] $end
$var wire 1 {9 temp2 [12] $end
$var wire 1 |9 temp2 [11] $end
$var wire 1 }9 temp2 [10] $end
$var wire 1 ~9 temp2 [9] $end
$var wire 1 !: temp2 [8] $end
$var wire 1 ": temp2 [7] $end
$var wire 1 #: temp2 [6] $end
$var wire 1 $: temp2 [5] $end
$var wire 1 %: temp2 [4] $end
$var wire 1 &: temp2 [3] $end
$var wire 1 ': temp2 [2] $end
$var wire 1 (: temp2 [1] $end
$var wire 1 ): temp2 [0] $end
$var wire 1 *: temp3 [15] $end
$var wire 1 +: temp3 [14] $end
$var wire 1 ,: temp3 [13] $end
$var wire 1 -: temp3 [12] $end
$var wire 1 .: temp3 [11] $end
$var wire 1 /: temp3 [10] $end
$var wire 1 0: temp3 [9] $end
$var wire 1 1: temp3 [8] $end
$var wire 1 2: temp3 [7] $end
$var wire 1 3: temp3 [6] $end
$var wire 1 4: temp3 [5] $end
$var wire 1 5: temp3 [4] $end
$var wire 1 6: temp3 [3] $end
$var wire 1 7: temp3 [2] $end
$var wire 1 8: temp3 [1] $end
$var wire 1 9: temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 69 result [15] $end
$var wire 1 79 result [14] $end
$var wire 1 89 result [13] $end
$var wire 1 99 result [12] $end
$var wire 1 :9 result [11] $end
$var wire 1 ;9 result [10] $end
$var wire 1 <9 result [9] $end
$var wire 1 =9 result [8] $end
$var wire 1 >9 result [7] $end
$var wire 1 ?9 result [6] $end
$var wire 1 @9 result [5] $end
$var wire 1 A9 result [4] $end
$var wire 1 B9 result [3] $end
$var wire 1 C9 result [2] $end
$var wire 1 D9 result [1] $end
$var wire 1 E9 result [0] $end
$var wire 1 <: temp1 [15] $end
$var wire 1 =: temp1 [14] $end
$var wire 1 >: temp1 [13] $end
$var wire 1 ?: temp1 [12] $end
$var wire 1 @: temp1 [11] $end
$var wire 1 A: temp1 [10] $end
$var wire 1 B: temp1 [9] $end
$var wire 1 C: temp1 [8] $end
$var wire 1 D: temp1 [7] $end
$var wire 1 E: temp1 [6] $end
$var wire 1 F: temp1 [5] $end
$var wire 1 G: temp1 [4] $end
$var wire 1 H: temp1 [3] $end
$var wire 1 I: temp1 [2] $end
$var wire 1 J: temp1 [1] $end
$var wire 1 K: temp1 [0] $end
$var wire 1 L: temp2 [15] $end
$var wire 1 M: temp2 [14] $end
$var wire 1 N: temp2 [13] $end
$var wire 1 O: temp2 [12] $end
$var wire 1 P: temp2 [11] $end
$var wire 1 Q: temp2 [10] $end
$var wire 1 R: temp2 [9] $end
$var wire 1 S: temp2 [8] $end
$var wire 1 T: temp2 [7] $end
$var wire 1 U: temp2 [6] $end
$var wire 1 V: temp2 [5] $end
$var wire 1 W: temp2 [4] $end
$var wire 1 X: temp2 [3] $end
$var wire 1 Y: temp2 [2] $end
$var wire 1 Z: temp2 [1] $end
$var wire 1 [: temp2 [0] $end
$var wire 1 \: temp3 [15] $end
$var wire 1 ]: temp3 [14] $end
$var wire 1 ^: temp3 [13] $end
$var wire 1 _: temp3 [12] $end
$var wire 1 `: temp3 [11] $end
$var wire 1 a: temp3 [10] $end
$var wire 1 b: temp3 [9] $end
$var wire 1 c: temp3 [8] $end
$var wire 1 d: temp3 [7] $end
$var wire 1 e: temp3 [6] $end
$var wire 1 f: temp3 [5] $end
$var wire 1 g: temp3 [4] $end
$var wire 1 h: temp3 [3] $end
$var wire 1 i: temp3 [2] $end
$var wire 1 j: temp3 [1] $end
$var wire 1 k: temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 F9 result [15] $end
$var wire 1 G9 result [14] $end
$var wire 1 H9 result [13] $end
$var wire 1 I9 result [12] $end
$var wire 1 J9 result [11] $end
$var wire 1 K9 result [10] $end
$var wire 1 L9 result [9] $end
$var wire 1 M9 result [8] $end
$var wire 1 N9 result [7] $end
$var wire 1 O9 result [6] $end
$var wire 1 P9 result [5] $end
$var wire 1 Q9 result [4] $end
$var wire 1 R9 result [3] $end
$var wire 1 S9 result [2] $end
$var wire 1 T9 result [1] $end
$var wire 1 U9 result [0] $end
$var wire 1 n: temp1 [15] $end
$var wire 1 o: temp1 [14] $end
$var wire 1 p: temp1 [13] $end
$var wire 1 q: temp1 [12] $end
$var wire 1 r: temp1 [11] $end
$var wire 1 s: temp1 [10] $end
$var wire 1 t: temp1 [9] $end
$var wire 1 u: temp1 [8] $end
$var wire 1 v: temp1 [7] $end
$var wire 1 w: temp1 [6] $end
$var wire 1 x: temp1 [5] $end
$var wire 1 y: temp1 [4] $end
$var wire 1 z: temp1 [3] $end
$var wire 1 {: temp1 [2] $end
$var wire 1 |: temp1 [1] $end
$var wire 1 }: temp1 [0] $end
$var wire 1 ~: temp2 [15] $end
$var wire 1 !; temp2 [14] $end
$var wire 1 "; temp2 [13] $end
$var wire 1 #; temp2 [12] $end
$var wire 1 $; temp2 [11] $end
$var wire 1 %; temp2 [10] $end
$var wire 1 &; temp2 [9] $end
$var wire 1 '; temp2 [8] $end
$var wire 1 (; temp2 [7] $end
$var wire 1 ); temp2 [6] $end
$var wire 1 *; temp2 [5] $end
$var wire 1 +; temp2 [4] $end
$var wire 1 ,; temp2 [3] $end
$var wire 1 -; temp2 [2] $end
$var wire 1 .; temp2 [1] $end
$var wire 1 /; temp2 [0] $end
$var wire 1 0; temp3 [15] $end
$var wire 1 1; temp3 [14] $end
$var wire 1 2; temp3 [13] $end
$var wire 1 3; temp3 [12] $end
$var wire 1 4; temp3 [11] $end
$var wire 1 5; temp3 [10] $end
$var wire 1 6; temp3 [9] $end
$var wire 1 7; temp3 [8] $end
$var wire 1 8; temp3 [7] $end
$var wire 1 9; temp3 [6] $end
$var wire 1 :; temp3 [5] $end
$var wire 1 ;; temp3 [4] $end
$var wire 1 <; temp3 [3] $end
$var wire 1 =; temp3 [2] $end
$var wire 1 >; temp3 [1] $end
$var wire 1 ?; temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 |7 In [15] $end
$var wire 1 }7 In [14] $end
$var wire 1 ~7 In [13] $end
$var wire 1 !8 In [12] $end
$var wire 1 "8 In [11] $end
$var wire 1 #8 In [10] $end
$var wire 1 $8 In [9] $end
$var wire 1 %8 In [8] $end
$var wire 1 &8 In [7] $end
$var wire 1 '8 In [6] $end
$var wire 1 (8 In [5] $end
$var wire 1 )8 In [4] $end
$var wire 1 *8 In [3] $end
$var wire 1 +8 In [2] $end
$var wire 1 ,8 In [1] $end
$var wire 1 -8 In [0] $end
$var wire 1 :8 ShAmt [3] $end
$var wire 1 ;8 ShAmt [2] $end
$var wire 1 <8 ShAmt [1] $end
$var wire 1 =8 ShAmt [0] $end
$var wire 1 V9 result [15] $end
$var wire 1 W9 result [14] $end
$var wire 1 X9 result [13] $end
$var wire 1 Y9 result [12] $end
$var wire 1 Z9 result [11] $end
$var wire 1 [9 result [10] $end
$var wire 1 \9 result [9] $end
$var wire 1 ]9 result [8] $end
$var wire 1 ^9 result [7] $end
$var wire 1 _9 result [6] $end
$var wire 1 `9 result [5] $end
$var wire 1 a9 result [4] $end
$var wire 1 b9 result [3] $end
$var wire 1 c9 result [2] $end
$var wire 1 d9 result [1] $end
$var wire 1 e9 result [0] $end
$var wire 1 B; temp1 [15] $end
$var wire 1 C; temp1 [14] $end
$var wire 1 D; temp1 [13] $end
$var wire 1 E; temp1 [12] $end
$var wire 1 F; temp1 [11] $end
$var wire 1 G; temp1 [10] $end
$var wire 1 H; temp1 [9] $end
$var wire 1 I; temp1 [8] $end
$var wire 1 J; temp1 [7] $end
$var wire 1 K; temp1 [6] $end
$var wire 1 L; temp1 [5] $end
$var wire 1 M; temp1 [4] $end
$var wire 1 N; temp1 [3] $end
$var wire 1 O; temp1 [2] $end
$var wire 1 P; temp1 [1] $end
$var wire 1 Q; temp1 [0] $end
$var wire 1 R; temp2 [15] $end
$var wire 1 S; temp2 [14] $end
$var wire 1 T; temp2 [13] $end
$var wire 1 U; temp2 [12] $end
$var wire 1 V; temp2 [11] $end
$var wire 1 W; temp2 [10] $end
$var wire 1 X; temp2 [9] $end
$var wire 1 Y; temp2 [8] $end
$var wire 1 Z; temp2 [7] $end
$var wire 1 [; temp2 [6] $end
$var wire 1 \; temp2 [5] $end
$var wire 1 ]; temp2 [4] $end
$var wire 1 ^; temp2 [3] $end
$var wire 1 _; temp2 [2] $end
$var wire 1 `; temp2 [1] $end
$var wire 1 a; temp2 [0] $end
$var wire 1 b; temp3 [15] $end
$var wire 1 c; temp3 [14] $end
$var wire 1 d; temp3 [13] $end
$var wire 1 e; temp3 [12] $end
$var wire 1 f; temp3 [11] $end
$var wire 1 g; temp3 [10] $end
$var wire 1 h; temp3 [9] $end
$var wire 1 i; temp3 [8] $end
$var wire 1 j; temp3 [7] $end
$var wire 1 k; temp3 [6] $end
$var wire 1 l; temp3 [5] $end
$var wire 1 m; temp3 [4] $end
$var wire 1 n; temp3 [3] $end
$var wire 1 o; temp3 [2] $end
$var wire 1 p; temp3 [1] $end
$var wire 1 q; temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var wire 1 |7 A [15] $end
$var wire 1 }7 A [14] $end
$var wire 1 ~7 A [13] $end
$var wire 1 !8 A [12] $end
$var wire 1 "8 A [11] $end
$var wire 1 #8 A [10] $end
$var wire 1 $8 A [9] $end
$var wire 1 %8 A [8] $end
$var wire 1 &8 A [7] $end
$var wire 1 '8 A [6] $end
$var wire 1 (8 A [5] $end
$var wire 1 )8 A [4] $end
$var wire 1 *8 A [3] $end
$var wire 1 +8 A [2] $end
$var wire 1 ,8 A [1] $end
$var wire 1 -8 A [0] $end
$var wire 1 .8 B [15] $end
$var wire 1 /8 B [14] $end
$var wire 1 08 B [13] $end
$var wire 1 18 B [12] $end
$var wire 1 28 B [11] $end
$var wire 1 38 B [10] $end
$var wire 1 48 B [9] $end
$var wire 1 58 B [8] $end
$var wire 1 68 B [7] $end
$var wire 1 78 B [6] $end
$var wire 1 88 B [5] $end
$var wire 1 98 B [4] $end
$var wire 1 :8 B [3] $end
$var wire 1 ;8 B [2] $end
$var wire 1 <8 B [1] $end
$var wire 1 =8 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 N8 Result [15] $end
$var wire 1 O8 Result [14] $end
$var wire 1 P8 Result [13] $end
$var wire 1 Q8 Result [12] $end
$var wire 1 R8 Result [11] $end
$var wire 1 S8 Result [10] $end
$var wire 1 T8 Result [9] $end
$var wire 1 U8 Result [8] $end
$var wire 1 V8 Result [7] $end
$var wire 1 W8 Result [6] $end
$var wire 1 X8 Result [5] $end
$var wire 1 Y8 Result [4] $end
$var wire 1 Z8 Result [3] $end
$var wire 1 [8 Result [2] $end
$var wire 1 \8 Result [1] $end
$var wire 1 ]8 Result [0] $end
$upscope $end

$scope module adding $end
$var wire 1 ^8 sum [15] $end
$var wire 1 _8 sum [14] $end
$var wire 1 `8 sum [13] $end
$var wire 1 a8 sum [12] $end
$var wire 1 b8 sum [11] $end
$var wire 1 c8 sum [10] $end
$var wire 1 d8 sum [9] $end
$var wire 1 e8 sum [8] $end
$var wire 1 f8 sum [7] $end
$var wire 1 g8 sum [6] $end
$var wire 1 h8 sum [5] $end
$var wire 1 i8 sum [4] $end
$var wire 1 j8 sum [3] $end
$var wire 1 k8 sum [2] $end
$var wire 1 l8 sum [1] $end
$var wire 1 m8 sum [0] $end
$var wire 1 ~8 c_out $end
$var wire 1 |7 a [15] $end
$var wire 1 }7 a [14] $end
$var wire 1 ~7 a [13] $end
$var wire 1 !8 a [12] $end
$var wire 1 "8 a [11] $end
$var wire 1 #8 a [10] $end
$var wire 1 $8 a [9] $end
$var wire 1 %8 a [8] $end
$var wire 1 &8 a [7] $end
$var wire 1 '8 a [6] $end
$var wire 1 (8 a [5] $end
$var wire 1 )8 a [4] $end
$var wire 1 *8 a [3] $end
$var wire 1 +8 a [2] $end
$var wire 1 ,8 a [1] $end
$var wire 1 -8 a [0] $end
$var wire 1 .8 b [15] $end
$var wire 1 /8 b [14] $end
$var wire 1 08 b [13] $end
$var wire 1 18 b [12] $end
$var wire 1 28 b [11] $end
$var wire 1 38 b [10] $end
$var wire 1 48 b [9] $end
$var wire 1 58 b [8] $end
$var wire 1 68 b [7] $end
$var wire 1 78 b [6] $end
$var wire 1 88 b [5] $end
$var wire 1 98 b [4] $end
$var wire 1 :8 b [3] $end
$var wire 1 ;8 b [2] $end
$var wire 1 <8 b [1] $end
$var wire 1 =8 b [0] $end
$var wire 1 z7 c_in $end
$var wire 1 u; gen [15] $end
$var wire 1 v; gen [14] $end
$var wire 1 w; gen [13] $end
$var wire 1 x; gen [12] $end
$var wire 1 y; gen [11] $end
$var wire 1 z; gen [10] $end
$var wire 1 {; gen [9] $end
$var wire 1 |; gen [8] $end
$var wire 1 }; gen [7] $end
$var wire 1 ~; gen [6] $end
$var wire 1 !< gen [5] $end
$var wire 1 "< gen [4] $end
$var wire 1 #< gen [3] $end
$var wire 1 $< gen [2] $end
$var wire 1 %< gen [1] $end
$var wire 1 &< gen [0] $end
$var wire 1 '< four_gen [3] $end
$var wire 1 (< four_gen [2] $end
$var wire 1 )< four_gen [1] $end
$var wire 1 *< four_gen [0] $end
$var wire 1 +< prop [15] $end
$var wire 1 ,< prop [14] $end
$var wire 1 -< prop [13] $end
$var wire 1 .< prop [12] $end
$var wire 1 /< prop [11] $end
$var wire 1 0< prop [10] $end
$var wire 1 1< prop [9] $end
$var wire 1 2< prop [8] $end
$var wire 1 3< prop [7] $end
$var wire 1 4< prop [6] $end
$var wire 1 5< prop [5] $end
$var wire 1 6< prop [4] $end
$var wire 1 7< prop [3] $end
$var wire 1 8< prop [2] $end
$var wire 1 9< prop [1] $end
$var wire 1 :< prop [0] $end
$var wire 1 ;< four_prop [3] $end
$var wire 1 << four_prop [2] $end
$var wire 1 =< four_prop [1] $end
$var wire 1 >< four_prop [0] $end
$var wire 1 ?< carry [2] $end
$var wire 1 @< carry [1] $end
$var wire 1 A< carry [0] $end
$var wire 1 B< fa_sum [15] $end
$var wire 1 C< fa_sum [14] $end
$var wire 1 D< fa_sum [13] $end
$var wire 1 E< fa_sum [12] $end
$var wire 1 F< fa_sum [11] $end
$var wire 1 G< fa_sum [10] $end
$var wire 1 H< fa_sum [9] $end
$var wire 1 I< fa_sum [8] $end
$var wire 1 J< fa_sum [7] $end
$var wire 1 K< fa_sum [6] $end
$var wire 1 L< fa_sum [5] $end
$var wire 1 M< fa_sum [4] $end
$var wire 1 N< fa_sum [3] $end
$var wire 1 O< fa_sum [2] $end
$var wire 1 P< fa_sum [1] $end
$var wire 1 Q< fa_sum [0] $end

$scope module cla1 $end
$var wire 1 N< sum [3] $end
$var wire 1 O< sum [2] $end
$var wire 1 P< sum [1] $end
$var wire 1 Q< sum [0] $end
$var wire 1 S< c_out $end
$var wire 1 *8 a [3] $end
$var wire 1 +8 a [2] $end
$var wire 1 ,8 a [1] $end
$var wire 1 -8 a [0] $end
$var wire 1 :8 b [3] $end
$var wire 1 ;8 b [2] $end
$var wire 1 <8 b [1] $end
$var wire 1 =8 b [0] $end
$var wire 1 z7 c_in $end
$var wire 1 T< gen [3] $end
$var wire 1 U< gen [2] $end
$var wire 1 V< gen [1] $end
$var wire 1 W< gen [0] $end
$var wire 1 X< prop [3] $end
$var wire 1 Y< prop [2] $end
$var wire 1 Z< prop [1] $end
$var wire 1 [< prop [0] $end
$var wire 1 \< carry [2] $end
$var wire 1 ]< carry [1] $end
$var wire 1 ^< carry [0] $end
$var wire 1 _< fa_sum [3] $end
$var wire 1 `< fa_sum [2] $end
$var wire 1 a< fa_sum [1] $end
$var wire 1 b< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 b< s $end
$var wire 1 c< c_out $end
$var wire 1 -8 a $end
$var wire 1 =8 b $end
$var wire 1 z7 c_in $end
$var wire 1 d< xor_AB $end
$var wire 1 e< xor_ABCin $end
$var wire 1 f< NAND_AB $end
$var wire 1 g< not_NAND_AB $end
$var wire 1 h< NAND_Cin_xor_AB $end
$var wire 1 i< not_NAND_Cin_xor_AB $end
$var wire 1 j< NOR_2NAND $end
$var wire 1 k< not_NOR_2NAND $end
$var wire 1 l< Cin $end

$scope module xor1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 d< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 d< in1 $end
$var wire 1 z7 in2 $end
$var wire 1 e< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -8 in1 $end
$var wire 1 =8 in2 $end
$var wire 1 f< out $end
$upscope $end

$scope module not1 $end
$var wire 1 f< in1 $end
$var wire 1 g< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 l< in1 $end
$var wire 1 d< in2 $end
$var wire 1 h< out $end
$upscope $end

$scope module not2 $end
$var wire 1 h< in1 $end
$var wire 1 i< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 g< in1 $end
$var wire 1 i< in2 $end
$var wire 1 j< out $end
$upscope $end

$scope module not3 $end
$var wire 1 j< in1 $end
$var wire 1 k< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 a< s $end
$var wire 1 m< c_out $end
$var wire 1 ,8 a $end
$var wire 1 <8 b $end
$var wire 1 ^< c_in $end
$var wire 1 n< xor_AB $end
$var wire 1 o< xor_ABCin $end
$var wire 1 p< NAND_AB $end
$var wire 1 q< not_NAND_AB $end
$var wire 1 r< NAND_Cin_xor_AB $end
$var wire 1 s< not_NAND_Cin_xor_AB $end
$var wire 1 t< NOR_2NAND $end
$var wire 1 u< not_NOR_2NAND $end
$var wire 1 v< Cin $end

$scope module xor1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 n< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 n< in1 $end
$var wire 1 ^< in2 $end
$var wire 1 o< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,8 in1 $end
$var wire 1 <8 in2 $end
$var wire 1 p< out $end
$upscope $end

$scope module not1 $end
$var wire 1 p< in1 $end
$var wire 1 q< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 v< in1 $end
$var wire 1 n< in2 $end
$var wire 1 r< out $end
$upscope $end

$scope module not2 $end
$var wire 1 r< in1 $end
$var wire 1 s< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 q< in1 $end
$var wire 1 s< in2 $end
$var wire 1 t< out $end
$upscope $end

$scope module not3 $end
$var wire 1 t< in1 $end
$var wire 1 u< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 `< s $end
$var wire 1 w< c_out $end
$var wire 1 +8 a $end
$var wire 1 ;8 b $end
$var wire 1 ]< c_in $end
$var wire 1 x< xor_AB $end
$var wire 1 y< xor_ABCin $end
$var wire 1 z< NAND_AB $end
$var wire 1 {< not_NAND_AB $end
$var wire 1 |< NAND_Cin_xor_AB $end
$var wire 1 }< not_NAND_Cin_xor_AB $end
$var wire 1 ~< NOR_2NAND $end
$var wire 1 != not_NOR_2NAND $end
$var wire 1 "= Cin $end

$scope module xor1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 x< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x< in1 $end
$var wire 1 ]< in2 $end
$var wire 1 y< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +8 in1 $end
$var wire 1 ;8 in2 $end
$var wire 1 z< out $end
$upscope $end

$scope module not1 $end
$var wire 1 z< in1 $end
$var wire 1 {< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "= in1 $end
$var wire 1 x< in2 $end
$var wire 1 |< out $end
$upscope $end

$scope module not2 $end
$var wire 1 |< in1 $end
$var wire 1 }< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {< in1 $end
$var wire 1 }< in2 $end
$var wire 1 ~< out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~< in1 $end
$var wire 1 != out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 _< s $end
$var wire 1 #= c_out $end
$var wire 1 *8 a $end
$var wire 1 :8 b $end
$var wire 1 \< c_in $end
$var wire 1 $= xor_AB $end
$var wire 1 %= xor_ABCin $end
$var wire 1 &= NAND_AB $end
$var wire 1 '= not_NAND_AB $end
$var wire 1 (= NAND_Cin_xor_AB $end
$var wire 1 )= not_NAND_Cin_xor_AB $end
$var wire 1 *= NOR_2NAND $end
$var wire 1 += not_NOR_2NAND $end
$var wire 1 ,= Cin $end

$scope module xor1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 $= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $= in1 $end
$var wire 1 \< in2 $end
$var wire 1 %= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *8 in1 $end
$var wire 1 :8 in2 $end
$var wire 1 &= out $end
$upscope $end

$scope module not1 $end
$var wire 1 &= in1 $end
$var wire 1 '= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ,= in1 $end
$var wire 1 $= in2 $end
$var wire 1 (= out $end
$upscope $end

$scope module not2 $end
$var wire 1 (= in1 $end
$var wire 1 )= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '= in1 $end
$var wire 1 )= in2 $end
$var wire 1 *= out $end
$upscope $end

$scope module not3 $end
$var wire 1 *= in1 $end
$var wire 1 += out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var wire 1 J< sum [3] $end
$var wire 1 K< sum [2] $end
$var wire 1 L< sum [1] $end
$var wire 1 M< sum [0] $end
$var wire 1 .= c_out $end
$var wire 1 &8 a [3] $end
$var wire 1 '8 a [2] $end
$var wire 1 (8 a [1] $end
$var wire 1 )8 a [0] $end
$var wire 1 68 b [3] $end
$var wire 1 78 b [2] $end
$var wire 1 88 b [1] $end
$var wire 1 98 b [0] $end
$var wire 1 A< c_in $end
$var wire 1 /= gen [3] $end
$var wire 1 0= gen [2] $end
$var wire 1 1= gen [1] $end
$var wire 1 2= gen [0] $end
$var wire 1 3= prop [3] $end
$var wire 1 4= prop [2] $end
$var wire 1 5= prop [1] $end
$var wire 1 6= prop [0] $end
$var wire 1 7= carry [2] $end
$var wire 1 8= carry [1] $end
$var wire 1 9= carry [0] $end
$var wire 1 := fa_sum [3] $end
$var wire 1 ;= fa_sum [2] $end
$var wire 1 <= fa_sum [1] $end
$var wire 1 == fa_sum [0] $end

$scope module fa1 $end
$var wire 1 == s $end
$var wire 1 >= c_out $end
$var wire 1 )8 a $end
$var wire 1 98 b $end
$var wire 1 A< c_in $end
$var wire 1 ?= xor_AB $end
$var wire 1 @= xor_ABCin $end
$var wire 1 A= NAND_AB $end
$var wire 1 B= not_NAND_AB $end
$var wire 1 C= NAND_Cin_xor_AB $end
$var wire 1 D= not_NAND_Cin_xor_AB $end
$var wire 1 E= NOR_2NAND $end
$var wire 1 F= not_NOR_2NAND $end
$var wire 1 G= Cin $end

$scope module xor1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 ?= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ?= in1 $end
$var wire 1 A< in2 $end
$var wire 1 @= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )8 in1 $end
$var wire 1 98 in2 $end
$var wire 1 A= out $end
$upscope $end

$scope module not1 $end
$var wire 1 A= in1 $end
$var wire 1 B= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 G= in1 $end
$var wire 1 ?= in2 $end
$var wire 1 C= out $end
$upscope $end

$scope module not2 $end
$var wire 1 C= in1 $end
$var wire 1 D= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 B= in1 $end
$var wire 1 D= in2 $end
$var wire 1 E= out $end
$upscope $end

$scope module not3 $end
$var wire 1 E= in1 $end
$var wire 1 F= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 <= s $end
$var wire 1 H= c_out $end
$var wire 1 (8 a $end
$var wire 1 88 b $end
$var wire 1 9= c_in $end
$var wire 1 I= xor_AB $end
$var wire 1 J= xor_ABCin $end
$var wire 1 K= NAND_AB $end
$var wire 1 L= not_NAND_AB $end
$var wire 1 M= NAND_Cin_xor_AB $end
$var wire 1 N= not_NAND_Cin_xor_AB $end
$var wire 1 O= NOR_2NAND $end
$var wire 1 P= not_NOR_2NAND $end
$var wire 1 Q= Cin $end

$scope module xor1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 I= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 I= in1 $end
$var wire 1 9= in2 $end
$var wire 1 J= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (8 in1 $end
$var wire 1 88 in2 $end
$var wire 1 K= out $end
$upscope $end

$scope module not1 $end
$var wire 1 K= in1 $end
$var wire 1 L= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Q= in1 $end
$var wire 1 I= in2 $end
$var wire 1 M= out $end
$upscope $end

$scope module not2 $end
$var wire 1 M= in1 $end
$var wire 1 N= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 L= in1 $end
$var wire 1 N= in2 $end
$var wire 1 O= out $end
$upscope $end

$scope module not3 $end
$var wire 1 O= in1 $end
$var wire 1 P= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 ;= s $end
$var wire 1 R= c_out $end
$var wire 1 '8 a $end
$var wire 1 78 b $end
$var wire 1 8= c_in $end
$var wire 1 S= xor_AB $end
$var wire 1 T= xor_ABCin $end
$var wire 1 U= NAND_AB $end
$var wire 1 V= not_NAND_AB $end
$var wire 1 W= NAND_Cin_xor_AB $end
$var wire 1 X= not_NAND_Cin_xor_AB $end
$var wire 1 Y= NOR_2NAND $end
$var wire 1 Z= not_NOR_2NAND $end
$var wire 1 [= Cin $end

$scope module xor1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 S= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S= in1 $end
$var wire 1 8= in2 $end
$var wire 1 T= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '8 in1 $end
$var wire 1 78 in2 $end
$var wire 1 U= out $end
$upscope $end

$scope module not1 $end
$var wire 1 U= in1 $end
$var wire 1 V= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [= in1 $end
$var wire 1 S= in2 $end
$var wire 1 W= out $end
$upscope $end

$scope module not2 $end
$var wire 1 W= in1 $end
$var wire 1 X= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V= in1 $end
$var wire 1 X= in2 $end
$var wire 1 Y= out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y= in1 $end
$var wire 1 Z= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 := s $end
$var wire 1 \= c_out $end
$var wire 1 &8 a $end
$var wire 1 68 b $end
$var wire 1 7= c_in $end
$var wire 1 ]= xor_AB $end
$var wire 1 ^= xor_ABCin $end
$var wire 1 _= NAND_AB $end
$var wire 1 `= not_NAND_AB $end
$var wire 1 a= NAND_Cin_xor_AB $end
$var wire 1 b= not_NAND_Cin_xor_AB $end
$var wire 1 c= NOR_2NAND $end
$var wire 1 d= not_NOR_2NAND $end
$var wire 1 e= Cin $end

$scope module xor1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 ]= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]= in1 $end
$var wire 1 7= in2 $end
$var wire 1 ^= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &8 in1 $end
$var wire 1 68 in2 $end
$var wire 1 _= out $end
$upscope $end

$scope module not1 $end
$var wire 1 _= in1 $end
$var wire 1 `= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e= in1 $end
$var wire 1 ]= in2 $end
$var wire 1 a= out $end
$upscope $end

$scope module not2 $end
$var wire 1 a= in1 $end
$var wire 1 b= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `= in1 $end
$var wire 1 b= in2 $end
$var wire 1 c= out $end
$upscope $end

$scope module not3 $end
$var wire 1 c= in1 $end
$var wire 1 d= out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var wire 1 F< sum [3] $end
$var wire 1 G< sum [2] $end
$var wire 1 H< sum [1] $end
$var wire 1 I< sum [0] $end
$var wire 1 g= c_out $end
$var wire 1 "8 a [3] $end
$var wire 1 #8 a [2] $end
$var wire 1 $8 a [1] $end
$var wire 1 %8 a [0] $end
$var wire 1 28 b [3] $end
$var wire 1 38 b [2] $end
$var wire 1 48 b [1] $end
$var wire 1 58 b [0] $end
$var wire 1 @< c_in $end
$var wire 1 h= gen [3] $end
$var wire 1 i= gen [2] $end
$var wire 1 j= gen [1] $end
$var wire 1 k= gen [0] $end
$var wire 1 l= prop [3] $end
$var wire 1 m= prop [2] $end
$var wire 1 n= prop [1] $end
$var wire 1 o= prop [0] $end
$var wire 1 p= carry [2] $end
$var wire 1 q= carry [1] $end
$var wire 1 r= carry [0] $end
$var wire 1 s= fa_sum [3] $end
$var wire 1 t= fa_sum [2] $end
$var wire 1 u= fa_sum [1] $end
$var wire 1 v= fa_sum [0] $end

$scope module fa1 $end
$var wire 1 v= s $end
$var wire 1 w= c_out $end
$var wire 1 %8 a $end
$var wire 1 58 b $end
$var wire 1 @< c_in $end
$var wire 1 x= xor_AB $end
$var wire 1 y= xor_ABCin $end
$var wire 1 z= NAND_AB $end
$var wire 1 {= not_NAND_AB $end
$var wire 1 |= NAND_Cin_xor_AB $end
$var wire 1 }= not_NAND_Cin_xor_AB $end
$var wire 1 ~= NOR_2NAND $end
$var wire 1 !> not_NOR_2NAND $end
$var wire 1 "> Cin $end

$scope module xor1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 x= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 x= in1 $end
$var wire 1 @< in2 $end
$var wire 1 y= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %8 in1 $end
$var wire 1 58 in2 $end
$var wire 1 z= out $end
$upscope $end

$scope module not1 $end
$var wire 1 z= in1 $end
$var wire 1 {= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "> in1 $end
$var wire 1 x= in2 $end
$var wire 1 |= out $end
$upscope $end

$scope module not2 $end
$var wire 1 |= in1 $end
$var wire 1 }= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 {= in1 $end
$var wire 1 }= in2 $end
$var wire 1 ~= out $end
$upscope $end

$scope module not3 $end
$var wire 1 ~= in1 $end
$var wire 1 !> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 u= s $end
$var wire 1 #> c_out $end
$var wire 1 $8 a $end
$var wire 1 48 b $end
$var wire 1 r= c_in $end
$var wire 1 $> xor_AB $end
$var wire 1 %> xor_ABCin $end
$var wire 1 &> NAND_AB $end
$var wire 1 '> not_NAND_AB $end
$var wire 1 (> NAND_Cin_xor_AB $end
$var wire 1 )> not_NAND_Cin_xor_AB $end
$var wire 1 *> NOR_2NAND $end
$var wire 1 +> not_NOR_2NAND $end
$var wire 1 ,> Cin $end

$scope module xor1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 $> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 $> in1 $end
$var wire 1 r= in2 $end
$var wire 1 %> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $8 in1 $end
$var wire 1 48 in2 $end
$var wire 1 &> out $end
$upscope $end

$scope module not1 $end
$var wire 1 &> in1 $end
$var wire 1 '> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ,> in1 $end
$var wire 1 $> in2 $end
$var wire 1 (> out $end
$upscope $end

$scope module not2 $end
$var wire 1 (> in1 $end
$var wire 1 )> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 '> in1 $end
$var wire 1 )> in2 $end
$var wire 1 *> out $end
$upscope $end

$scope module not3 $end
$var wire 1 *> in1 $end
$var wire 1 +> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 t= s $end
$var wire 1 -> c_out $end
$var wire 1 #8 a $end
$var wire 1 38 b $end
$var wire 1 q= c_in $end
$var wire 1 .> xor_AB $end
$var wire 1 /> xor_ABCin $end
$var wire 1 0> NAND_AB $end
$var wire 1 1> not_NAND_AB $end
$var wire 1 2> NAND_Cin_xor_AB $end
$var wire 1 3> not_NAND_Cin_xor_AB $end
$var wire 1 4> NOR_2NAND $end
$var wire 1 5> not_NOR_2NAND $end
$var wire 1 6> Cin $end

$scope module xor1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 .> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 .> in1 $end
$var wire 1 q= in2 $end
$var wire 1 /> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #8 in1 $end
$var wire 1 38 in2 $end
$var wire 1 0> out $end
$upscope $end

$scope module not1 $end
$var wire 1 0> in1 $end
$var wire 1 1> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 6> in1 $end
$var wire 1 .> in2 $end
$var wire 1 2> out $end
$upscope $end

$scope module not2 $end
$var wire 1 2> in1 $end
$var wire 1 3> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 1> in1 $end
$var wire 1 3> in2 $end
$var wire 1 4> out $end
$upscope $end

$scope module not3 $end
$var wire 1 4> in1 $end
$var wire 1 5> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 s= s $end
$var wire 1 7> c_out $end
$var wire 1 "8 a $end
$var wire 1 28 b $end
$var wire 1 p= c_in $end
$var wire 1 8> xor_AB $end
$var wire 1 9> xor_ABCin $end
$var wire 1 :> NAND_AB $end
$var wire 1 ;> not_NAND_AB $end
$var wire 1 <> NAND_Cin_xor_AB $end
$var wire 1 => not_NAND_Cin_xor_AB $end
$var wire 1 >> NOR_2NAND $end
$var wire 1 ?> not_NOR_2NAND $end
$var wire 1 @> Cin $end

$scope module xor1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 8> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8> in1 $end
$var wire 1 p= in2 $end
$var wire 1 9> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 "8 in1 $end
$var wire 1 28 in2 $end
$var wire 1 :> out $end
$upscope $end

$scope module not1 $end
$var wire 1 :> in1 $end
$var wire 1 ;> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 @> in1 $end
$var wire 1 8> in2 $end
$var wire 1 <> out $end
$upscope $end

$scope module not2 $end
$var wire 1 <> in1 $end
$var wire 1 => out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;> in1 $end
$var wire 1 => in2 $end
$var wire 1 >> out $end
$upscope $end

$scope module not3 $end
$var wire 1 >> in1 $end
$var wire 1 ?> out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var wire 1 B< sum [3] $end
$var wire 1 C< sum [2] $end
$var wire 1 D< sum [1] $end
$var wire 1 E< sum [0] $end
$var wire 1 B> c_out $end
$var wire 1 |7 a [3] $end
$var wire 1 }7 a [2] $end
$var wire 1 ~7 a [1] $end
$var wire 1 !8 a [0] $end
$var wire 1 .8 b [3] $end
$var wire 1 /8 b [2] $end
$var wire 1 08 b [1] $end
$var wire 1 18 b [0] $end
$var wire 1 ?< c_in $end
$var wire 1 C> gen [3] $end
$var wire 1 D> gen [2] $end
$var wire 1 E> gen [1] $end
$var wire 1 F> gen [0] $end
$var wire 1 G> prop [3] $end
$var wire 1 H> prop [2] $end
$var wire 1 I> prop [1] $end
$var wire 1 J> prop [0] $end
$var wire 1 K> carry [2] $end
$var wire 1 L> carry [1] $end
$var wire 1 M> carry [0] $end
$var wire 1 N> fa_sum [3] $end
$var wire 1 O> fa_sum [2] $end
$var wire 1 P> fa_sum [1] $end
$var wire 1 Q> fa_sum [0] $end

$scope module fa1 $end
$var wire 1 Q> s $end
$var wire 1 R> c_out $end
$var wire 1 !8 a $end
$var wire 1 18 b $end
$var wire 1 ?< c_in $end
$var wire 1 S> xor_AB $end
$var wire 1 T> xor_ABCin $end
$var wire 1 U> NAND_AB $end
$var wire 1 V> not_NAND_AB $end
$var wire 1 W> NAND_Cin_xor_AB $end
$var wire 1 X> not_NAND_Cin_xor_AB $end
$var wire 1 Y> NOR_2NAND $end
$var wire 1 Z> not_NOR_2NAND $end
$var wire 1 [> Cin $end

$scope module xor1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 S> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 S> in1 $end
$var wire 1 ?< in2 $end
$var wire 1 T> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 !8 in1 $end
$var wire 1 18 in2 $end
$var wire 1 U> out $end
$upscope $end

$scope module not1 $end
$var wire 1 U> in1 $end
$var wire 1 V> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [> in1 $end
$var wire 1 S> in2 $end
$var wire 1 W> out $end
$upscope $end

$scope module not2 $end
$var wire 1 W> in1 $end
$var wire 1 X> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 V> in1 $end
$var wire 1 X> in2 $end
$var wire 1 Y> out $end
$upscope $end

$scope module not3 $end
$var wire 1 Y> in1 $end
$var wire 1 Z> out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 P> s $end
$var wire 1 \> c_out $end
$var wire 1 ~7 a $end
$var wire 1 08 b $end
$var wire 1 M> c_in $end
$var wire 1 ]> xor_AB $end
$var wire 1 ^> xor_ABCin $end
$var wire 1 _> NAND_AB $end
$var wire 1 `> not_NAND_AB $end
$var wire 1 a> NAND_Cin_xor_AB $end
$var wire 1 b> not_NAND_Cin_xor_AB $end
$var wire 1 c> NOR_2NAND $end
$var wire 1 d> not_NOR_2NAND $end
$var wire 1 e> Cin $end

$scope module xor1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 ]> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]> in1 $end
$var wire 1 M> in2 $end
$var wire 1 ^> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ~7 in1 $end
$var wire 1 08 in2 $end
$var wire 1 _> out $end
$upscope $end

$scope module not1 $end
$var wire 1 _> in1 $end
$var wire 1 `> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 e> in1 $end
$var wire 1 ]> in2 $end
$var wire 1 a> out $end
$upscope $end

$scope module not2 $end
$var wire 1 a> in1 $end
$var wire 1 b> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `> in1 $end
$var wire 1 b> in2 $end
$var wire 1 c> out $end
$upscope $end

$scope module not3 $end
$var wire 1 c> in1 $end
$var wire 1 d> out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 O> s $end
$var wire 1 f> c_out $end
$var wire 1 }7 a $end
$var wire 1 /8 b $end
$var wire 1 L> c_in $end
$var wire 1 g> xor_AB $end
$var wire 1 h> xor_ABCin $end
$var wire 1 i> NAND_AB $end
$var wire 1 j> not_NAND_AB $end
$var wire 1 k> NAND_Cin_xor_AB $end
$var wire 1 l> not_NAND_Cin_xor_AB $end
$var wire 1 m> NOR_2NAND $end
$var wire 1 n> not_NOR_2NAND $end
$var wire 1 o> Cin $end

$scope module xor1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 g> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 g> in1 $end
$var wire 1 L> in2 $end
$var wire 1 h> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 }7 in1 $end
$var wire 1 /8 in2 $end
$var wire 1 i> out $end
$upscope $end

$scope module not1 $end
$var wire 1 i> in1 $end
$var wire 1 j> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o> in1 $end
$var wire 1 g> in2 $end
$var wire 1 k> out $end
$upscope $end

$scope module not2 $end
$var wire 1 k> in1 $end
$var wire 1 l> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 j> in1 $end
$var wire 1 l> in2 $end
$var wire 1 m> out $end
$upscope $end

$scope module not3 $end
$var wire 1 m> in1 $end
$var wire 1 n> out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 N> s $end
$var wire 1 p> c_out $end
$var wire 1 |7 a $end
$var wire 1 .8 b $end
$var wire 1 K> c_in $end
$var wire 1 q> xor_AB $end
$var wire 1 r> xor_ABCin $end
$var wire 1 s> NAND_AB $end
$var wire 1 t> not_NAND_AB $end
$var wire 1 u> NAND_Cin_xor_AB $end
$var wire 1 v> not_NAND_Cin_xor_AB $end
$var wire 1 w> NOR_2NAND $end
$var wire 1 x> not_NOR_2NAND $end
$var wire 1 y> Cin $end

$scope module xor1 $end
$var wire 1 |7 in1 $end
$var wire 1 .8 in2 $end
$var wire 1 q> out $end
$upscope $end

$scope module xor2 $end
$var wire 1 q> in1 $end
$var wire 1 K> in2 $end
$var wire 1 r> out $end
$upscope $end

$scope module nand1 $end
$var wire 1 |7 in1 $end
$var wire 1 .8 in2 $end
$var wire 1 s> out $end
$upscope $end

$scope module not1 $end
$var wire 1 s> in1 $end
$var wire 1 t> out $end
$upscope $end

$scope module nand2 $end
$var wire 1 y> in1 $end
$var wire 1 q> in2 $end
$var wire 1 u> out $end
$upscope $end

$scope module not2 $end
$var wire 1 u> in1 $end
$var wire 1 v> out $end
$upscope $end

$scope module nor1 $end
$var wire 1 t> in1 $end
$var wire 1 v> in2 $end
$var wire 1 w> out $end
$upscope $end

$scope module not3 $end
$var wire 1 w> in1 $end
$var wire 1 x> out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 73 InA [15] $end
$var wire 1 83 InA [14] $end
$var wire 1 93 InA [13] $end
$var wire 1 :3 InA [12] $end
$var wire 1 ;3 InA [11] $end
$var wire 1 <3 InA [10] $end
$var wire 1 =3 InA [9] $end
$var wire 1 >3 InA [8] $end
$var wire 1 ?3 InA [7] $end
$var wire 1 @3 InA [6] $end
$var wire 1 A3 InA [5] $end
$var wire 1 B3 InA [4] $end
$var wire 1 C3 InA [3] $end
$var wire 1 D3 InA [2] $end
$var wire 1 E3 InA [1] $end
$var wire 1 F3 InA [0] $end
$var wire 1 z> InB [15] $end
$var wire 1 {> InB [14] $end
$var wire 1 |> InB [13] $end
$var wire 1 }> InB [12] $end
$var wire 1 ~> InB [11] $end
$var wire 1 !? InB [10] $end
$var wire 1 "? InB [9] $end
$var wire 1 #? InB [8] $end
$var wire 1 $? InB [7] $end
$var wire 1 %? InB [6] $end
$var wire 1 &? InB [5] $end
$var wire 1 '? InB [4] $end
$var wire 1 (? InB [3] $end
$var wire 1 )? InB [2] $end
$var wire 1 *? InB [1] $end
$var wire 1 +? InB [0] $end
$var wire 1 "9 Out $end
$var wire 1 ,? difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 o3 Out $end
$var wire 1 -? difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 `4 Out $end
$var wire 1 .? difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 W) SendNOP_In $end
$var wire 1 T) SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 T) q $end
$var wire 1 W) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 p% SgnExt [15] $end
$var wire 1 q% SgnExt [14] $end
$var wire 1 r% SgnExt [13] $end
$var wire 1 s% SgnExt [12] $end
$var wire 1 t% SgnExt [11] $end
$var wire 1 u% SgnExt [10] $end
$var wire 1 v% SgnExt [9] $end
$var wire 1 w% SgnExt [8] $end
$var wire 1 x% SgnExt [7] $end
$var wire 1 y% SgnExt [6] $end
$var wire 1 z% SgnExt [5] $end
$var wire 1 {% SgnExt [4] $end
$var wire 1 |% SgnExt [3] $end
$var wire 1 }% SgnExt [2] $end
$var wire 1 ~% SgnExt [1] $end
$var wire 1 !& SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 >@ MuxImmSrc [15] $end
$var wire 1 ?@ MuxImmSrc [14] $end
$var wire 1 @@ MuxImmSrc [13] $end
$var wire 1 A@ MuxImmSrc [12] $end
$var wire 1 B@ MuxImmSrc [11] $end
$var wire 1 C@ MuxImmSrc [10] $end
$var wire 1 D@ MuxImmSrc [9] $end
$var wire 1 E@ MuxImmSrc [8] $end
$var wire 1 F@ MuxImmSrc [7] $end
$var wire 1 G@ MuxImmSrc [6] $end
$var wire 1 H@ MuxImmSrc [5] $end
$var wire 1 I@ MuxImmSrc [4] $end
$var wire 1 J@ MuxImmSrc [3] $end
$var wire 1 K@ MuxImmSrc [2] $end
$var wire 1 L@ MuxImmSrc [1] $end
$var wire 1 M@ MuxImmSrc [0] $end
$var wire 1 N@ adderOut [15] $end
$var wire 1 O@ adderOut [14] $end
$var wire 1 P@ adderOut [13] $end
$var wire 1 Q@ adderOut [12] $end
$var wire 1 R@ adderOut [11] $end
$var wire 1 S@ adderOut [10] $end
$var wire 1 T@ adderOut [9] $end
$var wire 1 U@ adderOut [8] $end
$var wire 1 V@ adderOut [7] $end
$var wire 1 W@ adderOut [6] $end
$var wire 1 X@ adderOut [5] $end
$var wire 1 Y@ adderOut [4] $end
$var wire 1 Z@ adderOut [3] $end
$var wire 1 [@ adderOut [2] $end
$var wire 1 \@ adderOut [1] $end
$var wire 1 ]@ adderOut [0] $end
$var wire 1 ^@ MuxBranchSrc [15] $end
$var wire 1 _@ MuxBranchSrc [14] $end
$var wire 1 `@ MuxBranchSrc [13] $end
$var wire 1 a@ MuxBranchSrc [12] $end
$var wire 1 b@ MuxBranchSrc [11] $end
$var wire 1 c@ MuxBranchSrc [10] $end
$var wire 1 d@ MuxBranchSrc [9] $end
$var wire 1 e@ MuxBranchSrc [8] $end
$var wire 1 f@ MuxBranchSrc [7] $end
$var wire 1 g@ MuxBranchSrc [6] $end
$var wire 1 h@ MuxBranchSrc [5] $end
$var wire 1 i@ MuxBranchSrc [4] $end
$var wire 1 j@ MuxBranchSrc [3] $end
$var wire 1 k@ MuxBranchSrc [2] $end
$var wire 1 l@ MuxBranchSrc [1] $end
$var wire 1 m@ MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 >@ B [15] $end
$var wire 1 ?@ B [14] $end
$var wire 1 @@ B [13] $end
$var wire 1 A@ B [12] $end
$var wire 1 B@ B [11] $end
$var wire 1 C@ B [10] $end
$var wire 1 D@ B [9] $end
$var wire 1 E@ B [8] $end
$var wire 1 F@ B [7] $end
$var wire 1 G@ B [6] $end
$var wire 1 H@ B [5] $end
$var wire 1 I@ B [4] $end
$var wire 1 J@ B [3] $end
$var wire 1 K@ B [2] $end
$var wire 1 L@ B [1] $end
$var wire 1 M@ B [0] $end
$var wire 1 N@ S [15] $end
$var wire 1 O@ S [14] $end
$var wire 1 P@ S [13] $end
$var wire 1 Q@ S [12] $end
$var wire 1 R@ S [11] $end
$var wire 1 S@ S [10] $end
$var wire 1 T@ S [9] $end
$var wire 1 U@ S [8] $end
$var wire 1 V@ S [7] $end
$var wire 1 W@ S [6] $end
$var wire 1 X@ S [5] $end
$var wire 1 Y@ S [4] $end
$var wire 1 Z@ S [3] $end
$var wire 1 [@ S [2] $end
$var wire 1 \@ S [1] $end
$var wire 1 ]@ S [0] $end
$var wire 1 n@ Cout $end
$var wire 1 o@ Cout0 $end
$var wire 1 p@ Cout1 $end
$var wire 1 q@ Cout2 $end
$var wire 1 r@ Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 J@ B [3] $end
$var wire 1 K@ B [2] $end
$var wire 1 L@ B [1] $end
$var wire 1 M@ B [0] $end
$var wire 1 r@ Cin $end
$var wire 1 Z@ S [3] $end
$var wire 1 [@ S [2] $end
$var wire 1 \@ S [1] $end
$var wire 1 ]@ S [0] $end
$var wire 1 o@ Cout $end
$var wire 1 s@ Cout0 $end
$var wire 1 t@ Cout1 $end
$var wire 1 u@ Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 M@ B $end
$var wire 1 r@ Cin $end
$var wire 1 ]@ S $end
$var wire 1 s@ Cout $end
$var wire 1 v@ xor_AB $end
$var wire 1 w@ xor_ABCin $end
$var wire 1 x@ NAND_AB $end
$var wire 1 y@ not_NAND_AB $end
$var wire 1 z@ NAND_Cin_xor_AB $end
$var wire 1 {@ not_NAND_Cin_xor_AB $end
$var wire 1 |@ NOR_2NAND $end
$var wire 1 }@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 v@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 v@ in1 $end
$var wire 1 r@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 M@ in2 $end
$var wire 1 x@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 x@ in1 $end
$var wire 1 y@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r@ in1 $end
$var wire 1 v@ in2 $end
$var wire 1 z@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 z@ in1 $end
$var wire 1 {@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 y@ in1 $end
$var wire 1 {@ in2 $end
$var wire 1 |@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 |@ in1 $end
$var wire 1 }@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 L@ B $end
$var wire 1 s@ Cin $end
$var wire 1 \@ S $end
$var wire 1 t@ Cout $end
$var wire 1 ~@ xor_AB $end
$var wire 1 !A xor_ABCin $end
$var wire 1 "A NAND_AB $end
$var wire 1 #A not_NAND_AB $end
$var wire 1 $A NAND_Cin_xor_AB $end
$var wire 1 %A not_NAND_Cin_xor_AB $end
$var wire 1 &A NOR_2NAND $end
$var wire 1 'A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 ~@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ~@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 !A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 L@ in2 $end
$var wire 1 "A out $end
$upscope $end

$scope module not1 $end
$var wire 1 "A in1 $end
$var wire 1 #A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s@ in1 $end
$var wire 1 ~@ in2 $end
$var wire 1 $A out $end
$upscope $end

$scope module not2 $end
$var wire 1 $A in1 $end
$var wire 1 %A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 #A in1 $end
$var wire 1 %A in2 $end
$var wire 1 &A out $end
$upscope $end

$scope module not3 $end
$var wire 1 &A in1 $end
$var wire 1 'A out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 K@ B $end
$var wire 1 t@ Cin $end
$var wire 1 [@ S $end
$var wire 1 u@ Cout $end
$var wire 1 (A xor_AB $end
$var wire 1 )A xor_ABCin $end
$var wire 1 *A NAND_AB $end
$var wire 1 +A not_NAND_AB $end
$var wire 1 ,A NAND_Cin_xor_AB $end
$var wire 1 -A not_NAND_Cin_xor_AB $end
$var wire 1 .A NOR_2NAND $end
$var wire 1 /A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 (A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 (A in1 $end
$var wire 1 t@ in2 $end
$var wire 1 )A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 K@ in2 $end
$var wire 1 *A out $end
$upscope $end

$scope module not1 $end
$var wire 1 *A in1 $end
$var wire 1 +A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t@ in1 $end
$var wire 1 (A in2 $end
$var wire 1 ,A out $end
$upscope $end

$scope module not2 $end
$var wire 1 ,A in1 $end
$var wire 1 -A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 +A in1 $end
$var wire 1 -A in2 $end
$var wire 1 .A out $end
$upscope $end

$scope module not3 $end
$var wire 1 .A in1 $end
$var wire 1 /A out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 J@ B $end
$var wire 1 u@ Cin $end
$var wire 1 Z@ S $end
$var wire 1 o@ Cout $end
$var wire 1 0A xor_AB $end
$var wire 1 1A xor_ABCin $end
$var wire 1 2A NAND_AB $end
$var wire 1 3A not_NAND_AB $end
$var wire 1 4A NAND_Cin_xor_AB $end
$var wire 1 5A not_NAND_Cin_xor_AB $end
$var wire 1 6A NOR_2NAND $end
$var wire 1 7A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 0A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 0A in1 $end
$var wire 1 u@ in2 $end
$var wire 1 1A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 J@ in2 $end
$var wire 1 2A out $end
$upscope $end

$scope module not1 $end
$var wire 1 2A in1 $end
$var wire 1 3A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 u@ in1 $end
$var wire 1 0A in2 $end
$var wire 1 4A out $end
$upscope $end

$scope module not2 $end
$var wire 1 4A in1 $end
$var wire 1 5A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 3A in1 $end
$var wire 1 5A in2 $end
$var wire 1 6A out $end
$upscope $end

$scope module not3 $end
$var wire 1 6A in1 $end
$var wire 1 7A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 F@ B [3] $end
$var wire 1 G@ B [2] $end
$var wire 1 H@ B [1] $end
$var wire 1 I@ B [0] $end
$var wire 1 o@ Cin $end
$var wire 1 V@ S [3] $end
$var wire 1 W@ S [2] $end
$var wire 1 X@ S [1] $end
$var wire 1 Y@ S [0] $end
$var wire 1 p@ Cout $end
$var wire 1 8A Cout0 $end
$var wire 1 9A Cout1 $end
$var wire 1 :A Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 I@ B $end
$var wire 1 o@ Cin $end
$var wire 1 Y@ S $end
$var wire 1 8A Cout $end
$var wire 1 ;A xor_AB $end
$var wire 1 <A xor_ABCin $end
$var wire 1 =A NAND_AB $end
$var wire 1 >A not_NAND_AB $end
$var wire 1 ?A NAND_Cin_xor_AB $end
$var wire 1 @A not_NAND_Cin_xor_AB $end
$var wire 1 AA NOR_2NAND $end
$var wire 1 BA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 ;A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;A in1 $end
$var wire 1 o@ in2 $end
$var wire 1 <A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 I@ in2 $end
$var wire 1 =A out $end
$upscope $end

$scope module not1 $end
$var wire 1 =A in1 $end
$var wire 1 >A out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o@ in1 $end
$var wire 1 ;A in2 $end
$var wire 1 ?A out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?A in1 $end
$var wire 1 @A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >A in1 $end
$var wire 1 @A in2 $end
$var wire 1 AA out $end
$upscope $end

$scope module not3 $end
$var wire 1 AA in1 $end
$var wire 1 BA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 H@ B $end
$var wire 1 8A Cin $end
$var wire 1 X@ S $end
$var wire 1 9A Cout $end
$var wire 1 CA xor_AB $end
$var wire 1 DA xor_ABCin $end
$var wire 1 EA NAND_AB $end
$var wire 1 FA not_NAND_AB $end
$var wire 1 GA NAND_Cin_xor_AB $end
$var wire 1 HA not_NAND_Cin_xor_AB $end
$var wire 1 IA NOR_2NAND $end
$var wire 1 JA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 CA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 CA in1 $end
$var wire 1 8A in2 $end
$var wire 1 DA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 H@ in2 $end
$var wire 1 EA out $end
$upscope $end

$scope module not1 $end
$var wire 1 EA in1 $end
$var wire 1 FA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 8A in1 $end
$var wire 1 CA in2 $end
$var wire 1 GA out $end
$upscope $end

$scope module not2 $end
$var wire 1 GA in1 $end
$var wire 1 HA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 FA in1 $end
$var wire 1 HA in2 $end
$var wire 1 IA out $end
$upscope $end

$scope module not3 $end
$var wire 1 IA in1 $end
$var wire 1 JA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 G@ B $end
$var wire 1 9A Cin $end
$var wire 1 W@ S $end
$var wire 1 :A Cout $end
$var wire 1 KA xor_AB $end
$var wire 1 LA xor_ABCin $end
$var wire 1 MA NAND_AB $end
$var wire 1 NA not_NAND_AB $end
$var wire 1 OA NAND_Cin_xor_AB $end
$var wire 1 PA not_NAND_Cin_xor_AB $end
$var wire 1 QA NOR_2NAND $end
$var wire 1 RA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 KA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 KA in1 $end
$var wire 1 9A in2 $end
$var wire 1 LA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 G@ in2 $end
$var wire 1 MA out $end
$upscope $end

$scope module not1 $end
$var wire 1 MA in1 $end
$var wire 1 NA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9A in1 $end
$var wire 1 KA in2 $end
$var wire 1 OA out $end
$upscope $end

$scope module not2 $end
$var wire 1 OA in1 $end
$var wire 1 PA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 NA in1 $end
$var wire 1 PA in2 $end
$var wire 1 QA out $end
$upscope $end

$scope module not3 $end
$var wire 1 QA in1 $end
$var wire 1 RA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 F@ B $end
$var wire 1 :A Cin $end
$var wire 1 V@ S $end
$var wire 1 p@ Cout $end
$var wire 1 SA xor_AB $end
$var wire 1 TA xor_ABCin $end
$var wire 1 UA NAND_AB $end
$var wire 1 VA not_NAND_AB $end
$var wire 1 WA NAND_Cin_xor_AB $end
$var wire 1 XA not_NAND_Cin_xor_AB $end
$var wire 1 YA NOR_2NAND $end
$var wire 1 ZA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 SA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 SA in1 $end
$var wire 1 :A in2 $end
$var wire 1 TA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 F@ in2 $end
$var wire 1 UA out $end
$upscope $end

$scope module not1 $end
$var wire 1 UA in1 $end
$var wire 1 VA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 :A in1 $end
$var wire 1 SA in2 $end
$var wire 1 WA out $end
$upscope $end

$scope module not2 $end
$var wire 1 WA in1 $end
$var wire 1 XA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 VA in1 $end
$var wire 1 XA in2 $end
$var wire 1 YA out $end
$upscope $end

$scope module not3 $end
$var wire 1 YA in1 $end
$var wire 1 ZA out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 B@ B [3] $end
$var wire 1 C@ B [2] $end
$var wire 1 D@ B [1] $end
$var wire 1 E@ B [0] $end
$var wire 1 p@ Cin $end
$var wire 1 R@ S [3] $end
$var wire 1 S@ S [2] $end
$var wire 1 T@ S [1] $end
$var wire 1 U@ S [0] $end
$var wire 1 q@ Cout $end
$var wire 1 [A Cout0 $end
$var wire 1 \A Cout1 $end
$var wire 1 ]A Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 E@ B $end
$var wire 1 p@ Cin $end
$var wire 1 U@ S $end
$var wire 1 [A Cout $end
$var wire 1 ^A xor_AB $end
$var wire 1 _A xor_ABCin $end
$var wire 1 `A NAND_AB $end
$var wire 1 aA not_NAND_AB $end
$var wire 1 bA NAND_Cin_xor_AB $end
$var wire 1 cA not_NAND_Cin_xor_AB $end
$var wire 1 dA NOR_2NAND $end
$var wire 1 eA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 ^A out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ^A in1 $end
$var wire 1 p@ in2 $end
$var wire 1 _A out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 E@ in2 $end
$var wire 1 `A out $end
$upscope $end

$scope module not1 $end
$var wire 1 `A in1 $end
$var wire 1 aA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p@ in1 $end
$var wire 1 ^A in2 $end
$var wire 1 bA out $end
$upscope $end

$scope module not2 $end
$var wire 1 bA in1 $end
$var wire 1 cA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 aA in1 $end
$var wire 1 cA in2 $end
$var wire 1 dA out $end
$upscope $end

$scope module not3 $end
$var wire 1 dA in1 $end
$var wire 1 eA out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 D@ B $end
$var wire 1 [A Cin $end
$var wire 1 T@ S $end
$var wire 1 \A Cout $end
$var wire 1 fA xor_AB $end
$var wire 1 gA xor_ABCin $end
$var wire 1 hA NAND_AB $end
$var wire 1 iA not_NAND_AB $end
$var wire 1 jA NAND_Cin_xor_AB $end
$var wire 1 kA not_NAND_Cin_xor_AB $end
$var wire 1 lA NOR_2NAND $end
$var wire 1 mA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 fA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 fA in1 $end
$var wire 1 [A in2 $end
$var wire 1 gA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 D@ in2 $end
$var wire 1 hA out $end
$upscope $end

$scope module not1 $end
$var wire 1 hA in1 $end
$var wire 1 iA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [A in1 $end
$var wire 1 fA in2 $end
$var wire 1 jA out $end
$upscope $end

$scope module not2 $end
$var wire 1 jA in1 $end
$var wire 1 kA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 iA in1 $end
$var wire 1 kA in2 $end
$var wire 1 lA out $end
$upscope $end

$scope module not3 $end
$var wire 1 lA in1 $end
$var wire 1 mA out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 C@ B $end
$var wire 1 \A Cin $end
$var wire 1 S@ S $end
$var wire 1 ]A Cout $end
$var wire 1 nA xor_AB $end
$var wire 1 oA xor_ABCin $end
$var wire 1 pA NAND_AB $end
$var wire 1 qA not_NAND_AB $end
$var wire 1 rA NAND_Cin_xor_AB $end
$var wire 1 sA not_NAND_Cin_xor_AB $end
$var wire 1 tA NOR_2NAND $end
$var wire 1 uA not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 nA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 nA in1 $end
$var wire 1 \A in2 $end
$var wire 1 oA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 C@ in2 $end
$var wire 1 pA out $end
$upscope $end

$scope module not1 $end
$var wire 1 pA in1 $end
$var wire 1 qA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \A in1 $end
$var wire 1 nA in2 $end
$var wire 1 rA out $end
$upscope $end

$scope module not2 $end
$var wire 1 rA in1 $end
$var wire 1 sA out $end
$upscope $end

$scope module nor1 $end
$var wire 1 qA in1 $end
$var wire 1 sA in2 $end
$var wire 1 tA out $end
$upscope $end

$scope module not3 $end
$var wire 1 tA in1 $end
$var wire 1 uA out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 B@ B $end
$var wire 1 ]A Cin $end
$var wire 1 R@ S $end
$var wire 1 q@ Cout $end
$var wire 1 vA xor_AB $end
$var wire 1 wA xor_ABCin $end
$var wire 1 xA NAND_AB $end
$var wire 1 yA not_NAND_AB $end
$var wire 1 zA NAND_Cin_xor_AB $end
$var wire 1 {A not_NAND_Cin_xor_AB $end
$var wire 1 |A NOR_2NAND $end
$var wire 1 }A not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 vA out $end
$upscope $end

$scope module xor2 $end
$var wire 1 vA in1 $end
$var wire 1 ]A in2 $end
$var wire 1 wA out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 B@ in2 $end
$var wire 1 xA out $end
$upscope $end

$scope module not1 $end
$var wire 1 xA in1 $end
$var wire 1 yA out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ]A in1 $end
$var wire 1 vA in2 $end
$var wire 1 zA out $end
$upscope $end

$scope module not2 $end
$var wire 1 zA in1 $end
$var wire 1 {A out $end
$upscope $end

$scope module nor1 $end
$var wire 1 yA in1 $end
$var wire 1 {A in2 $end
$var wire 1 |A out $end
$upscope $end

$scope module not3 $end
$var wire 1 |A in1 $end
$var wire 1 }A out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 >@ B [3] $end
$var wire 1 ?@ B [2] $end
$var wire 1 @@ B [1] $end
$var wire 1 A@ B [0] $end
$var wire 1 q@ Cin $end
$var wire 1 N@ S [3] $end
$var wire 1 O@ S [2] $end
$var wire 1 P@ S [1] $end
$var wire 1 Q@ S [0] $end
$var wire 1 n@ Cout $end
$var wire 1 ~A Cout0 $end
$var wire 1 !B Cout1 $end
$var wire 1 "B Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 A@ B $end
$var wire 1 q@ Cin $end
$var wire 1 Q@ S $end
$var wire 1 ~A Cout $end
$var wire 1 #B xor_AB $end
$var wire 1 $B xor_ABCin $end
$var wire 1 %B NAND_AB $end
$var wire 1 &B not_NAND_AB $end
$var wire 1 'B NAND_Cin_xor_AB $end
$var wire 1 (B not_NAND_Cin_xor_AB $end
$var wire 1 )B NOR_2NAND $end
$var wire 1 *B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 #B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 #B in1 $end
$var wire 1 q@ in2 $end
$var wire 1 $B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 A@ in2 $end
$var wire 1 %B out $end
$upscope $end

$scope module not1 $end
$var wire 1 %B in1 $end
$var wire 1 &B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q@ in1 $end
$var wire 1 #B in2 $end
$var wire 1 'B out $end
$upscope $end

$scope module not2 $end
$var wire 1 'B in1 $end
$var wire 1 (B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 &B in1 $end
$var wire 1 (B in2 $end
$var wire 1 )B out $end
$upscope $end

$scope module not3 $end
$var wire 1 )B in1 $end
$var wire 1 *B out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 @@ B $end
$var wire 1 ~A Cin $end
$var wire 1 P@ S $end
$var wire 1 !B Cout $end
$var wire 1 +B xor_AB $end
$var wire 1 ,B xor_ABCin $end
$var wire 1 -B NAND_AB $end
$var wire 1 .B not_NAND_AB $end
$var wire 1 /B NAND_Cin_xor_AB $end
$var wire 1 0B not_NAND_Cin_xor_AB $end
$var wire 1 1B NOR_2NAND $end
$var wire 1 2B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 +B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 +B in1 $end
$var wire 1 ~A in2 $end
$var wire 1 ,B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 @@ in2 $end
$var wire 1 -B out $end
$upscope $end

$scope module not1 $end
$var wire 1 -B in1 $end
$var wire 1 .B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ~A in1 $end
$var wire 1 +B in2 $end
$var wire 1 /B out $end
$upscope $end

$scope module not2 $end
$var wire 1 /B in1 $end
$var wire 1 0B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 .B in1 $end
$var wire 1 0B in2 $end
$var wire 1 1B out $end
$upscope $end

$scope module not3 $end
$var wire 1 1B in1 $end
$var wire 1 2B out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 ?@ B $end
$var wire 1 !B Cin $end
$var wire 1 O@ S $end
$var wire 1 "B Cout $end
$var wire 1 3B xor_AB $end
$var wire 1 4B xor_ABCin $end
$var wire 1 5B NAND_AB $end
$var wire 1 6B not_NAND_AB $end
$var wire 1 7B NAND_Cin_xor_AB $end
$var wire 1 8B not_NAND_Cin_xor_AB $end
$var wire 1 9B NOR_2NAND $end
$var wire 1 :B not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 3B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 3B in1 $end
$var wire 1 !B in2 $end
$var wire 1 4B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 ?@ in2 $end
$var wire 1 5B out $end
$upscope $end

$scope module not1 $end
$var wire 1 5B in1 $end
$var wire 1 6B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !B in1 $end
$var wire 1 3B in2 $end
$var wire 1 7B out $end
$upscope $end

$scope module not2 $end
$var wire 1 7B in1 $end
$var wire 1 8B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 6B in1 $end
$var wire 1 8B in2 $end
$var wire 1 9B out $end
$upscope $end

$scope module not3 $end
$var wire 1 9B in1 $end
$var wire 1 :B out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 >@ B $end
$var wire 1 "B Cin $end
$var wire 1 N@ S $end
$var wire 1 n@ Cout $end
$var wire 1 ;B xor_AB $end
$var wire 1 <B xor_ABCin $end
$var wire 1 =B NAND_AB $end
$var wire 1 >B not_NAND_AB $end
$var wire 1 ?B NAND_Cin_xor_AB $end
$var wire 1 @B not_NAND_Cin_xor_AB $end
$var wire 1 AB NOR_2NAND $end
$var wire 1 BB not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 >@ in2 $end
$var wire 1 ;B out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ;B in1 $end
$var wire 1 "B in2 $end
$var wire 1 <B out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 >@ in2 $end
$var wire 1 =B out $end
$upscope $end

$scope module not1 $end
$var wire 1 =B in1 $end
$var wire 1 >B out $end
$upscope $end

$scope module nand2 $end
$var wire 1 "B in1 $end
$var wire 1 ;B in2 $end
$var wire 1 ?B out $end
$upscope $end

$scope module not2 $end
$var wire 1 ?B in1 $end
$var wire 1 @B out $end
$upscope $end

$scope module nor1 $end
$var wire 1 >B in1 $end
$var wire 1 @B in2 $end
$var wire 1 AB out $end
$upscope $end

$scope module not3 $end
$var wire 1 AB in1 $end
$var wire 1 BB out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 CB enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 T) SendNOP_In $end
$var wire 1 U) SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end
$var wire 1 k% b_in $end
$var wire 1 `' b_out $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 U) q $end
$var wire 1 T) d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 `' q $end
$var wire 1 k% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end

$scope module btaken[15] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[14] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[13] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[12] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[11] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[10] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[9] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[8] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[7] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[6] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[5] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[4] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[3] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[2] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[1] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module btaken[0] $end
$var wire 1 d' q $end
$var wire 1 *% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[15] $end
$var wire 1 )( q $end
$var wire 1 w' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[14] $end
$var wire 1 *( q $end
$var wire 1 x' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[13] $end
$var wire 1 +( q $end
$var wire 1 y' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[12] $end
$var wire 1 ,( q $end
$var wire 1 z' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[11] $end
$var wire 1 -( q $end
$var wire 1 {' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[10] $end
$var wire 1 .( q $end
$var wire 1 |' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[9] $end
$var wire 1 /( q $end
$var wire 1 }' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[8] $end
$var wire 1 0( q $end
$var wire 1 ~' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[7] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[6] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[5] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[4] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[3] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[2] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[1] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module cycles[0] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1:!
1;!
x=!
1i)
1j)
0AC
0@C
0?C
0>C
0=C
0<C
0;C
0:C
09C
08C
07C
06C
05C
04C
03C
02C
0m)
0n)
0QC
0PC
0OC
0NC
0MC
0LC
0KC
0JC
0IC
0HC
0GC
0FC
0EC
0DC
0CC
0BC
0o)
0{+
0z+
0y+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
0q+
0p+
0o+
0n+
0m+
0l+
1h+
b0 i+
0-,
0,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
0~+
0}+
0|+
b100000000000 =,
b100000000000 <,
b100000000000 ;,
b100000000000 :,
b100000000000 9,
b100000000000 8,
b100000000000 7,
b100000000000 6,
b100000000000 5,
b100000000000 4,
b100000000000 3,
b100000000000 2,
b100000000000 1,
b100000000000 0,
b100000000000 /,
b100000000000 .,
0M,
0L,
0K,
0J,
0I,
0H,
0G,
0F,
0E,
0D,
0C,
0B,
0A,
0@,
0?,
0>,
x0-
x1-
bx 2-
x3-
x4-
bx 5-
bx 6-
x7-
x8-
x9-
x:-
x;-
x<-
bx =-
x>-
x?-
bx @-
bx A-
0//
0-/
0+/
0)/
0'/
0%/
0#/
0!/
0}.
0{.
0y.
0w.
0u.
0s.
0q.
0o.
0P/
0N/
0L/
0J/
0H/
0F/
0D/
0B/
0@/
0>/
0</
0:/
08/
06/
04/
02/
0q/
0o/
0m/
0k/
0i/
0g/
0e/
0c/
0a/
0_/
0]/
0[/
0Y/
0W/
0U/
0S/
040
020
000
0.0
0,0
0*0
0(0
0&0
0$0
0"0
0~/
0|/
0z/
0x/
0v/
0t/
0U0
0S0
0Q0
0O0
0M0
0K0
0I0
0G0
0E0
0C0
0A0
0?0
0=0
0;0
090
070
0v0
0t0
0r0
0p0
0n0
0l0
0j0
0h0
0f0
0d0
0b0
0`0
0^0
0\0
0Z0
0X0
091
071
051
031
011
0/1
0-1
0+1
0)1
0'1
0%1
0#1
0!1
0}0
0{0
0y0
0Z1
0X1
0V1
0T1
0R1
0P1
0N1
0L1
0J1
0H1
0F1
0D1
0B1
0@1
0>1
0<1
0u1
0t1
0i1
0j1
0x1
0w1
0v1
0z1
0y1
0k1
0l1
0}1
0|1
0{1
0m1
0/2
0.2
0-2
0,2
0+2
0*2
0)2
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
0~1
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
032
022
012
002
0O2
0N2
0M2
0L2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
0D2
0C2
0B2
0A2
0@2
0_2
0^2
0]2
0\2
0[2
0Z2
0Y2
0X2
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
0o2
0n2
0m2
0l2
0k2
0j2
0i2
0h2
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0`2
0n1
0o1
0p1
0q1
0!3
0~2
0}2
0|2
0{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0p2
0r1
0s1
0#3
0"3
033
023
013
003
0/3
0.3
0-3
0,3
0+3
0*3
0)3
0(3
0'3
0&3
0%3
0$3
063
053
043
0F?
0E?
0D?
0C?
0B?
0A?
0@?
0??
0>?
0=?
0<?
0;?
0:?
09?
08?
07?
0V?
0U?
0T?
0S?
0R?
0Q?
0P?
0O?
0N?
0M?
0L?
0K?
0J?
0I?
0H?
0G?
0/?
00?
01?
02?
03?
04?
0f?
0e?
0d?
0c?
0b?
0a?
0`?
0_?
0^?
0]?
0\?
0[?
0Z?
0Y?
0X?
0W?
0v?
0u?
0t?
0s?
0r?
0q?
0p?
0o?
0n?
0m?
0l?
0k?
0j?
0i?
0h?
0g?
0(@
0'@
0&@
0%@
0$@
0#@
0"@
0!@
0~?
0}?
0|?
0{?
0z?
0y?
0x?
0w?
08@
07@
06@
05@
04@
03@
02@
01@
00@
0/@
0.@
0-@
0,@
0+@
0*@
0)@
05?
06?
0:@
09@
0=@
0<@
0;@
1DB
b0 EB
0LB
0KB
0\B
0[B
0ZB
0YB
0XB
0WB
0VB
0UB
0TB
0SB
0RB
0QB
0PB
0OB
0NB
0MB
0lB
0kB
0jB
0iB
0hB
0gB
0fB
0eB
0dB
0cB
0bB
0aB
0`B
0_B
0^B
0]B
0|B
0{B
0zB
0yB
0xB
0wB
0vB
0uB
0tB
0sB
0rB
0qB
0pB
0oB
0nB
0mB
0.C
0-C
0,C
0+C
0*C
0)C
0(C
0'C
0&C
0%C
0$C
0#C
0"C
0!C
0~B
0}B
0HB
0IB
01C
00C
0/C
0JB
b10000 B-
b10000 m.
b10000 0/
b10000 Q/
b10000 r/
b10000 50
b10000 V0
b10000 w0
b10000 :1
b10000 #5
b100 $5
b10 %5
b10000 l5
b100 m5
b10000 @6
b100 A6
b10000 r6
b100 s6
b10000 F7
b100 G7
b10000 x7
b11 y7
b10000 #9
b100 $9
b10 %9
b10000 f9
b100 g9
b10000 ::
b100 ;:
b10000 l:
b100 m:
b10000 @;
b100 A;
b10000 r;
b10 s;
b10000 t;
b100 R<
b100 -=
b100 f=
b100 A>
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 <!
b1 l)
bx j+
b10000000000000000 k+
bx FB
b10000000000000000 GB
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x)!
x*!
x+!
x,!
x-!
17!
x8!
19!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
xN!
z^!
z]!
z\!
z[!
zZ!
zY!
zX!
zW!
zV!
zU!
zT!
zS!
zR!
zQ!
zP!
zO!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
xQ"
xR"
xT"
xS"
xV"
xU"
xW"
xX"
xY"
xZ"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xa$
x`$
x_$
xd$
xc$
xb$
xe$
xf$
xh$
xg$
xj$
xi$
xk$
xl$
xm$
xn$
xq$
xp$
xo$
xt$
xs$
xr$
xu$
xv$
xw$
xx$
xz$
xy$
x|$
x{$
x}$
x~$
x!%
x"%
x%%
x$%
x#%
x(%
x'%
x&%
x)%
x*%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xk%
xl%
xm%
xn%
xo%
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xR&
xT&
xS&
xW&
xV&
xU&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x;'
x:'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
xL'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
x_'
x^'
x]'
x`'
1a'
xb'
xc'
xd'
zt'
zs'
zr'
zq'
zp'
zo'
zn'
zm'
zl'
zk'
zj'
zi'
zh'
zg'
zf'
ze'
xu'
xv'
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
x8(
x7(
x6(
x5(
x4(
x3(
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
xH(
xG(
xF(
xE(
xD(
xC(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
xX(
xW(
xV(
xU(
xT(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
zh(
zg(
zf(
ze(
zd(
zc(
zb(
za(
z`(
z_(
z^(
z](
z\(
z[(
zZ(
zY(
xx(
xw(
xv(
xu(
xt(
xs(
xr(
xq(
xp(
xo(
xn(
xm(
xl(
xk(
xj(
xi(
x*)
x))
x()
x')
x&)
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x{(
xz(
xy(
x+)
x,)
x-)
x.)
x/)
x?)
x>)
x=)
x<)
x;)
x:)
x9)
x8)
x7)
x6)
x5)
x4)
x3)
x2)
x1)
x0)
x@)
xP)
xO)
xN)
xM)
xL)
xK)
xJ)
xI)
xH)
xG)
xF)
xE)
xD)
xC)
xB)
xA)
x#*
x$*
x%*
0&*
0'*
x(*
x)*
x**
x+*
1,*
0-*
1.*
0/*
10*
01*
x2*
x3*
x4*
x5*
16*
07*
x8*
x9*
x:*
x;*
1<*
0=*
x>*
x?*
x@*
xA*
xB*
xC*
1D*
0E*
xF*
xG*
xH*
xI*
xJ*
xK*
xL*
xM*
xN*
1O*
0P*
xQ*
xR*
xS*
xT*
xU*
xV*
1W*
0X*
xY*
xZ*
x[*
x\*
x]*
x^*
1_*
0`*
xa*
xb*
xc*
xd*
xe*
xf*
1g*
0h*
xi*
xj*
xk*
xl*
xm*
xn*
xo*
xp*
xq*
1r*
0s*
xt*
xu*
xv*
xw*
xx*
xy*
1z*
0{*
x|*
x}*
x~*
x!+
x"+
x#+
1$+
0%+
x&+
x'+
x(+
x)+
x*+
x++
1,+
0-+
x.+
x/+
x0+
x1+
x2+
x3+
x4+
x5+
x6+
17+
08+
x9+
x:+
x;+
x<+
x=+
x>+
1?+
0@+
xA+
xB+
xC+
xD+
xE+
xF+
1G+
0H+
xI+
xJ+
xK+
xL+
xM+
xN+
1O+
0P+
xQ+
xR+
xS+
xT+
xQ)
xR)
xS)
xT)
xU)
xV)
xW)
xX)
xh)
xg)
xf)
xe)
xd)
xc)
xb)
xa)
x`)
x_)
x^)
x])
x\)
x[)
xZ)
xY)
x],
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
xN,
xm,
xl,
xk,
xj,
xi,
0h,
0g,
0f,
0e,
0d,
0c,
0b,
0a,
0`,
0_,
0^,
x},
x|,
x{,
xz,
xy,
xx,
xw,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
x/-
x.-
x--
x,-
x+-
x*-
x)-
x(-
0'-
0&-
0%-
0$-
0#-
0"-
0!-
0~,
xC-
xD-
xE-
xF-
xG-
xH-
xI-
xJ-
xK-
xL-
xM-
xN-
xO-
xP-
xQ-
xR-
xS-
xT-
xU-
xV-
xW-
xX-
xY-
xZ-
x[-
x\-
x]-
x^-
x_-
x`-
xa-
xb-
xc-
xd-
xe-
xf-
xg-
xh-
xi-
xj-
xk-
xl-
xm-
xn-
xo-
xp-
xq-
xr-
xs-
xt-
xu-
xv-
xw-
xx-
xy-
xz-
x{-
x|-
x}-
x~-
x!.
x".
x#.
x$.
x%.
x&.
x'.
x(.
x).
x*.
x+.
x,.
x-.
x..
x/.
x0.
x1.
x2.
x3.
x4.
x5.
x6.
x7.
x8.
x9.
x:.
x;.
x<.
x=.
x>.
x?.
x@.
xA.
xB.
xC.
xD.
xE.
xF.
xG.
xH.
xI.
xJ.
xK.
xL.
xM.
xN.
xO.
xP.
xQ.
xR.
xS.
xT.
xU.
xV.
xW.
xX.
xY.
xZ.
x[.
x\.
x].
x^.
x_.
x`.
xa.
xb.
xc.
xd.
xe.
xf.
xg.
xh.
xi.
xj.
xk.
xl.
x[1
z\1
x^1
xa1
x`1
x_1
xd1
xc1
xb1
xe1
xf1
xg1
xF3
xE3
xD3
xC3
xB3
xA3
x@3
x?3
x>3
x=3
x<3
x;3
x:3
x93
x83
x73
0V3
0U3
0T3
0S3
0R3
0Q3
0P3
0O3
xN3
xM3
xL3
xK3
xJ3
xI3
xH3
xG3
xW3
0;5
0:5
095
085
075
065
055
045
x35
x25
x15
x05
x/5
x.5
x-5
x,5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xB5
xA5
x@5
x?5
x>5
x=5
x<5
x[5
xZ5
xY5
xX5
xW5
xV5
xU5
xT5
0S5
0R5
0Q5
0P5
0O5
0N5
0M5
0L5
xk5
xj5
xi5
xh5
xg5
xf5
xe5
xd5
xc5
xb5
xa5
x`5
x_5
x^5
x]5
x\5
x}5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
xr5
xq5
xp5
xo5
xn5
x/6
x.6
x-6
x,6
x+6
x*6
x)6
x(6
x'6
x&6
x%6
x$6
x#6
x"6
x!6
x~5
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
x56
x46
x36
x26
x16
x06
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xE6
xD6
xC6
xB6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xT6
xS6
xR6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
xe6
xd6
xc6
xb6
x%7
x$7
x#7
x"7
x!7
x~6
x}6
x|6
x{6
xz6
xy6
xx6
xw6
xv6
xu6
xt6
x57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
x*7
x)7
x(7
x'7
x&7
xE7
xD7
xC7
xB7
xA7
x@7
x?7
x>7
x=7
x<7
x;7
x:7
x97
x87
x77
x67
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xJ7
xI7
xH7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
xi7
xh7
xg3
xf3
xe3
xd3
xc3
xb3
xa3
x`3
x_3
x^3
x]3
x\3
x[3
xZ3
xY3
xX3
xh3
xi3
xj3
xk3
x-8
x,8
x+8
x*8
x)8
x(8
x'8
x&8
x%8
x$8
x#8
x"8
x!8
x~7
x}7
x|7
x=8
x<8
x;8
x:8
x98
x88
x78
x68
x58
x48
x38
x28
x18
x08
x/8
x.8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xA8
x@8
x?8
x>8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xQ8
xP8
xO8
xN8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
xa8
x`8
x_8
x^8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
xt8
xs8
xr8
xq8
xp8
xo8
xn8
x59
x49
x39
x29
x19
x09
x/9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
x&9
xE9
xD9
xC9
xB9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
x89
x79
x69
xU9
xT9
xS9
xR9
xQ9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
xI9
xH9
xG9
xF9
xe9
xd9
xc9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
xY9
xX9
xW9
xV9
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
xj9
xi9
xh9
x):
x(:
x':
x&:
x%:
x$:
x#:
x":
x!:
x~9
x}9
x|9
x{9
xz9
xy9
xx9
x9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
x/:
x.:
x-:
x,:
x+:
x*:
xK:
xJ:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
x?:
x>:
x=:
x<:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xN:
xM:
xL:
xk:
xj:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x^:
x]:
x\:
x}:
x|:
x{:
xz:
xy:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
xo:
xn:
x/;
x.;
x-;
x,;
x+;
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x~:
x?;
x>;
x=;
x<;
x;;
x:;
x9;
x8;
x7;
x6;
x5;
x4;
x3;
x2;
x1;
x0;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
xC;
xB;
xa;
x`;
x_;
x^;
x];
x\;
x[;
xZ;
xY;
xX;
xW;
xV;
xU;
xT;
xS;
xR;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
xe;
xd;
xc;
xb;
x~8
x!9
x&<
x%<
x$<
x#<
x"<
x!<
x~;
x};
x|;
x{;
xz;
xy;
xx;
xw;
xv;
xu;
x*<
x)<
x(<
x'<
x:<
x9<
x8<
x7<
x6<
x5<
x4<
x3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x+<
x><
x=<
x<<
x;<
xA<
x@<
x?<
xQ<
xP<
xO<
xN<
xM<
xL<
xK<
xJ<
xI<
xH<
xG<
xF<
xE<
xD<
xC<
xB<
xW<
xV<
xU<
xT<
x[<
xZ<
xY<
xX<
x^<
x]<
x\<
xb<
xa<
x`<
x_<
xd<
xe<
xf<
xg<
xh<
xi<
xj<
xk<
zl<
xn<
xo<
xp<
xq<
xr<
xs<
xt<
xu<
zv<
xx<
xy<
xz<
x{<
x|<
x}<
x~<
x!=
z"=
x$=
x%=
x&=
x'=
x(=
x)=
x*=
x+=
z,=
x2=
x1=
x0=
x/=
x6=
x5=
x4=
x3=
x9=
x8=
x7=
x==
x<=
x;=
x:=
x?=
x@=
xA=
xB=
xC=
xD=
xE=
xF=
zG=
xI=
xJ=
xK=
xL=
xM=
xN=
xO=
xP=
zQ=
xS=
xT=
xU=
xV=
xW=
xX=
xY=
xZ=
z[=
x]=
x^=
x_=
x`=
xa=
xb=
xc=
xd=
ze=
xk=
xj=
xi=
xh=
xo=
xn=
xm=
xl=
xr=
xq=
xp=
xv=
xu=
xt=
xs=
xx=
xy=
xz=
x{=
x|=
x}=
x~=
x!>
z">
x$>
x%>
x&>
x'>
x(>
x)>
x*>
x+>
z,>
x.>
x/>
x0>
x1>
x2>
x3>
x4>
x5>
z6>
x8>
x9>
x:>
x;>
x<>
x=>
x>>
x?>
z@>
xF>
xE>
xD>
xC>
xJ>
xI>
xH>
xG>
xM>
xL>
xK>
xQ>
xP>
xO>
xN>
xS>
xT>
xU>
xV>
xW>
xX>
xY>
xZ>
z[>
x]>
x^>
x_>
x`>
xa>
xb>
xc>
xd>
ze>
xg>
xh>
xi>
xj>
xk>
xl>
xm>
xn>
zo>
xq>
xr>
xs>
xt>
xu>
xv>
xw>
xx>
zy>
x"9
x,?
xl3
xn3
xm3
xo3
x!4
0~3
0}3
0|3
0{3
0z3
0y3
0x3
0w3
0v3
0u3
0t3
0s3
0r3
0q3
0p3
x#4
x"4
x34
024
014
004
0/4
0.4
0-4
0,4
0+4
0*4
0)4
0(4
0'4
0&4
0%4
0$4
x54
x44
x64
xF4
0E4
0D4
0C4
0B4
0A4
0@4
0?4
0>4
0=4
0<4
0;4
0:4
094
084
074
xG4
xI4
xH4
xY4
0X4
0W4
0V4
0U4
0T4
0S4
0R4
0Q4
0P4
0O4
0N4
0M4
0L4
0K4
0J4
x[4
xZ4
x\4
x]4
x^4
x_4
x-?
x`4
x.?
xp4
xo4
xn4
xm4
xl4
xk4
xj4
xi4
xh4
xg4
xf4
xe4
xd4
xc4
xb4
xa4
x"5
x!5
x~4
x}4
x|4
x{4
xz4
xy4
xx4
xw4
xv4
xu4
xt4
xs4
xr4
xq4
xM@
xL@
xK@
xJ@
xI@
xH@
xG@
xF@
xE@
xD@
xC@
xB@
xA@
x@@
x?@
x>@
x]@
x\@
x[@
xZ@
xY@
xX@
xW@
xV@
xU@
xT@
xS@
xR@
xQ@
xP@
xO@
xN@
xo@
xp@
xq@
0r@
xs@
xt@
xu@
xv@
xw@
xx@
xy@
1z@
0{@
x|@
x}@
x~@
x!A
x"A
x#A
x$A
x%A
x&A
x'A
x(A
x)A
x*A
x+A
x,A
x-A
x.A
x/A
x0A
x1A
x2A
x3A
x4A
x5A
x6A
x7A
x8A
x9A
x:A
x;A
x<A
x=A
x>A
x?A
x@A
xAA
xBA
xCA
xDA
xEA
xFA
xGA
xHA
xIA
xJA
xKA
xLA
xMA
xNA
xOA
xPA
xQA
xRA
xSA
xTA
xUA
xVA
xWA
xXA
xYA
xZA
x[A
x\A
x]A
x^A
x_A
x`A
xaA
xbA
xcA
xdA
xeA
xfA
xgA
xhA
xiA
xjA
xkA
xlA
xmA
xnA
xoA
xpA
xqA
xrA
xsA
xtA
xuA
xvA
xwA
xxA
xyA
xzA
x{A
x|A
x}A
x~A
x!B
x"B
x#B
x$B
x%B
x&B
x'B
x(B
x)B
x*B
x+B
x,B
x-B
x.B
x/B
x0B
x1B
x2B
x3B
x4B
x5B
x6B
x7B
x8B
x9B
x:B
x;B
x<B
x=B
x>B
x?B
x@B
xAB
xBB
xm@
xl@
xk@
xj@
xi@
xh@
xg@
xf@
xe@
xd@
xc@
xb@
xa@
x`@
x_@
x^@
x6!
x5!
xh1
xk)
0g+
0f+
1e+
0d+
0c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
0[+
0Z+
0Y+
0X+
0W+
0V+
0U+
0!*
1~)
0})
0|)
0{)
0z)
0y)
0x)
0w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
x"*
x./
x,/
x*/
x(/
x&/
x$/
x"/
x~.
x|.
xz.
xx.
xv.
xt.
xr.
xp.
xn.
xO/
xM/
xK/
xI/
xG/
xE/
xC/
xA/
x?/
x=/
x;/
x9/
x7/
x5/
x3/
x1/
xp/
xn/
xl/
xj/
xh/
xf/
xd/
xb/
x`/
x^/
x\/
xZ/
xX/
xV/
xT/
xR/
x30
x10
x/0
x-0
x+0
x)0
x'0
x%0
x#0
x!0
x}/
x{/
xy/
xw/
xu/
xs/
xT0
xR0
xP0
xN0
xL0
xJ0
xH0
xF0
xD0
xB0
x@0
x>0
x<0
x:0
x80
x60
xu0
xs0
xq0
xo0
xm0
xk0
xi0
xg0
xe0
xc0
xa0
x_0
x]0
x[0
xY0
xW0
x81
x61
x41
x21
x01
x.1
x,1
x*1
x(1
x&1
x$1
x"1
x~0
x|0
xz0
xx0
xY1
xW1
xU1
xS1
xQ1
xO1
xM1
xK1
xI1
xG1
xE1
xC1
xA1
x?1
x=1
x;1
z]1
x{7
xz7
1+5
0*5
0)5
0(5
0'5
1&5
0+?
0*?
0)?
0(?
0'?
0&?
0%?
0$?
0#?
0"?
0!?
0~>
0}>
0|>
0{>
0z>
xS<
xc<
xm<
xw<
x#=
x.=
x>=
xH=
xR=
x\=
xg=
xw=
x#>
x->
x7>
xB>
xR>
x\>
xf>
xp>
1CB
xn@
$end
#1
0`'
0]'
0^'
0_'
0U)
0L'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0*'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0['
0\'
0h&
0i&
0j&
0k&
0l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0:'
0;'
0U&
0V&
0W&
0S&
0T&
0T)
0R&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
0P&
0Q&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
0@&
0A&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
00&
01&
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0~%
0!&
0o%
0n%
0m%
0l%
0k%
0*%
0[%
0\%
0]%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
0i%
0j%
0;%
0<%
0=%
0>%
0?%
0@%
0A%
0B%
0C%
0D%
0E%
0F%
0G%
0H%
0I%
0J%
0&%
0'%
0(%
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0{$
0|$
0S)
0"%
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0~$
0x$
0v$
0f$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
0R"
0r$
0s$
0t$
0n$
0l$
0i$
0j$
0b$
0c$
0d$
0Z"
0X"
0U"
0V"
0R-
0Q-
0P-
0O-
0N-
0M-
0L-
0K-
0J-
0I-
0H-
0G-
0F-
0E-
0D-
0C-
0b-
0a-
0`-
0_-
0^-
0]-
0\-
0[-
0Z-
0Y-
0X-
0W-
0V-
0U-
0T-
0S-
0r-
0q-
0p-
0o-
0n-
0m-
0l-
0k-
0j-
0i-
0h-
0g-
0f-
0e-
0d-
0c-
0$.
0#.
0".
0!.
0~-
0}-
0|-
0{-
0z-
0y-
0x-
0w-
0v-
0u-
0t-
0s-
04.
03.
02.
01.
00.
0/.
0..
0-.
0,.
0+.
0*.
0).
0(.
0'.
0&.
0%.
0D.
0C.
0B.
0A.
0@.
0?.
0>.
0=.
0<.
0;.
0:.
09.
08.
07.
06.
05.
0T.
0S.
0R.
0Q.
0P.
0O.
0N.
0M.
0L.
0K.
0J.
0I.
0H.
0G.
0F.
0E.
0d.
0c.
0b.
0a.
0`.
0_.
0^.
0].
0\.
0[.
0Z.
0Y.
0X.
0W.
0V.
0U.
0y(
0z(
0{(
0|(
0}(
0~(
0!)
0")
0#)
0$)
0%)
0&)
0')
0()
0))
0*)
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0i(
0j(
0k(
0l(
0m(
0n(
0o(
0p(
0q(
0r(
0s(
0t(
0u(
0v(
0w(
0x(
0.)
0)(
0*(
0+(
0,(
0-(
0.(
0/(
00(
01(
02(
03(
04(
05(
06(
07(
08(
0v'
0u'
0d'
0**
12*
14*
0:*
0B*
0M*
0U*
0]*
0e*
0p*
0x*
0"+
0*+
05+
0=+
0E+
0M+
0o!
0p!
0q!
0r!
1s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
0{7
0z7
0W3
0c'
0)%
0W)
0,)
0-)
1x@
1"A
1*A
12A
1=A
1EA
1MA
1UA
1`A
1hA
1pA
1xA
1%B
1-B
15B
1=B
0>B
06B
0.B
0&B
0yA
0qA
0iA
0aA
0VA
0NA
0FA
0>A
03A
0+A
0#A
0y@
0[1
1Q+
1I+
1A+
19+
1.+
1&+
1|*
1t*
1i*
1a*
1Y*
1Q*
1F*
1>*
05*
13*
0+*
00"
1/"
18*
0?*
0G*
0R*
0Z*
0b*
0j*
0u*
0}*
0'+
0/+
0:+
0B+
0J+
0R+
1|@
0}@
1S+
1K+
1C+
1;+
10+
1(+
1~*
1v*
1k*
1c*
1[*
1S*
1H*
1@*
09*
0(*
0A*
0I*
0T*
0\*
0d*
0l*
0w*
0!+
0)+
01+
0<+
0D+
0L+
0T+
0s@
1$A
0"*
04+
03+
02+
0%*
0o*
0n*
0m*
0$*
0L*
0K*
0J*
0#*
0)*
0;*
0."
0C*
0N*
0V*
0^*
0f*
0q*
0y*
0#+
0++
06+
0>+
0F+
0N+
0%A
1&A
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0'A
0t@
1,A
0-A
1.A
0/A
0u@
14A
05A
16A
07A
0o@
1?A
0@A
1AA
0BA
08A
1GA
0HA
1IA
0JA
09A
1OA
0PA
1QA
0RA
0:A
1WA
0XA
1YA
0ZA
0p@
1bA
0cA
1dA
0eA
0[A
1jA
0kA
1lA
0mA
0\A
1rA
0sA
1tA
0uA
0]A
1zA
0{A
1|A
0}A
0q@
1'B
0(B
1)B
0*B
0~A
1/B
00B
11B
02B
0!B
17B
08B
19B
0:B
0"B
1?B
0@B
1AB
0BB
0n@
0b'
0e.
0f.
0g.
0h.
0i.
0j.
0k.
0l.
0A
0V
0-!
0U
0/)
0@)
0+)
0^1
0H(
1G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
0:(
09(
0d1
0c1
0b1
0a1
0`1
0_1
1((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0n!
0m!
0l!
1k!
1j!
0i!
0h!
0g!
1f!
0e!
0d!
0c!
0b!
0a!
1`!
1_!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0]8
0\8
0[8
0Z8
0Y8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0Q8
0P8
0O8
0N8
0[4
0Z4
0}5
0|5
0{5
0z5
0y5
0x5
0w5
0v5
0u5
0t5
0s5
0r5
0q5
0p5
0o5
0n5
0Q6
0P6
0O6
0N6
0M6
0L6
0K6
0J6
0I6
0H6
0G6
0F6
0E6
0D6
0C6
0B6
0%7
0$7
0#7
0"7
0!7
0~6
0}6
0|6
0{6
0z6
0y6
0x6
0w6
0v6
0u6
0t6
0W7
0V7
0U7
0T7
0S7
0R7
0Q7
0P7
0O7
0N7
0M7
0L7
0K7
0J7
0I7
0H7
0F3
0E3
0D3
0C3
0B3
0A3
0@3
0?3
0>3
0=3
0<3
0;3
0:3
093
083
073
0"5
0!5
0~4
0}4
0|4
0{4
0z4
0y4
0x4
0w4
0v4
0u4
0t4
0s4
0r4
0q4
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0g&
0f&
0e&
1d&
1c&
0b&
0a&
0`&
1_&
0^&
0]&
0\&
0[&
0Z&
1Y&
1X&
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0m@
0l@
0k@
0j@
0i@
0h@
0g@
0f@
0e@
0d@
0c@
0b@
0a@
0`@
0_@
0^@
0M@
0L@
0K@
0J@
0I@
0H@
0G@
0F@
0E@
0D@
0C@
0B@
0A@
0@@
0?@
0>@
06!
05!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0D
0C
0B
0;B
03B
0+B
0#B
0vA
0nA
0fA
0^A
0SA
0KA
0CA
0;A
00A
0(A
0~@
0v@
0e$
0!%
0k$
0X)
0w@
0!A
0)A
01A
0<A
0DA
0LA
0TA
0_A
0gA
0oA
0wA
0$B
0,B
04B
0<B
0N@
0O@
0P@
0Q@
0R@
0S@
0T@
0U@
0V@
0W@
0X@
0Y@
0Z@
0[@
0\@
0]@
1g1
1f1
1e1
0_4
1^4
0]4
0\4
0"9
0,?
1j3
0`4
0.?
164
0o3
0-?
0)!
0+!
0*!
0,!
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0(!
0'!
0&!
1%!
1$!
0#!
0"!
0!!
1~
0}
0|
0{
0z
0y
1x
1w
0=8
0<8
0;8
0:8
098
088
078
068
058
048
038
028
018
008
0/8
0.8
0-8
0,8
0+8
0*8
0)8
0(8
0'8
0&8
0%8
0$8
0#8
0"8
0!8
0~7
0}7
0|7
0g7
0f7
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0]7
0\7
0[7
0Z7
0Y7
0X7
057
047
037
027
017
007
0/7
0.7
0-7
0,7
0+7
0*7
0)7
0(7
0'7
0&7
0a6
0`6
0_6
0^6
0]6
0\6
0[6
0Z6
0Y6
0X6
0W6
0V6
0U6
0T6
0S6
0R6
0/6
0.6
0-6
0,6
0+6
0*6
0)6
0(6
0'6
0&6
0%6
0$6
0#6
0"6
0!6
0~5
0@
0?
0>
1=
1<
0;
0:
09
18
07
06
05
04
03
12
11
0?)
0>)
0=)
1<)
1;)
0:)
09)
08)
17)
06)
05)
04)
03)
02)
11)
10)
0X(
1W(
0V(
0U(
0T(
0S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
0J(
0I(
0./
0,/
0*/
0(/
0&/
0$/
0"/
0~.
0|.
0z.
0x.
0v.
0t.
0r.
0p.
0n.
0O/
0M/
0K/
0I/
0G/
0E/
0C/
0A/
0?/
0=/
0;/
09/
07/
05/
03/
01/
0p/
0n/
0l/
0j/
0h/
0f/
0d/
0b/
0`/
0^/
0\/
0Z/
0X/
0V/
0T/
0R/
030
010
0/0
0-0
0+0
0)0
0'0
0%0
0#0
0!0
0}/
0{/
0y/
0w/
0u/
0s/
0T0
0R0
0P0
0N0
0L0
0J0
0H0
0F0
0D0
0B0
0@0
0>0
0<0
0:0
080
060
0u0
0s0
0q0
0o0
0m0
0k0
0i0
0g0
0e0
0c0
0a0
0_0
0]0
0[0
0Y0
0W0
081
061
041
021
001
0.1
0,1
0*1
0(1
0&1
0$1
0"1
0~0
0|0
0z0
0x0
0Y1
0W1
0U1
0S1
0Q1
0O1
0M1
0K1
0I1
0G1
0E1
0C1
0A1
0?1
0=1
0;1
0q>
0+<
0g>
0,<
0]>
0-<
0S>
0.<
08>
0/<
0.>
00<
0$>
01<
0x=
02<
0]=
03<
0S=
04<
0I=
05<
0?=
06<
0$=
07<
0x<
08<
0n<
09<
0d<
0:<
1s>
0u;
1i>
0v;
1_>
0w;
1U>
0x;
1:>
0y;
10>
0z;
1&>
0{;
1z=
0|;
1_=
0};
1U=
0~;
1K=
0!<
1A=
0"<
1&=
0#<
1z<
0$<
1p<
0%<
1f<
0&<
1G4
1h3
0g<
0q<
0{<
0*<
0'=
0B=
0L=
0V=
0)<
0`=
0{=
0'>
01>
0(<
0;>
0V>
0`>
0j>
0'<
0t>
0e<
1h<
1r<
1|<
0><
1(=
1C=
1M=
1W=
0=<
1a=
1|=
1(>
12>
0<<
1<>
1W>
1a>
1k>
0;<
1u>
0v>
0~8
0l>
0b>
0X>
0=>
0?<
03>
0)>
0}=
0b=
0@<
0X=
0N=
0D=
0)=
0}<
0s<
0i<
0b<
0A<
0@=
1j<
1t<
1~<
1*=
1E=
1O=
1Y=
0y=
1c=
1~=
1*>
14>
0T>
1>>
1Y>
1c>
1m>
0k3
0i3
1w>
0x>
0n>
0d>
0Z>
0?>
0Q>
05>
0+>
0!>
0d=
0v=
0Z=
0P=
0F=
0+=
0!=
0u<
0k<
0==
0c<
0m<
0w<
0#=
0>=
0H=
0R=
0\=
0w=
0#>
0->
07>
0R>
0\>
0f>
0p>
1l3
0M<
0I<
0E<
0Q<
0P)
1O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
0D)
0C)
0B)
0A)
0?6
0>6
0=6
0<6
0;6
0:6
096
086
076
066
056
046
036
026
016
006
0q6
0p6
0o6
0n6
0m6
0l6
0k6
0j6
0i6
0h6
0g6
0f6
0e6
0d6
0c6
0b6
0E7
0D7
0C7
0B7
0A7
0@7
0?7
0>7
0=7
0<7
0;7
0:7
097
087
077
067
0w7
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0n7
0m7
0l7
0k7
0j7
0i7
0h7
0F>
0E>
0D>
0C>
0J>
0I>
0H>
0G>
0k=
0j=
0i=
0h=
0o=
0n=
0m=
0l=
02=
01=
00=
0/=
06=
05=
04=
03=
0w9
0v9
0u9
0t9
0s9
0r9
0q9
0p9
0o9
0n9
0m9
0l9
0k9
0j9
0i9
0h9
0K:
0J:
0I:
0H:
0G:
0F:
0E:
0D:
0C:
0B:
0A:
0@:
0?:
0>:
0=:
0<:
0}:
0|:
0{:
0z:
0y:
0x:
0w:
0v:
0u:
0t:
0s:
0r:
0q:
0p:
0o:
0n:
0Q;
0P;
0O;
0N;
0M;
0L;
0K;
0J;
0I;
0H;
0G;
0F;
0E;
0D;
0C;
0B;
0W<
0V<
0U<
0T<
0[<
0Z<
0Y<
0X<
0n3
0m3
0#4
0"4
154
144
1I4
0H4
0S<
0\<
0]<
0^<
0.=
07=
08=
09=
0g=
0p=
0q=
0r=
0B>
0K>
0L>
0M>
0^>
0h>
0r>
0%>
0/>
09>
0J=
0T=
0^=
0o<
0y<
0%=
0_<
0`<
0a<
0:=
0;=
0<=
0s=
0t=
0u=
0N>
0O>
0P>
0D<
0C<
0B<
0H<
0G<
0F<
0L<
0K<
0J<
0P<
0O<
0N<
1F4
0!4
0a;
0`;
0_;
0^;
0];
0\;
0[;
0Z;
0Y;
0X;
0W;
0V;
0U;
0T;
0S;
0R;
0/;
0.;
0-;
0,;
0+;
0*;
0);
0(;
0';
0&;
0%;
0$;
0#;
0";
0!;
0~:
0[:
0Z:
0Y:
0X:
0W:
0V:
0U:
0T:
0S:
0R:
0Q:
0P:
0O:
0N:
0M:
0L:
0):
0(:
0':
0&:
0%:
0$:
0#:
0":
0!:
0~9
0}9
0|9
0{9
0z9
0y9
0x9
0k5
0j5
0i5
0h5
0g5
0f5
0e5
0d5
0c5
0b5
0a5
0`5
0_5
0^5
0]5
0\5
0[5
0Z5
0Y5
0X5
0W5
0V5
0U5
0T5
0K5
0J5
0I5
0H5
0G5
0F5
0E5
0D5
0C5
0B5
0A5
0@5
0?5
0>5
0=5
0<5
035
025
015
005
0/5
0.5
0-5
0,5
0m8
0i8
0e8
0a8
0}8
0y8
0u8
0q8
0N3
0M3
0L3
0K3
0J3
0I3
0H3
0G3
09:
08:
07:
06:
05:
04:
03:
02:
01:
00:
0/:
0.:
0-:
0,:
0+:
0*:
0k:
0j:
0i:
0h:
0g:
0f:
0e:
0d:
0c:
0b:
0a:
0`:
0_:
0^:
0]:
0\:
0?;
0>;
0=;
0<;
0;;
0:;
09;
08;
07;
06;
05;
04;
03;
02;
01;
00;
0q;
0p;
0o;
0n;
0m;
0l;
0k;
0j;
0i;
0h;
0g;
0f;
0e;
0d;
0c;
0b;
034
1Y4
0l8
0k8
0j8
0h8
0g8
0f8
0d8
0c8
0b8
0`8
0_8
0^8
0!9
0|8
0{8
0z8
0x8
0w8
0v8
0t8
0s8
0r8
0p8
0o8
0n8
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0X9
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
0K9
0J9
0I9
0H9
0G9
0F9
0E9
0D9
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
059
049
039
029
019
009
0/9
0.9
0-9
0,9
0+9
0*9
0)9
0(9
0'9
0&9
0M8
0L8
0K8
0J8
0I8
0H8
0G8
0F8
0E8
0D8
0C8
0B8
0A8
0@8
0?8
0>8
0g3
0f3
0e3
0d3
0c3
0b3
0a3
0`3
0_3
0^3
0]3
0\3
0[3
0Z3
0Y3
0X3
0p4
0o4
0n4
0m4
0l4
0k4
0j4
0i4
0h4
0g4
0f4
0e4
0d4
0c4
0b4
0a4
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
0^)
1])
0\)
0[)
0Z)
0Y)
0a'
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0m,
0l,
0k,
0j,
0i,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0S,
0R,
0Q,
0P,
0O,
0N,
0/-
0.-
0--
0,-
0+-
0*-
0)-
0(-
0},
0|,
0{,
0z,
0y,
0x,
0w,
0v,
0u,
0t,
0s,
0r,
0q,
0p,
0o,
0n,
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
00-
01-
b0 2-
0?-
b0 @-
0>-
b0 5-
b0 6-
07-
08-
09-
0:-
0;-
0<-
b0 =-
04-
b0 A-
03-
0R)
0V)
0m$
0W"
0Y"
0N!
0Q)
0u$
0w$
0Q"
0q$
0p$
0o$
0z$
0y$
0T"
0S"
0a$
0`$
0_$
0h$
0g$
0%%
0$%
0#%
0}$
0h1
#50
0:!
0i)
07!
#100
1:!
1i)
17!
b10 l)
b10 <!
#150
0:!
0i)
07!
#200
1:!
1i)
17!
b11 l)
b11 <!
#201
0;!
0j)
09!
#250
0:!
0i)
07!
#300
1:!
1i)
17!
1QC
1z+
1,,
b1100000100011000 =,
b1100000100011000 <,
b1100000100011000 ;,
b1100000100011000 :,
b1100000100011000 9,
b1100000100011000 8,
b1100000100011000 7,
b1100000100011000 6,
b1100000100011000 5,
b1100000100011000 4,
b1100000100011000 3,
b1100000100011000 2,
b1100000100011000 1,
b1100000100011000 0,
b1100000100011000 /,
b1100000100011000 .,
1YB
1XB
1TB
1NB
1MB
b100 l)
b100 <!
#301
1h&
1i&
1o&
1s&
1t&
1?"
1w(
18(
02*
04*
1o!
1p!
0s!
1v!
1z!
1{!
15*
03*
0/"
08*
19*
1(*
1;*
1."
1+)
1^1
1@)
1/)
0G(
1F(
1a1
0((
1'(
1n!
1m!
1l!
0k!
0j!
1h!
1b!
0_!
1/
1X)
0@)
0/)
1@
1?
1>
0=
0<
1:
14
01
0W(
1V(
1?)
1>)
1=)
0<)
0;)
19)
13)
00)
0O)
1N)
1e)
1d)
1`)
0])
1Z)
1Y)
1j,
1i,
1Z,
1Y,
1X,
1W,
1V,
1U,
1T,
1S,
1R,
1Q,
1P,
1O,
1N,
1,-
1+-
1z,
1y,
1K$
1J$
1+$
1*$
1&$
1i#
1h#
1I#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
1?#
1>#
1=#
11-
b1 2-
b10 6-
b11 =-
1R)
1z$
1y$
1S"
1%%
1!%
0g1
0f1
0e1
#350
0:!
0i)
07!
#400
1:!
1i)
17!
0QC
1PC
0z+
1y+
0,,
1+,
b101000101000111 =,
b101000101000111 <,
b101000101000111 ;,
b101000101000111 :,
b101000101000111 9,
b101000101000111 8,
b101000101000111 7,
b101000101000111 6,
b101000101000111 5,
b101000101000111 4,
b101000101000111 3,
b101000101000111 2,
b101000101000111 1,
b101000101000111 0,
b101000101000111 /,
b101000101000111 .,
1L,
1t1
1L2
1K2
1J2
1I2
1H2
1G2
1F2
1E2
1D2
1C2
1B2
1A2
1@2
1\2
1[2
1l2
1k2
1|2
1{2
1w2
1r1
1s1
1#3
1"3
123
163
b101 l)
b101 <!
#401
1(%
1O"
1{$
1|$
1S)
1"%
16$
1:$
1;$
1Z$
1[$
1x#
1y#
1M#
1N#
1O#
1P#
1Q#
1R#
1S#
1T#
1U#
1V#
1W#
1X#
1Y#
1U"
1))
1>"
0?"
1v(
0w(
17(
08(
12*
14*
1:*
0o!
1r!
1x!
0z!
0{!
1|!
1}!
1~!
1W)
0;*
0>*
05*
13*
1/"
18*
1?*
0."
0@*
09*
0(*
1A*
1)*
1;*
1>*
0?*
1."
1C*
1-"
1@*
0A*
0)*
0C*
0-"
1e1
1G(
1c1
1((
0n!
0m!
0l!
0h!
0f!
0b!
0`!
0/
1.
1W%
1V%
1[1
064
1-?
1:8
198
0?)
0>)
0=)
09)
07)
03)
01)
0@
0?
0>
0:
08
04
02
1W(
0+)
0^1
0!%
0X)
1?=
16<
1$=
17<
1%=
x(=
1@=
xC=
xD=
1==
x)=
1_<
x*=
xE=
xF=
x+=
x#=
x>=
1o3
1@)
1/)
1N<
1M<
1O)
16=
1X<
054
0F4
1j8
1i8
0W(
1?)
1>)
1=)
19)
17)
13)
11)
0O)
1#4
1z8
1y8
0Y4
0e)
0d)
0`)
1])
0Z)
0Y)
0%%
0j,
0i,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0S,
0R,
0Q,
0P,
0O,
0N,
0,-
0+-
0z,
0y,
0K$
0J$
0+$
0*$
0&$
0i#
0h#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
01-
b0 2-
b0 6-
b0 =-
0R)
0z$
0y$
0S"
#450
0:!
0i)
07!
#500
1:!
1i)
17!
1QC
0L,
1K,
0t1
0L2
0K2
0J2
0I2
0H2
0G2
0F2
0E2
0D2
0C2
0B2
0A2
0@2
0\2
0[2
0l2
0k2
0|2
0{2
0w2
0r1
0s1
0#3
0"3
023
113
063
1S?
1R?
1c?
1b?
1^?
1'@
15@
14@
15?
16?
1:@
19@
1=@
b110 l)
b110 <!
#501
1W&
1S&
1T&
1T)
1R&
1M&
1N&
1@&
1w%
1{%
1|%
1f%
1g%
0(%
1N"
0O"
0{$
0|$
0S)
0"%
06$
0:$
0;$
0Z$
0[$
0x#
0y#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0U"
1()
0))
18(
0W)
1~@
1!A
0[1
1\@
1f1
0e1
0((
0'(
1&(
0W%
0V%
1l@
1J@
1I@
1E@
16!
15!
1+)
1^1
1X)
1^A
1;A
10A
1[1
11A
1<A
1_A
1U@
1Y@
1Z@
164
0o3
0-?
1('
0:8
098
0@)
0/)
0+)
0^1
0X)
0?=
06<
0$=
07<
0%=
1(=
0@=
1C=
0D=
0==
0)=
0_<
1*=
1E=
0F=
0+=
0#=
0>=
1@)
1/)
0N<
0M<
1W(
0?)
0>)
0=)
09)
07)
03)
01)
06=
0X<
0#4
154
1F4
0j8
0i8
0W(
1?)
1>)
1=)
19)
17)
13)
11)
0z8
0y8
1Y4
#550
0:!
0i)
07!
#600
1:!
1i)
17!
0QC
0PC
1OC
0S?
0R?
0c?
0b?
0^?
0'@
1&@
05@
04@
05?
06?
0:@
09@
0=@
1LB
1KB
1{B
1+C
1*C
1HB
1IB
11C
b111 l)
b111 <!
#601
1_'
1U)
1L'
1G'
1H'
18'
1:'
1;'
0W&
0S&
0T&
0T)
0R&
0M&
0N&
1?&
0@&
0w%
0{%
0|%
0f%
0g%
16(
07(
08(
0~@
1(A
0[1
1)A
0!A
0\@
1[@
1g1
1k.
1A
0f1
1((
0l@
1k@
0J@
0I@
0E@
06!
05!
1J!
1I!
1D
1+)
1^1
1X)
0^A
0;A
00A
1[1
01A
0<A
0_A
0U@
0Y@
0Z@
1Q
1P
0('
1''
1I/
1G/
0@)
0/)
0+)
0^1
0X)
1W(
0?)
0>)
0=)
09)
07)
03)
01)
1@)
1/)
0W(
1?)
1>)
1=)
19)
17)
13)
11)
#650
0:!
0i)
07!
#700
1:!
1i)
17!
1QC
1J/
1H/
0LB
0KB
0{B
1zB
0+C
0*C
0HB
0IB
01C
b1000 l)
b1000 <!
b1 .!
#701
0_'
0U)
0L'
0G'
0H'
17'
08'
0:'
0;'
1I.
1H.
18(
0[1
0g1
0k.
0A
0((
1'(
1K!
0J!
0I!
0D
1+)
1^1
1X)
1R
0Q
0P
0@)
0/)
1W(
0?)
0>)
0=)
09)
07)
03)
01)
1O)
1h)
1g)
1f)
1b)
1`)
0])
1\)
1Z)
1g"
1f"
1$%
1m,
1l,
1k,
1],
1\,
1[,
1/-
1.-
1--
1)-
1},
1|,
1{,
1w,
1N$
1M$
1L$
1H$
1.$
1-$
1,$
1($
1&$
1l#
1k#
1j#
1f#
1L#
1K#
1J#
11-
b1 6-
b10 =-
10-
b111 5-
1R)
1a$
1`$
1_$
1y$
1T"
1!%
#750
0:!
0i)
07!
#800
1:!
1i)
17!
0QC
1PC
1z+
1,,
b0 =,
b0 <,
b0 ;,
b0 :,
b0 9,
b0 8,
b0 7,
b0 6,
b0 5,
b0 4,
b0 3,
b0 2,
b0 1,
b0 0,
b0 /,
b0 .,
1u1
1x1
1w1
1v1
1,2
1+2
1O2
1N2
1M2
1_2
1^2
1]2
1Y2
1o2
1n2
1m2
1i2
1!3
1~2
1}2
1y2
1w2
1r1
1s1
1"3
153
b1001 l)
b1001 <!
#801
1'%
1{$
1S)
1"%
16$
18$
1<$
1=$
1>$
1X$
1\$
1]$
1^$
1v#
1z#
1{#
1|#
1Z#
1[#
1\#
1v"
1w"
1b$
1c$
1d$
1V"
1?"
1w(
17(
08(
02*
04*
0p!
0r!
0v!
0x!
0|!
0}!
0~!
1W3
1W)
15*
03*
0/"
08*
19*
1(*
0;*
0>*
1?*
0."
0@*
1A*
1)*
1C*
1-"
1.?
064
0G(
0F(
1E(
0c1
0a1
1((
1/
1z5
1y5
1N6
1M6
1"7
1!7
1T7
1S7
1C3
1B3
1u4
1t4
1Z%
1Y%
1X%
1`4
1g1
1f1
0j3
1=8
1<8
1;8
1*8
1)8
1d7
1c7
127
117
1^6
1]6
1,6
1+6
0W(
0V(
1U(
054
1?=
16<
1$=
17<
1x<
18<
1n<
19<
1d<
1:<
0G4
1><
1e<
xh<
1o<
xr<
1y<
x|<
1%=
x(=
1@=
xC=
xD=
1==
x)=
1_<
x}<
1`<
xs<
1a<
xi<
1b<
xj<
xt<
x~<
x*=
xE=
xF=
x+=
x!=
xu<
xk<
xc<
xm<
xw<
x#=
x>=
0l3
1Q<
1P<
1O<
1N<
1M<
0I4
0F4
0O)
0N)
1M)
1<6
1;6
1n6
1m6
1B7
1A7
1t7
1s7
16=
1s9
1r9
1G:
1F:
1{:
1z:
1O;
1N;
1]8
1\8
1[8
1Z8
1Y8
1[<
1Z<
1Y<
1X<
1}8
1|8
1{8
1z8
1y8
1a;
1`;
1/;
1.;
1U:
1T:
1#:
1":
1`5
1_5
1@5
1?5
105
1/5
0Y4
1m8
1l8
1k8
1j8
1i8
1K3
1J3
1/:
1.:
1a:
1`:
1e;
1d;
1g3
1f3
1e3
1d3
1c3
1p4
1o4
1n4
1m4
1l4
1Y9
1X9
1;9
1:9
1+9
1*9
1:%
19%
18%
17%
16%
0h)
0g)
0f)
0b)
0`)
0\)
0Z)
0g"
0f"
0$%
0m,
0l,
0k,
0],
0\,
0[,
0/-
0.-
0--
0)-
0},
0|,
0{,
0w,
0N$
0M$
0L$
0H$
0.$
0-$
0,$
0($
0&$
0l#
0k#
0j#
0f#
0L#
0K#
0J#
00-
01-
b0 5-
b0 6-
b0 =-
13-
0R)
0y$
0T"
0a$
0`$
0_$
1}$
1h1
0!%
#850
0:!
0i)
07!
#900
1:!
1i)
17!
1QC
0z+
0y+
1x+
0,,
0+,
1*,
1L,
0u1
0x1
0w1
0v1
0,2
0+2
0O2
0N2
0M2
0_2
0^2
0]2
0Y2
0o2
0n2
0m2
0i2
1q1
0!3
0~2
0}2
0y2
0w2
0r1
0"3
123
053
1F?
1E?
1D?
1C?
1B?
1V?
1U?
1T?
1f?
1e?
1d?
1`?
1^?
18@
17@
16@
12@
15?
16?
19@
1<@
b1010 l)
b1010 <!
#901
1V&
1S&
1T)
1R&
1K&
1O&
1P&
1Q&
1w%
1y%
1}%
1~%
1!&
1h%
1i%
1j%
1F%
1G%
1H%
1I%
1J%
0'%
1O"
0{$
0"%
06$
08$
0<$
0=$
0>$
1~$
0X$
0\$
0]$
0^$
0v#
0z#
0{#
0|#
0Z#
0[#
0\#
0v"
0w"
0b$
0c$
0d$
0V"
1))
1="
0>"
0?"
1u(
0v(
0w(
18(
12*
14*
0:*
1B*
0W3
1[1
0C*
0F*
1;*
1>*
05*
13*
1/"
18*
0?*
1."
1G*
0-"
0H*
1@*
09*
0(*
0A*
1I*
1#*
0)*
0;*
0."
1C*
1F*
1N*
1,"
0G*
1-"
1H*
0I*
0#*
0N*
0,"
0f1
1e1
0.?
1-?
0+)
0^1
1G(
0((
0'(
0&(
1%(
0/
0.
1-
1C8
1B8
0]8
0\8
0[8
0Z8
0Y8
0g3
0f3
0e3
0d3
0c3
0z5
0y5
0N6
0M6
0"7
0!7
0T7
0S7
0C3
0B3
0u4
0t4
0Z%
0Y%
0X%
0d&
0c&
0_&
0Y&
0X&
1f
1e
1d
1c
1b
1M@
1L@
1K@
1G@
1E@
15!
1^A
1KA
0(A
0*A
1~@
1v@
0X)
1w@
1!A
1+A
0)A
1LA
1_A
1U@
1W@
0[@
0.A
1\@
1]@
1/A
1u@
11A
1Z@
0`4
1@)
1/)
1j3
164
0-?
0%!
0$!
0~
0x
0w
0=8
0<8
0;8
0*8
0)8
0d7
0c7
027
017
0^6
0]6
0,6
0+6
0p4
0o4
0n4
0m4
0l4
1]3
1\3
1W(
0?=
06<
0$=
07<
0x<
08<
0n<
09<
0d<
0:<
1G4
0e<
1h<
0o<
1r<
0y<
1|<
0><
0%=
1(=
0@=
1C=
0D=
0==
0)=
0_<
0}<
0`<
0s<
0a<
0i<
0b<
1j<
1t<
1~<
1*=
1E=
0F=
0+=
0!=
0u<
0k<
0c<
0m<
0w<
0#=
0>=
1l3
0Q<
0P<
0O<
0N<
0M<
1I4
1f4
1e4
0:%
09%
08%
07%
06%
0<6
0;6
0n6
0m6
0B7
0A7
0t7
0s7
06=
13:
12:
0/:
0.:
1e:
1d:
0a:
0`:
1?;
1>;
1q;
1p;
0e;
0d;
1%:
1$:
0#:
0":
1W:
1V:
0U:
0T:
0/;
0.;
1-;
1,;
0a;
0`;
1_;
1^;
0s9
0r9
0G:
0F:
0{:
0z:
0O;
0N;
0[<
0Z<
0Y<
0X<
154
0W(
1F4
0_;
0^;
0-;
0,;
0W:
0V:
0%:
0$:
0q;
0p;
1o;
1n;
0?;
0>;
1=;
1<;
1g:
1f:
0e:
0d:
15:
14:
03:
02:
1e9
1d9
0Y9
0X9
1U9
1T9
1?9
1>9
0;9
0:9
1/9
1.9
0+9
0*9
0`5
0_5
0@5
0?5
005
0/5
10%
1/%
0m8
0l8
0k8
0j8
0i8
0}8
0|8
0{8
0z8
0y8
0K3
0J3
1G8
1F8
0C8
0B8
119
109
0/9
0.9
1A9
1@9
0?9
0>9
0U9
0T9
1S9
1R9
0e9
0d9
1c9
1b9
05:
04:
0g:
0f:
0=;
0<;
0o;
0n;
1Y4
0c9
0b9
0S9
0R9
0A9
0@9
019
009
1I8
1H8
0G8
0F8
1a3
1`3
0]3
0\3
1j4
1i4
0f4
0e4
1c3
1b3
0a3
0`3
0I8
0H8
0c3
0b3
1l4
1k4
0j4
0i4
14%
13%
00%
0/%
16%
15%
04%
03%
0l4
0k4
06%
05%
1])
03-
0}$
0h1
#950
0:!
0i)
07!
#1000
1:!
1i)
17!
0QC
0PC
0OC
1NC
0L,
0K,
1J,
0q1
0s1
023
013
103
0F?
0E?
0D?
0C?
0B?
0V?
0U?
0T?
14?
0f?
0e?
0d?
0`?
0^?
1'@
08@
07@
06@
02@
05?
09@
0<@
1KB
0YB
0XB
0TB
0NB
0MB
1lB
1kB
1jB
1iB
1hB
1.C
1-C
1,C
1HB
1IB
10C
b1011 l)
b1011 <!
#1001
1^'
1U)
1L'
1I'
1J'
1K'
1X'
1Y'
1Z'
1['
1\'
0h&
0i&
0o&
0s&
0t&
1:'
0V&
0S&
0R&
0K&
0O&
0P&
0Q&
1@&
0w%
0y%
0}%
0~%
0!&
1o%
0h%
0i%
0j%
0F%
0G%
0H%
0I%
0J%
1M"
0N"
0O"
0S)
0~$
1')
0()
0))
15(
06(
07(
08(
0W)
0~@
0"A
1#A
0!A
0\@
0&A
1'A
1t@
1)A
1[@
0g1
1j.
1A
1f1
1-!
1((
1d&
1c&
1_&
1Y&
1X&
0f
0e
0d
0c
0b
1l@
0M@
0L@
0K@
0G@
0E@
05!
1M!
1L!
1J!
1I!
1C
0^A
0KA
1(A
1*A
1~@
1"A
0v@
0[1
0w@
0#A
1!A
0+A
0)A
0,A
0LA
0_A
0U@
0W@
1-A
0[@
1\@
1&A
0]@
0'A
0t@
1)A
1,A
0-A
1[@
1.A
0/A
0u@
01A
0Z@
1T
1S
1Q
1P
1('
1%!
1$!
1~
1x
1w
1p/
1n/
1l/
1j/
1h/
1+)
1^1
1X)
0@)
0/)
1W(
1O)
0])
13-
1}$
1h1
#1050
0:!
0i)
07!
#1100
1:!
1i)
17!
1QC
1z+
1,,
1q/
1o/
1m/
1k/
1i/
1q1
1s1
04?
0'@
0&@
1%@
06?
b10000000000000000000000000000011 FB
b0 GB
b1 GB
b10 GB
0KB
1YB
1XB
1TB
1NB
1MB
0lB
0kB
0jB
0iB
0hB
1{B
0.C
0-C
0,C
0HB
00C
b1100 l)
b1100 <!
b10 .!
#1101
0^'
0L'
0I'
0J'
0K'
18'
0X'
0Y'
0Z'
0['
0\'
1h&
1i&
1o&
1s&
1t&
0:'
0T)
1>&
0?&
0@&
0o%
1S)
1~$
19.
18.
17.
16.
15.
1?"
1w(
18(
02*
04*
1W)
0~@
0(A
10A
11A
0)A
0!A
1[1
15*
03*
0/"
08*
0\@
0[@
1Z@
19*
1(*
1;*
1."
1g1
0j.
0A
0-!
0+)
0^1
0G(
1F(
0((
1'(
1/
0l@
0k@
1j@
0M!
0J!
0I!
0C
0X)
1@)
1/)
0T
0Q
0P
0('
0''
1&'
0W(
1V(
1W(
0V(
1])
03-
0}$
0h1
