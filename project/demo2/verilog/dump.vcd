$date
	Sun Nov 17 20:06:03 2024
$end
$version
	ModelSim Version 10.7c
$end
$timescale
	1ns
$end

$scope module proc_hier_pbench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var integer 32 .! inst_count $end
$var integer 32 /! trace_file $end
$var integer 32 0! sim_log_file $end
$var integer 32 1! DCacheHit_count $end
$var integer 32 2! ICacheHit_count $end
$var integer 32 3! DCacheReq_count $end
$var integer 32 4! ICacheReq_count $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var reg 1 :! clk $end
$var reg 1 ;! rst $end
$var wire 1 8! err $end
$var integer 32 <! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =! err $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' err1 $end
$var wire 1 a' MUX_OUT_ONE [15] $end
$var wire 1 b' MUX_OUT_ONE [14] $end
$var wire 1 c' MUX_OUT_ONE [13] $end
$var wire 1 d' MUX_OUT_ONE [12] $end
$var wire 1 e' MUX_OUT_ONE [11] $end
$var wire 1 f' MUX_OUT_ONE [10] $end
$var wire 1 g' MUX_OUT_ONE [9] $end
$var wire 1 h' MUX_OUT_ONE [8] $end
$var wire 1 i' MUX_OUT_ONE [7] $end
$var wire 1 j' MUX_OUT_ONE [6] $end
$var wire 1 k' MUX_OUT_ONE [5] $end
$var wire 1 l' MUX_OUT_ONE [4] $end
$var wire 1 m' MUX_OUT_ONE [3] $end
$var wire 1 n' MUX_OUT_ONE [2] $end
$var wire 1 o' MUX_OUT_ONE [1] $end
$var wire 1 p' MUX_OUT_ONE [0] $end
$var wire 1 q' MUX_OUT_TWO [15] $end
$var wire 1 r' MUX_OUT_TWO [14] $end
$var wire 1 s' MUX_OUT_TWO [13] $end
$var wire 1 t' MUX_OUT_TWO [12] $end
$var wire 1 u' MUX_OUT_TWO [11] $end
$var wire 1 v' MUX_OUT_TWO [10] $end
$var wire 1 w' MUX_OUT_TWO [9] $end
$var wire 1 x' MUX_OUT_TWO [8] $end
$var wire 1 y' MUX_OUT_TWO [7] $end
$var wire 1 z' MUX_OUT_TWO [6] $end
$var wire 1 {' MUX_OUT_TWO [5] $end
$var wire 1 |' MUX_OUT_TWO [4] $end
$var wire 1 }' MUX_OUT_TWO [3] $end
$var wire 1 ~' MUX_OUT_TWO [2] $end
$var wire 1 !( MUX_OUT_TWO [1] $end
$var wire 1 "( MUX_OUT_TWO [0] $end
$var wire 1 #( PC_NO_PLUS_TWO [15] $end
$var wire 1 $( PC_NO_PLUS_TWO [14] $end
$var wire 1 %( PC_NO_PLUS_TWO [13] $end
$var wire 1 &( PC_NO_PLUS_TWO [12] $end
$var wire 1 '( PC_NO_PLUS_TWO [11] $end
$var wire 1 (( PC_NO_PLUS_TWO [10] $end
$var wire 1 )( PC_NO_PLUS_TWO [9] $end
$var wire 1 *( PC_NO_PLUS_TWO [8] $end
$var wire 1 +( PC_NO_PLUS_TWO [7] $end
$var wire 1 ,( PC_NO_PLUS_TWO [6] $end
$var wire 1 -( PC_NO_PLUS_TWO [5] $end
$var wire 1 .( PC_NO_PLUS_TWO [4] $end
$var wire 1 /( PC_NO_PLUS_TWO [3] $end
$var wire 1 0( PC_NO_PLUS_TWO [2] $end
$var wire 1 1( PC_NO_PLUS_TWO [1] $end
$var wire 1 2( PC_NO_PLUS_TWO [0] $end
$var wire 1 3( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 4( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 5( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 6( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 7( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 8( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 9( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 :( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 ;( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 <( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 =( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 >( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 ?( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 @( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 A( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 B( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 C( SendNop $end
$var wire 1 D( inst_again [15] $end
$var wire 1 E( inst_again [14] $end
$var wire 1 F( inst_again [13] $end
$var wire 1 G( inst_again [12] $end
$var wire 1 H( inst_again [11] $end
$var wire 1 I( inst_again [10] $end
$var wire 1 J( inst_again [9] $end
$var wire 1 K( inst_again [8] $end
$var wire 1 L( inst_again [7] $end
$var wire 1 M( inst_again [6] $end
$var wire 1 N( inst_again [5] $end
$var wire 1 O( inst_again [4] $end
$var wire 1 P( inst_again [3] $end
$var wire 1 Q( inst_again [2] $end
$var wire 1 R( inst_again [1] $end
$var wire 1 S( inst_again [0] $end
$var wire 1 T( MemWrt_Decode_Out $end
$var wire 1 U( RegWrt_Decode_Out $end
$var wire 1 V( NOP_Out_ID_EX $end
$var wire 1 W( NOP_Out_ID_MEM $end
$var wire 1 X( NOP_Out_ID_WB $end

$scope module my_clkrst $end
$var reg 1 Y( clk $end
$var reg 1 Z( rst $end
$var wire 1 [( err $end
$var integer 32 \( cycle_count $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 q' PC_in [15] $end
$var wire 1 r' PC_in [14] $end
$var wire 1 s' PC_in [13] $end
$var wire 1 t' PC_in [12] $end
$var wire 1 u' PC_in [11] $end
$var wire 1 v' PC_in [10] $end
$var wire 1 w' PC_in [9] $end
$var wire 1 x' PC_in [8] $end
$var wire 1 y' PC_in [7] $end
$var wire 1 z' PC_in [6] $end
$var wire 1 {' PC_in [5] $end
$var wire 1 |' PC_in [4] $end
$var wire 1 }' PC_in [3] $end
$var wire 1 ~' PC_in [2] $end
$var wire 1 !( PC_in [1] $end
$var wire 1 "( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 #( pc_temp [15] $end
$var wire 1 $( pc_temp [14] $end
$var wire 1 %( pc_temp [13] $end
$var wire 1 &( pc_temp [12] $end
$var wire 1 '( pc_temp [11] $end
$var wire 1 (( pc_temp [10] $end
$var wire 1 )( pc_temp [9] $end
$var wire 1 *( pc_temp [8] $end
$var wire 1 +( pc_temp [7] $end
$var wire 1 ,( pc_temp [6] $end
$var wire 1 -( pc_temp [5] $end
$var wire 1 .( pc_temp [4] $end
$var wire 1 /( pc_temp [3] $end
$var wire 1 0( pc_temp [2] $end
$var wire 1 1( pc_temp [1] $end
$var wire 1 2( pc_temp [0] $end

$scope module fa $end
$var wire 1 #( A [15] $end
$var wire 1 $( A [14] $end
$var wire 1 %( A [13] $end
$var wire 1 &( A [12] $end
$var wire 1 '( A [11] $end
$var wire 1 (( A [10] $end
$var wire 1 )( A [9] $end
$var wire 1 *( A [8] $end
$var wire 1 +( A [7] $end
$var wire 1 ,( A [6] $end
$var wire 1 -( A [5] $end
$var wire 1 .( A [4] $end
$var wire 1 /( A [3] $end
$var wire 1 0( A [2] $end
$var wire 1 1( A [1] $end
$var wire 1 2( A [0] $end
$var wire 1 ]( B [15] $end
$var wire 1 ^( B [14] $end
$var wire 1 _( B [13] $end
$var wire 1 `( B [12] $end
$var wire 1 a( B [11] $end
$var wire 1 b( B [10] $end
$var wire 1 c( B [9] $end
$var wire 1 d( B [8] $end
$var wire 1 e( B [7] $end
$var wire 1 f( B [6] $end
$var wire 1 g( B [5] $end
$var wire 1 h( B [4] $end
$var wire 1 i( B [3] $end
$var wire 1 j( B [2] $end
$var wire 1 k( B [1] $end
$var wire 1 l( B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 m( Cout $end
$var wire 1 n( Cout0 $end
$var wire 1 o( Cout1 $end
$var wire 1 p( Cout2 $end
$var wire 1 q( Cin $end

$scope module f1 $end
$var wire 1 /( A [3] $end
$var wire 1 0( A [2] $end
$var wire 1 1( A [1] $end
$var wire 1 2( A [0] $end
$var wire 1 i( B [3] $end
$var wire 1 j( B [2] $end
$var wire 1 k( B [1] $end
$var wire 1 l( B [0] $end
$var wire 1 q( Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 n( Cout $end
$var wire 1 r( Cout0 $end
$var wire 1 s( Cout1 $end
$var wire 1 t( Cout2 $end

$scope module f1 $end
$var wire 1 2( A $end
$var wire 1 l( B $end
$var wire 1 q( Cin $end
$var wire 1 0" S $end
$var wire 1 r( Cout $end
$var wire 1 u( xor_AB $end
$var wire 1 v( xor_ABCin $end
$var wire 1 w( NAND_AB $end
$var wire 1 x( not_NAND_AB $end
$var wire 1 y( NAND_Cin_xor_AB $end
$var wire 1 z( not_NAND_Cin_xor_AB $end
$var wire 1 {( NOR_2NAND $end
$var wire 1 |( not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2( in1 $end
$var wire 1 l( in2 $end
$var wire 1 u( out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u( in1 $end
$var wire 1 q( in2 $end
$var wire 1 v( out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2( in1 $end
$var wire 1 l( in2 $end
$var wire 1 w( out $end
$upscope $end

$scope module not1 $end
$var wire 1 w( in1 $end
$var wire 1 x( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q( in1 $end
$var wire 1 u( in2 $end
$var wire 1 y( out $end
$upscope $end

$scope module not2 $end
$var wire 1 y( in1 $end
$var wire 1 z( out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x( in1 $end
$var wire 1 z( in2 $end
$var wire 1 {( out $end
$upscope $end

$scope module not3 $end
$var wire 1 {( in1 $end
$var wire 1 |( out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 1( A $end
$var wire 1 k( B $end
$var wire 1 r( Cin $end
$var wire 1 /" S $end
$var wire 1 s( Cout $end
$var wire 1 }( xor_AB $end
$var wire 1 ~( xor_ABCin $end
$var wire 1 !) NAND_AB $end
$var wire 1 ") not_NAND_AB $end
$var wire 1 #) NAND_Cin_xor_AB $end
$var wire 1 $) not_NAND_Cin_xor_AB $end
$var wire 1 %) NOR_2NAND $end
$var wire 1 &) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 1( in1 $end
$var wire 1 k( in2 $end
$var wire 1 }( out $end
$upscope $end

$scope module xor2 $end
$var wire 1 }( in1 $end
$var wire 1 r( in2 $end
$var wire 1 ~( out $end
$upscope $end

$scope module nand1 $end
$var wire 1 1( in1 $end
$var wire 1 k( in2 $end
$var wire 1 !) out $end
$upscope $end

$scope module not1 $end
$var wire 1 !) in1 $end
$var wire 1 ") out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r( in1 $end
$var wire 1 }( in2 $end
$var wire 1 #) out $end
$upscope $end

$scope module not2 $end
$var wire 1 #) in1 $end
$var wire 1 $) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ") in1 $end
$var wire 1 $) in2 $end
$var wire 1 %) out $end
$upscope $end

$scope module not3 $end
$var wire 1 %) in1 $end
$var wire 1 &) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 0( A $end
$var wire 1 j( B $end
$var wire 1 s( Cin $end
$var wire 1 ." S $end
$var wire 1 t( Cout $end
$var wire 1 ') xor_AB $end
$var wire 1 () xor_ABCin $end
$var wire 1 )) NAND_AB $end
$var wire 1 *) not_NAND_AB $end
$var wire 1 +) NAND_Cin_xor_AB $end
$var wire 1 ,) not_NAND_Cin_xor_AB $end
$var wire 1 -) NOR_2NAND $end
$var wire 1 .) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 0( in1 $end
$var wire 1 j( in2 $end
$var wire 1 ') out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ') in1 $end
$var wire 1 s( in2 $end
$var wire 1 () out $end
$upscope $end

$scope module nand1 $end
$var wire 1 0( in1 $end
$var wire 1 j( in2 $end
$var wire 1 )) out $end
$upscope $end

$scope module not1 $end
$var wire 1 )) in1 $end
$var wire 1 *) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s( in1 $end
$var wire 1 ') in2 $end
$var wire 1 +) out $end
$upscope $end

$scope module not2 $end
$var wire 1 +) in1 $end
$var wire 1 ,) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 *) in1 $end
$var wire 1 ,) in2 $end
$var wire 1 -) out $end
$upscope $end

$scope module not3 $end
$var wire 1 -) in1 $end
$var wire 1 .) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 /( A $end
$var wire 1 i( B $end
$var wire 1 t( Cin $end
$var wire 1 -" S $end
$var wire 1 n( Cout $end
$var wire 1 /) xor_AB $end
$var wire 1 0) xor_ABCin $end
$var wire 1 1) NAND_AB $end
$var wire 1 2) not_NAND_AB $end
$var wire 1 3) NAND_Cin_xor_AB $end
$var wire 1 4) not_NAND_Cin_xor_AB $end
$var wire 1 5) NOR_2NAND $end
$var wire 1 6) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 /( in1 $end
$var wire 1 i( in2 $end
$var wire 1 /) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 /) in1 $end
$var wire 1 t( in2 $end
$var wire 1 0) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 /( in1 $end
$var wire 1 i( in2 $end
$var wire 1 1) out $end
$upscope $end

$scope module not1 $end
$var wire 1 1) in1 $end
$var wire 1 2) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t( in1 $end
$var wire 1 /) in2 $end
$var wire 1 3) out $end
$upscope $end

$scope module not2 $end
$var wire 1 3) in1 $end
$var wire 1 4) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 2) in1 $end
$var wire 1 4) in2 $end
$var wire 1 5) out $end
$upscope $end

$scope module not3 $end
$var wire 1 5) in1 $end
$var wire 1 6) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 +( A [3] $end
$var wire 1 ,( A [2] $end
$var wire 1 -( A [1] $end
$var wire 1 .( A [0] $end
$var wire 1 e( B [3] $end
$var wire 1 f( B [2] $end
$var wire 1 g( B [1] $end
$var wire 1 h( B [0] $end
$var wire 1 n( Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 o( Cout $end
$var wire 1 7) Cout0 $end
$var wire 1 8) Cout1 $end
$var wire 1 9) Cout2 $end

$scope module f1 $end
$var wire 1 .( A $end
$var wire 1 h( B $end
$var wire 1 n( Cin $end
$var wire 1 ," S $end
$var wire 1 7) Cout $end
$var wire 1 :) xor_AB $end
$var wire 1 ;) xor_ABCin $end
$var wire 1 <) NAND_AB $end
$var wire 1 =) not_NAND_AB $end
$var wire 1 >) NAND_Cin_xor_AB $end
$var wire 1 ?) not_NAND_Cin_xor_AB $end
$var wire 1 @) NOR_2NAND $end
$var wire 1 A) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 .( in1 $end
$var wire 1 h( in2 $end
$var wire 1 :) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 :) in1 $end
$var wire 1 n( in2 $end
$var wire 1 ;) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 .( in1 $end
$var wire 1 h( in2 $end
$var wire 1 <) out $end
$upscope $end

$scope module not1 $end
$var wire 1 <) in1 $end
$var wire 1 =) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n( in1 $end
$var wire 1 :) in2 $end
$var wire 1 >) out $end
$upscope $end

$scope module not2 $end
$var wire 1 >) in1 $end
$var wire 1 ?) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 =) in1 $end
$var wire 1 ?) in2 $end
$var wire 1 @) out $end
$upscope $end

$scope module not3 $end
$var wire 1 @) in1 $end
$var wire 1 A) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 -( A $end
$var wire 1 g( B $end
$var wire 1 7) Cin $end
$var wire 1 +" S $end
$var wire 1 8) Cout $end
$var wire 1 B) xor_AB $end
$var wire 1 C) xor_ABCin $end
$var wire 1 D) NAND_AB $end
$var wire 1 E) not_NAND_AB $end
$var wire 1 F) NAND_Cin_xor_AB $end
$var wire 1 G) not_NAND_Cin_xor_AB $end
$var wire 1 H) NOR_2NAND $end
$var wire 1 I) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 -( in1 $end
$var wire 1 g( in2 $end
$var wire 1 B) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 B) in1 $end
$var wire 1 7) in2 $end
$var wire 1 C) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -( in1 $end
$var wire 1 g( in2 $end
$var wire 1 D) out $end
$upscope $end

$scope module not1 $end
$var wire 1 D) in1 $end
$var wire 1 E) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7) in1 $end
$var wire 1 B) in2 $end
$var wire 1 F) out $end
$upscope $end

$scope module not2 $end
$var wire 1 F) in1 $end
$var wire 1 G) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 E) in1 $end
$var wire 1 G) in2 $end
$var wire 1 H) out $end
$upscope $end

$scope module not3 $end
$var wire 1 H) in1 $end
$var wire 1 I) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ,( A $end
$var wire 1 f( B $end
$var wire 1 8) Cin $end
$var wire 1 *" S $end
$var wire 1 9) Cout $end
$var wire 1 J) xor_AB $end
$var wire 1 K) xor_ABCin $end
$var wire 1 L) NAND_AB $end
$var wire 1 M) not_NAND_AB $end
$var wire 1 N) NAND_Cin_xor_AB $end
$var wire 1 O) not_NAND_Cin_xor_AB $end
$var wire 1 P) NOR_2NAND $end
$var wire 1 Q) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ,( in1 $end
$var wire 1 f( in2 $end
$var wire 1 J) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 J) in1 $end
$var wire 1 8) in2 $end
$var wire 1 K) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,( in1 $end
$var wire 1 f( in2 $end
$var wire 1 L) out $end
$upscope $end

$scope module not1 $end
$var wire 1 L) in1 $end
$var wire 1 M) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 8) in1 $end
$var wire 1 J) in2 $end
$var wire 1 N) out $end
$upscope $end

$scope module not2 $end
$var wire 1 N) in1 $end
$var wire 1 O) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 M) in1 $end
$var wire 1 O) in2 $end
$var wire 1 P) out $end
$upscope $end

$scope module not3 $end
$var wire 1 P) in1 $end
$var wire 1 Q) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 +( A $end
$var wire 1 e( B $end
$var wire 1 9) Cin $end
$var wire 1 )" S $end
$var wire 1 o( Cout $end
$var wire 1 R) xor_AB $end
$var wire 1 S) xor_ABCin $end
$var wire 1 T) NAND_AB $end
$var wire 1 U) not_NAND_AB $end
$var wire 1 V) NAND_Cin_xor_AB $end
$var wire 1 W) not_NAND_Cin_xor_AB $end
$var wire 1 X) NOR_2NAND $end
$var wire 1 Y) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 +( in1 $end
$var wire 1 e( in2 $end
$var wire 1 R) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 R) in1 $end
$var wire 1 9) in2 $end
$var wire 1 S) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +( in1 $end
$var wire 1 e( in2 $end
$var wire 1 T) out $end
$upscope $end

$scope module not1 $end
$var wire 1 T) in1 $end
$var wire 1 U) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9) in1 $end
$var wire 1 R) in2 $end
$var wire 1 V) out $end
$upscope $end

$scope module not2 $end
$var wire 1 V) in1 $end
$var wire 1 W) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 U) in1 $end
$var wire 1 W) in2 $end
$var wire 1 X) out $end
$upscope $end

$scope module not3 $end
$var wire 1 X) in1 $end
$var wire 1 Y) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 '( A [3] $end
$var wire 1 (( A [2] $end
$var wire 1 )( A [1] $end
$var wire 1 *( A [0] $end
$var wire 1 a( B [3] $end
$var wire 1 b( B [2] $end
$var wire 1 c( B [1] $end
$var wire 1 d( B [0] $end
$var wire 1 o( Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 p( Cout $end
$var wire 1 Z) Cout0 $end
$var wire 1 [) Cout1 $end
$var wire 1 \) Cout2 $end

$scope module f1 $end
$var wire 1 *( A $end
$var wire 1 d( B $end
$var wire 1 o( Cin $end
$var wire 1 (" S $end
$var wire 1 Z) Cout $end
$var wire 1 ]) xor_AB $end
$var wire 1 ^) xor_ABCin $end
$var wire 1 _) NAND_AB $end
$var wire 1 `) not_NAND_AB $end
$var wire 1 a) NAND_Cin_xor_AB $end
$var wire 1 b) not_NAND_Cin_xor_AB $end
$var wire 1 c) NOR_2NAND $end
$var wire 1 d) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 *( in1 $end
$var wire 1 d( in2 $end
$var wire 1 ]) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]) in1 $end
$var wire 1 o( in2 $end
$var wire 1 ^) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *( in1 $end
$var wire 1 d( in2 $end
$var wire 1 _) out $end
$upscope $end

$scope module not1 $end
$var wire 1 _) in1 $end
$var wire 1 `) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o( in1 $end
$var wire 1 ]) in2 $end
$var wire 1 a) out $end
$upscope $end

$scope module not2 $end
$var wire 1 a) in1 $end
$var wire 1 b) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `) in1 $end
$var wire 1 b) in2 $end
$var wire 1 c) out $end
$upscope $end

$scope module not3 $end
$var wire 1 c) in1 $end
$var wire 1 d) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 )( A $end
$var wire 1 c( B $end
$var wire 1 Z) Cin $end
$var wire 1 '" S $end
$var wire 1 [) Cout $end
$var wire 1 e) xor_AB $end
$var wire 1 f) xor_ABCin $end
$var wire 1 g) NAND_AB $end
$var wire 1 h) not_NAND_AB $end
$var wire 1 i) NAND_Cin_xor_AB $end
$var wire 1 j) not_NAND_Cin_xor_AB $end
$var wire 1 k) NOR_2NAND $end
$var wire 1 l) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 )( in1 $end
$var wire 1 c( in2 $end
$var wire 1 e) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 e) in1 $end
$var wire 1 Z) in2 $end
$var wire 1 f) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )( in1 $end
$var wire 1 c( in2 $end
$var wire 1 g) out $end
$upscope $end

$scope module not1 $end
$var wire 1 g) in1 $end
$var wire 1 h) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z) in1 $end
$var wire 1 e) in2 $end
$var wire 1 i) out $end
$upscope $end

$scope module not2 $end
$var wire 1 i) in1 $end
$var wire 1 j) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 h) in1 $end
$var wire 1 j) in2 $end
$var wire 1 k) out $end
$upscope $end

$scope module not3 $end
$var wire 1 k) in1 $end
$var wire 1 l) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 (( A $end
$var wire 1 b( B $end
$var wire 1 [) Cin $end
$var wire 1 &" S $end
$var wire 1 \) Cout $end
$var wire 1 m) xor_AB $end
$var wire 1 n) xor_ABCin $end
$var wire 1 o) NAND_AB $end
$var wire 1 p) not_NAND_AB $end
$var wire 1 q) NAND_Cin_xor_AB $end
$var wire 1 r) not_NAND_Cin_xor_AB $end
$var wire 1 s) NOR_2NAND $end
$var wire 1 t) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 (( in1 $end
$var wire 1 b( in2 $end
$var wire 1 m) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 m) in1 $end
$var wire 1 [) in2 $end
$var wire 1 n) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (( in1 $end
$var wire 1 b( in2 $end
$var wire 1 o) out $end
$upscope $end

$scope module not1 $end
$var wire 1 o) in1 $end
$var wire 1 p) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [) in1 $end
$var wire 1 m) in2 $end
$var wire 1 q) out $end
$upscope $end

$scope module not2 $end
$var wire 1 q) in1 $end
$var wire 1 r) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 p) in1 $end
$var wire 1 r) in2 $end
$var wire 1 s) out $end
$upscope $end

$scope module not3 $end
$var wire 1 s) in1 $end
$var wire 1 t) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 '( A $end
$var wire 1 a( B $end
$var wire 1 \) Cin $end
$var wire 1 %" S $end
$var wire 1 p( Cout $end
$var wire 1 u) xor_AB $end
$var wire 1 v) xor_ABCin $end
$var wire 1 w) NAND_AB $end
$var wire 1 x) not_NAND_AB $end
$var wire 1 y) NAND_Cin_xor_AB $end
$var wire 1 z) not_NAND_Cin_xor_AB $end
$var wire 1 {) NOR_2NAND $end
$var wire 1 |) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 '( in1 $end
$var wire 1 a( in2 $end
$var wire 1 u) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u) in1 $end
$var wire 1 \) in2 $end
$var wire 1 v) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '( in1 $end
$var wire 1 a( in2 $end
$var wire 1 w) out $end
$upscope $end

$scope module not1 $end
$var wire 1 w) in1 $end
$var wire 1 x) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \) in1 $end
$var wire 1 u) in2 $end
$var wire 1 y) out $end
$upscope $end

$scope module not2 $end
$var wire 1 y) in1 $end
$var wire 1 z) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x) in1 $end
$var wire 1 z) in2 $end
$var wire 1 {) out $end
$upscope $end

$scope module not3 $end
$var wire 1 {) in1 $end
$var wire 1 |) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 #( A [3] $end
$var wire 1 $( A [2] $end
$var wire 1 %( A [1] $end
$var wire 1 &( A [0] $end
$var wire 1 ]( B [3] $end
$var wire 1 ^( B [2] $end
$var wire 1 _( B [1] $end
$var wire 1 `( B [0] $end
$var wire 1 p( Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 m( Cout $end
$var wire 1 }) Cout0 $end
$var wire 1 ~) Cout1 $end
$var wire 1 !* Cout2 $end

$scope module f1 $end
$var wire 1 &( A $end
$var wire 1 `( B $end
$var wire 1 p( Cin $end
$var wire 1 $" S $end
$var wire 1 }) Cout $end
$var wire 1 "* xor_AB $end
$var wire 1 #* xor_ABCin $end
$var wire 1 $* NAND_AB $end
$var wire 1 %* not_NAND_AB $end
$var wire 1 &* NAND_Cin_xor_AB $end
$var wire 1 '* not_NAND_Cin_xor_AB $end
$var wire 1 (* NOR_2NAND $end
$var wire 1 )* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 &( in1 $end
$var wire 1 `( in2 $end
$var wire 1 "* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 "* in1 $end
$var wire 1 p( in2 $end
$var wire 1 #* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &( in1 $end
$var wire 1 `( in2 $end
$var wire 1 $* out $end
$upscope $end

$scope module not1 $end
$var wire 1 $* in1 $end
$var wire 1 %* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p( in1 $end
$var wire 1 "* in2 $end
$var wire 1 &* out $end
$upscope $end

$scope module not2 $end
$var wire 1 &* in1 $end
$var wire 1 '* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 %* in1 $end
$var wire 1 '* in2 $end
$var wire 1 (* out $end
$upscope $end

$scope module not3 $end
$var wire 1 (* in1 $end
$var wire 1 )* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 %( A $end
$var wire 1 _( B $end
$var wire 1 }) Cin $end
$var wire 1 #" S $end
$var wire 1 ~) Cout $end
$var wire 1 ** xor_AB $end
$var wire 1 +* xor_ABCin $end
$var wire 1 ,* NAND_AB $end
$var wire 1 -* not_NAND_AB $end
$var wire 1 .* NAND_Cin_xor_AB $end
$var wire 1 /* not_NAND_Cin_xor_AB $end
$var wire 1 0* NOR_2NAND $end
$var wire 1 1* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 %( in1 $end
$var wire 1 _( in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ** in1 $end
$var wire 1 }) in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %( in1 $end
$var wire 1 _( in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,* in1 $end
$var wire 1 -* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }) in1 $end
$var wire 1 ** in2 $end
$var wire 1 .* out $end
$upscope $end

$scope module not2 $end
$var wire 1 .* in1 $end
$var wire 1 /* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -* in1 $end
$var wire 1 /* in2 $end
$var wire 1 0* out $end
$upscope $end

$scope module not3 $end
$var wire 1 0* in1 $end
$var wire 1 1* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 $( A $end
$var wire 1 ^( B $end
$var wire 1 ~) Cin $end
$var wire 1 "" S $end
$var wire 1 !* Cout $end
$var wire 1 2* xor_AB $end
$var wire 1 3* xor_ABCin $end
$var wire 1 4* NAND_AB $end
$var wire 1 5* not_NAND_AB $end
$var wire 1 6* NAND_Cin_xor_AB $end
$var wire 1 7* not_NAND_Cin_xor_AB $end
$var wire 1 8* NOR_2NAND $end
$var wire 1 9* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 $( in1 $end
$var wire 1 ^( in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 2* in1 $end
$var wire 1 ~) in2 $end
$var wire 1 3* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $( in1 $end
$var wire 1 ^( in2 $end
$var wire 1 4* out $end
$upscope $end

$scope module not1 $end
$var wire 1 4* in1 $end
$var wire 1 5* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ~) in1 $end
$var wire 1 2* in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module not2 $end
$var wire 1 6* in1 $end
$var wire 1 7* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 5* in1 $end
$var wire 1 7* in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module not3 $end
$var wire 1 8* in1 $end
$var wire 1 9* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 #( A $end
$var wire 1 ]( B $end
$var wire 1 !* Cin $end
$var wire 1 !" S $end
$var wire 1 m( Cout $end
$var wire 1 :* xor_AB $end
$var wire 1 ;* xor_ABCin $end
$var wire 1 <* NAND_AB $end
$var wire 1 =* not_NAND_AB $end
$var wire 1 >* NAND_Cin_xor_AB $end
$var wire 1 ?* not_NAND_Cin_xor_AB $end
$var wire 1 @* NOR_2NAND $end
$var wire 1 A* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 #( in1 $end
$var wire 1 ]( in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 :* in1 $end
$var wire 1 !* in2 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #( in1 $end
$var wire 1 ]( in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not1 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !* in1 $end
$var wire 1 :* in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not2 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 =* in1 $end
$var wire 1 ?* in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not3 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 B* data_in [15] $end
$var wire 1 C* data_in [14] $end
$var wire 1 D* data_in [13] $end
$var wire 1 E* data_in [12] $end
$var wire 1 F* data_in [11] $end
$var wire 1 G* data_in [10] $end
$var wire 1 H* data_in [9] $end
$var wire 1 I* data_in [8] $end
$var wire 1 J* data_in [7] $end
$var wire 1 K* data_in [6] $end
$var wire 1 L* data_in [5] $end
$var wire 1 M* data_in [4] $end
$var wire 1 N* data_in [3] $end
$var wire 1 O* data_in [2] $end
$var wire 1 P* data_in [1] $end
$var wire 1 Q* data_in [0] $end
$var wire 1 #( addr [15] $end
$var wire 1 $( addr [14] $end
$var wire 1 %( addr [13] $end
$var wire 1 &( addr [12] $end
$var wire 1 '( addr [11] $end
$var wire 1 (( addr [10] $end
$var wire 1 )( addr [9] $end
$var wire 1 *( addr [8] $end
$var wire 1 +( addr [7] $end
$var wire 1 ,( addr [6] $end
$var wire 1 -( addr [5] $end
$var wire 1 .( addr [4] $end
$var wire 1 /( addr [3] $end
$var wire 1 0( addr [2] $end
$var wire 1 1( addr [1] $end
$var wire 1 2( addr [0] $end
$var wire 1 R* enable $end
$var wire 1 S* wr $end
$var wire 1 T* createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U* loaded $end
$var reg 17 V* largest [16:0] $end
$var integer 32 W* mcd $end
$var integer 32 X* i $end
$upscope $end

$scope module pc[15] $end
$var wire 1 #( q $end
$var wire 1 q' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y* state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 $( q $end
$var wire 1 r' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z* state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 %( q $end
$var wire 1 s' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [* state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 &( q $end
$var wire 1 t' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \* state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 '( q $end
$var wire 1 u' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]* state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 (( q $end
$var wire 1 v' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^* state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 )( q $end
$var wire 1 w' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _* state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 *( q $end
$var wire 1 x' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `* state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 +( q $end
$var wire 1 y' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a* state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 ,( q $end
$var wire 1 z' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b* state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 -( q $end
$var wire 1 {' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c* state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 .( q $end
$var wire 1 |' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d* state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 /( q $end
$var wire 1 }' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e* state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 0( q $end
$var wire 1 ~' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f* state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g* state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h* state $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next_in [15] $end
$var wire 1 "" PC_next_in [14] $end
$var wire 1 #" PC_next_in [13] $end
$var wire 1 $" PC_next_in [12] $end
$var wire 1 %" PC_next_in [11] $end
$var wire 1 &" PC_next_in [10] $end
$var wire 1 '" PC_next_in [9] $end
$var wire 1 (" PC_next_in [8] $end
$var wire 1 )" PC_next_in [7] $end
$var wire 1 *" PC_next_in [6] $end
$var wire 1 +" PC_next_in [5] $end
$var wire 1 ," PC_next_in [4] $end
$var wire 1 -" PC_next_in [3] $end
$var wire 1 ." PC_next_in [2] $end
$var wire 1 /" PC_next_in [1] $end
$var wire 1 0" PC_next_in [0] $end
$var wire 1 D( instruction_in [15] $end
$var wire 1 E( instruction_in [14] $end
$var wire 1 F( instruction_in [13] $end
$var wire 1 G( instruction_in [12] $end
$var wire 1 H( instruction_in [11] $end
$var wire 1 I( instruction_in [10] $end
$var wire 1 J( instruction_in [9] $end
$var wire 1 K( instruction_in [8] $end
$var wire 1 L( instruction_in [7] $end
$var wire 1 M( instruction_in [6] $end
$var wire 1 N( instruction_in [5] $end
$var wire 1 O( instruction_in [4] $end
$var wire 1 P( instruction_in [3] $end
$var wire 1 Q( instruction_in [2] $end
$var wire 1 R( instruction_in [1] $end
$var wire 1 S( instruction_in [0] $end
$var wire 1 #( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 $( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 %( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 &( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 '( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 (( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 )( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 *( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 +( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 ,( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 -( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 .( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 /( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 0( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 1( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 2( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 3( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 4( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 5( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 6( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 7( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 8( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 9( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 :( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 ;( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 <( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 =( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 >( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 ?( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 @( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 A( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 B( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end

$scope module instruc $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 D( d [15] $end
$var wire 1 E( d [14] $end
$var wire 1 F( d [13] $end
$var wire 1 G( d [12] $end
$var wire 1 H( d [11] $end
$var wire 1 I( d [10] $end
$var wire 1 J( d [9] $end
$var wire 1 K( d [8] $end
$var wire 1 L( d [7] $end
$var wire 1 M( d [6] $end
$var wire 1 N( d [5] $end
$var wire 1 O( d [4] $end
$var wire 1 P( d [3] $end
$var wire 1 Q( d [2] $end
$var wire 1 R( d [1] $end
$var wire 1 S( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 16 i* state [15:0] $end
$upscope $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 !" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j* state $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 "" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k* state $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 #" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l* state $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 $" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m* state $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 %" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n* state $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 &" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o* state $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 '" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p* state $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 (" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q* state $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 )" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r* state $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 *" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s* state $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 +" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t* state $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 ," d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u* state $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 -" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v* state $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 ." d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w* state $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 /" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x* state $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 0" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y* state $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z* state $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {* state $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |* state $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }* state $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~* state $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !+ state $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 9( q $end
$var wire 1 )( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "+ state $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 :( q $end
$var wire 1 *( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #+ state $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 ;( q $end
$var wire 1 +( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $+ state $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 <( q $end
$var wire 1 ,( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %+ state $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 =( q $end
$var wire 1 -( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &+ state $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 >( q $end
$var wire 1 .( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '+ state $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 ?( q $end
$var wire 1 /( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (+ state $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 @( q $end
$var wire 1 0( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )+ state $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 A( q $end
$var wire 1 1( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *+ state $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 B( q $end
$var wire 1 2( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ++ state $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 `' err $end
$var wire 1 o! instruction [15] $end
$var wire 1 p! instruction [14] $end
$var wire 1 q! instruction [13] $end
$var wire 1 r! instruction [12] $end
$var wire 1 s! instruction [11] $end
$var wire 1 t! instruction [10] $end
$var wire 1 u! instruction [9] $end
$var wire 1 v! instruction [8] $end
$var wire 1 w! instruction [7] $end
$var wire 1 x! instruction [6] $end
$var wire 1 y! instruction [5] $end
$var wire 1 z! instruction [4] $end
$var wire 1 {! instruction [3] $end
$var wire 1 |! instruction [2] $end
$var wire 1 }! instruction [1] $end
$var wire 1 ~! instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 ,+ signed_i_1 [15] $end
$var wire 1 -+ signed_i_1 [14] $end
$var wire 1 .+ signed_i_1 [13] $end
$var wire 1 /+ signed_i_1 [12] $end
$var wire 1 0+ signed_i_1 [11] $end
$var wire 1 1+ signed_i_1 [10] $end
$var wire 1 2+ signed_i_1 [9] $end
$var wire 1 3+ signed_i_1 [8] $end
$var wire 1 4+ signed_i_1 [7] $end
$var wire 1 5+ signed_i_1 [6] $end
$var wire 1 6+ signed_i_1 [5] $end
$var wire 1 7+ signed_i_1 [4] $end
$var wire 1 8+ signed_i_1 [3] $end
$var wire 1 9+ signed_i_1 [2] $end
$var wire 1 :+ signed_i_1 [1] $end
$var wire 1 ;+ signed_i_1 [0] $end
$var wire 1 <+ zero_i_1 [15] $end
$var wire 1 =+ zero_i_1 [14] $end
$var wire 1 >+ zero_i_1 [13] $end
$var wire 1 ?+ zero_i_1 [12] $end
$var wire 1 @+ zero_i_1 [11] $end
$var wire 1 A+ zero_i_1 [10] $end
$var wire 1 B+ zero_i_1 [9] $end
$var wire 1 C+ zero_i_1 [8] $end
$var wire 1 D+ zero_i_1 [7] $end
$var wire 1 E+ zero_i_1 [6] $end
$var wire 1 F+ zero_i_1 [5] $end
$var wire 1 G+ zero_i_1 [4] $end
$var wire 1 H+ zero_i_1 [3] $end
$var wire 1 I+ zero_i_1 [2] $end
$var wire 1 J+ zero_i_1 [1] $end
$var wire 1 K+ zero_i_1 [0] $end
$var wire 1 L+ signed_i_2 [15] $end
$var wire 1 M+ signed_i_2 [14] $end
$var wire 1 N+ signed_i_2 [13] $end
$var wire 1 O+ signed_i_2 [12] $end
$var wire 1 P+ signed_i_2 [11] $end
$var wire 1 Q+ signed_i_2 [10] $end
$var wire 1 R+ signed_i_2 [9] $end
$var wire 1 S+ signed_i_2 [8] $end
$var wire 1 T+ signed_i_2 [7] $end
$var wire 1 U+ signed_i_2 [6] $end
$var wire 1 V+ signed_i_2 [5] $end
$var wire 1 W+ signed_i_2 [4] $end
$var wire 1 X+ signed_i_2 [3] $end
$var wire 1 Y+ signed_i_2 [2] $end
$var wire 1 Z+ signed_i_2 [1] $end
$var wire 1 [+ signed_i_2 [0] $end
$var wire 1 \+ zero_i_2 [15] $end
$var wire 1 ]+ zero_i_2 [14] $end
$var wire 1 ^+ zero_i_2 [13] $end
$var wire 1 _+ zero_i_2 [12] $end
$var wire 1 `+ zero_i_2 [11] $end
$var wire 1 a+ zero_i_2 [10] $end
$var wire 1 b+ zero_i_2 [9] $end
$var wire 1 c+ zero_i_2 [8] $end
$var wire 1 d+ zero_i_2 [7] $end
$var wire 1 e+ zero_i_2 [6] $end
$var wire 1 f+ zero_i_2 [5] $end
$var wire 1 g+ zero_i_2 [4] $end
$var wire 1 h+ zero_i_2 [3] $end
$var wire 1 i+ zero_i_2 [2] $end
$var wire 1 j+ zero_i_2 [1] $end
$var wire 1 k+ zero_i_2 [0] $end
$var reg 1 l+ OExt $end
$var reg 1 m+ RegWrt $end
$var reg 2 n+ RegDst [1:0] $end
$var reg 1 o+ halt $end
$var reg 1 p+ BTR $end
$var reg 3 q+ ALUOpr [2:0] $end
$var reg 2 r+ Bsrc [1:0] $end
$var reg 1 s+ InvB $end
$var reg 1 t+ InvA $end
$var reg 1 u+ ImmSrc $end
$var reg 1 v+ MemWrt $end
$var reg 1 w+ ALUJMP $end
$var reg 1 x+ PC_or_add $end
$var reg 2 y+ RegSrc [1:0] $end
$var reg 1 z+ SLBI $end
$var reg 1 {+ branching $end
$var reg 2 |+ branch_command [1:0] $end
$var reg 3 }+ SetCtrl [2:0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end

$scope module registerfile $end
$var parameter 32 ~+ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 t! read1RegSel [2] $end
$var wire 1 u! read1RegSel [1] $end
$var wire 1 v! read1RegSel [0] $end
$var wire 1 w! read2RegSel [2] $end
$var wire 1 x! read2RegSel [1] $end
$var wire 1 y! read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 `' err $end
$var wire 1 !, registers [0] $end
$var wire 1 ", registers [1] $end
$var wire 1 #, registers [2] $end
$var wire 1 $, registers [3] $end
$var wire 1 %, registers [4] $end
$var wire 1 &, registers [5] $end
$var wire 1 ', registers [6] $end
$var wire 1 (, registers [7] $end
$var wire 1 ), registers [8] $end
$var wire 1 *, registers [9] $end
$var wire 1 +, registers [10] $end
$var wire 1 ,, registers [11] $end
$var wire 1 -, registers [12] $end
$var wire 1 ., registers [13] $end
$var wire 1 /, registers [14] $end
$var wire 1 0, registers [15] $end
$var wire 1 1, registers [16] $end
$var wire 1 2, registers [17] $end
$var wire 1 3, registers [18] $end
$var wire 1 4, registers [19] $end
$var wire 1 5, registers [20] $end
$var wire 1 6, registers [21] $end
$var wire 1 7, registers [22] $end
$var wire 1 8, registers [23] $end
$var wire 1 9, registers [24] $end
$var wire 1 :, registers [25] $end
$var wire 1 ;, registers [26] $end
$var wire 1 <, registers [27] $end
$var wire 1 =, registers [28] $end
$var wire 1 >, registers [29] $end
$var wire 1 ?, registers [30] $end
$var wire 1 @, registers [31] $end
$var wire 1 A, registers [32] $end
$var wire 1 B, registers [33] $end
$var wire 1 C, registers [34] $end
$var wire 1 D, registers [35] $end
$var wire 1 E, registers [36] $end
$var wire 1 F, registers [37] $end
$var wire 1 G, registers [38] $end
$var wire 1 H, registers [39] $end
$var wire 1 I, registers [40] $end
$var wire 1 J, registers [41] $end
$var wire 1 K, registers [42] $end
$var wire 1 L, registers [43] $end
$var wire 1 M, registers [44] $end
$var wire 1 N, registers [45] $end
$var wire 1 O, registers [46] $end
$var wire 1 P, registers [47] $end
$var wire 1 Q, registers [48] $end
$var wire 1 R, registers [49] $end
$var wire 1 S, registers [50] $end
$var wire 1 T, registers [51] $end
$var wire 1 U, registers [52] $end
$var wire 1 V, registers [53] $end
$var wire 1 W, registers [54] $end
$var wire 1 X, registers [55] $end
$var wire 1 Y, registers [56] $end
$var wire 1 Z, registers [57] $end
$var wire 1 [, registers [58] $end
$var wire 1 \, registers [59] $end
$var wire 1 ], registers [60] $end
$var wire 1 ^, registers [61] $end
$var wire 1 _, registers [62] $end
$var wire 1 `, registers [63] $end
$var wire 1 a, registers [64] $end
$var wire 1 b, registers [65] $end
$var wire 1 c, registers [66] $end
$var wire 1 d, registers [67] $end
$var wire 1 e, registers [68] $end
$var wire 1 f, registers [69] $end
$var wire 1 g, registers [70] $end
$var wire 1 h, registers [71] $end
$var wire 1 i, registers [72] $end
$var wire 1 j, registers [73] $end
$var wire 1 k, registers [74] $end
$var wire 1 l, registers [75] $end
$var wire 1 m, registers [76] $end
$var wire 1 n, registers [77] $end
$var wire 1 o, registers [78] $end
$var wire 1 p, registers [79] $end
$var wire 1 q, registers [80] $end
$var wire 1 r, registers [81] $end
$var wire 1 s, registers [82] $end
$var wire 1 t, registers [83] $end
$var wire 1 u, registers [84] $end
$var wire 1 v, registers [85] $end
$var wire 1 w, registers [86] $end
$var wire 1 x, registers [87] $end
$var wire 1 y, registers [88] $end
$var wire 1 z, registers [89] $end
$var wire 1 {, registers [90] $end
$var wire 1 |, registers [91] $end
$var wire 1 }, registers [92] $end
$var wire 1 ~, registers [93] $end
$var wire 1 !- registers [94] $end
$var wire 1 "- registers [95] $end
$var wire 1 #- registers [96] $end
$var wire 1 $- registers [97] $end
$var wire 1 %- registers [98] $end
$var wire 1 &- registers [99] $end
$var wire 1 '- registers [100] $end
$var wire 1 (- registers [101] $end
$var wire 1 )- registers [102] $end
$var wire 1 *- registers [103] $end
$var wire 1 +- registers [104] $end
$var wire 1 ,- registers [105] $end
$var wire 1 -- registers [106] $end
$var wire 1 .- registers [107] $end
$var wire 1 /- registers [108] $end
$var wire 1 0- registers [109] $end
$var wire 1 1- registers [110] $end
$var wire 1 2- registers [111] $end
$var wire 1 3- registers [112] $end
$var wire 1 4- registers [113] $end
$var wire 1 5- registers [114] $end
$var wire 1 6- registers [115] $end
$var wire 1 7- registers [116] $end
$var wire 1 8- registers [117] $end
$var wire 1 9- registers [118] $end
$var wire 1 :- registers [119] $end
$var wire 1 ;- registers [120] $end
$var wire 1 <- registers [121] $end
$var wire 1 =- registers [122] $end
$var wire 1 >- registers [123] $end
$var wire 1 ?- registers [124] $end
$var wire 1 @- registers [125] $end
$var wire 1 A- registers [126] $end
$var wire 1 B- registers [127] $end
$var wire 1 C- mask_1 [0] $end
$var wire 1 D- mask_1 [1] $end
$var wire 1 E- mask_1 [2] $end
$var wire 1 F- mask_1 [3] $end
$var wire 1 G- mask_1 [4] $end
$var wire 1 H- mask_1 [5] $end
$var wire 1 I- mask_1 [6] $end
$var wire 1 J- mask_1 [7] $end

$scope module ind_reg1 $end
$var parameter 32 K- bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 J- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 B- read [15] $end
$var wire 1 A- read [14] $end
$var wire 1 @- read [13] $end
$var wire 1 ?- read [12] $end
$var wire 1 >- read [11] $end
$var wire 1 =- read [10] $end
$var wire 1 <- read [9] $end
$var wire 1 ;- read [8] $end
$var wire 1 :- read [7] $end
$var wire 1 9- read [6] $end
$var wire 1 8- read [5] $end
$var wire 1 7- read [4] $end
$var wire 1 6- read [3] $end
$var wire 1 5- read [2] $end
$var wire 1 4- read [1] $end
$var wire 1 3- read [0] $end

$scope module flop[15] $end
$var wire 1 B- q $end
$var wire 1 L- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M- state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 A- q $end
$var wire 1 N- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O- state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 @- q $end
$var wire 1 P- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q- state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ?- q $end
$var wire 1 R- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S- state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 >- q $end
$var wire 1 T- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U- state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 =- q $end
$var wire 1 V- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W- state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 <- q $end
$var wire 1 X- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y- state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ;- q $end
$var wire 1 Z- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [- state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 :- q $end
$var wire 1 \- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]- state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 9- q $end
$var wire 1 ^- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _- state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 8- q $end
$var wire 1 `- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a- state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 7- q $end
$var wire 1 b- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c- state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 6- q $end
$var wire 1 d- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e- state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 5- q $end
$var wire 1 f- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g- state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 4- q $end
$var wire 1 h- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i- state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 3- q $end
$var wire 1 j- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k- state $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var parameter 32 l- bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 I- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 2- read [15] $end
$var wire 1 1- read [14] $end
$var wire 1 0- read [13] $end
$var wire 1 /- read [12] $end
$var wire 1 .- read [11] $end
$var wire 1 -- read [10] $end
$var wire 1 ,- read [9] $end
$var wire 1 +- read [8] $end
$var wire 1 *- read [7] $end
$var wire 1 )- read [6] $end
$var wire 1 (- read [5] $end
$var wire 1 '- read [4] $end
$var wire 1 &- read [3] $end
$var wire 1 %- read [2] $end
$var wire 1 $- read [1] $end
$var wire 1 #- read [0] $end

$scope module flop[15] $end
$var wire 1 2- q $end
$var wire 1 m- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n- state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 1- q $end
$var wire 1 o- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p- state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 0- q $end
$var wire 1 q- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r- state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 /- q $end
$var wire 1 s- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t- state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 .- q $end
$var wire 1 u- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v- state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 -- q $end
$var wire 1 w- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x- state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ,- q $end
$var wire 1 y- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z- state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 +- q $end
$var wire 1 {- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |- state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 *- q $end
$var wire 1 }- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~- state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 )- q $end
$var wire 1 !. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ". state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 (- q $end
$var wire 1 #. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $. state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 '- q $end
$var wire 1 %. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &. state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 &- q $end
$var wire 1 '. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (. state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 %- q $end
$var wire 1 ). d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *. state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 $- q $end
$var wire 1 +. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,. state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 #- q $end
$var wire 1 -. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .. state $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var parameter 32 /. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 H- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 "- read [15] $end
$var wire 1 !- read [14] $end
$var wire 1 ~, read [13] $end
$var wire 1 }, read [12] $end
$var wire 1 |, read [11] $end
$var wire 1 {, read [10] $end
$var wire 1 z, read [9] $end
$var wire 1 y, read [8] $end
$var wire 1 x, read [7] $end
$var wire 1 w, read [6] $end
$var wire 1 v, read [5] $end
$var wire 1 u, read [4] $end
$var wire 1 t, read [3] $end
$var wire 1 s, read [2] $end
$var wire 1 r, read [1] $end
$var wire 1 q, read [0] $end

$scope module flop[15] $end
$var wire 1 "- q $end
$var wire 1 0. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 !- q $end
$var wire 1 2. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ~, q $end
$var wire 1 4. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 }, q $end
$var wire 1 6. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 |, q $end
$var wire 1 8. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 {, q $end
$var wire 1 :. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 z, q $end
$var wire 1 <. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =. state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 y, q $end
$var wire 1 >. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?. state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 x, q $end
$var wire 1 @. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A. state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 w, q $end
$var wire 1 B. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C. state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 v, q $end
$var wire 1 D. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E. state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 u, q $end
$var wire 1 F. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G. state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 t, q $end
$var wire 1 H. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I. state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 s, q $end
$var wire 1 J. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K. state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 r, q $end
$var wire 1 L. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M. state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 q, q $end
$var wire 1 N. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O. state $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var parameter 32 P. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 G- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 p, read [15] $end
$var wire 1 o, read [14] $end
$var wire 1 n, read [13] $end
$var wire 1 m, read [12] $end
$var wire 1 l, read [11] $end
$var wire 1 k, read [10] $end
$var wire 1 j, read [9] $end
$var wire 1 i, read [8] $end
$var wire 1 h, read [7] $end
$var wire 1 g, read [6] $end
$var wire 1 f, read [5] $end
$var wire 1 e, read [4] $end
$var wire 1 d, read [3] $end
$var wire 1 c, read [2] $end
$var wire 1 b, read [1] $end
$var wire 1 a, read [0] $end

$scope module flop[15] $end
$var wire 1 p, q $end
$var wire 1 Q. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 o, q $end
$var wire 1 S. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 n, q $end
$var wire 1 U. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 m, q $end
$var wire 1 W. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 l, q $end
$var wire 1 Y. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 k, q $end
$var wire 1 [. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 j, q $end
$var wire 1 ]. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^. state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 i, q $end
$var wire 1 _. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `. state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 h, q $end
$var wire 1 a. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b. state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 g, q $end
$var wire 1 c. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d. state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 f, q $end
$var wire 1 e. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f. state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 e, q $end
$var wire 1 g. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h. state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 d, q $end
$var wire 1 i. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j. state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 c, q $end
$var wire 1 k. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l. state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 b, q $end
$var wire 1 m. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n. state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 a, q $end
$var wire 1 o. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p. state $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var parameter 32 q. bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 F- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 `, read [15] $end
$var wire 1 _, read [14] $end
$var wire 1 ^, read [13] $end
$var wire 1 ], read [12] $end
$var wire 1 \, read [11] $end
$var wire 1 [, read [10] $end
$var wire 1 Z, read [9] $end
$var wire 1 Y, read [8] $end
$var wire 1 X, read [7] $end
$var wire 1 W, read [6] $end
$var wire 1 V, read [5] $end
$var wire 1 U, read [4] $end
$var wire 1 T, read [3] $end
$var wire 1 S, read [2] $end
$var wire 1 R, read [1] $end
$var wire 1 Q, read [0] $end

$scope module flop[15] $end
$var wire 1 `, q $end
$var wire 1 r. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s. state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 _, q $end
$var wire 1 t. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u. state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ^, q $end
$var wire 1 v. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w. state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ], q $end
$var wire 1 x. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y. state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 \, q $end
$var wire 1 z. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {. state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 [, q $end
$var wire 1 |. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }. state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 Z, q $end
$var wire 1 ~. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 Y, q $end
$var wire 1 "/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 X, q $end
$var wire 1 $/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 W, q $end
$var wire 1 &/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 V, q $end
$var wire 1 (/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 U, q $end
$var wire 1 */ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 T, q $end
$var wire 1 ,/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 S, q $end
$var wire 1 ./ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 // state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 R, q $end
$var wire 1 0/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 Q, q $end
$var wire 1 2/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3/ state $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var parameter 32 4/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 E- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 P, read [15] $end
$var wire 1 O, read [14] $end
$var wire 1 N, read [13] $end
$var wire 1 M, read [12] $end
$var wire 1 L, read [11] $end
$var wire 1 K, read [10] $end
$var wire 1 J, read [9] $end
$var wire 1 I, read [8] $end
$var wire 1 H, read [7] $end
$var wire 1 G, read [6] $end
$var wire 1 F, read [5] $end
$var wire 1 E, read [4] $end
$var wire 1 D, read [3] $end
$var wire 1 C, read [2] $end
$var wire 1 B, read [1] $end
$var wire 1 A, read [0] $end

$scope module flop[15] $end
$var wire 1 P, q $end
$var wire 1 5/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 O, q $end
$var wire 1 7/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 N, q $end
$var wire 1 9/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 M, q $end
$var wire 1 ;/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 </ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 L, q $end
$var wire 1 =/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 K, q $end
$var wire 1 ?/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 J, q $end
$var wire 1 A/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 I, q $end
$var wire 1 C/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 H, q $end
$var wire 1 E/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 G, q $end
$var wire 1 G/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 F, q $end
$var wire 1 I/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 E, q $end
$var wire 1 K/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 D, q $end
$var wire 1 M/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 C, q $end
$var wire 1 O/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 B, q $end
$var wire 1 Q/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 A, q $end
$var wire 1 S/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T/ state $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var parameter 32 U/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 D- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 @, read [15] $end
$var wire 1 ?, read [14] $end
$var wire 1 >, read [13] $end
$var wire 1 =, read [12] $end
$var wire 1 <, read [11] $end
$var wire 1 ;, read [10] $end
$var wire 1 :, read [9] $end
$var wire 1 9, read [8] $end
$var wire 1 8, read [7] $end
$var wire 1 7, read [6] $end
$var wire 1 6, read [5] $end
$var wire 1 5, read [4] $end
$var wire 1 4, read [3] $end
$var wire 1 3, read [2] $end
$var wire 1 2, read [1] $end
$var wire 1 1, read [0] $end

$scope module flop[15] $end
$var wire 1 @, q $end
$var wire 1 V/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 ?, q $end
$var wire 1 X/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 >, q $end
$var wire 1 Z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 =, q $end
$var wire 1 \/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 <, q $end
$var wire 1 ^/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _/ state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ;, q $end
$var wire 1 `/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a/ state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 :, q $end
$var wire 1 b/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c/ state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 9, q $end
$var wire 1 d/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e/ state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 8, q $end
$var wire 1 f/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g/ state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 7, q $end
$var wire 1 h/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i/ state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 6, q $end
$var wire 1 j/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k/ state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 5, q $end
$var wire 1 l/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m/ state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 4, q $end
$var wire 1 n/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o/ state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 3, q $end
$var wire 1 p/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q/ state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 2, q $end
$var wire 1 r/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s/ state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 1, q $end
$var wire 1 t/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u/ state $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var parameter 32 v/ bitlength $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 C- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 0, read [15] $end
$var wire 1 /, read [14] $end
$var wire 1 ., read [13] $end
$var wire 1 -, read [12] $end
$var wire 1 ,, read [11] $end
$var wire 1 +, read [10] $end
$var wire 1 *, read [9] $end
$var wire 1 ), read [8] $end
$var wire 1 (, read [7] $end
$var wire 1 ', read [6] $end
$var wire 1 &, read [5] $end
$var wire 1 %, read [4] $end
$var wire 1 $, read [3] $end
$var wire 1 #, read [2] $end
$var wire 1 ", read [1] $end
$var wire 1 !, read [0] $end

$scope module flop[15] $end
$var wire 1 0, q $end
$var wire 1 w/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x/ state $end
$upscope $end

$scope module flop[14] $end
$var wire 1 /, q $end
$var wire 1 y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z/ state $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ., q $end
$var wire 1 {/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |/ state $end
$upscope $end

$scope module flop[12] $end
$var wire 1 -, q $end
$var wire 1 }/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~/ state $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ,, q $end
$var wire 1 !0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "0 state $end
$upscope $end

$scope module flop[10] $end
$var wire 1 +, q $end
$var wire 1 #0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $0 state $end
$upscope $end

$scope module flop[9] $end
$var wire 1 *, q $end
$var wire 1 %0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &0 state $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ), q $end
$var wire 1 '0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (0 state $end
$upscope $end

$scope module flop[7] $end
$var wire 1 (, q $end
$var wire 1 )0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *0 state $end
$upscope $end

$scope module flop[6] $end
$var wire 1 ', q $end
$var wire 1 +0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,0 state $end
$upscope $end

$scope module flop[5] $end
$var wire 1 &, q $end
$var wire 1 -0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .0 state $end
$upscope $end

$scope module flop[4] $end
$var wire 1 %, q $end
$var wire 1 /0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 00 state $end
$upscope $end

$scope module flop[3] $end
$var wire 1 $, q $end
$var wire 1 10 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 20 state $end
$upscope $end

$scope module flop[2] $end
$var wire 1 #, q $end
$var wire 1 30 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 40 state $end
$upscope $end

$scope module flop[1] $end
$var wire 1 ", q $end
$var wire 1 50 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 60 state $end
$upscope $end

$scope module flop[0] $end
$var wire 1 !, q $end
$var wire 1 70 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 80 state $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 V( NOPEx $end
$var wire 1 W( NOPMem $end
$var wire 1 X( NOPWB $end
$var wire 1 C( sendNOP $end
$var wire 1 90 regEqual $end
$var wire 1 :0 RegS [2] $end
$var wire 1 ;0 RegS [1] $end
$var wire 1 <0 RegS [0] $end
$var wire 1 =0 RegT [2] $end
$var wire 1 >0 RegT [1] $end
$var wire 1 ?0 RegT [0] $end
$var wire 1 @0 compEx $end
$var wire 1 A0 compMem $end
$var wire 1 B0 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 }$ halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 C( SendNOP_In $end
$var wire 1 V( SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C0 state $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D0 state $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E0 state $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F0 state $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G0 state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H0 state $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I0 state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J0 state $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 }$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K0 state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L0 state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 V( q $end
$var wire 1 C( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M0 state $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N0 state $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O0 state $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P0 state $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q0 state $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R0 state $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S0 state $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T0 state $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U0 state $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V0 state $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W0 state $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X0 state $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y0 state $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z0 state $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [0 state $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \0 state $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]0 state $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^0 state $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _0 state $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `0 state $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a0 state $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b0 state $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c0 state $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d0 state $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e0 state $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f0 state $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g0 state $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h0 state $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i0 state $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j0 state $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k0 state $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l0 state $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m0 state $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n0 state $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o0 state $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p0 state $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q0 state $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r0 state $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s0 state $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t0 state $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u0 state $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v0 state $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w0 state $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x0 state $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y0 state $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z0 state $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {0 state $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |0 state $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }0 state $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~0 state $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !1 state $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "1 state $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #1 state $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $1 state $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %1 state $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &1 state $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '1 state $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (1 state $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )1 state $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *1 state $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +1 state $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,1 state $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -1 state $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .1 state $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /1 state $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 01 state $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 11 state $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 21 state $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 31 state $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 41 state $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 51 state $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 61 state $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 71 state $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 81 state $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 91 state $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :1 state $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;1 state $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <1 state $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =1 state $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >1 state $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?1 state $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @1 state $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A1 state $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B1 state $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C1 state $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D1 state $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E1 state $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F1 state $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G1 state $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H1 state $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I1 state $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J1 state $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K1 state $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L1 state $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M1 state $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N1 state $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O1 state $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P1 state $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q1 state $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R1 state $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S1 state $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T1 state $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U1 state $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V1 state $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W1 state $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X1 state $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y1 state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z1 state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [1 state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \1 state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]1 state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^1 state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _1 state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `1 state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a1 state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b1 state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c1 state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d1 state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e1 state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f1 state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g1 state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h1 state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i1 state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j1 state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k1 state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l1 state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m1 state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n1 state $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 o1 possibleslbi [15] $end
$var wire 1 p1 possibleslbi [14] $end
$var wire 1 q1 possibleslbi [13] $end
$var wire 1 r1 possibleslbi [12] $end
$var wire 1 s1 possibleslbi [11] $end
$var wire 1 t1 possibleslbi [10] $end
$var wire 1 u1 possibleslbi [9] $end
$var wire 1 v1 possibleslbi [8] $end
$var wire 1 w1 possibleslbi [7] $end
$var wire 1 x1 possibleslbi [6] $end
$var wire 1 y1 possibleslbi [5] $end
$var wire 1 z1 possibleslbi [4] $end
$var wire 1 {1 possibleslbi [3] $end
$var wire 1 |1 possibleslbi [2] $end
$var wire 1 }1 possibleslbi [1] $end
$var wire 1 ~1 possibleslbi [0] $end
$var wire 1 !2 shiftedA [15] $end
$var wire 1 "2 shiftedA [14] $end
$var wire 1 #2 shiftedA [13] $end
$var wire 1 $2 shiftedA [12] $end
$var wire 1 %2 shiftedA [11] $end
$var wire 1 &2 shiftedA [10] $end
$var wire 1 '2 shiftedA [9] $end
$var wire 1 (2 shiftedA [8] $end
$var wire 1 )2 shiftedA [7] $end
$var wire 1 *2 shiftedA [6] $end
$var wire 1 +2 shiftedA [5] $end
$var wire 1 ,2 shiftedA [4] $end
$var wire 1 -2 shiftedA [3] $end
$var wire 1 .2 shiftedA [2] $end
$var wire 1 /2 shiftedA [1] $end
$var wire 1 02 shiftedA [0] $end
$var wire 1 12 slbiOper $end
$var wire 1 22 aluout [15] $end
$var wire 1 32 aluout [14] $end
$var wire 1 42 aluout [13] $end
$var wire 1 52 aluout [12] $end
$var wire 1 62 aluout [11] $end
$var wire 1 72 aluout [10] $end
$var wire 1 82 aluout [9] $end
$var wire 1 92 aluout [8] $end
$var wire 1 :2 aluout [7] $end
$var wire 1 ;2 aluout [6] $end
$var wire 1 <2 aluout [5] $end
$var wire 1 =2 aluout [4] $end
$var wire 1 >2 aluout [3] $end
$var wire 1 ?2 aluout [2] $end
$var wire 1 @2 aluout [1] $end
$var wire 1 A2 aluout [0] $end
$var wire 1 B2 conditional $end
$var wire 1 C2 CF $end
$var wire 1 D2 Zero $end
$var wire 1 E2 Overflow $end
$var wire 1 F2 Brchcnd $end
$var wire 1 G2 Oper [1] $end
$var wire 1 H2 Oper [0] $end
$var wire 1 I2 altb $end
$var wire 1 J2 coout [15] $end
$var wire 1 K2 coout [14] $end
$var wire 1 L2 coout [13] $end
$var wire 1 M2 coout [12] $end
$var wire 1 N2 coout [11] $end
$var wire 1 O2 coout [10] $end
$var wire 1 P2 coout [9] $end
$var wire 1 Q2 coout [8] $end
$var wire 1 R2 coout [7] $end
$var wire 1 S2 coout [6] $end
$var wire 1 T2 coout [5] $end
$var wire 1 U2 coout [4] $end
$var wire 1 V2 coout [3] $end
$var wire 1 W2 coout [2] $end
$var wire 1 X2 coout [1] $end
$var wire 1 Y2 coout [0] $end
$var wire 1 Z2 sltoper [1] $end
$var wire 1 [2 sltoper [0] $end
$var wire 1 \2 ltout [15] $end
$var wire 1 ]2 ltout [14] $end
$var wire 1 ^2 ltout [13] $end
$var wire 1 _2 ltout [12] $end
$var wire 1 `2 ltout [11] $end
$var wire 1 a2 ltout [10] $end
$var wire 1 b2 ltout [9] $end
$var wire 1 c2 ltout [8] $end
$var wire 1 d2 ltout [7] $end
$var wire 1 e2 ltout [6] $end
$var wire 1 f2 ltout [5] $end
$var wire 1 g2 ltout [4] $end
$var wire 1 h2 ltout [3] $end
$var wire 1 i2 ltout [2] $end
$var wire 1 j2 ltout [1] $end
$var wire 1 k2 ltout [0] $end
$var wire 1 l2 seqoper [1] $end
$var wire 1 m2 seqoper [0] $end
$var wire 1 n2 aeqb $end
$var wire 1 o2 seqout [15] $end
$var wire 1 p2 seqout [14] $end
$var wire 1 q2 seqout [13] $end
$var wire 1 r2 seqout [12] $end
$var wire 1 s2 seqout [11] $end
$var wire 1 t2 seqout [10] $end
$var wire 1 u2 seqout [9] $end
$var wire 1 v2 seqout [8] $end
$var wire 1 w2 seqout [7] $end
$var wire 1 x2 seqout [6] $end
$var wire 1 y2 seqout [5] $end
$var wire 1 z2 seqout [4] $end
$var wire 1 {2 seqout [3] $end
$var wire 1 |2 seqout [2] $end
$var wire 1 }2 seqout [1] $end
$var wire 1 ~2 seqout [0] $end
$var wire 1 !3 alteb $end
$var wire 1 "3 sleoper [1] $end
$var wire 1 #3 sleoper [0] $end
$var wire 1 $3 sleout [15] $end
$var wire 1 %3 sleout [14] $end
$var wire 1 &3 sleout [13] $end
$var wire 1 '3 sleout [12] $end
$var wire 1 (3 sleout [11] $end
$var wire 1 )3 sleout [10] $end
$var wire 1 *3 sleout [9] $end
$var wire 1 +3 sleout [8] $end
$var wire 1 ,3 sleout [7] $end
$var wire 1 -3 sleout [6] $end
$var wire 1 .3 sleout [5] $end
$var wire 1 /3 sleout [4] $end
$var wire 1 03 sleout [3] $end
$var wire 1 13 sleout [2] $end
$var wire 1 23 sleout [1] $end
$var wire 1 33 sleout [0] $end
$var wire 1 43 SetCtrl [1] $end
$var wire 1 53 SetCtrl [0] $end
$var wire 1 63 carry $end
$var wire 1 73 SLT $end
$var wire 1 83 SEQ $end
$var wire 1 93 SLE $end
$var wire 1 :3 greater $end
$var wire 1 ;3 ReverseOut [15] $end
$var wire 1 <3 ReverseOut [14] $end
$var wire 1 =3 ReverseOut [13] $end
$var wire 1 >3 ReverseOut [12] $end
$var wire 1 ?3 ReverseOut [11] $end
$var wire 1 @3 ReverseOut [10] $end
$var wire 1 A3 ReverseOut [9] $end
$var wire 1 B3 ReverseOut [8] $end
$var wire 1 C3 ReverseOut [7] $end
$var wire 1 D3 ReverseOut [6] $end
$var wire 1 E3 ReverseOut [5] $end
$var wire 1 F3 ReverseOut [4] $end
$var wire 1 G3 ReverseOut [3] $end
$var wire 1 H3 ReverseOut [2] $end
$var wire 1 I3 ReverseOut [1] $end
$var wire 1 J3 ReverseOut [0] $end
$var wire 1 K3 reverse [15] $end
$var wire 1 L3 reverse [14] $end
$var wire 1 M3 reverse [13] $end
$var wire 1 N3 reverse [12] $end
$var wire 1 O3 reverse [11] $end
$var wire 1 P3 reverse [10] $end
$var wire 1 Q3 reverse [9] $end
$var wire 1 R3 reverse [8] $end
$var wire 1 S3 reverse [7] $end
$var wire 1 T3 reverse [6] $end
$var wire 1 U3 reverse [5] $end
$var wire 1 V3 reverse [4] $end
$var wire 1 W3 reverse [3] $end
$var wire 1 X3 reverse [2] $end
$var wire 1 Y3 reverse [1] $end
$var wire 1 Z3 reverse [0] $end

$scope module shift $end
$var parameter 32 [3 OPERAND_WIDTH $end
$var parameter 32 \3 SHAMT_WIDTH $end
$var parameter 32 ]3 NUM_OPERATIONS $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 b3 Oper [1] $end
$var wire 1 c3 Oper [0] $end
$var wire 1 !2 Out [15] $end
$var wire 1 "2 Out [14] $end
$var wire 1 #2 Out [13] $end
$var wire 1 $2 Out [12] $end
$var wire 1 %2 Out [11] $end
$var wire 1 &2 Out [10] $end
$var wire 1 '2 Out [9] $end
$var wire 1 (2 Out [8] $end
$var wire 1 )2 Out [7] $end
$var wire 1 *2 Out [6] $end
$var wire 1 +2 Out [5] $end
$var wire 1 ,2 Out [4] $end
$var wire 1 -2 Out [3] $end
$var wire 1 .2 Out [2] $end
$var wire 1 /2 Out [1] $end
$var wire 1 02 Out [0] $end
$var wire 1 d3 shift_left_r [15] $end
$var wire 1 e3 shift_left_r [14] $end
$var wire 1 f3 shift_left_r [13] $end
$var wire 1 g3 shift_left_r [12] $end
$var wire 1 h3 shift_left_r [11] $end
$var wire 1 i3 shift_left_r [10] $end
$var wire 1 j3 shift_left_r [9] $end
$var wire 1 k3 shift_left_r [8] $end
$var wire 1 l3 shift_left_r [7] $end
$var wire 1 m3 shift_left_r [6] $end
$var wire 1 n3 shift_left_r [5] $end
$var wire 1 o3 shift_left_r [4] $end
$var wire 1 p3 shift_left_r [3] $end
$var wire 1 q3 shift_left_r [2] $end
$var wire 1 r3 shift_left_r [1] $end
$var wire 1 s3 shift_left_r [0] $end
$var wire 1 t3 rotate_left_r [15] $end
$var wire 1 u3 rotate_left_r [14] $end
$var wire 1 v3 rotate_left_r [13] $end
$var wire 1 w3 rotate_left_r [12] $end
$var wire 1 x3 rotate_left_r [11] $end
$var wire 1 y3 rotate_left_r [10] $end
$var wire 1 z3 rotate_left_r [9] $end
$var wire 1 {3 rotate_left_r [8] $end
$var wire 1 |3 rotate_left_r [7] $end
$var wire 1 }3 rotate_left_r [6] $end
$var wire 1 ~3 rotate_left_r [5] $end
$var wire 1 !4 rotate_left_r [4] $end
$var wire 1 "4 rotate_left_r [3] $end
$var wire 1 #4 rotate_left_r [2] $end
$var wire 1 $4 rotate_left_r [1] $end
$var wire 1 %4 rotate_left_r [0] $end
$var wire 1 &4 shift_right_l_r [15] $end
$var wire 1 '4 shift_right_l_r [14] $end
$var wire 1 (4 shift_right_l_r [13] $end
$var wire 1 )4 shift_right_l_r [12] $end
$var wire 1 *4 shift_right_l_r [11] $end
$var wire 1 +4 shift_right_l_r [10] $end
$var wire 1 ,4 shift_right_l_r [9] $end
$var wire 1 -4 shift_right_l_r [8] $end
$var wire 1 .4 shift_right_l_r [7] $end
$var wire 1 /4 shift_right_l_r [6] $end
$var wire 1 04 shift_right_l_r [5] $end
$var wire 1 14 shift_right_l_r [4] $end
$var wire 1 24 shift_right_l_r [3] $end
$var wire 1 34 shift_right_l_r [2] $end
$var wire 1 44 shift_right_l_r [1] $end
$var wire 1 54 shift_right_l_r [0] $end
$var wire 1 64 rotate_right_r [15] $end
$var wire 1 74 rotate_right_r [14] $end
$var wire 1 84 rotate_right_r [13] $end
$var wire 1 94 rotate_right_r [12] $end
$var wire 1 :4 rotate_right_r [11] $end
$var wire 1 ;4 rotate_right_r [10] $end
$var wire 1 <4 rotate_right_r [9] $end
$var wire 1 =4 rotate_right_r [8] $end
$var wire 1 >4 rotate_right_r [7] $end
$var wire 1 ?4 rotate_right_r [6] $end
$var wire 1 @4 rotate_right_r [5] $end
$var wire 1 A4 rotate_right_r [4] $end
$var wire 1 B4 rotate_right_r [3] $end
$var wire 1 C4 rotate_right_r [2] $end
$var wire 1 D4 rotate_right_r [1] $end
$var wire 1 E4 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 F4 OPERAND_WIDTH $end
$var parameter 32 G4 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 d3 result [15] $end
$var wire 1 e3 result [14] $end
$var wire 1 f3 result [13] $end
$var wire 1 g3 result [12] $end
$var wire 1 h3 result [11] $end
$var wire 1 i3 result [10] $end
$var wire 1 j3 result [9] $end
$var wire 1 k3 result [8] $end
$var wire 1 l3 result [7] $end
$var wire 1 m3 result [6] $end
$var wire 1 n3 result [5] $end
$var wire 1 o3 result [4] $end
$var wire 1 p3 result [3] $end
$var wire 1 q3 result [2] $end
$var wire 1 r3 result [1] $end
$var wire 1 s3 result [0] $end
$var wire 1 H4 temp1 [15] $end
$var wire 1 I4 temp1 [14] $end
$var wire 1 J4 temp1 [13] $end
$var wire 1 K4 temp1 [12] $end
$var wire 1 L4 temp1 [11] $end
$var wire 1 M4 temp1 [10] $end
$var wire 1 N4 temp1 [9] $end
$var wire 1 O4 temp1 [8] $end
$var wire 1 P4 temp1 [7] $end
$var wire 1 Q4 temp1 [6] $end
$var wire 1 R4 temp1 [5] $end
$var wire 1 S4 temp1 [4] $end
$var wire 1 T4 temp1 [3] $end
$var wire 1 U4 temp1 [2] $end
$var wire 1 V4 temp1 [1] $end
$var wire 1 W4 temp1 [0] $end
$var wire 1 X4 temp2 [15] $end
$var wire 1 Y4 temp2 [14] $end
$var wire 1 Z4 temp2 [13] $end
$var wire 1 [4 temp2 [12] $end
$var wire 1 \4 temp2 [11] $end
$var wire 1 ]4 temp2 [10] $end
$var wire 1 ^4 temp2 [9] $end
$var wire 1 _4 temp2 [8] $end
$var wire 1 `4 temp2 [7] $end
$var wire 1 a4 temp2 [6] $end
$var wire 1 b4 temp2 [5] $end
$var wire 1 c4 temp2 [4] $end
$var wire 1 d4 temp2 [3] $end
$var wire 1 e4 temp2 [2] $end
$var wire 1 f4 temp2 [1] $end
$var wire 1 g4 temp2 [0] $end
$var wire 1 h4 temp3 [15] $end
$var wire 1 i4 temp3 [14] $end
$var wire 1 j4 temp3 [13] $end
$var wire 1 k4 temp3 [12] $end
$var wire 1 l4 temp3 [11] $end
$var wire 1 m4 temp3 [10] $end
$var wire 1 n4 temp3 [9] $end
$var wire 1 o4 temp3 [8] $end
$var wire 1 p4 temp3 [7] $end
$var wire 1 q4 temp3 [6] $end
$var wire 1 r4 temp3 [5] $end
$var wire 1 s4 temp3 [4] $end
$var wire 1 t4 temp3 [3] $end
$var wire 1 u4 temp3 [2] $end
$var wire 1 v4 temp3 [1] $end
$var wire 1 w4 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 x4 OPERAND_WIDTH $end
$var parameter 32 y4 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 t3 result [15] $end
$var wire 1 u3 result [14] $end
$var wire 1 v3 result [13] $end
$var wire 1 w3 result [12] $end
$var wire 1 x3 result [11] $end
$var wire 1 y3 result [10] $end
$var wire 1 z3 result [9] $end
$var wire 1 {3 result [8] $end
$var wire 1 |3 result [7] $end
$var wire 1 }3 result [6] $end
$var wire 1 ~3 result [5] $end
$var wire 1 !4 result [4] $end
$var wire 1 "4 result [3] $end
$var wire 1 #4 result [2] $end
$var wire 1 $4 result [1] $end
$var wire 1 %4 result [0] $end
$var wire 1 z4 temp1 [15] $end
$var wire 1 {4 temp1 [14] $end
$var wire 1 |4 temp1 [13] $end
$var wire 1 }4 temp1 [12] $end
$var wire 1 ~4 temp1 [11] $end
$var wire 1 !5 temp1 [10] $end
$var wire 1 "5 temp1 [9] $end
$var wire 1 #5 temp1 [8] $end
$var wire 1 $5 temp1 [7] $end
$var wire 1 %5 temp1 [6] $end
$var wire 1 &5 temp1 [5] $end
$var wire 1 '5 temp1 [4] $end
$var wire 1 (5 temp1 [3] $end
$var wire 1 )5 temp1 [2] $end
$var wire 1 *5 temp1 [1] $end
$var wire 1 +5 temp1 [0] $end
$var wire 1 ,5 temp2 [15] $end
$var wire 1 -5 temp2 [14] $end
$var wire 1 .5 temp2 [13] $end
$var wire 1 /5 temp2 [12] $end
$var wire 1 05 temp2 [11] $end
$var wire 1 15 temp2 [10] $end
$var wire 1 25 temp2 [9] $end
$var wire 1 35 temp2 [8] $end
$var wire 1 45 temp2 [7] $end
$var wire 1 55 temp2 [6] $end
$var wire 1 65 temp2 [5] $end
$var wire 1 75 temp2 [4] $end
$var wire 1 85 temp2 [3] $end
$var wire 1 95 temp2 [2] $end
$var wire 1 :5 temp2 [1] $end
$var wire 1 ;5 temp2 [0] $end
$var wire 1 <5 temp3 [15] $end
$var wire 1 =5 temp3 [14] $end
$var wire 1 >5 temp3 [13] $end
$var wire 1 ?5 temp3 [12] $end
$var wire 1 @5 temp3 [11] $end
$var wire 1 A5 temp3 [10] $end
$var wire 1 B5 temp3 [9] $end
$var wire 1 C5 temp3 [8] $end
$var wire 1 D5 temp3 [7] $end
$var wire 1 E5 temp3 [6] $end
$var wire 1 F5 temp3 [5] $end
$var wire 1 G5 temp3 [4] $end
$var wire 1 H5 temp3 [3] $end
$var wire 1 I5 temp3 [2] $end
$var wire 1 J5 temp3 [1] $end
$var wire 1 K5 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 L5 OPERAND_WIDTH $end
$var parameter 32 M5 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 &4 result [15] $end
$var wire 1 '4 result [14] $end
$var wire 1 (4 result [13] $end
$var wire 1 )4 result [12] $end
$var wire 1 *4 result [11] $end
$var wire 1 +4 result [10] $end
$var wire 1 ,4 result [9] $end
$var wire 1 -4 result [8] $end
$var wire 1 .4 result [7] $end
$var wire 1 /4 result [6] $end
$var wire 1 04 result [5] $end
$var wire 1 14 result [4] $end
$var wire 1 24 result [3] $end
$var wire 1 34 result [2] $end
$var wire 1 44 result [1] $end
$var wire 1 54 result [0] $end
$var wire 1 N5 temp1 [15] $end
$var wire 1 O5 temp1 [14] $end
$var wire 1 P5 temp1 [13] $end
$var wire 1 Q5 temp1 [12] $end
$var wire 1 R5 temp1 [11] $end
$var wire 1 S5 temp1 [10] $end
$var wire 1 T5 temp1 [9] $end
$var wire 1 U5 temp1 [8] $end
$var wire 1 V5 temp1 [7] $end
$var wire 1 W5 temp1 [6] $end
$var wire 1 X5 temp1 [5] $end
$var wire 1 Y5 temp1 [4] $end
$var wire 1 Z5 temp1 [3] $end
$var wire 1 [5 temp1 [2] $end
$var wire 1 \5 temp1 [1] $end
$var wire 1 ]5 temp1 [0] $end
$var wire 1 ^5 temp2 [15] $end
$var wire 1 _5 temp2 [14] $end
$var wire 1 `5 temp2 [13] $end
$var wire 1 a5 temp2 [12] $end
$var wire 1 b5 temp2 [11] $end
$var wire 1 c5 temp2 [10] $end
$var wire 1 d5 temp2 [9] $end
$var wire 1 e5 temp2 [8] $end
$var wire 1 f5 temp2 [7] $end
$var wire 1 g5 temp2 [6] $end
$var wire 1 h5 temp2 [5] $end
$var wire 1 i5 temp2 [4] $end
$var wire 1 j5 temp2 [3] $end
$var wire 1 k5 temp2 [2] $end
$var wire 1 l5 temp2 [1] $end
$var wire 1 m5 temp2 [0] $end
$var wire 1 n5 temp3 [15] $end
$var wire 1 o5 temp3 [14] $end
$var wire 1 p5 temp3 [13] $end
$var wire 1 q5 temp3 [12] $end
$var wire 1 r5 temp3 [11] $end
$var wire 1 s5 temp3 [10] $end
$var wire 1 t5 temp3 [9] $end
$var wire 1 u5 temp3 [8] $end
$var wire 1 v5 temp3 [7] $end
$var wire 1 w5 temp3 [6] $end
$var wire 1 x5 temp3 [5] $end
$var wire 1 y5 temp3 [4] $end
$var wire 1 z5 temp3 [3] $end
$var wire 1 {5 temp3 [2] $end
$var wire 1 |5 temp3 [1] $end
$var wire 1 }5 temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 ~5 OPERAND_WIDTH $end
$var parameter 32 !6 SHAMT_WIDTH $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 64 result [15] $end
$var wire 1 74 result [14] $end
$var wire 1 84 result [13] $end
$var wire 1 94 result [12] $end
$var wire 1 :4 result [11] $end
$var wire 1 ;4 result [10] $end
$var wire 1 <4 result [9] $end
$var wire 1 =4 result [8] $end
$var wire 1 >4 result [7] $end
$var wire 1 ?4 result [6] $end
$var wire 1 @4 result [5] $end
$var wire 1 A4 result [4] $end
$var wire 1 B4 result [3] $end
$var wire 1 C4 result [2] $end
$var wire 1 D4 result [1] $end
$var wire 1 E4 result [0] $end
$var wire 1 "6 temp1 [15] $end
$var wire 1 #6 temp1 [14] $end
$var wire 1 $6 temp1 [13] $end
$var wire 1 %6 temp1 [12] $end
$var wire 1 &6 temp1 [11] $end
$var wire 1 '6 temp1 [10] $end
$var wire 1 (6 temp1 [9] $end
$var wire 1 )6 temp1 [8] $end
$var wire 1 *6 temp1 [7] $end
$var wire 1 +6 temp1 [6] $end
$var wire 1 ,6 temp1 [5] $end
$var wire 1 -6 temp1 [4] $end
$var wire 1 .6 temp1 [3] $end
$var wire 1 /6 temp1 [2] $end
$var wire 1 06 temp1 [1] $end
$var wire 1 16 temp1 [0] $end
$var wire 1 26 temp2 [15] $end
$var wire 1 36 temp2 [14] $end
$var wire 1 46 temp2 [13] $end
$var wire 1 56 temp2 [12] $end
$var wire 1 66 temp2 [11] $end
$var wire 1 76 temp2 [10] $end
$var wire 1 86 temp2 [9] $end
$var wire 1 96 temp2 [8] $end
$var wire 1 :6 temp2 [7] $end
$var wire 1 ;6 temp2 [6] $end
$var wire 1 <6 temp2 [5] $end
$var wire 1 =6 temp2 [4] $end
$var wire 1 >6 temp2 [3] $end
$var wire 1 ?6 temp2 [2] $end
$var wire 1 @6 temp2 [1] $end
$var wire 1 A6 temp2 [0] $end
$var wire 1 B6 temp3 [15] $end
$var wire 1 C6 temp3 [14] $end
$var wire 1 D6 temp3 [13] $end
$var wire 1 E6 temp3 [12] $end
$var wire 1 F6 temp3 [11] $end
$var wire 1 G6 temp3 [10] $end
$var wire 1 H6 temp3 [9] $end
$var wire 1 I6 temp3 [8] $end
$var wire 1 J6 temp3 [7] $end
$var wire 1 K6 temp3 [6] $end
$var wire 1 L6 temp3 [5] $end
$var wire 1 M6 temp3 [4] $end
$var wire 1 N6 temp3 [3] $end
$var wire 1 O6 temp3 [2] $end
$var wire 1 P6 temp3 [1] $end
$var wire 1 Q6 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var parameter 32 R6 OPERAND_WIDTH $end
$var parameter 32 S6 NUM_OPERATIONS $end
$var wire 1 o1 InA [15] $end
$var wire 1 p1 InA [14] $end
$var wire 1 q1 InA [13] $end
$var wire 1 r1 InA [12] $end
$var wire 1 s1 InA [11] $end
$var wire 1 t1 InA [10] $end
$var wire 1 u1 InA [9] $end
$var wire 1 v1 InA [8] $end
$var wire 1 w1 InA [7] $end
$var wire 1 x1 InA [6] $end
$var wire 1 y1 InA [5] $end
$var wire 1 z1 InA [4] $end
$var wire 1 {1 InA [3] $end
$var wire 1 |1 InA [2] $end
$var wire 1 }1 InA [1] $end
$var wire 1 ~1 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 T6 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 U6 sign $end
$var wire 1 22 Out [15] $end
$var wire 1 32 Out [14] $end
$var wire 1 42 Out [13] $end
$var wire 1 52 Out [12] $end
$var wire 1 62 Out [11] $end
$var wire 1 72 Out [10] $end
$var wire 1 82 Out [9] $end
$var wire 1 92 Out [8] $end
$var wire 1 :2 Out [7] $end
$var wire 1 ;2 Out [6] $end
$var wire 1 <2 Out [5] $end
$var wire 1 =2 Out [4] $end
$var wire 1 >2 Out [3] $end
$var wire 1 ?2 Out [2] $end
$var wire 1 @2 Out [1] $end
$var wire 1 A2 Out [0] $end
$var wire 1 B2 signOut $end
$var wire 1 E2 Ofl $end
$var wire 1 D2 Zero $end
$var wire 1 C2 carryFlag $end
$var wire 1 V6 InA_invA [15] $end
$var wire 1 W6 InA_invA [14] $end
$var wire 1 X6 InA_invA [13] $end
$var wire 1 Y6 InA_invA [12] $end
$var wire 1 Z6 InA_invA [11] $end
$var wire 1 [6 InA_invA [10] $end
$var wire 1 \6 InA_invA [9] $end
$var wire 1 ]6 InA_invA [8] $end
$var wire 1 ^6 InA_invA [7] $end
$var wire 1 _6 InA_invA [6] $end
$var wire 1 `6 InA_invA [5] $end
$var wire 1 a6 InA_invA [4] $end
$var wire 1 b6 InA_invA [3] $end
$var wire 1 c6 InA_invA [2] $end
$var wire 1 d6 InA_invA [1] $end
$var wire 1 e6 InA_invA [0] $end
$var wire 1 f6 InB_invB [15] $end
$var wire 1 g6 InB_invB [14] $end
$var wire 1 h6 InB_invB [13] $end
$var wire 1 i6 InB_invB [12] $end
$var wire 1 j6 InB_invB [11] $end
$var wire 1 k6 InB_invB [10] $end
$var wire 1 l6 InB_invB [9] $end
$var wire 1 m6 InB_invB [8] $end
$var wire 1 n6 InB_invB [7] $end
$var wire 1 o6 InB_invB [6] $end
$var wire 1 p6 InB_invB [5] $end
$var wire 1 q6 InB_invB [4] $end
$var wire 1 r6 InB_invB [3] $end
$var wire 1 s6 InB_invB [2] $end
$var wire 1 t6 InB_invB [1] $end
$var wire 1 u6 InB_invB [0] $end
$var wire 1 v6 barrel [15] $end
$var wire 1 w6 barrel [14] $end
$var wire 1 x6 barrel [13] $end
$var wire 1 y6 barrel [12] $end
$var wire 1 z6 barrel [11] $end
$var wire 1 {6 barrel [10] $end
$var wire 1 |6 barrel [9] $end
$var wire 1 }6 barrel [8] $end
$var wire 1 ~6 barrel [7] $end
$var wire 1 !7 barrel [6] $end
$var wire 1 "7 barrel [5] $end
$var wire 1 #7 barrel [4] $end
$var wire 1 $7 barrel [3] $end
$var wire 1 %7 barrel [2] $end
$var wire 1 &7 barrel [1] $end
$var wire 1 '7 barrel [0] $end
$var wire 1 (7 logic_gates_r [15] $end
$var wire 1 )7 logic_gates_r [14] $end
$var wire 1 *7 logic_gates_r [13] $end
$var wire 1 +7 logic_gates_r [12] $end
$var wire 1 ,7 logic_gates_r [11] $end
$var wire 1 -7 logic_gates_r [10] $end
$var wire 1 .7 logic_gates_r [9] $end
$var wire 1 /7 logic_gates_r [8] $end
$var wire 1 07 logic_gates_r [7] $end
$var wire 1 17 logic_gates_r [6] $end
$var wire 1 27 logic_gates_r [5] $end
$var wire 1 37 logic_gates_r [4] $end
$var wire 1 47 logic_gates_r [3] $end
$var wire 1 57 logic_gates_r [2] $end
$var wire 1 67 logic_gates_r [1] $end
$var wire 1 77 logic_gates_r [0] $end
$var wire 1 87 addition [15] $end
$var wire 1 97 addition [14] $end
$var wire 1 :7 addition [13] $end
$var wire 1 ;7 addition [12] $end
$var wire 1 <7 addition [11] $end
$var wire 1 =7 addition [10] $end
$var wire 1 >7 addition [9] $end
$var wire 1 ?7 addition [8] $end
$var wire 1 @7 addition [7] $end
$var wire 1 A7 addition [6] $end
$var wire 1 B7 addition [5] $end
$var wire 1 C7 addition [4] $end
$var wire 1 D7 addition [3] $end
$var wire 1 E7 addition [2] $end
$var wire 1 F7 addition [1] $end
$var wire 1 G7 addition [0] $end
$var wire 1 H7 addition_logic [15] $end
$var wire 1 I7 addition_logic [14] $end
$var wire 1 J7 addition_logic [13] $end
$var wire 1 K7 addition_logic [12] $end
$var wire 1 L7 addition_logic [11] $end
$var wire 1 M7 addition_logic [10] $end
$var wire 1 N7 addition_logic [9] $end
$var wire 1 O7 addition_logic [8] $end
$var wire 1 P7 addition_logic [7] $end
$var wire 1 Q7 addition_logic [6] $end
$var wire 1 R7 addition_logic [5] $end
$var wire 1 S7 addition_logic [4] $end
$var wire 1 T7 addition_logic [3] $end
$var wire 1 U7 addition_logic [2] $end
$var wire 1 V7 addition_logic [1] $end
$var wire 1 W7 addition_logic [0] $end
$var wire 1 X7 carry $end
$var wire 1 Y7 signed_over $end
$var wire 1 Z7 less $end

$scope module shift $end
$var parameter 32 [7 OPERAND_WIDTH $end
$var parameter 32 \7 SHAMT_WIDTH $end
$var parameter 32 ]7 NUM_OPERATIONS $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 v6 Out [15] $end
$var wire 1 w6 Out [14] $end
$var wire 1 x6 Out [13] $end
$var wire 1 y6 Out [12] $end
$var wire 1 z6 Out [11] $end
$var wire 1 {6 Out [10] $end
$var wire 1 |6 Out [9] $end
$var wire 1 }6 Out [8] $end
$var wire 1 ~6 Out [7] $end
$var wire 1 !7 Out [6] $end
$var wire 1 "7 Out [5] $end
$var wire 1 #7 Out [4] $end
$var wire 1 $7 Out [3] $end
$var wire 1 %7 Out [2] $end
$var wire 1 &7 Out [1] $end
$var wire 1 '7 Out [0] $end
$var wire 1 ^7 shift_left_r [15] $end
$var wire 1 _7 shift_left_r [14] $end
$var wire 1 `7 shift_left_r [13] $end
$var wire 1 a7 shift_left_r [12] $end
$var wire 1 b7 shift_left_r [11] $end
$var wire 1 c7 shift_left_r [10] $end
$var wire 1 d7 shift_left_r [9] $end
$var wire 1 e7 shift_left_r [8] $end
$var wire 1 f7 shift_left_r [7] $end
$var wire 1 g7 shift_left_r [6] $end
$var wire 1 h7 shift_left_r [5] $end
$var wire 1 i7 shift_left_r [4] $end
$var wire 1 j7 shift_left_r [3] $end
$var wire 1 k7 shift_left_r [2] $end
$var wire 1 l7 shift_left_r [1] $end
$var wire 1 m7 shift_left_r [0] $end
$var wire 1 n7 rotate_left_r [15] $end
$var wire 1 o7 rotate_left_r [14] $end
$var wire 1 p7 rotate_left_r [13] $end
$var wire 1 q7 rotate_left_r [12] $end
$var wire 1 r7 rotate_left_r [11] $end
$var wire 1 s7 rotate_left_r [10] $end
$var wire 1 t7 rotate_left_r [9] $end
$var wire 1 u7 rotate_left_r [8] $end
$var wire 1 v7 rotate_left_r [7] $end
$var wire 1 w7 rotate_left_r [6] $end
$var wire 1 x7 rotate_left_r [5] $end
$var wire 1 y7 rotate_left_r [4] $end
$var wire 1 z7 rotate_left_r [3] $end
$var wire 1 {7 rotate_left_r [2] $end
$var wire 1 |7 rotate_left_r [1] $end
$var wire 1 }7 rotate_left_r [0] $end
$var wire 1 ~7 shift_right_l_r [15] $end
$var wire 1 !8 shift_right_l_r [14] $end
$var wire 1 "8 shift_right_l_r [13] $end
$var wire 1 #8 shift_right_l_r [12] $end
$var wire 1 $8 shift_right_l_r [11] $end
$var wire 1 %8 shift_right_l_r [10] $end
$var wire 1 &8 shift_right_l_r [9] $end
$var wire 1 '8 shift_right_l_r [8] $end
$var wire 1 (8 shift_right_l_r [7] $end
$var wire 1 )8 shift_right_l_r [6] $end
$var wire 1 *8 shift_right_l_r [5] $end
$var wire 1 +8 shift_right_l_r [4] $end
$var wire 1 ,8 shift_right_l_r [3] $end
$var wire 1 -8 shift_right_l_r [2] $end
$var wire 1 .8 shift_right_l_r [1] $end
$var wire 1 /8 shift_right_l_r [0] $end
$var wire 1 08 rotate_right_r [15] $end
$var wire 1 18 rotate_right_r [14] $end
$var wire 1 28 rotate_right_r [13] $end
$var wire 1 38 rotate_right_r [12] $end
$var wire 1 48 rotate_right_r [11] $end
$var wire 1 58 rotate_right_r [10] $end
$var wire 1 68 rotate_right_r [9] $end
$var wire 1 78 rotate_right_r [8] $end
$var wire 1 88 rotate_right_r [7] $end
$var wire 1 98 rotate_right_r [6] $end
$var wire 1 :8 rotate_right_r [5] $end
$var wire 1 ;8 rotate_right_r [4] $end
$var wire 1 <8 rotate_right_r [3] $end
$var wire 1 =8 rotate_right_r [2] $end
$var wire 1 >8 rotate_right_r [1] $end
$var wire 1 ?8 rotate_right_r [0] $end

$scope module sleft $end
$var parameter 32 @8 OPERAND_WIDTH $end
$var parameter 32 A8 SHAMT_WIDTH $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 ^7 result [15] $end
$var wire 1 _7 result [14] $end
$var wire 1 `7 result [13] $end
$var wire 1 a7 result [12] $end
$var wire 1 b7 result [11] $end
$var wire 1 c7 result [10] $end
$var wire 1 d7 result [9] $end
$var wire 1 e7 result [8] $end
$var wire 1 f7 result [7] $end
$var wire 1 g7 result [6] $end
$var wire 1 h7 result [5] $end
$var wire 1 i7 result [4] $end
$var wire 1 j7 result [3] $end
$var wire 1 k7 result [2] $end
$var wire 1 l7 result [1] $end
$var wire 1 m7 result [0] $end
$var wire 1 B8 temp1 [15] $end
$var wire 1 C8 temp1 [14] $end
$var wire 1 D8 temp1 [13] $end
$var wire 1 E8 temp1 [12] $end
$var wire 1 F8 temp1 [11] $end
$var wire 1 G8 temp1 [10] $end
$var wire 1 H8 temp1 [9] $end
$var wire 1 I8 temp1 [8] $end
$var wire 1 J8 temp1 [7] $end
$var wire 1 K8 temp1 [6] $end
$var wire 1 L8 temp1 [5] $end
$var wire 1 M8 temp1 [4] $end
$var wire 1 N8 temp1 [3] $end
$var wire 1 O8 temp1 [2] $end
$var wire 1 P8 temp1 [1] $end
$var wire 1 Q8 temp1 [0] $end
$var wire 1 R8 temp2 [15] $end
$var wire 1 S8 temp2 [14] $end
$var wire 1 T8 temp2 [13] $end
$var wire 1 U8 temp2 [12] $end
$var wire 1 V8 temp2 [11] $end
$var wire 1 W8 temp2 [10] $end
$var wire 1 X8 temp2 [9] $end
$var wire 1 Y8 temp2 [8] $end
$var wire 1 Z8 temp2 [7] $end
$var wire 1 [8 temp2 [6] $end
$var wire 1 \8 temp2 [5] $end
$var wire 1 ]8 temp2 [4] $end
$var wire 1 ^8 temp2 [3] $end
$var wire 1 _8 temp2 [2] $end
$var wire 1 `8 temp2 [1] $end
$var wire 1 a8 temp2 [0] $end
$var wire 1 b8 temp3 [15] $end
$var wire 1 c8 temp3 [14] $end
$var wire 1 d8 temp3 [13] $end
$var wire 1 e8 temp3 [12] $end
$var wire 1 f8 temp3 [11] $end
$var wire 1 g8 temp3 [10] $end
$var wire 1 h8 temp3 [9] $end
$var wire 1 i8 temp3 [8] $end
$var wire 1 j8 temp3 [7] $end
$var wire 1 k8 temp3 [6] $end
$var wire 1 l8 temp3 [5] $end
$var wire 1 m8 temp3 [4] $end
$var wire 1 n8 temp3 [3] $end
$var wire 1 o8 temp3 [2] $end
$var wire 1 p8 temp3 [1] $end
$var wire 1 q8 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var parameter 32 r8 OPERAND_WIDTH $end
$var parameter 32 s8 SHAMT_WIDTH $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 n7 result [15] $end
$var wire 1 o7 result [14] $end
$var wire 1 p7 result [13] $end
$var wire 1 q7 result [12] $end
$var wire 1 r7 result [11] $end
$var wire 1 s7 result [10] $end
$var wire 1 t7 result [9] $end
$var wire 1 u7 result [8] $end
$var wire 1 v7 result [7] $end
$var wire 1 w7 result [6] $end
$var wire 1 x7 result [5] $end
$var wire 1 y7 result [4] $end
$var wire 1 z7 result [3] $end
$var wire 1 {7 result [2] $end
$var wire 1 |7 result [1] $end
$var wire 1 }7 result [0] $end
$var wire 1 t8 temp1 [15] $end
$var wire 1 u8 temp1 [14] $end
$var wire 1 v8 temp1 [13] $end
$var wire 1 w8 temp1 [12] $end
$var wire 1 x8 temp1 [11] $end
$var wire 1 y8 temp1 [10] $end
$var wire 1 z8 temp1 [9] $end
$var wire 1 {8 temp1 [8] $end
$var wire 1 |8 temp1 [7] $end
$var wire 1 }8 temp1 [6] $end
$var wire 1 ~8 temp1 [5] $end
$var wire 1 !9 temp1 [4] $end
$var wire 1 "9 temp1 [3] $end
$var wire 1 #9 temp1 [2] $end
$var wire 1 $9 temp1 [1] $end
$var wire 1 %9 temp1 [0] $end
$var wire 1 &9 temp2 [15] $end
$var wire 1 '9 temp2 [14] $end
$var wire 1 (9 temp2 [13] $end
$var wire 1 )9 temp2 [12] $end
$var wire 1 *9 temp2 [11] $end
$var wire 1 +9 temp2 [10] $end
$var wire 1 ,9 temp2 [9] $end
$var wire 1 -9 temp2 [8] $end
$var wire 1 .9 temp2 [7] $end
$var wire 1 /9 temp2 [6] $end
$var wire 1 09 temp2 [5] $end
$var wire 1 19 temp2 [4] $end
$var wire 1 29 temp2 [3] $end
$var wire 1 39 temp2 [2] $end
$var wire 1 49 temp2 [1] $end
$var wire 1 59 temp2 [0] $end
$var wire 1 69 temp3 [15] $end
$var wire 1 79 temp3 [14] $end
$var wire 1 89 temp3 [13] $end
$var wire 1 99 temp3 [12] $end
$var wire 1 :9 temp3 [11] $end
$var wire 1 ;9 temp3 [10] $end
$var wire 1 <9 temp3 [9] $end
$var wire 1 =9 temp3 [8] $end
$var wire 1 >9 temp3 [7] $end
$var wire 1 ?9 temp3 [6] $end
$var wire 1 @9 temp3 [5] $end
$var wire 1 A9 temp3 [4] $end
$var wire 1 B9 temp3 [3] $end
$var wire 1 C9 temp3 [2] $end
$var wire 1 D9 temp3 [1] $end
$var wire 1 E9 temp3 [0] $end
$upscope $end

$scope module srl $end
$var parameter 32 F9 OPERAND_WIDTH $end
$var parameter 32 G9 SHAMT_WIDTH $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 ~7 result [15] $end
$var wire 1 !8 result [14] $end
$var wire 1 "8 result [13] $end
$var wire 1 #8 result [12] $end
$var wire 1 $8 result [11] $end
$var wire 1 %8 result [10] $end
$var wire 1 &8 result [9] $end
$var wire 1 '8 result [8] $end
$var wire 1 (8 result [7] $end
$var wire 1 )8 result [6] $end
$var wire 1 *8 result [5] $end
$var wire 1 +8 result [4] $end
$var wire 1 ,8 result [3] $end
$var wire 1 -8 result [2] $end
$var wire 1 .8 result [1] $end
$var wire 1 /8 result [0] $end
$var wire 1 H9 temp1 [15] $end
$var wire 1 I9 temp1 [14] $end
$var wire 1 J9 temp1 [13] $end
$var wire 1 K9 temp1 [12] $end
$var wire 1 L9 temp1 [11] $end
$var wire 1 M9 temp1 [10] $end
$var wire 1 N9 temp1 [9] $end
$var wire 1 O9 temp1 [8] $end
$var wire 1 P9 temp1 [7] $end
$var wire 1 Q9 temp1 [6] $end
$var wire 1 R9 temp1 [5] $end
$var wire 1 S9 temp1 [4] $end
$var wire 1 T9 temp1 [3] $end
$var wire 1 U9 temp1 [2] $end
$var wire 1 V9 temp1 [1] $end
$var wire 1 W9 temp1 [0] $end
$var wire 1 X9 temp2 [15] $end
$var wire 1 Y9 temp2 [14] $end
$var wire 1 Z9 temp2 [13] $end
$var wire 1 [9 temp2 [12] $end
$var wire 1 \9 temp2 [11] $end
$var wire 1 ]9 temp2 [10] $end
$var wire 1 ^9 temp2 [9] $end
$var wire 1 _9 temp2 [8] $end
$var wire 1 `9 temp2 [7] $end
$var wire 1 a9 temp2 [6] $end
$var wire 1 b9 temp2 [5] $end
$var wire 1 c9 temp2 [4] $end
$var wire 1 d9 temp2 [3] $end
$var wire 1 e9 temp2 [2] $end
$var wire 1 f9 temp2 [1] $end
$var wire 1 g9 temp2 [0] $end
$var wire 1 h9 temp3 [15] $end
$var wire 1 i9 temp3 [14] $end
$var wire 1 j9 temp3 [13] $end
$var wire 1 k9 temp3 [12] $end
$var wire 1 l9 temp3 [11] $end
$var wire 1 m9 temp3 [10] $end
$var wire 1 n9 temp3 [9] $end
$var wire 1 o9 temp3 [8] $end
$var wire 1 p9 temp3 [7] $end
$var wire 1 q9 temp3 [6] $end
$var wire 1 r9 temp3 [5] $end
$var wire 1 s9 temp3 [4] $end
$var wire 1 t9 temp3 [3] $end
$var wire 1 u9 temp3 [2] $end
$var wire 1 v9 temp3 [1] $end
$var wire 1 w9 temp3 [0] $end
$upscope $end

$scope module rright $end
$var parameter 32 x9 OPERAND_WIDTH $end
$var parameter 32 y9 SHAMT_WIDTH $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 08 result [15] $end
$var wire 1 18 result [14] $end
$var wire 1 28 result [13] $end
$var wire 1 38 result [12] $end
$var wire 1 48 result [11] $end
$var wire 1 58 result [10] $end
$var wire 1 68 result [9] $end
$var wire 1 78 result [8] $end
$var wire 1 88 result [7] $end
$var wire 1 98 result [6] $end
$var wire 1 :8 result [5] $end
$var wire 1 ;8 result [4] $end
$var wire 1 <8 result [3] $end
$var wire 1 =8 result [2] $end
$var wire 1 >8 result [1] $end
$var wire 1 ?8 result [0] $end
$var wire 1 z9 temp1 [15] $end
$var wire 1 {9 temp1 [14] $end
$var wire 1 |9 temp1 [13] $end
$var wire 1 }9 temp1 [12] $end
$var wire 1 ~9 temp1 [11] $end
$var wire 1 !: temp1 [10] $end
$var wire 1 ": temp1 [9] $end
$var wire 1 #: temp1 [8] $end
$var wire 1 $: temp1 [7] $end
$var wire 1 %: temp1 [6] $end
$var wire 1 &: temp1 [5] $end
$var wire 1 ': temp1 [4] $end
$var wire 1 (: temp1 [3] $end
$var wire 1 ): temp1 [2] $end
$var wire 1 *: temp1 [1] $end
$var wire 1 +: temp1 [0] $end
$var wire 1 ,: temp2 [15] $end
$var wire 1 -: temp2 [14] $end
$var wire 1 .: temp2 [13] $end
$var wire 1 /: temp2 [12] $end
$var wire 1 0: temp2 [11] $end
$var wire 1 1: temp2 [10] $end
$var wire 1 2: temp2 [9] $end
$var wire 1 3: temp2 [8] $end
$var wire 1 4: temp2 [7] $end
$var wire 1 5: temp2 [6] $end
$var wire 1 6: temp2 [5] $end
$var wire 1 7: temp2 [4] $end
$var wire 1 8: temp2 [3] $end
$var wire 1 9: temp2 [2] $end
$var wire 1 :: temp2 [1] $end
$var wire 1 ;: temp2 [0] $end
$var wire 1 <: temp3 [15] $end
$var wire 1 =: temp3 [14] $end
$var wire 1 >: temp3 [13] $end
$var wire 1 ?: temp3 [12] $end
$var wire 1 @: temp3 [11] $end
$var wire 1 A: temp3 [10] $end
$var wire 1 B: temp3 [9] $end
$var wire 1 C: temp3 [8] $end
$var wire 1 D: temp3 [7] $end
$var wire 1 E: temp3 [6] $end
$var wire 1 F: temp3 [5] $end
$var wire 1 G: temp3 [4] $end
$var wire 1 H: temp3 [3] $end
$var wire 1 I: temp3 [2] $end
$var wire 1 J: temp3 [1] $end
$var wire 1 K: temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var parameter 32 L: OPERAND_WIDTH $end
$var parameter 32 M: NUM_OPERATIONS $end
$var wire 1 V6 A [15] $end
$var wire 1 W6 A [14] $end
$var wire 1 X6 A [13] $end
$var wire 1 Y6 A [12] $end
$var wire 1 Z6 A [11] $end
$var wire 1 [6 A [10] $end
$var wire 1 \6 A [9] $end
$var wire 1 ]6 A [8] $end
$var wire 1 ^6 A [7] $end
$var wire 1 _6 A [6] $end
$var wire 1 `6 A [5] $end
$var wire 1 a6 A [4] $end
$var wire 1 b6 A [3] $end
$var wire 1 c6 A [2] $end
$var wire 1 d6 A [1] $end
$var wire 1 e6 A [0] $end
$var wire 1 f6 B [15] $end
$var wire 1 g6 B [14] $end
$var wire 1 h6 B [13] $end
$var wire 1 i6 B [12] $end
$var wire 1 j6 B [11] $end
$var wire 1 k6 B [10] $end
$var wire 1 l6 B [9] $end
$var wire 1 m6 B [8] $end
$var wire 1 n6 B [7] $end
$var wire 1 o6 B [6] $end
$var wire 1 p6 B [5] $end
$var wire 1 q6 B [4] $end
$var wire 1 r6 B [3] $end
$var wire 1 s6 B [2] $end
$var wire 1 t6 B [1] $end
$var wire 1 u6 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 (7 Result [15] $end
$var wire 1 )7 Result [14] $end
$var wire 1 *7 Result [13] $end
$var wire 1 +7 Result [12] $end
$var wire 1 ,7 Result [11] $end
$var wire 1 -7 Result [10] $end
$var wire 1 .7 Result [9] $end
$var wire 1 /7 Result [8] $end
$var wire 1 07 Result [7] $end
$var wire 1 17 Result [6] $end
$var wire 1 27 Result [5] $end
$var wire 1 37 Result [4] $end
$var wire 1 47 Result [3] $end
$var wire 1 57 Result [2] $end
$var wire 1 67 Result [1] $end
$var wire 1 77 Result [0] $end
$upscope $end

$scope module adding $end
$var parameter 32 N: N $end
$var wire 1 87 sum [15] $end
$var wire 1 97 sum [14] $end
$var wire 1 :7 sum [13] $end
$var wire 1 ;7 sum [12] $end
$var wire 1 <7 sum [11] $end
$var wire 1 =7 sum [10] $end
$var wire 1 >7 sum [9] $end
$var wire 1 ?7 sum [8] $end
$var wire 1 @7 sum [7] $end
$var wire 1 A7 sum [6] $end
$var wire 1 B7 sum [5] $end
$var wire 1 C7 sum [4] $end
$var wire 1 D7 sum [3] $end
$var wire 1 E7 sum [2] $end
$var wire 1 F7 sum [1] $end
$var wire 1 G7 sum [0] $end
$var wire 1 X7 c_out $end
$var wire 1 V6 a [15] $end
$var wire 1 W6 a [14] $end
$var wire 1 X6 a [13] $end
$var wire 1 Y6 a [12] $end
$var wire 1 Z6 a [11] $end
$var wire 1 [6 a [10] $end
$var wire 1 \6 a [9] $end
$var wire 1 ]6 a [8] $end
$var wire 1 ^6 a [7] $end
$var wire 1 _6 a [6] $end
$var wire 1 `6 a [5] $end
$var wire 1 a6 a [4] $end
$var wire 1 b6 a [3] $end
$var wire 1 c6 a [2] $end
$var wire 1 d6 a [1] $end
$var wire 1 e6 a [0] $end
$var wire 1 f6 b [15] $end
$var wire 1 g6 b [14] $end
$var wire 1 h6 b [13] $end
$var wire 1 i6 b [12] $end
$var wire 1 j6 b [11] $end
$var wire 1 k6 b [10] $end
$var wire 1 l6 b [9] $end
$var wire 1 m6 b [8] $end
$var wire 1 n6 b [7] $end
$var wire 1 o6 b [6] $end
$var wire 1 p6 b [5] $end
$var wire 1 q6 b [4] $end
$var wire 1 r6 b [3] $end
$var wire 1 s6 b [2] $end
$var wire 1 t6 b [1] $end
$var wire 1 u6 b [0] $end
$var wire 1 T6 c_in $end
$var wire 1 O: gen [15] $end
$var wire 1 P: gen [14] $end
$var wire 1 Q: gen [13] $end
$var wire 1 R: gen [12] $end
$var wire 1 S: gen [11] $end
$var wire 1 T: gen [10] $end
$var wire 1 U: gen [9] $end
$var wire 1 V: gen [8] $end
$var wire 1 W: gen [7] $end
$var wire 1 X: gen [6] $end
$var wire 1 Y: gen [5] $end
$var wire 1 Z: gen [4] $end
$var wire 1 [: gen [3] $end
$var wire 1 \: gen [2] $end
$var wire 1 ]: gen [1] $end
$var wire 1 ^: gen [0] $end
$var wire 1 _: four_gen [3] $end
$var wire 1 `: four_gen [2] $end
$var wire 1 a: four_gen [1] $end
$var wire 1 b: four_gen [0] $end
$var wire 1 c: prop [15] $end
$var wire 1 d: prop [14] $end
$var wire 1 e: prop [13] $end
$var wire 1 f: prop [12] $end
$var wire 1 g: prop [11] $end
$var wire 1 h: prop [10] $end
$var wire 1 i: prop [9] $end
$var wire 1 j: prop [8] $end
$var wire 1 k: prop [7] $end
$var wire 1 l: prop [6] $end
$var wire 1 m: prop [5] $end
$var wire 1 n: prop [4] $end
$var wire 1 o: prop [3] $end
$var wire 1 p: prop [2] $end
$var wire 1 q: prop [1] $end
$var wire 1 r: prop [0] $end
$var wire 1 s: four_prop [3] $end
$var wire 1 t: four_prop [2] $end
$var wire 1 u: four_prop [1] $end
$var wire 1 v: four_prop [0] $end
$var wire 1 w: carry [2] $end
$var wire 1 x: carry [1] $end
$var wire 1 y: carry [0] $end
$var wire 1 z: fa_sum [15] $end
$var wire 1 {: fa_sum [14] $end
$var wire 1 |: fa_sum [13] $end
$var wire 1 }: fa_sum [12] $end
$var wire 1 ~: fa_sum [11] $end
$var wire 1 !; fa_sum [10] $end
$var wire 1 "; fa_sum [9] $end
$var wire 1 #; fa_sum [8] $end
$var wire 1 $; fa_sum [7] $end
$var wire 1 %; fa_sum [6] $end
$var wire 1 &; fa_sum [5] $end
$var wire 1 '; fa_sum [4] $end
$var wire 1 (; fa_sum [3] $end
$var wire 1 ); fa_sum [2] $end
$var wire 1 *; fa_sum [1] $end
$var wire 1 +; fa_sum [0] $end

$scope module cla1 $end
$var parameter 32 ,; N $end
$var wire 1 (; sum [3] $end
$var wire 1 ); sum [2] $end
$var wire 1 *; sum [1] $end
$var wire 1 +; sum [0] $end
$var wire 1 -; c_out $end
$var wire 1 b6 a [3] $end
$var wire 1 c6 a [2] $end
$var wire 1 d6 a [1] $end
$var wire 1 e6 a [0] $end
$var wire 1 r6 b [3] $end
$var wire 1 s6 b [2] $end
$var wire 1 t6 b [1] $end
$var wire 1 u6 b [0] $end
$var wire 1 T6 c_in $end
$var wire 1 .; gen [3] $end
$var wire 1 /; gen [2] $end
$var wire 1 0; gen [1] $end
$var wire 1 1; gen [0] $end
$var wire 1 2; prop [3] $end
$var wire 1 3; prop [2] $end
$var wire 1 4; prop [1] $end
$var wire 1 5; prop [0] $end
$var wire 1 6; carry [2] $end
$var wire 1 7; carry [1] $end
$var wire 1 8; carry [0] $end
$var wire 1 9; fa_sum [3] $end
$var wire 1 :; fa_sum [2] $end
$var wire 1 ;; fa_sum [1] $end
$var wire 1 <; fa_sum [0] $end

$scope module fa1 $end
$var wire 1 <; s $end
$var wire 1 =; c_out $end
$var wire 1 e6 a $end
$var wire 1 u6 b $end
$var wire 1 T6 c_in $end
$var wire 1 >; xor_AB $end
$var wire 1 ?; xor_ABCin $end
$var wire 1 @; NAND_AB $end
$var wire 1 A; not_NAND_AB $end
$var wire 1 B; NAND_Cin_xor_AB $end
$var wire 1 C; not_NAND_Cin_xor_AB $end
$var wire 1 D; NOR_2NAND $end
$var wire 1 E; not_NOR_2NAND $end
$var wire 1 F; Cin $end

$scope module xor1 $end
$var wire 1 e6 in1 $end
$var wire 1 u6 in2 $end
$var wire 1 >; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 >; in1 $end
$var wire 1 T6 in2 $end
$var wire 1 ?; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 e6 in1 $end
$var wire 1 u6 in2 $end
$var wire 1 @; out $end
$upscope $end

$scope module not1 $end
$var wire 1 @; in1 $end
$var wire 1 A; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 F; in1 $end
$var wire 1 >; in2 $end
$var wire 1 B; out $end
$upscope $end

$scope module not2 $end
$var wire 1 B; in1 $end
$var wire 1 C; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 A; in1 $end
$var wire 1 C; in2 $end
$var wire 1 D; out $end
$upscope $end

$scope module not3 $end
$var wire 1 D; in1 $end
$var wire 1 E; out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 ;; s $end
$var wire 1 G; c_out $end
$var wire 1 d6 a $end
$var wire 1 t6 b $end
$var wire 1 8; c_in $end
$var wire 1 H; xor_AB $end
$var wire 1 I; xor_ABCin $end
$var wire 1 J; NAND_AB $end
$var wire 1 K; not_NAND_AB $end
$var wire 1 L; NAND_Cin_xor_AB $end
$var wire 1 M; not_NAND_Cin_xor_AB $end
$var wire 1 N; NOR_2NAND $end
$var wire 1 O; not_NOR_2NAND $end
$var wire 1 P; Cin $end

$scope module xor1 $end
$var wire 1 d6 in1 $end
$var wire 1 t6 in2 $end
$var wire 1 H; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 H; in1 $end
$var wire 1 8; in2 $end
$var wire 1 I; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 d6 in1 $end
$var wire 1 t6 in2 $end
$var wire 1 J; out $end
$upscope $end

$scope module not1 $end
$var wire 1 J; in1 $end
$var wire 1 K; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 P; in1 $end
$var wire 1 H; in2 $end
$var wire 1 L; out $end
$upscope $end

$scope module not2 $end
$var wire 1 L; in1 $end
$var wire 1 M; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 K; in1 $end
$var wire 1 M; in2 $end
$var wire 1 N; out $end
$upscope $end

$scope module not3 $end
$var wire 1 N; in1 $end
$var wire 1 O; out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 :; s $end
$var wire 1 Q; c_out $end
$var wire 1 c6 a $end
$var wire 1 s6 b $end
$var wire 1 7; c_in $end
$var wire 1 R; xor_AB $end
$var wire 1 S; xor_ABCin $end
$var wire 1 T; NAND_AB $end
$var wire 1 U; not_NAND_AB $end
$var wire 1 V; NAND_Cin_xor_AB $end
$var wire 1 W; not_NAND_Cin_xor_AB $end
$var wire 1 X; NOR_2NAND $end
$var wire 1 Y; not_NOR_2NAND $end
$var wire 1 Z; Cin $end

$scope module xor1 $end
$var wire 1 c6 in1 $end
$var wire 1 s6 in2 $end
$var wire 1 R; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 R; in1 $end
$var wire 1 7; in2 $end
$var wire 1 S; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 c6 in1 $end
$var wire 1 s6 in2 $end
$var wire 1 T; out $end
$upscope $end

$scope module not1 $end
$var wire 1 T; in1 $end
$var wire 1 U; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z; in1 $end
$var wire 1 R; in2 $end
$var wire 1 V; out $end
$upscope $end

$scope module not2 $end
$var wire 1 V; in1 $end
$var wire 1 W; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 U; in1 $end
$var wire 1 W; in2 $end
$var wire 1 X; out $end
$upscope $end

$scope module not3 $end
$var wire 1 X; in1 $end
$var wire 1 Y; out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 9; s $end
$var wire 1 [; c_out $end
$var wire 1 b6 a $end
$var wire 1 r6 b $end
$var wire 1 6; c_in $end
$var wire 1 \; xor_AB $end
$var wire 1 ]; xor_ABCin $end
$var wire 1 ^; NAND_AB $end
$var wire 1 _; not_NAND_AB $end
$var wire 1 `; NAND_Cin_xor_AB $end
$var wire 1 a; not_NAND_Cin_xor_AB $end
$var wire 1 b; NOR_2NAND $end
$var wire 1 c; not_NOR_2NAND $end
$var wire 1 d; Cin $end

$scope module xor1 $end
$var wire 1 b6 in1 $end
$var wire 1 r6 in2 $end
$var wire 1 \; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 \; in1 $end
$var wire 1 6; in2 $end
$var wire 1 ]; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 b6 in1 $end
$var wire 1 r6 in2 $end
$var wire 1 ^; out $end
$upscope $end

$scope module not1 $end
$var wire 1 ^; in1 $end
$var wire 1 _; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 d; in1 $end
$var wire 1 \; in2 $end
$var wire 1 `; out $end
$upscope $end

$scope module not2 $end
$var wire 1 `; in1 $end
$var wire 1 a; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 _; in1 $end
$var wire 1 a; in2 $end
$var wire 1 b; out $end
$upscope $end

$scope module not3 $end
$var wire 1 b; in1 $end
$var wire 1 c; out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var parameter 32 e; N $end
$var wire 1 $; sum [3] $end
$var wire 1 %; sum [2] $end
$var wire 1 &; sum [1] $end
$var wire 1 '; sum [0] $end
$var wire 1 f; c_out $end
$var wire 1 ^6 a [3] $end
$var wire 1 _6 a [2] $end
$var wire 1 `6 a [1] $end
$var wire 1 a6 a [0] $end
$var wire 1 n6 b [3] $end
$var wire 1 o6 b [2] $end
$var wire 1 p6 b [1] $end
$var wire 1 q6 b [0] $end
$var wire 1 y: c_in $end
$var wire 1 g; gen [3] $end
$var wire 1 h; gen [2] $end
$var wire 1 i; gen [1] $end
$var wire 1 j; gen [0] $end
$var wire 1 k; prop [3] $end
$var wire 1 l; prop [2] $end
$var wire 1 m; prop [1] $end
$var wire 1 n; prop [0] $end
$var wire 1 o; carry [2] $end
$var wire 1 p; carry [1] $end
$var wire 1 q; carry [0] $end
$var wire 1 r; fa_sum [3] $end
$var wire 1 s; fa_sum [2] $end
$var wire 1 t; fa_sum [1] $end
$var wire 1 u; fa_sum [0] $end

$scope module fa1 $end
$var wire 1 u; s $end
$var wire 1 v; c_out $end
$var wire 1 a6 a $end
$var wire 1 q6 b $end
$var wire 1 y: c_in $end
$var wire 1 w; xor_AB $end
$var wire 1 x; xor_ABCin $end
$var wire 1 y; NAND_AB $end
$var wire 1 z; not_NAND_AB $end
$var wire 1 {; NAND_Cin_xor_AB $end
$var wire 1 |; not_NAND_Cin_xor_AB $end
$var wire 1 }; NOR_2NAND $end
$var wire 1 ~; not_NOR_2NAND $end
$var wire 1 !< Cin $end

$scope module xor1 $end
$var wire 1 a6 in1 $end
$var wire 1 q6 in2 $end
$var wire 1 w; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w; in1 $end
$var wire 1 y: in2 $end
$var wire 1 x; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 a6 in1 $end
$var wire 1 q6 in2 $end
$var wire 1 y; out $end
$upscope $end

$scope module not1 $end
$var wire 1 y; in1 $end
$var wire 1 z; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !< in1 $end
$var wire 1 w; in2 $end
$var wire 1 {; out $end
$upscope $end

$scope module not2 $end
$var wire 1 {; in1 $end
$var wire 1 |; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z; in1 $end
$var wire 1 |; in2 $end
$var wire 1 }; out $end
$upscope $end

$scope module not3 $end
$var wire 1 }; in1 $end
$var wire 1 ~; out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 t; s $end
$var wire 1 "< c_out $end
$var wire 1 `6 a $end
$var wire 1 p6 b $end
$var wire 1 q; c_in $end
$var wire 1 #< xor_AB $end
$var wire 1 $< xor_ABCin $end
$var wire 1 %< NAND_AB $end
$var wire 1 &< not_NAND_AB $end
$var wire 1 '< NAND_Cin_xor_AB $end
$var wire 1 (< not_NAND_Cin_xor_AB $end
$var wire 1 )< NOR_2NAND $end
$var wire 1 *< not_NOR_2NAND $end
$var wire 1 +< Cin $end

$scope module xor1 $end
$var wire 1 `6 in1 $end
$var wire 1 p6 in2 $end
$var wire 1 #< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 #< in1 $end
$var wire 1 q; in2 $end
$var wire 1 $< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 `6 in1 $end
$var wire 1 p6 in2 $end
$var wire 1 %< out $end
$upscope $end

$scope module not1 $end
$var wire 1 %< in1 $end
$var wire 1 &< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 +< in1 $end
$var wire 1 #< in2 $end
$var wire 1 '< out $end
$upscope $end

$scope module not2 $end
$var wire 1 '< in1 $end
$var wire 1 (< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 &< in1 $end
$var wire 1 (< in2 $end
$var wire 1 )< out $end
$upscope $end

$scope module not3 $end
$var wire 1 )< in1 $end
$var wire 1 *< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 s; s $end
$var wire 1 ,< c_out $end
$var wire 1 _6 a $end
$var wire 1 o6 b $end
$var wire 1 p; c_in $end
$var wire 1 -< xor_AB $end
$var wire 1 .< xor_ABCin $end
$var wire 1 /< NAND_AB $end
$var wire 1 0< not_NAND_AB $end
$var wire 1 1< NAND_Cin_xor_AB $end
$var wire 1 2< not_NAND_Cin_xor_AB $end
$var wire 1 3< NOR_2NAND $end
$var wire 1 4< not_NOR_2NAND $end
$var wire 1 5< Cin $end

$scope module xor1 $end
$var wire 1 _6 in1 $end
$var wire 1 o6 in2 $end
$var wire 1 -< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -< in1 $end
$var wire 1 p; in2 $end
$var wire 1 .< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 _6 in1 $end
$var wire 1 o6 in2 $end
$var wire 1 /< out $end
$upscope $end

$scope module not1 $end
$var wire 1 /< in1 $end
$var wire 1 0< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5< in1 $end
$var wire 1 -< in2 $end
$var wire 1 1< out $end
$upscope $end

$scope module not2 $end
$var wire 1 1< in1 $end
$var wire 1 2< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0< in1 $end
$var wire 1 2< in2 $end
$var wire 1 3< out $end
$upscope $end

$scope module not3 $end
$var wire 1 3< in1 $end
$var wire 1 4< out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 r; s $end
$var wire 1 6< c_out $end
$var wire 1 ^6 a $end
$var wire 1 n6 b $end
$var wire 1 o; c_in $end
$var wire 1 7< xor_AB $end
$var wire 1 8< xor_ABCin $end
$var wire 1 9< NAND_AB $end
$var wire 1 :< not_NAND_AB $end
$var wire 1 ;< NAND_Cin_xor_AB $end
$var wire 1 << not_NAND_Cin_xor_AB $end
$var wire 1 =< NOR_2NAND $end
$var wire 1 >< not_NOR_2NAND $end
$var wire 1 ?< Cin $end

$scope module xor1 $end
$var wire 1 ^6 in1 $end
$var wire 1 n6 in2 $end
$var wire 1 7< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 7< in1 $end
$var wire 1 o; in2 $end
$var wire 1 8< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ^6 in1 $end
$var wire 1 n6 in2 $end
$var wire 1 9< out $end
$upscope $end

$scope module not1 $end
$var wire 1 9< in1 $end
$var wire 1 :< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?< in1 $end
$var wire 1 7< in2 $end
$var wire 1 ;< out $end
$upscope $end

$scope module not2 $end
$var wire 1 ;< in1 $end
$var wire 1 << out $end
$upscope $end

$scope module nor1 $end
$var wire 1 :< in1 $end
$var wire 1 << in2 $end
$var wire 1 =< out $end
$upscope $end

$scope module not3 $end
$var wire 1 =< in1 $end
$var wire 1 >< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var parameter 32 @< N $end
$var wire 1 ~: sum [3] $end
$var wire 1 !; sum [2] $end
$var wire 1 "; sum [1] $end
$var wire 1 #; sum [0] $end
$var wire 1 A< c_out $end
$var wire 1 Z6 a [3] $end
$var wire 1 [6 a [2] $end
$var wire 1 \6 a [1] $end
$var wire 1 ]6 a [0] $end
$var wire 1 j6 b [3] $end
$var wire 1 k6 b [2] $end
$var wire 1 l6 b [1] $end
$var wire 1 m6 b [0] $end
$var wire 1 x: c_in $end
$var wire 1 B< gen [3] $end
$var wire 1 C< gen [2] $end
$var wire 1 D< gen [1] $end
$var wire 1 E< gen [0] $end
$var wire 1 F< prop [3] $end
$var wire 1 G< prop [2] $end
$var wire 1 H< prop [1] $end
$var wire 1 I< prop [0] $end
$var wire 1 J< carry [2] $end
$var wire 1 K< carry [1] $end
$var wire 1 L< carry [0] $end
$var wire 1 M< fa_sum [3] $end
$var wire 1 N< fa_sum [2] $end
$var wire 1 O< fa_sum [1] $end
$var wire 1 P< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 P< s $end
$var wire 1 Q< c_out $end
$var wire 1 ]6 a $end
$var wire 1 m6 b $end
$var wire 1 x: c_in $end
$var wire 1 R< xor_AB $end
$var wire 1 S< xor_ABCin $end
$var wire 1 T< NAND_AB $end
$var wire 1 U< not_NAND_AB $end
$var wire 1 V< NAND_Cin_xor_AB $end
$var wire 1 W< not_NAND_Cin_xor_AB $end
$var wire 1 X< NOR_2NAND $end
$var wire 1 Y< not_NOR_2NAND $end
$var wire 1 Z< Cin $end

$scope module xor1 $end
$var wire 1 ]6 in1 $end
$var wire 1 m6 in2 $end
$var wire 1 R< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 R< in1 $end
$var wire 1 x: in2 $end
$var wire 1 S< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ]6 in1 $end
$var wire 1 m6 in2 $end
$var wire 1 T< out $end
$upscope $end

$scope module not1 $end
$var wire 1 T< in1 $end
$var wire 1 U< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z< in1 $end
$var wire 1 R< in2 $end
$var wire 1 V< out $end
$upscope $end

$scope module not2 $end
$var wire 1 V< in1 $end
$var wire 1 W< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 U< in1 $end
$var wire 1 W< in2 $end
$var wire 1 X< out $end
$upscope $end

$scope module not3 $end
$var wire 1 X< in1 $end
$var wire 1 Y< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 O< s $end
$var wire 1 [< c_out $end
$var wire 1 \6 a $end
$var wire 1 l6 b $end
$var wire 1 L< c_in $end
$var wire 1 \< xor_AB $end
$var wire 1 ]< xor_ABCin $end
$var wire 1 ^< NAND_AB $end
$var wire 1 _< not_NAND_AB $end
$var wire 1 `< NAND_Cin_xor_AB $end
$var wire 1 a< not_NAND_Cin_xor_AB $end
$var wire 1 b< NOR_2NAND $end
$var wire 1 c< not_NOR_2NAND $end
$var wire 1 d< Cin $end

$scope module xor1 $end
$var wire 1 \6 in1 $end
$var wire 1 l6 in2 $end
$var wire 1 \< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 \< in1 $end
$var wire 1 L< in2 $end
$var wire 1 ]< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 \6 in1 $end
$var wire 1 l6 in2 $end
$var wire 1 ^< out $end
$upscope $end

$scope module not1 $end
$var wire 1 ^< in1 $end
$var wire 1 _< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 d< in1 $end
$var wire 1 \< in2 $end
$var wire 1 `< out $end
$upscope $end

$scope module not2 $end
$var wire 1 `< in1 $end
$var wire 1 a< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 _< in1 $end
$var wire 1 a< in2 $end
$var wire 1 b< out $end
$upscope $end

$scope module not3 $end
$var wire 1 b< in1 $end
$var wire 1 c< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 N< s $end
$var wire 1 e< c_out $end
$var wire 1 [6 a $end
$var wire 1 k6 b $end
$var wire 1 K< c_in $end
$var wire 1 f< xor_AB $end
$var wire 1 g< xor_ABCin $end
$var wire 1 h< NAND_AB $end
$var wire 1 i< not_NAND_AB $end
$var wire 1 j< NAND_Cin_xor_AB $end
$var wire 1 k< not_NAND_Cin_xor_AB $end
$var wire 1 l< NOR_2NAND $end
$var wire 1 m< not_NOR_2NAND $end
$var wire 1 n< Cin $end

$scope module xor1 $end
$var wire 1 [6 in1 $end
$var wire 1 k6 in2 $end
$var wire 1 f< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 f< in1 $end
$var wire 1 K< in2 $end
$var wire 1 g< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 [6 in1 $end
$var wire 1 k6 in2 $end
$var wire 1 h< out $end
$upscope $end

$scope module not1 $end
$var wire 1 h< in1 $end
$var wire 1 i< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n< in1 $end
$var wire 1 f< in2 $end
$var wire 1 j< out $end
$upscope $end

$scope module not2 $end
$var wire 1 j< in1 $end
$var wire 1 k< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 i< in1 $end
$var wire 1 k< in2 $end
$var wire 1 l< out $end
$upscope $end

$scope module not3 $end
$var wire 1 l< in1 $end
$var wire 1 m< out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 M< s $end
$var wire 1 o< c_out $end
$var wire 1 Z6 a $end
$var wire 1 j6 b $end
$var wire 1 J< c_in $end
$var wire 1 p< xor_AB $end
$var wire 1 q< xor_ABCin $end
$var wire 1 r< NAND_AB $end
$var wire 1 s< not_NAND_AB $end
$var wire 1 t< NAND_Cin_xor_AB $end
$var wire 1 u< not_NAND_Cin_xor_AB $end
$var wire 1 v< NOR_2NAND $end
$var wire 1 w< not_NOR_2NAND $end
$var wire 1 x< Cin $end

$scope module xor1 $end
$var wire 1 Z6 in1 $end
$var wire 1 j6 in2 $end
$var wire 1 p< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 p< in1 $end
$var wire 1 J< in2 $end
$var wire 1 q< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Z6 in1 $end
$var wire 1 j6 in2 $end
$var wire 1 r< out $end
$upscope $end

$scope module not1 $end
$var wire 1 r< in1 $end
$var wire 1 s< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 x< in1 $end
$var wire 1 p< in2 $end
$var wire 1 t< out $end
$upscope $end

$scope module not2 $end
$var wire 1 t< in1 $end
$var wire 1 u< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 s< in1 $end
$var wire 1 u< in2 $end
$var wire 1 v< out $end
$upscope $end

$scope module not3 $end
$var wire 1 v< in1 $end
$var wire 1 w< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var parameter 32 y< N $end
$var wire 1 z: sum [3] $end
$var wire 1 {: sum [2] $end
$var wire 1 |: sum [1] $end
$var wire 1 }: sum [0] $end
$var wire 1 z< c_out $end
$var wire 1 V6 a [3] $end
$var wire 1 W6 a [2] $end
$var wire 1 X6 a [1] $end
$var wire 1 Y6 a [0] $end
$var wire 1 f6 b [3] $end
$var wire 1 g6 b [2] $end
$var wire 1 h6 b [1] $end
$var wire 1 i6 b [0] $end
$var wire 1 w: c_in $end
$var wire 1 {< gen [3] $end
$var wire 1 |< gen [2] $end
$var wire 1 }< gen [1] $end
$var wire 1 ~< gen [0] $end
$var wire 1 != prop [3] $end
$var wire 1 "= prop [2] $end
$var wire 1 #= prop [1] $end
$var wire 1 $= prop [0] $end
$var wire 1 %= carry [2] $end
$var wire 1 &= carry [1] $end
$var wire 1 '= carry [0] $end
$var wire 1 (= fa_sum [3] $end
$var wire 1 )= fa_sum [2] $end
$var wire 1 *= fa_sum [1] $end
$var wire 1 += fa_sum [0] $end

$scope module fa1 $end
$var wire 1 += s $end
$var wire 1 ,= c_out $end
$var wire 1 Y6 a $end
$var wire 1 i6 b $end
$var wire 1 w: c_in $end
$var wire 1 -= xor_AB $end
$var wire 1 .= xor_ABCin $end
$var wire 1 /= NAND_AB $end
$var wire 1 0= not_NAND_AB $end
$var wire 1 1= NAND_Cin_xor_AB $end
$var wire 1 2= not_NAND_Cin_xor_AB $end
$var wire 1 3= NOR_2NAND $end
$var wire 1 4= not_NOR_2NAND $end
$var wire 1 5= Cin $end

$scope module xor1 $end
$var wire 1 Y6 in1 $end
$var wire 1 i6 in2 $end
$var wire 1 -= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -= in1 $end
$var wire 1 w: in2 $end
$var wire 1 .= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Y6 in1 $end
$var wire 1 i6 in2 $end
$var wire 1 /= out $end
$upscope $end

$scope module not1 $end
$var wire 1 /= in1 $end
$var wire 1 0= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5= in1 $end
$var wire 1 -= in2 $end
$var wire 1 1= out $end
$upscope $end

$scope module not2 $end
$var wire 1 1= in1 $end
$var wire 1 2= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0= in1 $end
$var wire 1 2= in2 $end
$var wire 1 3= out $end
$upscope $end

$scope module not3 $end
$var wire 1 3= in1 $end
$var wire 1 4= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 *= s $end
$var wire 1 6= c_out $end
$var wire 1 X6 a $end
$var wire 1 h6 b $end
$var wire 1 '= c_in $end
$var wire 1 7= xor_AB $end
$var wire 1 8= xor_ABCin $end
$var wire 1 9= NAND_AB $end
$var wire 1 := not_NAND_AB $end
$var wire 1 ;= NAND_Cin_xor_AB $end
$var wire 1 <= not_NAND_Cin_xor_AB $end
$var wire 1 == NOR_2NAND $end
$var wire 1 >= not_NOR_2NAND $end
$var wire 1 ?= Cin $end

$scope module xor1 $end
$var wire 1 X6 in1 $end
$var wire 1 h6 in2 $end
$var wire 1 7= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 7= in1 $end
$var wire 1 '= in2 $end
$var wire 1 8= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 X6 in1 $end
$var wire 1 h6 in2 $end
$var wire 1 9= out $end
$upscope $end

$scope module not1 $end
$var wire 1 9= in1 $end
$var wire 1 := out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?= in1 $end
$var wire 1 7= in2 $end
$var wire 1 ;= out $end
$upscope $end

$scope module not2 $end
$var wire 1 ;= in1 $end
$var wire 1 <= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 := in1 $end
$var wire 1 <= in2 $end
$var wire 1 == out $end
$upscope $end

$scope module not3 $end
$var wire 1 == in1 $end
$var wire 1 >= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 )= s $end
$var wire 1 @= c_out $end
$var wire 1 W6 a $end
$var wire 1 g6 b $end
$var wire 1 &= c_in $end
$var wire 1 A= xor_AB $end
$var wire 1 B= xor_ABCin $end
$var wire 1 C= NAND_AB $end
$var wire 1 D= not_NAND_AB $end
$var wire 1 E= NAND_Cin_xor_AB $end
$var wire 1 F= not_NAND_Cin_xor_AB $end
$var wire 1 G= NOR_2NAND $end
$var wire 1 H= not_NOR_2NAND $end
$var wire 1 I= Cin $end

$scope module xor1 $end
$var wire 1 W6 in1 $end
$var wire 1 g6 in2 $end
$var wire 1 A= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 A= in1 $end
$var wire 1 &= in2 $end
$var wire 1 B= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 W6 in1 $end
$var wire 1 g6 in2 $end
$var wire 1 C= out $end
$upscope $end

$scope module not1 $end
$var wire 1 C= in1 $end
$var wire 1 D= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 I= in1 $end
$var wire 1 A= in2 $end
$var wire 1 E= out $end
$upscope $end

$scope module not2 $end
$var wire 1 E= in1 $end
$var wire 1 F= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 D= in1 $end
$var wire 1 F= in2 $end
$var wire 1 G= out $end
$upscope $end

$scope module not3 $end
$var wire 1 G= in1 $end
$var wire 1 H= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 (= s $end
$var wire 1 J= c_out $end
$var wire 1 V6 a $end
$var wire 1 f6 b $end
$var wire 1 %= c_in $end
$var wire 1 K= xor_AB $end
$var wire 1 L= xor_ABCin $end
$var wire 1 M= NAND_AB $end
$var wire 1 N= not_NAND_AB $end
$var wire 1 O= NAND_Cin_xor_AB $end
$var wire 1 P= not_NAND_Cin_xor_AB $end
$var wire 1 Q= NOR_2NAND $end
$var wire 1 R= not_NOR_2NAND $end
$var wire 1 S= Cin $end

$scope module xor1 $end
$var wire 1 V6 in1 $end
$var wire 1 f6 in2 $end
$var wire 1 K= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 K= in1 $end
$var wire 1 %= in2 $end
$var wire 1 L= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 V6 in1 $end
$var wire 1 f6 in2 $end
$var wire 1 M= out $end
$upscope $end

$scope module not1 $end
$var wire 1 M= in1 $end
$var wire 1 N= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 S= in1 $end
$var wire 1 K= in2 $end
$var wire 1 O= out $end
$upscope $end

$scope module not2 $end
$var wire 1 O= in1 $end
$var wire 1 P= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 N= in1 $end
$var wire 1 P= in2 $end
$var wire 1 Q= out $end
$upscope $end

$scope module not3 $end
$var wire 1 Q= in1 $end
$var wire 1 R= out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 o1 InA [15] $end
$var wire 1 p1 InA [14] $end
$var wire 1 q1 InA [13] $end
$var wire 1 r1 InA [12] $end
$var wire 1 s1 InA [11] $end
$var wire 1 t1 InA [10] $end
$var wire 1 u1 InA [9] $end
$var wire 1 v1 InA [8] $end
$var wire 1 w1 InA [7] $end
$var wire 1 x1 InA [6] $end
$var wire 1 y1 InA [5] $end
$var wire 1 z1 InA [4] $end
$var wire 1 {1 InA [3] $end
$var wire 1 |1 InA [2] $end
$var wire 1 }1 InA [1] $end
$var wire 1 ~1 InA [0] $end
$var wire 1 T= InB [15] $end
$var wire 1 U= InB [14] $end
$var wire 1 V= InB [13] $end
$var wire 1 W= InB [12] $end
$var wire 1 X= InB [11] $end
$var wire 1 Y= InB [10] $end
$var wire 1 Z= InB [9] $end
$var wire 1 [= InB [8] $end
$var wire 1 \= InB [7] $end
$var wire 1 ]= InB [6] $end
$var wire 1 ^= InB [5] $end
$var wire 1 _= InB [4] $end
$var wire 1 `= InB [3] $end
$var wire 1 a= InB [2] $end
$var wire 1 b= InB [1] $end
$var wire 1 c= InB [0] $end
$var wire 1 Z7 Out $end
$var wire 1 d= difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 I2 Out $end
$var wire 1 e= difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 :3 Out $end
$var wire 1 f= difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 V( SendNOP_In $end
$var wire 1 W( SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g= state $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h= state $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i= state $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j= state $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k= state $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l= state $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m= state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 W( q $end
$var wire 1 V( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n= state $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o= state $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p= state $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q= state $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r= state $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s= state $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t= state $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u= state $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 v= state $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 w= state $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 x= state $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 y= state $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 z= state $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 {= state $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |= state $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 }= state $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ~= state $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 !> state $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "> state $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #> state $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $> state $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %> state $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &> state $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 '> state $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (> state $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )> state $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *> state $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +> state $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,> state $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -> state $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .> state $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /> state $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0> state $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1> state $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2> state $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3> state $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4> state $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5> state $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6> state $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7> state $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8> state $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9> state $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :> state $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;> state $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <> state $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 => state $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >> state $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?> state $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @> state $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 A> state $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 B> state $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 C> state $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 D> state $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 E> state $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 F> state $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 G> state $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 H> state $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 I> state $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 J> state $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 K> state $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 L> state $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 M> state $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 N> state $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 O> state $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 P> state $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Q> state $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 R> state $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 S> state $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 T> state $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 U> state $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 V> state $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 W> state $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 X> state $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Y> state $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 Z> state $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [> state $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \> state $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]> state $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^> state $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _> state $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `> state $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 a> state $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 b> state $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 c> state $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 d> state $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 e> state $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 f> state $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 g> state $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 h> state $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 i> state $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 j> state $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 k> state $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 l> state $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 m> state $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 n> state $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 o> state $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 p> state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 q> state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 r> state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 s> state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 t> state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 u> state $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 /$ SgnExt [15] $end
$var wire 1 0$ SgnExt [14] $end
$var wire 1 1$ SgnExt [13] $end
$var wire 1 2$ SgnExt [12] $end
$var wire 1 3$ SgnExt [11] $end
$var wire 1 4$ SgnExt [10] $end
$var wire 1 5$ SgnExt [9] $end
$var wire 1 6$ SgnExt [8] $end
$var wire 1 7$ SgnExt [7] $end
$var wire 1 8$ SgnExt [6] $end
$var wire 1 9$ SgnExt [5] $end
$var wire 1 :$ SgnExt [4] $end
$var wire 1 ;$ SgnExt [3] $end
$var wire 1 <$ SgnExt [2] $end
$var wire 1 =$ SgnExt [1] $end
$var wire 1 >$ SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 v> MuxImmSrc [15] $end
$var wire 1 w> MuxImmSrc [14] $end
$var wire 1 x> MuxImmSrc [13] $end
$var wire 1 y> MuxImmSrc [12] $end
$var wire 1 z> MuxImmSrc [11] $end
$var wire 1 {> MuxImmSrc [10] $end
$var wire 1 |> MuxImmSrc [9] $end
$var wire 1 }> MuxImmSrc [8] $end
$var wire 1 ~> MuxImmSrc [7] $end
$var wire 1 !? MuxImmSrc [6] $end
$var wire 1 "? MuxImmSrc [5] $end
$var wire 1 #? MuxImmSrc [4] $end
$var wire 1 $? MuxImmSrc [3] $end
$var wire 1 %? MuxImmSrc [2] $end
$var wire 1 &? MuxImmSrc [1] $end
$var wire 1 '? MuxImmSrc [0] $end
$var wire 1 (? adderOut [15] $end
$var wire 1 )? adderOut [14] $end
$var wire 1 *? adderOut [13] $end
$var wire 1 +? adderOut [12] $end
$var wire 1 ,? adderOut [11] $end
$var wire 1 -? adderOut [10] $end
$var wire 1 .? adderOut [9] $end
$var wire 1 /? adderOut [8] $end
$var wire 1 0? adderOut [7] $end
$var wire 1 1? adderOut [6] $end
$var wire 1 2? adderOut [5] $end
$var wire 1 3? adderOut [4] $end
$var wire 1 4? adderOut [3] $end
$var wire 1 5? adderOut [2] $end
$var wire 1 6? adderOut [1] $end
$var wire 1 7? adderOut [0] $end
$var wire 1 8? MuxBranchSrc [15] $end
$var wire 1 9? MuxBranchSrc [14] $end
$var wire 1 :? MuxBranchSrc [13] $end
$var wire 1 ;? MuxBranchSrc [12] $end
$var wire 1 <? MuxBranchSrc [11] $end
$var wire 1 =? MuxBranchSrc [10] $end
$var wire 1 >? MuxBranchSrc [9] $end
$var wire 1 ?? MuxBranchSrc [8] $end
$var wire 1 @? MuxBranchSrc [7] $end
$var wire 1 A? MuxBranchSrc [6] $end
$var wire 1 B? MuxBranchSrc [5] $end
$var wire 1 C? MuxBranchSrc [4] $end
$var wire 1 D? MuxBranchSrc [3] $end
$var wire 1 E? MuxBranchSrc [2] $end
$var wire 1 F? MuxBranchSrc [1] $end
$var wire 1 G? MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 v> B [15] $end
$var wire 1 w> B [14] $end
$var wire 1 x> B [13] $end
$var wire 1 y> B [12] $end
$var wire 1 z> B [11] $end
$var wire 1 {> B [10] $end
$var wire 1 |> B [9] $end
$var wire 1 }> B [8] $end
$var wire 1 ~> B [7] $end
$var wire 1 !? B [6] $end
$var wire 1 "? B [5] $end
$var wire 1 #? B [4] $end
$var wire 1 $? B [3] $end
$var wire 1 %? B [2] $end
$var wire 1 &? B [1] $end
$var wire 1 '? B [0] $end
$var wire 1 (? S [15] $end
$var wire 1 )? S [14] $end
$var wire 1 *? S [13] $end
$var wire 1 +? S [12] $end
$var wire 1 ,? S [11] $end
$var wire 1 -? S [10] $end
$var wire 1 .? S [9] $end
$var wire 1 /? S [8] $end
$var wire 1 0? S [7] $end
$var wire 1 1? S [6] $end
$var wire 1 2? S [5] $end
$var wire 1 3? S [4] $end
$var wire 1 4? S [3] $end
$var wire 1 5? S [2] $end
$var wire 1 6? S [1] $end
$var wire 1 7? S [0] $end
$var wire 1 H? Cout $end
$var wire 1 I? Cout0 $end
$var wire 1 J? Cout1 $end
$var wire 1 K? Cout2 $end
$var wire 1 L? Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 $? B [3] $end
$var wire 1 %? B [2] $end
$var wire 1 &? B [1] $end
$var wire 1 '? B [0] $end
$var wire 1 L? Cin $end
$var wire 1 4? S [3] $end
$var wire 1 5? S [2] $end
$var wire 1 6? S [1] $end
$var wire 1 7? S [0] $end
$var wire 1 I? Cout $end
$var wire 1 M? Cout0 $end
$var wire 1 N? Cout1 $end
$var wire 1 O? Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 '? B $end
$var wire 1 L? Cin $end
$var wire 1 7? S $end
$var wire 1 M? Cout $end
$var wire 1 P? xor_AB $end
$var wire 1 Q? xor_ABCin $end
$var wire 1 R? NAND_AB $end
$var wire 1 S? not_NAND_AB $end
$var wire 1 T? NAND_Cin_xor_AB $end
$var wire 1 U? not_NAND_Cin_xor_AB $end
$var wire 1 V? NOR_2NAND $end
$var wire 1 W? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 '? in2 $end
$var wire 1 P? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P? in1 $end
$var wire 1 L? in2 $end
$var wire 1 Q? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 '? in2 $end
$var wire 1 R? out $end
$upscope $end

$scope module not1 $end
$var wire 1 R? in1 $end
$var wire 1 S? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L? in1 $end
$var wire 1 P? in2 $end
$var wire 1 T? out $end
$upscope $end

$scope module not2 $end
$var wire 1 T? in1 $end
$var wire 1 U? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S? in1 $end
$var wire 1 U? in2 $end
$var wire 1 V? out $end
$upscope $end

$scope module not3 $end
$var wire 1 V? in1 $end
$var wire 1 W? out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 &? B $end
$var wire 1 M? Cin $end
$var wire 1 6? S $end
$var wire 1 N? Cout $end
$var wire 1 X? xor_AB $end
$var wire 1 Y? xor_ABCin $end
$var wire 1 Z? NAND_AB $end
$var wire 1 [? not_NAND_AB $end
$var wire 1 \? NAND_Cin_xor_AB $end
$var wire 1 ]? not_NAND_Cin_xor_AB $end
$var wire 1 ^? NOR_2NAND $end
$var wire 1 _? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 &? in2 $end
$var wire 1 X? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 X? in1 $end
$var wire 1 M? in2 $end
$var wire 1 Y? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 &? in2 $end
$var wire 1 Z? out $end
$upscope $end

$scope module not1 $end
$var wire 1 Z? in1 $end
$var wire 1 [? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 M? in1 $end
$var wire 1 X? in2 $end
$var wire 1 \? out $end
$upscope $end

$scope module not2 $end
$var wire 1 \? in1 $end
$var wire 1 ]? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 [? in1 $end
$var wire 1 ]? in2 $end
$var wire 1 ^? out $end
$upscope $end

$scope module not3 $end
$var wire 1 ^? in1 $end
$var wire 1 _? out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 %? B $end
$var wire 1 N? Cin $end
$var wire 1 5? S $end
$var wire 1 O? Cout $end
$var wire 1 `? xor_AB $end
$var wire 1 a? xor_ABCin $end
$var wire 1 b? NAND_AB $end
$var wire 1 c? not_NAND_AB $end
$var wire 1 d? NAND_Cin_xor_AB $end
$var wire 1 e? not_NAND_Cin_xor_AB $end
$var wire 1 f? NOR_2NAND $end
$var wire 1 g? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 %? in2 $end
$var wire 1 `? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 `? in1 $end
$var wire 1 N? in2 $end
$var wire 1 a? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 %? in2 $end
$var wire 1 b? out $end
$upscope $end

$scope module not1 $end
$var wire 1 b? in1 $end
$var wire 1 c? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 N? in1 $end
$var wire 1 `? in2 $end
$var wire 1 d? out $end
$upscope $end

$scope module not2 $end
$var wire 1 d? in1 $end
$var wire 1 e? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 c? in1 $end
$var wire 1 e? in2 $end
$var wire 1 f? out $end
$upscope $end

$scope module not3 $end
$var wire 1 f? in1 $end
$var wire 1 g? out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 $? B $end
$var wire 1 O? Cin $end
$var wire 1 4? S $end
$var wire 1 I? Cout $end
$var wire 1 h? xor_AB $end
$var wire 1 i? xor_ABCin $end
$var wire 1 j? NAND_AB $end
$var wire 1 k? not_NAND_AB $end
$var wire 1 l? NAND_Cin_xor_AB $end
$var wire 1 m? not_NAND_Cin_xor_AB $end
$var wire 1 n? NOR_2NAND $end
$var wire 1 o? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 $? in2 $end
$var wire 1 h? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 h? in1 $end
$var wire 1 O? in2 $end
$var wire 1 i? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 $? in2 $end
$var wire 1 j? out $end
$upscope $end

$scope module not1 $end
$var wire 1 j? in1 $end
$var wire 1 k? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 O? in1 $end
$var wire 1 h? in2 $end
$var wire 1 l? out $end
$upscope $end

$scope module not2 $end
$var wire 1 l? in1 $end
$var wire 1 m? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 k? in1 $end
$var wire 1 m? in2 $end
$var wire 1 n? out $end
$upscope $end

$scope module not3 $end
$var wire 1 n? in1 $end
$var wire 1 o? out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 ~> B [3] $end
$var wire 1 !? B [2] $end
$var wire 1 "? B [1] $end
$var wire 1 #? B [0] $end
$var wire 1 I? Cin $end
$var wire 1 0? S [3] $end
$var wire 1 1? S [2] $end
$var wire 1 2? S [1] $end
$var wire 1 3? S [0] $end
$var wire 1 J? Cout $end
$var wire 1 p? Cout0 $end
$var wire 1 q? Cout1 $end
$var wire 1 r? Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 #? B $end
$var wire 1 I? Cin $end
$var wire 1 3? S $end
$var wire 1 p? Cout $end
$var wire 1 s? xor_AB $end
$var wire 1 t? xor_ABCin $end
$var wire 1 u? NAND_AB $end
$var wire 1 v? not_NAND_AB $end
$var wire 1 w? NAND_Cin_xor_AB $end
$var wire 1 x? not_NAND_Cin_xor_AB $end
$var wire 1 y? NOR_2NAND $end
$var wire 1 z? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 #? in2 $end
$var wire 1 s? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s? in1 $end
$var wire 1 I? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 #? in2 $end
$var wire 1 u? out $end
$upscope $end

$scope module not1 $end
$var wire 1 u? in1 $end
$var wire 1 v? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 I? in1 $end
$var wire 1 s? in2 $end
$var wire 1 w? out $end
$upscope $end

$scope module not2 $end
$var wire 1 w? in1 $end
$var wire 1 x? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v? in1 $end
$var wire 1 x? in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module not3 $end
$var wire 1 y? in1 $end
$var wire 1 z? out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 "? B $end
$var wire 1 p? Cin $end
$var wire 1 2? S $end
$var wire 1 q? Cout $end
$var wire 1 {? xor_AB $end
$var wire 1 |? xor_ABCin $end
$var wire 1 }? NAND_AB $end
$var wire 1 ~? not_NAND_AB $end
$var wire 1 !@ NAND_Cin_xor_AB $end
$var wire 1 "@ not_NAND_Cin_xor_AB $end
$var wire 1 #@ NOR_2NAND $end
$var wire 1 $@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 "? in2 $end
$var wire 1 {? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 {? in1 $end
$var wire 1 p? in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 "? in2 $end
$var wire 1 }? out $end
$upscope $end

$scope module not1 $end
$var wire 1 }? in1 $end
$var wire 1 ~? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p? in1 $end
$var wire 1 {? in2 $end
$var wire 1 !@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 !@ in1 $end
$var wire 1 "@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ~? in1 $end
$var wire 1 "@ in2 $end
$var wire 1 #@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 #@ in1 $end
$var wire 1 $@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 !? B $end
$var wire 1 q? Cin $end
$var wire 1 1? S $end
$var wire 1 r? Cout $end
$var wire 1 %@ xor_AB $end
$var wire 1 &@ xor_ABCin $end
$var wire 1 '@ NAND_AB $end
$var wire 1 (@ not_NAND_AB $end
$var wire 1 )@ NAND_Cin_xor_AB $end
$var wire 1 *@ not_NAND_Cin_xor_AB $end
$var wire 1 +@ NOR_2NAND $end
$var wire 1 ,@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 !? in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %@ in1 $end
$var wire 1 q? in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 !? in2 $end
$var wire 1 '@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 '@ in1 $end
$var wire 1 (@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q? in1 $end
$var wire 1 %@ in2 $end
$var wire 1 )@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 )@ in1 $end
$var wire 1 *@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (@ in1 $end
$var wire 1 *@ in2 $end
$var wire 1 +@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 +@ in1 $end
$var wire 1 ,@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 ~> B $end
$var wire 1 r? Cin $end
$var wire 1 0? S $end
$var wire 1 J? Cout $end
$var wire 1 -@ xor_AB $end
$var wire 1 .@ xor_ABCin $end
$var wire 1 /@ NAND_AB $end
$var wire 1 0@ not_NAND_AB $end
$var wire 1 1@ NAND_Cin_xor_AB $end
$var wire 1 2@ not_NAND_Cin_xor_AB $end
$var wire 1 3@ NOR_2NAND $end
$var wire 1 4@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 ~> in2 $end
$var wire 1 -@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -@ in1 $end
$var wire 1 r? in2 $end
$var wire 1 .@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 ~> in2 $end
$var wire 1 /@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 /@ in1 $end
$var wire 1 0@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r? in1 $end
$var wire 1 -@ in2 $end
$var wire 1 1@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 1@ in1 $end
$var wire 1 2@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0@ in1 $end
$var wire 1 2@ in2 $end
$var wire 1 3@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 3@ in1 $end
$var wire 1 4@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 z> B [3] $end
$var wire 1 {> B [2] $end
$var wire 1 |> B [1] $end
$var wire 1 }> B [0] $end
$var wire 1 J? Cin $end
$var wire 1 ,? S [3] $end
$var wire 1 -? S [2] $end
$var wire 1 .? S [1] $end
$var wire 1 /? S [0] $end
$var wire 1 K? Cout $end
$var wire 1 5@ Cout0 $end
$var wire 1 6@ Cout1 $end
$var wire 1 7@ Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 }> B $end
$var wire 1 J? Cin $end
$var wire 1 /? S $end
$var wire 1 5@ Cout $end
$var wire 1 8@ xor_AB $end
$var wire 1 9@ xor_ABCin $end
$var wire 1 :@ NAND_AB $end
$var wire 1 ;@ not_NAND_AB $end
$var wire 1 <@ NAND_Cin_xor_AB $end
$var wire 1 =@ not_NAND_Cin_xor_AB $end
$var wire 1 >@ NOR_2NAND $end
$var wire 1 ?@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 }> in2 $end
$var wire 1 8@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8@ in1 $end
$var wire 1 J? in2 $end
$var wire 1 9@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 }> in2 $end
$var wire 1 :@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 :@ in1 $end
$var wire 1 ;@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 J? in1 $end
$var wire 1 8@ in2 $end
$var wire 1 <@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 <@ in1 $end
$var wire 1 =@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;@ in1 $end
$var wire 1 =@ in2 $end
$var wire 1 >@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 >@ in1 $end
$var wire 1 ?@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 |> B $end
$var wire 1 5@ Cin $end
$var wire 1 .? S $end
$var wire 1 6@ Cout $end
$var wire 1 @@ xor_AB $end
$var wire 1 A@ xor_ABCin $end
$var wire 1 B@ NAND_AB $end
$var wire 1 C@ not_NAND_AB $end
$var wire 1 D@ NAND_Cin_xor_AB $end
$var wire 1 E@ not_NAND_Cin_xor_AB $end
$var wire 1 F@ NOR_2NAND $end
$var wire 1 G@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 |> in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 @@ in1 $end
$var wire 1 5@ in2 $end
$var wire 1 A@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 |> in2 $end
$var wire 1 B@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 B@ in1 $end
$var wire 1 C@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5@ in1 $end
$var wire 1 @@ in2 $end
$var wire 1 D@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 D@ in1 $end
$var wire 1 E@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 C@ in1 $end
$var wire 1 E@ in2 $end
$var wire 1 F@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 F@ in1 $end
$var wire 1 G@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 {> B $end
$var wire 1 6@ Cin $end
$var wire 1 -? S $end
$var wire 1 7@ Cout $end
$var wire 1 H@ xor_AB $end
$var wire 1 I@ xor_ABCin $end
$var wire 1 J@ NAND_AB $end
$var wire 1 K@ not_NAND_AB $end
$var wire 1 L@ NAND_Cin_xor_AB $end
$var wire 1 M@ not_NAND_Cin_xor_AB $end
$var wire 1 N@ NOR_2NAND $end
$var wire 1 O@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 {> in2 $end
$var wire 1 H@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 H@ in1 $end
$var wire 1 6@ in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 {> in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 J@ in1 $end
$var wire 1 K@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 6@ in1 $end
$var wire 1 H@ in2 $end
$var wire 1 L@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 L@ in1 $end
$var wire 1 M@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 K@ in1 $end
$var wire 1 M@ in2 $end
$var wire 1 N@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 N@ in1 $end
$var wire 1 O@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 z> B $end
$var wire 1 7@ Cin $end
$var wire 1 ,? S $end
$var wire 1 K? Cout $end
$var wire 1 P@ xor_AB $end
$var wire 1 Q@ xor_ABCin $end
$var wire 1 R@ NAND_AB $end
$var wire 1 S@ not_NAND_AB $end
$var wire 1 T@ NAND_Cin_xor_AB $end
$var wire 1 U@ not_NAND_Cin_xor_AB $end
$var wire 1 V@ NOR_2NAND $end
$var wire 1 W@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 z> in2 $end
$var wire 1 P@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P@ in1 $end
$var wire 1 7@ in2 $end
$var wire 1 Q@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 z> in2 $end
$var wire 1 R@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 R@ in1 $end
$var wire 1 S@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7@ in1 $end
$var wire 1 P@ in2 $end
$var wire 1 T@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 T@ in1 $end
$var wire 1 U@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S@ in1 $end
$var wire 1 U@ in2 $end
$var wire 1 V@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 V@ in1 $end
$var wire 1 W@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 v> B [3] $end
$var wire 1 w> B [2] $end
$var wire 1 x> B [1] $end
$var wire 1 y> B [0] $end
$var wire 1 K? Cin $end
$var wire 1 (? S [3] $end
$var wire 1 )? S [2] $end
$var wire 1 *? S [1] $end
$var wire 1 +? S [0] $end
$var wire 1 H? Cout $end
$var wire 1 X@ Cout0 $end
$var wire 1 Y@ Cout1 $end
$var wire 1 Z@ Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 y> B $end
$var wire 1 K? Cin $end
$var wire 1 +? S $end
$var wire 1 X@ Cout $end
$var wire 1 [@ xor_AB $end
$var wire 1 \@ xor_ABCin $end
$var wire 1 ]@ NAND_AB $end
$var wire 1 ^@ not_NAND_AB $end
$var wire 1 _@ NAND_Cin_xor_AB $end
$var wire 1 `@ not_NAND_Cin_xor_AB $end
$var wire 1 a@ NOR_2NAND $end
$var wire 1 b@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 y> in2 $end
$var wire 1 [@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 [@ in1 $end
$var wire 1 K? in2 $end
$var wire 1 \@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 y> in2 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ]@ in1 $end
$var wire 1 ^@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K? in1 $end
$var wire 1 [@ in2 $end
$var wire 1 _@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 _@ in1 $end
$var wire 1 `@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ^@ in1 $end
$var wire 1 `@ in2 $end
$var wire 1 a@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 a@ in1 $end
$var wire 1 b@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 x> B $end
$var wire 1 X@ Cin $end
$var wire 1 *? S $end
$var wire 1 Y@ Cout $end
$var wire 1 c@ xor_AB $end
$var wire 1 d@ xor_ABCin $end
$var wire 1 e@ NAND_AB $end
$var wire 1 f@ not_NAND_AB $end
$var wire 1 g@ NAND_Cin_xor_AB $end
$var wire 1 h@ not_NAND_Cin_xor_AB $end
$var wire 1 i@ NOR_2NAND $end
$var wire 1 j@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 x> in2 $end
$var wire 1 c@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 c@ in1 $end
$var wire 1 X@ in2 $end
$var wire 1 d@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 x> in2 $end
$var wire 1 e@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 e@ in1 $end
$var wire 1 f@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X@ in1 $end
$var wire 1 c@ in2 $end
$var wire 1 g@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 g@ in1 $end
$var wire 1 h@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 f@ in1 $end
$var wire 1 h@ in2 $end
$var wire 1 i@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 i@ in1 $end
$var wire 1 j@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 w> B $end
$var wire 1 Y@ Cin $end
$var wire 1 )? S $end
$var wire 1 Z@ Cout $end
$var wire 1 k@ xor_AB $end
$var wire 1 l@ xor_ABCin $end
$var wire 1 m@ NAND_AB $end
$var wire 1 n@ not_NAND_AB $end
$var wire 1 o@ NAND_Cin_xor_AB $end
$var wire 1 p@ not_NAND_Cin_xor_AB $end
$var wire 1 q@ NOR_2NAND $end
$var wire 1 r@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 w> in2 $end
$var wire 1 k@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 k@ in1 $end
$var wire 1 Y@ in2 $end
$var wire 1 l@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 w> in2 $end
$var wire 1 m@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 m@ in1 $end
$var wire 1 n@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Y@ in1 $end
$var wire 1 k@ in2 $end
$var wire 1 o@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 o@ in1 $end
$var wire 1 p@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 n@ in1 $end
$var wire 1 p@ in2 $end
$var wire 1 q@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 q@ in1 $end
$var wire 1 r@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 v> B $end
$var wire 1 Z@ Cin $end
$var wire 1 (? S $end
$var wire 1 H? Cout $end
$var wire 1 s@ xor_AB $end
$var wire 1 t@ xor_ABCin $end
$var wire 1 u@ NAND_AB $end
$var wire 1 v@ not_NAND_AB $end
$var wire 1 w@ NAND_Cin_xor_AB $end
$var wire 1 x@ not_NAND_Cin_xor_AB $end
$var wire 1 y@ NOR_2NAND $end
$var wire 1 z@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 v> in2 $end
$var wire 1 s@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s@ in1 $end
$var wire 1 Z@ in2 $end
$var wire 1 t@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 v> in2 $end
$var wire 1 u@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 u@ in1 $end
$var wire 1 v@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 w@ in1 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v@ in1 $end
$var wire 1 x@ in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 y@ in1 $end
$var wire 1 z@ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 {@ enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 |@ loaded $end
$var reg 17 }@ largest [16:0] $end
$var integer 32 ~@ mcd $end
$var integer 32 !A i $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 W( SendNOP_In $end
$var wire 1 X( SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 "A state $end
$upscope $end

$scope module SendNOP $end
$var wire 1 X( q $end
$var wire 1 W( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 #A state $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 $A state $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 %A state $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 &A state $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 'A state $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 (A state $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 )A state $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 *A state $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 +A state $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ,A state $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 -A state $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 .A state $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 /A state $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 0A state $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 1A state $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 2A state $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 3A state $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 4A state $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 5A state $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 6A state $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 7A state $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 8A state $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 9A state $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 :A state $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ;A state $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 <A state $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 =A state $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 >A state $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ?A state $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 @A state $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 AA state $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 BA state $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 CA state $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 DA state $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 EA state $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 FA state $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 GA state $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 HA state $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 IA state $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 JA state $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 KA state $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 LA state $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 MA state $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 NA state $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 OA state $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 PA state $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 QA state $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 RA state $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 SA state $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 TA state $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 UA state $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 VA state $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 WA state $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 XA state $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 YA state $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ZA state $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 [A state $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 \A state $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ]A state $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 ^A state $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 _A state $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 `A state $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 aA state $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 bA state $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 cA state $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 dA state $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 eA state $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 fA state $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 gA state $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var reg 1 hA state $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemDataIn [15] $end
$var wire 1 h MemDataIn [14] $end
$var wire 1 i MemDataIn [13] $end
$var wire 1 j MemDataIn [12] $end
$var wire 1 k MemDataIn [11] $end
$var wire 1 l MemDataIn [10] $end
$var wire 1 m MemDataIn [9] $end
$var wire 1 n MemDataIn [8] $end
$var wire 1 o MemDataIn [7] $end
$var wire 1 p MemDataIn [6] $end
$var wire 1 q MemDataIn [5] $end
$var wire 1 r MemDataIn [4] $end
$var wire 1 s MemDataIn [3] $end
$var wire 1 t MemDataIn [2] $end
$var wire 1 u MemDataIn [1] $end
$var wire 1 v MemDataIn [0] $end
$var wire 1 w MemDataOut [15] $end
$var wire 1 x MemDataOut [14] $end
$var wire 1 y MemDataOut [13] $end
$var wire 1 z MemDataOut [12] $end
$var wire 1 { MemDataOut [11] $end
$var wire 1 | MemDataOut [10] $end
$var wire 1 } MemDataOut [9] $end
$var wire 1 ~ MemDataOut [8] $end
$var wire 1 !! MemDataOut [7] $end
$var wire 1 "! MemDataOut [6] $end
$var wire 1 #! MemDataOut [5] $end
$var wire 1 $! MemDataOut [4] $end
$var wire 1 %! MemDataOut [3] $end
$var wire 1 &! MemDataOut [2] $end
$var wire 1 '! MemDataOut [1] $end
$var wire 1 (! MemDataOut [0] $end
$var wire 1 )! DCacheHit $end
$var wire 1 *! ICacheHit $end
$var wire 1 +! DCacheReq $end
$var wire 1 ,! ICacheReq $end
$var wire 1 -! Halt $end
$var wire 1 5! regsrc_data_read [1] $end
$var wire 1 6! regsrc_data_read [0] $end

$scope module DUT $end
$var wire 1 7! clk $end
$var wire 1 8! err $end
$var wire 1 9! rst $end

$scope module c0 $end
$var wire 1 8! err $end
$upscope $end

$scope module p0 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 N! ImmSrc $end
$var wire 1 O! temp [15] $end
$var wire 1 P! temp [14] $end
$var wire 1 Q! temp [13] $end
$var wire 1 R! temp [12] $end
$var wire 1 S! temp [11] $end
$var wire 1 T! temp [10] $end
$var wire 1 U! temp [9] $end
$var wire 1 V! temp [8] $end
$var wire 1 W! temp [7] $end
$var wire 1 X! temp [6] $end
$var wire 1 Y! temp [5] $end
$var wire 1 Z! temp [4] $end
$var wire 1 [! temp [3] $end
$var wire 1 \! temp [2] $end
$var wire 1 ]! temp [1] $end
$var wire 1 ^! temp [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 o! instruction_out_IF_ID [15] $end
$var wire 1 p! instruction_out_IF_ID [14] $end
$var wire 1 q! instruction_out_IF_ID [13] $end
$var wire 1 r! instruction_out_IF_ID [12] $end
$var wire 1 s! instruction_out_IF_ID [11] $end
$var wire 1 t! instruction_out_IF_ID [10] $end
$var wire 1 u! instruction_out_IF_ID [9] $end
$var wire 1 v! instruction_out_IF_ID [8] $end
$var wire 1 w! instruction_out_IF_ID [7] $end
$var wire 1 x! instruction_out_IF_ID [6] $end
$var wire 1 y! instruction_out_IF_ID [5] $end
$var wire 1 z! instruction_out_IF_ID [4] $end
$var wire 1 {! instruction_out_IF_ID [3] $end
$var wire 1 |! instruction_out_IF_ID [2] $end
$var wire 1 }! instruction_out_IF_ID [1] $end
$var wire 1 ~! instruction_out_IF_ID [0] $end
$var wire 1 !" pc_next_to_IF_ID [15] $end
$var wire 1 "" pc_next_to_IF_ID [14] $end
$var wire 1 #" pc_next_to_IF_ID [13] $end
$var wire 1 $" pc_next_to_IF_ID [12] $end
$var wire 1 %" pc_next_to_IF_ID [11] $end
$var wire 1 &" pc_next_to_IF_ID [10] $end
$var wire 1 '" pc_next_to_IF_ID [9] $end
$var wire 1 (" pc_next_to_IF_ID [8] $end
$var wire 1 )" pc_next_to_IF_ID [7] $end
$var wire 1 *" pc_next_to_IF_ID [6] $end
$var wire 1 +" pc_next_to_IF_ID [5] $end
$var wire 1 ," pc_next_to_IF_ID [4] $end
$var wire 1 -" pc_next_to_IF_ID [3] $end
$var wire 1 ." pc_next_to_IF_ID [2] $end
$var wire 1 /" pc_next_to_IF_ID [1] $end
$var wire 1 0" pc_next_to_IF_ID [0] $end
$var wire 1 1" pc_next_out_IF_ID [15] $end
$var wire 1 2" pc_next_out_IF_ID [14] $end
$var wire 1 3" pc_next_out_IF_ID [13] $end
$var wire 1 4" pc_next_out_IF_ID [12] $end
$var wire 1 5" pc_next_out_IF_ID [11] $end
$var wire 1 6" pc_next_out_IF_ID [10] $end
$var wire 1 7" pc_next_out_IF_ID [9] $end
$var wire 1 8" pc_next_out_IF_ID [8] $end
$var wire 1 9" pc_next_out_IF_ID [7] $end
$var wire 1 :" pc_next_out_IF_ID [6] $end
$var wire 1 ;" pc_next_out_IF_ID [5] $end
$var wire 1 <" pc_next_out_IF_ID [4] $end
$var wire 1 =" pc_next_out_IF_ID [3] $end
$var wire 1 >" pc_next_out_IF_ID [2] $end
$var wire 1 ?" pc_next_out_IF_ID [1] $end
$var wire 1 @" pc_next_out_IF_ID [0] $end
$var wire 1 A" pc_next_out_ID_EX [15] $end
$var wire 1 B" pc_next_out_ID_EX [14] $end
$var wire 1 C" pc_next_out_ID_EX [13] $end
$var wire 1 D" pc_next_out_ID_EX [12] $end
$var wire 1 E" pc_next_out_ID_EX [11] $end
$var wire 1 F" pc_next_out_ID_EX [10] $end
$var wire 1 G" pc_next_out_ID_EX [9] $end
$var wire 1 H" pc_next_out_ID_EX [8] $end
$var wire 1 I" pc_next_out_ID_EX [7] $end
$var wire 1 J" pc_next_out_ID_EX [6] $end
$var wire 1 K" pc_next_out_ID_EX [5] $end
$var wire 1 L" pc_next_out_ID_EX [4] $end
$var wire 1 M" pc_next_out_ID_EX [3] $end
$var wire 1 N" pc_next_out_ID_EX [2] $end
$var wire 1 O" pc_next_out_ID_EX [1] $end
$var wire 1 P" pc_next_out_ID_EX [0] $end
$var wire 1 Q" BTR_to_ID_EX $end
$var wire 1 R" BTR_out_ID_EX $end
$var wire 1 S" BSrc_to_ID_EX [1] $end
$var wire 1 T" BSrc_to_ID_EX [0] $end
$var wire 1 U" BSrc_out_ID_EX [1] $end
$var wire 1 V" BSrc_out_ID_EX [0] $end
$var wire 1 W" InvB_to_ID_EX $end
$var wire 1 X" InvB_out_ID_EX $end
$var wire 1 Y" InvA_to_ID_EX $end
$var wire 1 Z" InvA_out_ID_EX $end
$var wire 1 [" read_data_1_to_ID_EX [15] $end
$var wire 1 \" read_data_1_to_ID_EX [14] $end
$var wire 1 ]" read_data_1_to_ID_EX [13] $end
$var wire 1 ^" read_data_1_to_ID_EX [12] $end
$var wire 1 _" read_data_1_to_ID_EX [11] $end
$var wire 1 `" read_data_1_to_ID_EX [10] $end
$var wire 1 a" read_data_1_to_ID_EX [9] $end
$var wire 1 b" read_data_1_to_ID_EX [8] $end
$var wire 1 c" read_data_1_to_ID_EX [7] $end
$var wire 1 d" read_data_1_to_ID_EX [6] $end
$var wire 1 e" read_data_1_to_ID_EX [5] $end
$var wire 1 f" read_data_1_to_ID_EX [4] $end
$var wire 1 g" read_data_1_to_ID_EX [3] $end
$var wire 1 h" read_data_1_to_ID_EX [2] $end
$var wire 1 i" read_data_1_to_ID_EX [1] $end
$var wire 1 j" read_data_1_to_ID_EX [0] $end
$var wire 1 k" read_data_1_out_ID_EX [15] $end
$var wire 1 l" read_data_1_out_ID_EX [14] $end
$var wire 1 m" read_data_1_out_ID_EX [13] $end
$var wire 1 n" read_data_1_out_ID_EX [12] $end
$var wire 1 o" read_data_1_out_ID_EX [11] $end
$var wire 1 p" read_data_1_out_ID_EX [10] $end
$var wire 1 q" read_data_1_out_ID_EX [9] $end
$var wire 1 r" read_data_1_out_ID_EX [8] $end
$var wire 1 s" read_data_1_out_ID_EX [7] $end
$var wire 1 t" read_data_1_out_ID_EX [6] $end
$var wire 1 u" read_data_1_out_ID_EX [5] $end
$var wire 1 v" read_data_1_out_ID_EX [4] $end
$var wire 1 w" read_data_1_out_ID_EX [3] $end
$var wire 1 x" read_data_1_out_ID_EX [2] $end
$var wire 1 y" read_data_1_out_ID_EX [1] $end
$var wire 1 z" read_data_1_out_ID_EX [0] $end
$var wire 1 {" read_data_2_to_ID_EX [15] $end
$var wire 1 |" read_data_2_to_ID_EX [14] $end
$var wire 1 }" read_data_2_to_ID_EX [13] $end
$var wire 1 ~" read_data_2_to_ID_EX [12] $end
$var wire 1 !# read_data_2_to_ID_EX [11] $end
$var wire 1 "# read_data_2_to_ID_EX [10] $end
$var wire 1 ## read_data_2_to_ID_EX [9] $end
$var wire 1 $# read_data_2_to_ID_EX [8] $end
$var wire 1 %# read_data_2_to_ID_EX [7] $end
$var wire 1 &# read_data_2_to_ID_EX [6] $end
$var wire 1 '# read_data_2_to_ID_EX [5] $end
$var wire 1 (# read_data_2_to_ID_EX [4] $end
$var wire 1 )# read_data_2_to_ID_EX [3] $end
$var wire 1 *# read_data_2_to_ID_EX [2] $end
$var wire 1 +# read_data_2_to_ID_EX [1] $end
$var wire 1 ,# read_data_2_to_ID_EX [0] $end
$var wire 1 -# read_data_2_out_ID_EX [15] $end
$var wire 1 .# read_data_2_out_ID_EX [14] $end
$var wire 1 /# read_data_2_out_ID_EX [13] $end
$var wire 1 0# read_data_2_out_ID_EX [12] $end
$var wire 1 1# read_data_2_out_ID_EX [11] $end
$var wire 1 2# read_data_2_out_ID_EX [10] $end
$var wire 1 3# read_data_2_out_ID_EX [9] $end
$var wire 1 4# read_data_2_out_ID_EX [8] $end
$var wire 1 5# read_data_2_out_ID_EX [7] $end
$var wire 1 6# read_data_2_out_ID_EX [6] $end
$var wire 1 7# read_data_2_out_ID_EX [5] $end
$var wire 1 8# read_data_2_out_ID_EX [4] $end
$var wire 1 9# read_data_2_out_ID_EX [3] $end
$var wire 1 :# read_data_2_out_ID_EX [2] $end
$var wire 1 ;# read_data_2_out_ID_EX [1] $end
$var wire 1 <# read_data_2_out_ID_EX [0] $end
$var wire 1 =# i1_to_ID_EX [15] $end
$var wire 1 ># i1_to_ID_EX [14] $end
$var wire 1 ?# i1_to_ID_EX [13] $end
$var wire 1 @# i1_to_ID_EX [12] $end
$var wire 1 A# i1_to_ID_EX [11] $end
$var wire 1 B# i1_to_ID_EX [10] $end
$var wire 1 C# i1_to_ID_EX [9] $end
$var wire 1 D# i1_to_ID_EX [8] $end
$var wire 1 E# i1_to_ID_EX [7] $end
$var wire 1 F# i1_to_ID_EX [6] $end
$var wire 1 G# i1_to_ID_EX [5] $end
$var wire 1 H# i1_to_ID_EX [4] $end
$var wire 1 I# i1_to_ID_EX [3] $end
$var wire 1 J# i1_to_ID_EX [2] $end
$var wire 1 K# i1_to_ID_EX [1] $end
$var wire 1 L# i1_to_ID_EX [0] $end
$var wire 1 M# i1_out_ID_EX [15] $end
$var wire 1 N# i1_out_ID_EX [14] $end
$var wire 1 O# i1_out_ID_EX [13] $end
$var wire 1 P# i1_out_ID_EX [12] $end
$var wire 1 Q# i1_out_ID_EX [11] $end
$var wire 1 R# i1_out_ID_EX [10] $end
$var wire 1 S# i1_out_ID_EX [9] $end
$var wire 1 T# i1_out_ID_EX [8] $end
$var wire 1 U# i1_out_ID_EX [7] $end
$var wire 1 V# i1_out_ID_EX [6] $end
$var wire 1 W# i1_out_ID_EX [5] $end
$var wire 1 X# i1_out_ID_EX [4] $end
$var wire 1 Y# i1_out_ID_EX [3] $end
$var wire 1 Z# i1_out_ID_EX [2] $end
$var wire 1 [# i1_out_ID_EX [1] $end
$var wire 1 \# i1_out_ID_EX [0] $end
$var wire 1 ]# i2_to_ID_EX [15] $end
$var wire 1 ^# i2_to_ID_EX [14] $end
$var wire 1 _# i2_to_ID_EX [13] $end
$var wire 1 `# i2_to_ID_EX [12] $end
$var wire 1 a# i2_to_ID_EX [11] $end
$var wire 1 b# i2_to_ID_EX [10] $end
$var wire 1 c# i2_to_ID_EX [9] $end
$var wire 1 d# i2_to_ID_EX [8] $end
$var wire 1 e# i2_to_ID_EX [7] $end
$var wire 1 f# i2_to_ID_EX [6] $end
$var wire 1 g# i2_to_ID_EX [5] $end
$var wire 1 h# i2_to_ID_EX [4] $end
$var wire 1 i# i2_to_ID_EX [3] $end
$var wire 1 j# i2_to_ID_EX [2] $end
$var wire 1 k# i2_to_ID_EX [1] $end
$var wire 1 l# i2_to_ID_EX [0] $end
$var wire 1 m# i2_out_ID_EX [15] $end
$var wire 1 n# i2_out_ID_EX [14] $end
$var wire 1 o# i2_out_ID_EX [13] $end
$var wire 1 p# i2_out_ID_EX [12] $end
$var wire 1 q# i2_out_ID_EX [11] $end
$var wire 1 r# i2_out_ID_EX [10] $end
$var wire 1 s# i2_out_ID_EX [9] $end
$var wire 1 t# i2_out_ID_EX [8] $end
$var wire 1 u# i2_out_ID_EX [7] $end
$var wire 1 v# i2_out_ID_EX [6] $end
$var wire 1 w# i2_out_ID_EX [5] $end
$var wire 1 x# i2_out_ID_EX [4] $end
$var wire 1 y# i2_out_ID_EX [3] $end
$var wire 1 z# i2_out_ID_EX [2] $end
$var wire 1 {# i2_out_ID_EX [1] $end
$var wire 1 |# i2_out_ID_EX [0] $end
$var wire 1 }# word_align_jump_to_ID_EX [15] $end
$var wire 1 ~# word_align_jump_to_ID_EX [14] $end
$var wire 1 !$ word_align_jump_to_ID_EX [13] $end
$var wire 1 "$ word_align_jump_to_ID_EX [12] $end
$var wire 1 #$ word_align_jump_to_ID_EX [11] $end
$var wire 1 $$ word_align_jump_to_ID_EX [10] $end
$var wire 1 %$ word_align_jump_to_ID_EX [9] $end
$var wire 1 &$ word_align_jump_to_ID_EX [8] $end
$var wire 1 '$ word_align_jump_to_ID_EX [7] $end
$var wire 1 ($ word_align_jump_to_ID_EX [6] $end
$var wire 1 )$ word_align_jump_to_ID_EX [5] $end
$var wire 1 *$ word_align_jump_to_ID_EX [4] $end
$var wire 1 +$ word_align_jump_to_ID_EX [3] $end
$var wire 1 ,$ word_align_jump_to_ID_EX [2] $end
$var wire 1 -$ word_align_jump_to_ID_EX [1] $end
$var wire 1 .$ word_align_jump_to_ID_EX [0] $end
$var wire 1 /$ word_align_jump_out_ID_EX [15] $end
$var wire 1 0$ word_align_jump_out_ID_EX [14] $end
$var wire 1 1$ word_align_jump_out_ID_EX [13] $end
$var wire 1 2$ word_align_jump_out_ID_EX [12] $end
$var wire 1 3$ word_align_jump_out_ID_EX [11] $end
$var wire 1 4$ word_align_jump_out_ID_EX [10] $end
$var wire 1 5$ word_align_jump_out_ID_EX [9] $end
$var wire 1 6$ word_align_jump_out_ID_EX [8] $end
$var wire 1 7$ word_align_jump_out_ID_EX [7] $end
$var wire 1 8$ word_align_jump_out_ID_EX [6] $end
$var wire 1 9$ word_align_jump_out_ID_EX [5] $end
$var wire 1 :$ word_align_jump_out_ID_EX [4] $end
$var wire 1 ;$ word_align_jump_out_ID_EX [3] $end
$var wire 1 <$ word_align_jump_out_ID_EX [2] $end
$var wire 1 =$ word_align_jump_out_ID_EX [1] $end
$var wire 1 >$ word_align_jump_out_ID_EX [0] $end
$var wire 1 ?$ to_shift_to_ID_EX [15] $end
$var wire 1 @$ to_shift_to_ID_EX [14] $end
$var wire 1 A$ to_shift_to_ID_EX [13] $end
$var wire 1 B$ to_shift_to_ID_EX [12] $end
$var wire 1 C$ to_shift_to_ID_EX [11] $end
$var wire 1 D$ to_shift_to_ID_EX [10] $end
$var wire 1 E$ to_shift_to_ID_EX [9] $end
$var wire 1 F$ to_shift_to_ID_EX [8] $end
$var wire 1 G$ to_shift_to_ID_EX [7] $end
$var wire 1 H$ to_shift_to_ID_EX [6] $end
$var wire 1 I$ to_shift_to_ID_EX [5] $end
$var wire 1 J$ to_shift_to_ID_EX [4] $end
$var wire 1 K$ to_shift_to_ID_EX [3] $end
$var wire 1 L$ to_shift_to_ID_EX [2] $end
$var wire 1 M$ to_shift_to_ID_EX [1] $end
$var wire 1 N$ to_shift_to_ID_EX [0] $end
$var wire 1 O$ to_shift_out_ID_EX [15] $end
$var wire 1 P$ to_shift_out_ID_EX [14] $end
$var wire 1 Q$ to_shift_out_ID_EX [13] $end
$var wire 1 R$ to_shift_out_ID_EX [12] $end
$var wire 1 S$ to_shift_out_ID_EX [11] $end
$var wire 1 T$ to_shift_out_ID_EX [10] $end
$var wire 1 U$ to_shift_out_ID_EX [9] $end
$var wire 1 V$ to_shift_out_ID_EX [8] $end
$var wire 1 W$ to_shift_out_ID_EX [7] $end
$var wire 1 X$ to_shift_out_ID_EX [6] $end
$var wire 1 Y$ to_shift_out_ID_EX [5] $end
$var wire 1 Z$ to_shift_out_ID_EX [4] $end
$var wire 1 [$ to_shift_out_ID_EX [3] $end
$var wire 1 \$ to_shift_out_ID_EX [2] $end
$var wire 1 ]$ to_shift_out_ID_EX [1] $end
$var wire 1 ^$ to_shift_out_ID_EX [0] $end
$var wire 1 _$ ALUOpr_to_ID_EX [2] $end
$var wire 1 `$ ALUOpr_to_ID_EX [1] $end
$var wire 1 a$ ALUOpr_to_ID_EX [0] $end
$var wire 1 b$ ALUOpr_out_ID_EX [2] $end
$var wire 1 c$ ALUOpr_out_ID_EX [1] $end
$var wire 1 d$ ALUOpr_out_ID_EX [0] $end
$var wire 1 e$ MemWrt_to_ID_EX $end
$var wire 1 f$ MemWrt_out_ID_EX $end
$var wire 1 g$ branch_command_to_ID_EX [1] $end
$var wire 1 h$ branch_command_to_ID_EX [0] $end
$var wire 1 i$ branch_command_out_ID_EX [1] $end
$var wire 1 j$ branch_command_out_ID_EX [0] $end
$var wire 1 k$ branching_to_ID_EX $end
$var wire 1 l$ branching_out_ID_EX $end
$var wire 1 m$ SLBI_to_ID_EX $end
$var wire 1 n$ SLBI_out_ID_EX $end
$var wire 1 o$ SetCtrl_to_ID_EX [2] $end
$var wire 1 p$ SetCtrl_to_ID_EX [1] $end
$var wire 1 q$ SetCtrl_to_ID_EX [0] $end
$var wire 1 r$ SetCtrl_out_ID_EX [2] $end
$var wire 1 s$ SetCtrl_out_ID_EX [1] $end
$var wire 1 t$ SetCtrl_out_ID_EX [0] $end
$var wire 1 u$ ALUJMP_in_ID_EX $end
$var wire 1 v$ ALUJMP_out_ID_EX $end
$var wire 1 w$ PC_or_add_in_ID_EX $end
$var wire 1 x$ PC_or_add_out_ID_EX $end
$var wire 1 y$ RegSrc_to_ID_EX [1] $end
$var wire 1 z$ RegSrc_to_ID_EX [0] $end
$var wire 1 {$ RegSrc_out_ID_EX [1] $end
$var wire 1 |$ RegSrc_out_ID_EX [0] $end
$var wire 1 }$ halt_to_ID_EX $end
$var wire 1 ~$ halt_out_ID_EX $end
$var wire 1 !% RegWrt_to_ID_EX $end
$var wire 1 "% RegWrt_out_ID_EX $end
$var wire 1 #% write_reg_to_ID_EX [2] $end
$var wire 1 $% write_reg_to_ID_EX [1] $end
$var wire 1 %% write_reg_to_ID_EX [0] $end
$var wire 1 &% write_reg_out_ID_EX [2] $end
$var wire 1 '% write_reg_out_ID_EX [1] $end
$var wire 1 (% write_reg_out_ID_EX [0] $end
$var wire 1 )% branchtake_to_EX_MEM $end
$var wire 1 *% branchtake_out_EX_MEM $end
$var wire 1 +% Alu_result_to_EX_MEM [15] $end
$var wire 1 ,% Alu_result_to_EX_MEM [14] $end
$var wire 1 -% Alu_result_to_EX_MEM [13] $end
$var wire 1 .% Alu_result_to_EX_MEM [12] $end
$var wire 1 /% Alu_result_to_EX_MEM [11] $end
$var wire 1 0% Alu_result_to_EX_MEM [10] $end
$var wire 1 1% Alu_result_to_EX_MEM [9] $end
$var wire 1 2% Alu_result_to_EX_MEM [8] $end
$var wire 1 3% Alu_result_to_EX_MEM [7] $end
$var wire 1 4% Alu_result_to_EX_MEM [6] $end
$var wire 1 5% Alu_result_to_EX_MEM [5] $end
$var wire 1 6% Alu_result_to_EX_MEM [4] $end
$var wire 1 7% Alu_result_to_EX_MEM [3] $end
$var wire 1 8% Alu_result_to_EX_MEM [2] $end
$var wire 1 9% Alu_result_to_EX_MEM [1] $end
$var wire 1 :% Alu_result_to_EX_MEM [0] $end
$var wire 1 ;% Alu_result_out_EX_MEM [15] $end
$var wire 1 <% Alu_result_out_EX_MEM [14] $end
$var wire 1 =% Alu_result_out_EX_MEM [13] $end
$var wire 1 >% Alu_result_out_EX_MEM [12] $end
$var wire 1 ?% Alu_result_out_EX_MEM [11] $end
$var wire 1 @% Alu_result_out_EX_MEM [10] $end
$var wire 1 A% Alu_result_out_EX_MEM [9] $end
$var wire 1 B% Alu_result_out_EX_MEM [8] $end
$var wire 1 C% Alu_result_out_EX_MEM [7] $end
$var wire 1 D% Alu_result_out_EX_MEM [6] $end
$var wire 1 E% Alu_result_out_EX_MEM [5] $end
$var wire 1 F% Alu_result_out_EX_MEM [4] $end
$var wire 1 G% Alu_result_out_EX_MEM [3] $end
$var wire 1 H% Alu_result_out_EX_MEM [2] $end
$var wire 1 I% Alu_result_out_EX_MEM [1] $end
$var wire 1 J% Alu_result_out_EX_MEM [0] $end
$var wire 1 K% Binput_to_EX_MEM [15] $end
$var wire 1 L% Binput_to_EX_MEM [14] $end
$var wire 1 M% Binput_to_EX_MEM [13] $end
$var wire 1 N% Binput_to_EX_MEM [12] $end
$var wire 1 O% Binput_to_EX_MEM [11] $end
$var wire 1 P% Binput_to_EX_MEM [10] $end
$var wire 1 Q% Binput_to_EX_MEM [9] $end
$var wire 1 R% Binput_to_EX_MEM [8] $end
$var wire 1 S% Binput_to_EX_MEM [7] $end
$var wire 1 T% Binput_to_EX_MEM [6] $end
$var wire 1 U% Binput_to_EX_MEM [5] $end
$var wire 1 V% Binput_to_EX_MEM [4] $end
$var wire 1 W% Binput_to_EX_MEM [3] $end
$var wire 1 X% Binput_to_EX_MEM [2] $end
$var wire 1 Y% Binput_to_EX_MEM [1] $end
$var wire 1 Z% Binput_to_EX_MEM [0] $end
$var wire 1 [% Binput_out_EX_MEM [15] $end
$var wire 1 \% Binput_out_EX_MEM [14] $end
$var wire 1 ]% Binput_out_EX_MEM [13] $end
$var wire 1 ^% Binput_out_EX_MEM [12] $end
$var wire 1 _% Binput_out_EX_MEM [11] $end
$var wire 1 `% Binput_out_EX_MEM [10] $end
$var wire 1 a% Binput_out_EX_MEM [9] $end
$var wire 1 b% Binput_out_EX_MEM [8] $end
$var wire 1 c% Binput_out_EX_MEM [7] $end
$var wire 1 d% Binput_out_EX_MEM [6] $end
$var wire 1 e% Binput_out_EX_MEM [5] $end
$var wire 1 f% Binput_out_EX_MEM [4] $end
$var wire 1 g% Binput_out_EX_MEM [3] $end
$var wire 1 h% Binput_out_EX_MEM [2] $end
$var wire 1 i% Binput_out_EX_MEM [1] $end
$var wire 1 j% Binput_out_EX_MEM [0] $end
$var wire 1 k% branching_out_EX_MEM $end
$var wire 1 l% PC_or_add_out_EX_MEM $end
$var wire 1 m% ALUJMP_out_EX_MEM $end
$var wire 1 n% MemWrt_out_EX_MEM $end
$var wire 1 o% halt_out_EX_MEM $end
$var wire 1 p% word_align_jump_out_EX_MEM [15] $end
$var wire 1 q% word_align_jump_out_EX_MEM [14] $end
$var wire 1 r% word_align_jump_out_EX_MEM [13] $end
$var wire 1 s% word_align_jump_out_EX_MEM [12] $end
$var wire 1 t% word_align_jump_out_EX_MEM [11] $end
$var wire 1 u% word_align_jump_out_EX_MEM [10] $end
$var wire 1 v% word_align_jump_out_EX_MEM [9] $end
$var wire 1 w% word_align_jump_out_EX_MEM [8] $end
$var wire 1 x% word_align_jump_out_EX_MEM [7] $end
$var wire 1 y% word_align_jump_out_EX_MEM [6] $end
$var wire 1 z% word_align_jump_out_EX_MEM [5] $end
$var wire 1 {% word_align_jump_out_EX_MEM [4] $end
$var wire 1 |% word_align_jump_out_EX_MEM [3] $end
$var wire 1 }% word_align_jump_out_EX_MEM [2] $end
$var wire 1 ~% word_align_jump_out_EX_MEM [1] $end
$var wire 1 !& word_align_jump_out_EX_MEM [0] $end
$var wire 1 "& read_data_2_out_EX_MEM [15] $end
$var wire 1 #& read_data_2_out_EX_MEM [14] $end
$var wire 1 $& read_data_2_out_EX_MEM [13] $end
$var wire 1 %& read_data_2_out_EX_MEM [12] $end
$var wire 1 && read_data_2_out_EX_MEM [11] $end
$var wire 1 '& read_data_2_out_EX_MEM [10] $end
$var wire 1 (& read_data_2_out_EX_MEM [9] $end
$var wire 1 )& read_data_2_out_EX_MEM [8] $end
$var wire 1 *& read_data_2_out_EX_MEM [7] $end
$var wire 1 +& read_data_2_out_EX_MEM [6] $end
$var wire 1 ,& read_data_2_out_EX_MEM [5] $end
$var wire 1 -& read_data_2_out_EX_MEM [4] $end
$var wire 1 .& read_data_2_out_EX_MEM [3] $end
$var wire 1 /& read_data_2_out_EX_MEM [2] $end
$var wire 1 0& read_data_2_out_EX_MEM [1] $end
$var wire 1 1& read_data_2_out_EX_MEM [0] $end
$var wire 1 2& pc_next_out_EX_MEM [15] $end
$var wire 1 3& pc_next_out_EX_MEM [14] $end
$var wire 1 4& pc_next_out_EX_MEM [13] $end
$var wire 1 5& pc_next_out_EX_MEM [12] $end
$var wire 1 6& pc_next_out_EX_MEM [11] $end
$var wire 1 7& pc_next_out_EX_MEM [10] $end
$var wire 1 8& pc_next_out_EX_MEM [9] $end
$var wire 1 9& pc_next_out_EX_MEM [8] $end
$var wire 1 :& pc_next_out_EX_MEM [7] $end
$var wire 1 ;& pc_next_out_EX_MEM [6] $end
$var wire 1 <& pc_next_out_EX_MEM [5] $end
$var wire 1 =& pc_next_out_EX_MEM [4] $end
$var wire 1 >& pc_next_out_EX_MEM [3] $end
$var wire 1 ?& pc_next_out_EX_MEM [2] $end
$var wire 1 @& pc_next_out_EX_MEM [1] $end
$var wire 1 A& pc_next_out_EX_MEM [0] $end
$var wire 1 B& i2_out_EX_MEM [15] $end
$var wire 1 C& i2_out_EX_MEM [14] $end
$var wire 1 D& i2_out_EX_MEM [13] $end
$var wire 1 E& i2_out_EX_MEM [12] $end
$var wire 1 F& i2_out_EX_MEM [11] $end
$var wire 1 G& i2_out_EX_MEM [10] $end
$var wire 1 H& i2_out_EX_MEM [9] $end
$var wire 1 I& i2_out_EX_MEM [8] $end
$var wire 1 J& i2_out_EX_MEM [7] $end
$var wire 1 K& i2_out_EX_MEM [6] $end
$var wire 1 L& i2_out_EX_MEM [5] $end
$var wire 1 M& i2_out_EX_MEM [4] $end
$var wire 1 N& i2_out_EX_MEM [3] $end
$var wire 1 O& i2_out_EX_MEM [2] $end
$var wire 1 P& i2_out_EX_MEM [1] $end
$var wire 1 Q& i2_out_EX_MEM [0] $end
$var wire 1 R& RegWrt_out_EX_MEM $end
$var wire 1 S& RegSrc_out_EX_MEM [1] $end
$var wire 1 T& RegSrc_out_EX_MEM [0] $end
$var wire 1 U& write_reg_out_EX_MEM [2] $end
$var wire 1 V& write_reg_out_EX_MEM [1] $end
$var wire 1 W& write_reg_out_EX_MEM [0] $end
$var wire 1 X& memory_data_to_MEM_WB [15] $end
$var wire 1 Y& memory_data_to_MEM_WB [14] $end
$var wire 1 Z& memory_data_to_MEM_WB [13] $end
$var wire 1 [& memory_data_to_MEM_WB [12] $end
$var wire 1 \& memory_data_to_MEM_WB [11] $end
$var wire 1 ]& memory_data_to_MEM_WB [10] $end
$var wire 1 ^& memory_data_to_MEM_WB [9] $end
$var wire 1 _& memory_data_to_MEM_WB [8] $end
$var wire 1 `& memory_data_to_MEM_WB [7] $end
$var wire 1 a& memory_data_to_MEM_WB [6] $end
$var wire 1 b& memory_data_to_MEM_WB [5] $end
$var wire 1 c& memory_data_to_MEM_WB [4] $end
$var wire 1 d& memory_data_to_MEM_WB [3] $end
$var wire 1 e& memory_data_to_MEM_WB [2] $end
$var wire 1 f& memory_data_to_MEM_WB [1] $end
$var wire 1 g& memory_data_to_MEM_WB [0] $end
$var wire 1 h& memory_data_out_MEM_WB [15] $end
$var wire 1 i& memory_data_out_MEM_WB [14] $end
$var wire 1 j& memory_data_out_MEM_WB [13] $end
$var wire 1 k& memory_data_out_MEM_WB [12] $end
$var wire 1 l& memory_data_out_MEM_WB [11] $end
$var wire 1 m& memory_data_out_MEM_WB [10] $end
$var wire 1 n& memory_data_out_MEM_WB [9] $end
$var wire 1 o& memory_data_out_MEM_WB [8] $end
$var wire 1 p& memory_data_out_MEM_WB [7] $end
$var wire 1 q& memory_data_out_MEM_WB [6] $end
$var wire 1 r& memory_data_out_MEM_WB [5] $end
$var wire 1 s& memory_data_out_MEM_WB [4] $end
$var wire 1 t& memory_data_out_MEM_WB [3] $end
$var wire 1 u& memory_data_out_MEM_WB [2] $end
$var wire 1 v& memory_data_out_MEM_WB [1] $end
$var wire 1 w& memory_data_out_MEM_WB [0] $end
$var wire 1 x& pc_goes_back_fetch_in_MEM_WB [15] $end
$var wire 1 y& pc_goes_back_fetch_in_MEM_WB [14] $end
$var wire 1 z& pc_goes_back_fetch_in_MEM_WB [13] $end
$var wire 1 {& pc_goes_back_fetch_in_MEM_WB [12] $end
$var wire 1 |& pc_goes_back_fetch_in_MEM_WB [11] $end
$var wire 1 }& pc_goes_back_fetch_in_MEM_WB [10] $end
$var wire 1 ~& pc_goes_back_fetch_in_MEM_WB [9] $end
$var wire 1 !' pc_goes_back_fetch_in_MEM_WB [8] $end
$var wire 1 "' pc_goes_back_fetch_in_MEM_WB [7] $end
$var wire 1 #' pc_goes_back_fetch_in_MEM_WB [6] $end
$var wire 1 $' pc_goes_back_fetch_in_MEM_WB [5] $end
$var wire 1 %' pc_goes_back_fetch_in_MEM_WB [4] $end
$var wire 1 &' pc_goes_back_fetch_in_MEM_WB [3] $end
$var wire 1 '' pc_goes_back_fetch_in_MEM_WB [2] $end
$var wire 1 (' pc_goes_back_fetch_in_MEM_WB [1] $end
$var wire 1 )' pc_goes_back_fetch_in_MEM_WB [0] $end
$var wire 1 *' pc_goes_back_fetch_out_MEM_WB [15] $end
$var wire 1 +' pc_goes_back_fetch_out_MEM_WB [14] $end
$var wire 1 ,' pc_goes_back_fetch_out_MEM_WB [13] $end
$var wire 1 -' pc_goes_back_fetch_out_MEM_WB [12] $end
$var wire 1 .' pc_goes_back_fetch_out_MEM_WB [11] $end
$var wire 1 /' pc_goes_back_fetch_out_MEM_WB [10] $end
$var wire 1 0' pc_goes_back_fetch_out_MEM_WB [9] $end
$var wire 1 1' pc_goes_back_fetch_out_MEM_WB [8] $end
$var wire 1 2' pc_goes_back_fetch_out_MEM_WB [7] $end
$var wire 1 3' pc_goes_back_fetch_out_MEM_WB [6] $end
$var wire 1 4' pc_goes_back_fetch_out_MEM_WB [5] $end
$var wire 1 5' pc_goes_back_fetch_out_MEM_WB [4] $end
$var wire 1 6' pc_goes_back_fetch_out_MEM_WB [3] $end
$var wire 1 7' pc_goes_back_fetch_out_MEM_WB [2] $end
$var wire 1 8' pc_goes_back_fetch_out_MEM_WB [1] $end
$var wire 1 9' pc_goes_back_fetch_out_MEM_WB [0] $end
$var wire 1 :' RegSrc_out_MEM_WB [1] $end
$var wire 1 ;' RegSrc_out_MEM_WB [0] $end
$var wire 1 <' Binput_out_MEM_WB [15] $end
$var wire 1 =' Binput_out_MEM_WB [14] $end
$var wire 1 >' Binput_out_MEM_WB [13] $end
$var wire 1 ?' Binput_out_MEM_WB [12] $end
$var wire 1 @' Binput_out_MEM_WB [11] $end
$var wire 1 A' Binput_out_MEM_WB [10] $end
$var wire 1 B' Binput_out_MEM_WB [9] $end
$var wire 1 C' Binput_out_MEM_WB [8] $end
$var wire 1 D' Binput_out_MEM_WB [7] $end
$var wire 1 E' Binput_out_MEM_WB [6] $end
$var wire 1 F' Binput_out_MEM_WB [5] $end
$var wire 1 G' Binput_out_MEM_WB [4] $end
$var wire 1 H' Binput_out_MEM_WB [3] $end
$var wire 1 I' Binput_out_MEM_WB [2] $end
$var wire 1 J' Binput_out_MEM_WB [1] $end
$var wire 1 K' Binput_out_MEM_WB [0] $end
$var wire 1 L' RegWrt_out_MEM_WB $end
$var wire 1 M' Alu_result_out_MEM_WB [15] $end
$var wire 1 N' Alu_result_out_MEM_WB [14] $end
$var wire 1 O' Alu_result_out_MEM_WB [13] $end
$var wire 1 P' Alu_result_out_MEM_WB [12] $end
$var wire 1 Q' Alu_result_out_MEM_WB [11] $end
$var wire 1 R' Alu_result_out_MEM_WB [10] $end
$var wire 1 S' Alu_result_out_MEM_WB [9] $end
$var wire 1 T' Alu_result_out_MEM_WB [8] $end
$var wire 1 U' Alu_result_out_MEM_WB [7] $end
$var wire 1 V' Alu_result_out_MEM_WB [6] $end
$var wire 1 W' Alu_result_out_MEM_WB [5] $end
$var wire 1 X' Alu_result_out_MEM_WB [4] $end
$var wire 1 Y' Alu_result_out_MEM_WB [3] $end
$var wire 1 Z' Alu_result_out_MEM_WB [2] $end
$var wire 1 [' Alu_result_out_MEM_WB [1] $end
$var wire 1 \' Alu_result_out_MEM_WB [0] $end
$var wire 1 ]' write_reg_out_MEM_WB [2] $end
$var wire 1 ^' write_reg_out_MEM_WB [1] $end
$var wire 1 _' write_reg_out_MEM_WB [0] $end
$var wire 1 `' err1 $end
$var wire 1 a' MUX_OUT_ONE [15] $end
$var wire 1 b' MUX_OUT_ONE [14] $end
$var wire 1 c' MUX_OUT_ONE [13] $end
$var wire 1 d' MUX_OUT_ONE [12] $end
$var wire 1 e' MUX_OUT_ONE [11] $end
$var wire 1 f' MUX_OUT_ONE [10] $end
$var wire 1 g' MUX_OUT_ONE [9] $end
$var wire 1 h' MUX_OUT_ONE [8] $end
$var wire 1 i' MUX_OUT_ONE [7] $end
$var wire 1 j' MUX_OUT_ONE [6] $end
$var wire 1 k' MUX_OUT_ONE [5] $end
$var wire 1 l' MUX_OUT_ONE [4] $end
$var wire 1 m' MUX_OUT_ONE [3] $end
$var wire 1 n' MUX_OUT_ONE [2] $end
$var wire 1 o' MUX_OUT_ONE [1] $end
$var wire 1 p' MUX_OUT_ONE [0] $end
$var wire 1 q' MUX_OUT_TWO [15] $end
$var wire 1 r' MUX_OUT_TWO [14] $end
$var wire 1 s' MUX_OUT_TWO [13] $end
$var wire 1 t' MUX_OUT_TWO [12] $end
$var wire 1 u' MUX_OUT_TWO [11] $end
$var wire 1 v' MUX_OUT_TWO [10] $end
$var wire 1 w' MUX_OUT_TWO [9] $end
$var wire 1 x' MUX_OUT_TWO [8] $end
$var wire 1 y' MUX_OUT_TWO [7] $end
$var wire 1 z' MUX_OUT_TWO [6] $end
$var wire 1 {' MUX_OUT_TWO [5] $end
$var wire 1 |' MUX_OUT_TWO [4] $end
$var wire 1 }' MUX_OUT_TWO [3] $end
$var wire 1 ~' MUX_OUT_TWO [2] $end
$var wire 1 !( MUX_OUT_TWO [1] $end
$var wire 1 "( MUX_OUT_TWO [0] $end
$var wire 1 #( PC_NO_PLUS_TWO [15] $end
$var wire 1 $( PC_NO_PLUS_TWO [14] $end
$var wire 1 %( PC_NO_PLUS_TWO [13] $end
$var wire 1 &( PC_NO_PLUS_TWO [12] $end
$var wire 1 '( PC_NO_PLUS_TWO [11] $end
$var wire 1 (( PC_NO_PLUS_TWO [10] $end
$var wire 1 )( PC_NO_PLUS_TWO [9] $end
$var wire 1 *( PC_NO_PLUS_TWO [8] $end
$var wire 1 +( PC_NO_PLUS_TWO [7] $end
$var wire 1 ,( PC_NO_PLUS_TWO [6] $end
$var wire 1 -( PC_NO_PLUS_TWO [5] $end
$var wire 1 .( PC_NO_PLUS_TWO [4] $end
$var wire 1 /( PC_NO_PLUS_TWO [3] $end
$var wire 1 0( PC_NO_PLUS_TWO [2] $end
$var wire 1 1( PC_NO_PLUS_TWO [1] $end
$var wire 1 2( PC_NO_PLUS_TWO [0] $end
$var wire 1 3( PC_NO_PLUS_TWO_BACK [15] $end
$var wire 1 4( PC_NO_PLUS_TWO_BACK [14] $end
$var wire 1 5( PC_NO_PLUS_TWO_BACK [13] $end
$var wire 1 6( PC_NO_PLUS_TWO_BACK [12] $end
$var wire 1 7( PC_NO_PLUS_TWO_BACK [11] $end
$var wire 1 8( PC_NO_PLUS_TWO_BACK [10] $end
$var wire 1 9( PC_NO_PLUS_TWO_BACK [9] $end
$var wire 1 :( PC_NO_PLUS_TWO_BACK [8] $end
$var wire 1 ;( PC_NO_PLUS_TWO_BACK [7] $end
$var wire 1 <( PC_NO_PLUS_TWO_BACK [6] $end
$var wire 1 =( PC_NO_PLUS_TWO_BACK [5] $end
$var wire 1 >( PC_NO_PLUS_TWO_BACK [4] $end
$var wire 1 ?( PC_NO_PLUS_TWO_BACK [3] $end
$var wire 1 @( PC_NO_PLUS_TWO_BACK [2] $end
$var wire 1 A( PC_NO_PLUS_TWO_BACK [1] $end
$var wire 1 B( PC_NO_PLUS_TWO_BACK [0] $end
$var wire 1 C( SendNop $end
$var wire 1 D( inst_again [15] $end
$var wire 1 E( inst_again [14] $end
$var wire 1 F( inst_again [13] $end
$var wire 1 G( inst_again [12] $end
$var wire 1 H( inst_again [11] $end
$var wire 1 I( inst_again [10] $end
$var wire 1 J( inst_again [9] $end
$var wire 1 K( inst_again [8] $end
$var wire 1 L( inst_again [7] $end
$var wire 1 M( inst_again [6] $end
$var wire 1 N( inst_again [5] $end
$var wire 1 O( inst_again [4] $end
$var wire 1 P( inst_again [3] $end
$var wire 1 Q( inst_again [2] $end
$var wire 1 R( inst_again [1] $end
$var wire 1 S( inst_again [0] $end
$var wire 1 T( MemWrt_Decode_Out $end
$var wire 1 U( RegWrt_Decode_Out $end
$var wire 1 V( NOP_Out_ID_EX $end
$var wire 1 W( NOP_Out_ID_MEM $end
$var wire 1 X( NOP_Out_ID_WB $end

$scope module my_clkrst $end
$var wire 1 [( err $end
$upscope $end

$scope module iDUU1 $end
$var wire 1 q' PC_in [15] $end
$var wire 1 r' PC_in [14] $end
$var wire 1 s' PC_in [13] $end
$var wire 1 t' PC_in [12] $end
$var wire 1 u' PC_in [11] $end
$var wire 1 v' PC_in [10] $end
$var wire 1 w' PC_in [9] $end
$var wire 1 x' PC_in [8] $end
$var wire 1 y' PC_in [7] $end
$var wire 1 z' PC_in [6] $end
$var wire 1 {' PC_in [5] $end
$var wire 1 |' PC_in [4] $end
$var wire 1 }' PC_in [3] $end
$var wire 1 ~' PC_in [2] $end
$var wire 1 !( PC_in [1] $end
$var wire 1 "( PC_in [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next [15] $end
$var wire 1 "" PC_next [14] $end
$var wire 1 #" PC_next [13] $end
$var wire 1 $" PC_next [12] $end
$var wire 1 %" PC_next [11] $end
$var wire 1 &" PC_next [10] $end
$var wire 1 '" PC_next [9] $end
$var wire 1 (" PC_next [8] $end
$var wire 1 )" PC_next [7] $end
$var wire 1 *" PC_next [6] $end
$var wire 1 +" PC_next [5] $end
$var wire 1 ," PC_next [4] $end
$var wire 1 -" PC_next [3] $end
$var wire 1 ." PC_next [2] $end
$var wire 1 /" PC_next [1] $end
$var wire 1 0" PC_next [0] $end
$var wire 1 _! instruction [15] $end
$var wire 1 `! instruction [14] $end
$var wire 1 a! instruction [13] $end
$var wire 1 b! instruction [12] $end
$var wire 1 c! instruction [11] $end
$var wire 1 d! instruction [10] $end
$var wire 1 e! instruction [9] $end
$var wire 1 f! instruction [8] $end
$var wire 1 g! instruction [7] $end
$var wire 1 h! instruction [6] $end
$var wire 1 i! instruction [5] $end
$var wire 1 j! instruction [4] $end
$var wire 1 k! instruction [3] $end
$var wire 1 l! instruction [2] $end
$var wire 1 m! instruction [1] $end
$var wire 1 n! instruction [0] $end
$var wire 1 #( pc_temp [15] $end
$var wire 1 $( pc_temp [14] $end
$var wire 1 %( pc_temp [13] $end
$var wire 1 &( pc_temp [12] $end
$var wire 1 '( pc_temp [11] $end
$var wire 1 (( pc_temp [10] $end
$var wire 1 )( pc_temp [9] $end
$var wire 1 *( pc_temp [8] $end
$var wire 1 +( pc_temp [7] $end
$var wire 1 ,( pc_temp [6] $end
$var wire 1 -( pc_temp [5] $end
$var wire 1 .( pc_temp [4] $end
$var wire 1 /( pc_temp [3] $end
$var wire 1 0( pc_temp [2] $end
$var wire 1 1( pc_temp [1] $end
$var wire 1 2( pc_temp [0] $end

$scope module fa $end
$var wire 1 #( A [15] $end
$var wire 1 $( A [14] $end
$var wire 1 %( A [13] $end
$var wire 1 &( A [12] $end
$var wire 1 '( A [11] $end
$var wire 1 (( A [10] $end
$var wire 1 )( A [9] $end
$var wire 1 *( A [8] $end
$var wire 1 +( A [7] $end
$var wire 1 ,( A [6] $end
$var wire 1 -( A [5] $end
$var wire 1 .( A [4] $end
$var wire 1 /( A [3] $end
$var wire 1 0( A [2] $end
$var wire 1 1( A [1] $end
$var wire 1 2( A [0] $end
$var wire 1 ]( B [15] $end
$var wire 1 ^( B [14] $end
$var wire 1 _( B [13] $end
$var wire 1 `( B [12] $end
$var wire 1 a( B [11] $end
$var wire 1 b( B [10] $end
$var wire 1 c( B [9] $end
$var wire 1 d( B [8] $end
$var wire 1 e( B [7] $end
$var wire 1 f( B [6] $end
$var wire 1 g( B [5] $end
$var wire 1 h( B [4] $end
$var wire 1 i( B [3] $end
$var wire 1 j( B [2] $end
$var wire 1 k( B [1] $end
$var wire 1 l( B [0] $end
$var wire 1 !" S [15] $end
$var wire 1 "" S [14] $end
$var wire 1 #" S [13] $end
$var wire 1 $" S [12] $end
$var wire 1 %" S [11] $end
$var wire 1 &" S [10] $end
$var wire 1 '" S [9] $end
$var wire 1 (" S [8] $end
$var wire 1 )" S [7] $end
$var wire 1 *" S [6] $end
$var wire 1 +" S [5] $end
$var wire 1 ," S [4] $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 m( Cout $end
$var wire 1 n( Cout0 $end
$var wire 1 o( Cout1 $end
$var wire 1 p( Cout2 $end
$var wire 1 q( Cin $end

$scope module f1 $end
$var wire 1 /( A [3] $end
$var wire 1 0( A [2] $end
$var wire 1 1( A [1] $end
$var wire 1 2( A [0] $end
$var wire 1 i( B [3] $end
$var wire 1 j( B [2] $end
$var wire 1 k( B [1] $end
$var wire 1 l( B [0] $end
$var wire 1 q( Cin $end
$var wire 1 -" S [3] $end
$var wire 1 ." S [2] $end
$var wire 1 /" S [1] $end
$var wire 1 0" S [0] $end
$var wire 1 n( Cout $end
$var wire 1 r( Cout0 $end
$var wire 1 s( Cout1 $end
$var wire 1 t( Cout2 $end

$scope module f1 $end
$var wire 1 2( A $end
$var wire 1 l( B $end
$var wire 1 q( Cin $end
$var wire 1 0" S $end
$var wire 1 r( Cout $end
$var wire 1 u( xor_AB $end
$var wire 1 v( xor_ABCin $end
$var wire 1 w( NAND_AB $end
$var wire 1 x( not_NAND_AB $end
$var wire 1 y( NAND_Cin_xor_AB $end
$var wire 1 z( not_NAND_Cin_xor_AB $end
$var wire 1 {( NOR_2NAND $end
$var wire 1 |( not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2( in1 $end
$var wire 1 l( in2 $end
$var wire 1 u( out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u( in1 $end
$var wire 1 q( in2 $end
$var wire 1 v( out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2( in1 $end
$var wire 1 l( in2 $end
$var wire 1 w( out $end
$upscope $end

$scope module not1 $end
$var wire 1 w( in1 $end
$var wire 1 x( out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q( in1 $end
$var wire 1 u( in2 $end
$var wire 1 y( out $end
$upscope $end

$scope module not2 $end
$var wire 1 y( in1 $end
$var wire 1 z( out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x( in1 $end
$var wire 1 z( in2 $end
$var wire 1 {( out $end
$upscope $end

$scope module not3 $end
$var wire 1 {( in1 $end
$var wire 1 |( out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 1( A $end
$var wire 1 k( B $end
$var wire 1 r( Cin $end
$var wire 1 /" S $end
$var wire 1 s( Cout $end
$var wire 1 }( xor_AB $end
$var wire 1 ~( xor_ABCin $end
$var wire 1 !) NAND_AB $end
$var wire 1 ") not_NAND_AB $end
$var wire 1 #) NAND_Cin_xor_AB $end
$var wire 1 $) not_NAND_Cin_xor_AB $end
$var wire 1 %) NOR_2NAND $end
$var wire 1 &) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 1( in1 $end
$var wire 1 k( in2 $end
$var wire 1 }( out $end
$upscope $end

$scope module xor2 $end
$var wire 1 }( in1 $end
$var wire 1 r( in2 $end
$var wire 1 ~( out $end
$upscope $end

$scope module nand1 $end
$var wire 1 1( in1 $end
$var wire 1 k( in2 $end
$var wire 1 !) out $end
$upscope $end

$scope module not1 $end
$var wire 1 !) in1 $end
$var wire 1 ") out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r( in1 $end
$var wire 1 }( in2 $end
$var wire 1 #) out $end
$upscope $end

$scope module not2 $end
$var wire 1 #) in1 $end
$var wire 1 $) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ") in1 $end
$var wire 1 $) in2 $end
$var wire 1 %) out $end
$upscope $end

$scope module not3 $end
$var wire 1 %) in1 $end
$var wire 1 &) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 0( A $end
$var wire 1 j( B $end
$var wire 1 s( Cin $end
$var wire 1 ." S $end
$var wire 1 t( Cout $end
$var wire 1 ') xor_AB $end
$var wire 1 () xor_ABCin $end
$var wire 1 )) NAND_AB $end
$var wire 1 *) not_NAND_AB $end
$var wire 1 +) NAND_Cin_xor_AB $end
$var wire 1 ,) not_NAND_Cin_xor_AB $end
$var wire 1 -) NOR_2NAND $end
$var wire 1 .) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 0( in1 $end
$var wire 1 j( in2 $end
$var wire 1 ') out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ') in1 $end
$var wire 1 s( in2 $end
$var wire 1 () out $end
$upscope $end

$scope module nand1 $end
$var wire 1 0( in1 $end
$var wire 1 j( in2 $end
$var wire 1 )) out $end
$upscope $end

$scope module not1 $end
$var wire 1 )) in1 $end
$var wire 1 *) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 s( in1 $end
$var wire 1 ') in2 $end
$var wire 1 +) out $end
$upscope $end

$scope module not2 $end
$var wire 1 +) in1 $end
$var wire 1 ,) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 *) in1 $end
$var wire 1 ,) in2 $end
$var wire 1 -) out $end
$upscope $end

$scope module not3 $end
$var wire 1 -) in1 $end
$var wire 1 .) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 /( A $end
$var wire 1 i( B $end
$var wire 1 t( Cin $end
$var wire 1 -" S $end
$var wire 1 n( Cout $end
$var wire 1 /) xor_AB $end
$var wire 1 0) xor_ABCin $end
$var wire 1 1) NAND_AB $end
$var wire 1 2) not_NAND_AB $end
$var wire 1 3) NAND_Cin_xor_AB $end
$var wire 1 4) not_NAND_Cin_xor_AB $end
$var wire 1 5) NOR_2NAND $end
$var wire 1 6) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 /( in1 $end
$var wire 1 i( in2 $end
$var wire 1 /) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 /) in1 $end
$var wire 1 t( in2 $end
$var wire 1 0) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 /( in1 $end
$var wire 1 i( in2 $end
$var wire 1 1) out $end
$upscope $end

$scope module not1 $end
$var wire 1 1) in1 $end
$var wire 1 2) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 t( in1 $end
$var wire 1 /) in2 $end
$var wire 1 3) out $end
$upscope $end

$scope module not2 $end
$var wire 1 3) in1 $end
$var wire 1 4) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 2) in1 $end
$var wire 1 4) in2 $end
$var wire 1 5) out $end
$upscope $end

$scope module not3 $end
$var wire 1 5) in1 $end
$var wire 1 6) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 +( A [3] $end
$var wire 1 ,( A [2] $end
$var wire 1 -( A [1] $end
$var wire 1 .( A [0] $end
$var wire 1 e( B [3] $end
$var wire 1 f( B [2] $end
$var wire 1 g( B [1] $end
$var wire 1 h( B [0] $end
$var wire 1 n( Cin $end
$var wire 1 )" S [3] $end
$var wire 1 *" S [2] $end
$var wire 1 +" S [1] $end
$var wire 1 ," S [0] $end
$var wire 1 o( Cout $end
$var wire 1 7) Cout0 $end
$var wire 1 8) Cout1 $end
$var wire 1 9) Cout2 $end

$scope module f1 $end
$var wire 1 .( A $end
$var wire 1 h( B $end
$var wire 1 n( Cin $end
$var wire 1 ," S $end
$var wire 1 7) Cout $end
$var wire 1 :) xor_AB $end
$var wire 1 ;) xor_ABCin $end
$var wire 1 <) NAND_AB $end
$var wire 1 =) not_NAND_AB $end
$var wire 1 >) NAND_Cin_xor_AB $end
$var wire 1 ?) not_NAND_Cin_xor_AB $end
$var wire 1 @) NOR_2NAND $end
$var wire 1 A) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 .( in1 $end
$var wire 1 h( in2 $end
$var wire 1 :) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 :) in1 $end
$var wire 1 n( in2 $end
$var wire 1 ;) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 .( in1 $end
$var wire 1 h( in2 $end
$var wire 1 <) out $end
$upscope $end

$scope module not1 $end
$var wire 1 <) in1 $end
$var wire 1 =) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n( in1 $end
$var wire 1 :) in2 $end
$var wire 1 >) out $end
$upscope $end

$scope module not2 $end
$var wire 1 >) in1 $end
$var wire 1 ?) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 =) in1 $end
$var wire 1 ?) in2 $end
$var wire 1 @) out $end
$upscope $end

$scope module not3 $end
$var wire 1 @) in1 $end
$var wire 1 A) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 -( A $end
$var wire 1 g( B $end
$var wire 1 7) Cin $end
$var wire 1 +" S $end
$var wire 1 8) Cout $end
$var wire 1 B) xor_AB $end
$var wire 1 C) xor_ABCin $end
$var wire 1 D) NAND_AB $end
$var wire 1 E) not_NAND_AB $end
$var wire 1 F) NAND_Cin_xor_AB $end
$var wire 1 G) not_NAND_Cin_xor_AB $end
$var wire 1 H) NOR_2NAND $end
$var wire 1 I) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 -( in1 $end
$var wire 1 g( in2 $end
$var wire 1 B) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 B) in1 $end
$var wire 1 7) in2 $end
$var wire 1 C) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 -( in1 $end
$var wire 1 g( in2 $end
$var wire 1 D) out $end
$upscope $end

$scope module not1 $end
$var wire 1 D) in1 $end
$var wire 1 E) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7) in1 $end
$var wire 1 B) in2 $end
$var wire 1 F) out $end
$upscope $end

$scope module not2 $end
$var wire 1 F) in1 $end
$var wire 1 G) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 E) in1 $end
$var wire 1 G) in2 $end
$var wire 1 H) out $end
$upscope $end

$scope module not3 $end
$var wire 1 H) in1 $end
$var wire 1 I) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ,( A $end
$var wire 1 f( B $end
$var wire 1 8) Cin $end
$var wire 1 *" S $end
$var wire 1 9) Cout $end
$var wire 1 J) xor_AB $end
$var wire 1 K) xor_ABCin $end
$var wire 1 L) NAND_AB $end
$var wire 1 M) not_NAND_AB $end
$var wire 1 N) NAND_Cin_xor_AB $end
$var wire 1 O) not_NAND_Cin_xor_AB $end
$var wire 1 P) NOR_2NAND $end
$var wire 1 Q) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ,( in1 $end
$var wire 1 f( in2 $end
$var wire 1 J) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 J) in1 $end
$var wire 1 8) in2 $end
$var wire 1 K) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ,( in1 $end
$var wire 1 f( in2 $end
$var wire 1 L) out $end
$upscope $end

$scope module not1 $end
$var wire 1 L) in1 $end
$var wire 1 M) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 8) in1 $end
$var wire 1 J) in2 $end
$var wire 1 N) out $end
$upscope $end

$scope module not2 $end
$var wire 1 N) in1 $end
$var wire 1 O) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 M) in1 $end
$var wire 1 O) in2 $end
$var wire 1 P) out $end
$upscope $end

$scope module not3 $end
$var wire 1 P) in1 $end
$var wire 1 Q) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 +( A $end
$var wire 1 e( B $end
$var wire 1 9) Cin $end
$var wire 1 )" S $end
$var wire 1 o( Cout $end
$var wire 1 R) xor_AB $end
$var wire 1 S) xor_ABCin $end
$var wire 1 T) NAND_AB $end
$var wire 1 U) not_NAND_AB $end
$var wire 1 V) NAND_Cin_xor_AB $end
$var wire 1 W) not_NAND_Cin_xor_AB $end
$var wire 1 X) NOR_2NAND $end
$var wire 1 Y) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 +( in1 $end
$var wire 1 e( in2 $end
$var wire 1 R) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 R) in1 $end
$var wire 1 9) in2 $end
$var wire 1 S) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 +( in1 $end
$var wire 1 e( in2 $end
$var wire 1 T) out $end
$upscope $end

$scope module not1 $end
$var wire 1 T) in1 $end
$var wire 1 U) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 9) in1 $end
$var wire 1 R) in2 $end
$var wire 1 V) out $end
$upscope $end

$scope module not2 $end
$var wire 1 V) in1 $end
$var wire 1 W) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 U) in1 $end
$var wire 1 W) in2 $end
$var wire 1 X) out $end
$upscope $end

$scope module not3 $end
$var wire 1 X) in1 $end
$var wire 1 Y) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 '( A [3] $end
$var wire 1 (( A [2] $end
$var wire 1 )( A [1] $end
$var wire 1 *( A [0] $end
$var wire 1 a( B [3] $end
$var wire 1 b( B [2] $end
$var wire 1 c( B [1] $end
$var wire 1 d( B [0] $end
$var wire 1 o( Cin $end
$var wire 1 %" S [3] $end
$var wire 1 &" S [2] $end
$var wire 1 '" S [1] $end
$var wire 1 (" S [0] $end
$var wire 1 p( Cout $end
$var wire 1 Z) Cout0 $end
$var wire 1 [) Cout1 $end
$var wire 1 \) Cout2 $end

$scope module f1 $end
$var wire 1 *( A $end
$var wire 1 d( B $end
$var wire 1 o( Cin $end
$var wire 1 (" S $end
$var wire 1 Z) Cout $end
$var wire 1 ]) xor_AB $end
$var wire 1 ^) xor_ABCin $end
$var wire 1 _) NAND_AB $end
$var wire 1 `) not_NAND_AB $end
$var wire 1 a) NAND_Cin_xor_AB $end
$var wire 1 b) not_NAND_Cin_xor_AB $end
$var wire 1 c) NOR_2NAND $end
$var wire 1 d) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 *( in1 $end
$var wire 1 d( in2 $end
$var wire 1 ]) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ]) in1 $end
$var wire 1 o( in2 $end
$var wire 1 ^) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 *( in1 $end
$var wire 1 d( in2 $end
$var wire 1 _) out $end
$upscope $end

$scope module not1 $end
$var wire 1 _) in1 $end
$var wire 1 `) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 o( in1 $end
$var wire 1 ]) in2 $end
$var wire 1 a) out $end
$upscope $end

$scope module not2 $end
$var wire 1 a) in1 $end
$var wire 1 b) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 `) in1 $end
$var wire 1 b) in2 $end
$var wire 1 c) out $end
$upscope $end

$scope module not3 $end
$var wire 1 c) in1 $end
$var wire 1 d) out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 )( A $end
$var wire 1 c( B $end
$var wire 1 Z) Cin $end
$var wire 1 '" S $end
$var wire 1 [) Cout $end
$var wire 1 e) xor_AB $end
$var wire 1 f) xor_ABCin $end
$var wire 1 g) NAND_AB $end
$var wire 1 h) not_NAND_AB $end
$var wire 1 i) NAND_Cin_xor_AB $end
$var wire 1 j) not_NAND_Cin_xor_AB $end
$var wire 1 k) NOR_2NAND $end
$var wire 1 l) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 )( in1 $end
$var wire 1 c( in2 $end
$var wire 1 e) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 e) in1 $end
$var wire 1 Z) in2 $end
$var wire 1 f) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 )( in1 $end
$var wire 1 c( in2 $end
$var wire 1 g) out $end
$upscope $end

$scope module not1 $end
$var wire 1 g) in1 $end
$var wire 1 h) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z) in1 $end
$var wire 1 e) in2 $end
$var wire 1 i) out $end
$upscope $end

$scope module not2 $end
$var wire 1 i) in1 $end
$var wire 1 j) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 h) in1 $end
$var wire 1 j) in2 $end
$var wire 1 k) out $end
$upscope $end

$scope module not3 $end
$var wire 1 k) in1 $end
$var wire 1 l) out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 (( A $end
$var wire 1 b( B $end
$var wire 1 [) Cin $end
$var wire 1 &" S $end
$var wire 1 \) Cout $end
$var wire 1 m) xor_AB $end
$var wire 1 n) xor_ABCin $end
$var wire 1 o) NAND_AB $end
$var wire 1 p) not_NAND_AB $end
$var wire 1 q) NAND_Cin_xor_AB $end
$var wire 1 r) not_NAND_Cin_xor_AB $end
$var wire 1 s) NOR_2NAND $end
$var wire 1 t) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 (( in1 $end
$var wire 1 b( in2 $end
$var wire 1 m) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 m) in1 $end
$var wire 1 [) in2 $end
$var wire 1 n) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 (( in1 $end
$var wire 1 b( in2 $end
$var wire 1 o) out $end
$upscope $end

$scope module not1 $end
$var wire 1 o) in1 $end
$var wire 1 p) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 [) in1 $end
$var wire 1 m) in2 $end
$var wire 1 q) out $end
$upscope $end

$scope module not2 $end
$var wire 1 q) in1 $end
$var wire 1 r) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 p) in1 $end
$var wire 1 r) in2 $end
$var wire 1 s) out $end
$upscope $end

$scope module not3 $end
$var wire 1 s) in1 $end
$var wire 1 t) out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 '( A $end
$var wire 1 a( B $end
$var wire 1 \) Cin $end
$var wire 1 %" S $end
$var wire 1 p( Cout $end
$var wire 1 u) xor_AB $end
$var wire 1 v) xor_ABCin $end
$var wire 1 w) NAND_AB $end
$var wire 1 x) not_NAND_AB $end
$var wire 1 y) NAND_Cin_xor_AB $end
$var wire 1 z) not_NAND_Cin_xor_AB $end
$var wire 1 {) NOR_2NAND $end
$var wire 1 |) not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 '( in1 $end
$var wire 1 a( in2 $end
$var wire 1 u) out $end
$upscope $end

$scope module xor2 $end
$var wire 1 u) in1 $end
$var wire 1 \) in2 $end
$var wire 1 v) out $end
$upscope $end

$scope module nand1 $end
$var wire 1 '( in1 $end
$var wire 1 a( in2 $end
$var wire 1 w) out $end
$upscope $end

$scope module not1 $end
$var wire 1 w) in1 $end
$var wire 1 x) out $end
$upscope $end

$scope module nand2 $end
$var wire 1 \) in1 $end
$var wire 1 u) in2 $end
$var wire 1 y) out $end
$upscope $end

$scope module not2 $end
$var wire 1 y) in1 $end
$var wire 1 z) out $end
$upscope $end

$scope module nor1 $end
$var wire 1 x) in1 $end
$var wire 1 z) in2 $end
$var wire 1 {) out $end
$upscope $end

$scope module not3 $end
$var wire 1 {) in1 $end
$var wire 1 |) out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 #( A [3] $end
$var wire 1 $( A [2] $end
$var wire 1 %( A [1] $end
$var wire 1 &( A [0] $end
$var wire 1 ]( B [3] $end
$var wire 1 ^( B [2] $end
$var wire 1 _( B [1] $end
$var wire 1 `( B [0] $end
$var wire 1 p( Cin $end
$var wire 1 !" S [3] $end
$var wire 1 "" S [2] $end
$var wire 1 #" S [1] $end
$var wire 1 $" S [0] $end
$var wire 1 m( Cout $end
$var wire 1 }) Cout0 $end
$var wire 1 ~) Cout1 $end
$var wire 1 !* Cout2 $end

$scope module f1 $end
$var wire 1 &( A $end
$var wire 1 `( B $end
$var wire 1 p( Cin $end
$var wire 1 $" S $end
$var wire 1 }) Cout $end
$var wire 1 "* xor_AB $end
$var wire 1 #* xor_ABCin $end
$var wire 1 $* NAND_AB $end
$var wire 1 %* not_NAND_AB $end
$var wire 1 &* NAND_Cin_xor_AB $end
$var wire 1 '* not_NAND_Cin_xor_AB $end
$var wire 1 (* NOR_2NAND $end
$var wire 1 )* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 &( in1 $end
$var wire 1 `( in2 $end
$var wire 1 "* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 "* in1 $end
$var wire 1 p( in2 $end
$var wire 1 #* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 &( in1 $end
$var wire 1 `( in2 $end
$var wire 1 $* out $end
$upscope $end

$scope module not1 $end
$var wire 1 $* in1 $end
$var wire 1 %* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p( in1 $end
$var wire 1 "* in2 $end
$var wire 1 &* out $end
$upscope $end

$scope module not2 $end
$var wire 1 &* in1 $end
$var wire 1 '* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 %* in1 $end
$var wire 1 '* in2 $end
$var wire 1 (* out $end
$upscope $end

$scope module not3 $end
$var wire 1 (* in1 $end
$var wire 1 )* out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 %( A $end
$var wire 1 _( B $end
$var wire 1 }) Cin $end
$var wire 1 #" S $end
$var wire 1 ~) Cout $end
$var wire 1 ** xor_AB $end
$var wire 1 +* xor_ABCin $end
$var wire 1 ,* NAND_AB $end
$var wire 1 -* not_NAND_AB $end
$var wire 1 .* NAND_Cin_xor_AB $end
$var wire 1 /* not_NAND_Cin_xor_AB $end
$var wire 1 0* NOR_2NAND $end
$var wire 1 1* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 %( in1 $end
$var wire 1 _( in2 $end
$var wire 1 ** out $end
$upscope $end

$scope module xor2 $end
$var wire 1 ** in1 $end
$var wire 1 }) in2 $end
$var wire 1 +* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 %( in1 $end
$var wire 1 _( in2 $end
$var wire 1 ,* out $end
$upscope $end

$scope module not1 $end
$var wire 1 ,* in1 $end
$var wire 1 -* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 }) in1 $end
$var wire 1 ** in2 $end
$var wire 1 .* out $end
$upscope $end

$scope module not2 $end
$var wire 1 .* in1 $end
$var wire 1 /* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 -* in1 $end
$var wire 1 /* in2 $end
$var wire 1 0* out $end
$upscope $end

$scope module not3 $end
$var wire 1 0* in1 $end
$var wire 1 1* out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 $( A $end
$var wire 1 ^( B $end
$var wire 1 ~) Cin $end
$var wire 1 "" S $end
$var wire 1 !* Cout $end
$var wire 1 2* xor_AB $end
$var wire 1 3* xor_ABCin $end
$var wire 1 4* NAND_AB $end
$var wire 1 5* not_NAND_AB $end
$var wire 1 6* NAND_Cin_xor_AB $end
$var wire 1 7* not_NAND_Cin_xor_AB $end
$var wire 1 8* NOR_2NAND $end
$var wire 1 9* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 $( in1 $end
$var wire 1 ^( in2 $end
$var wire 1 2* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 2* in1 $end
$var wire 1 ~) in2 $end
$var wire 1 3* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 $( in1 $end
$var wire 1 ^( in2 $end
$var wire 1 4* out $end
$upscope $end

$scope module not1 $end
$var wire 1 4* in1 $end
$var wire 1 5* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ~) in1 $end
$var wire 1 2* in2 $end
$var wire 1 6* out $end
$upscope $end

$scope module not2 $end
$var wire 1 6* in1 $end
$var wire 1 7* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 5* in1 $end
$var wire 1 7* in2 $end
$var wire 1 8* out $end
$upscope $end

$scope module not3 $end
$var wire 1 8* in1 $end
$var wire 1 9* out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 #( A $end
$var wire 1 ]( B $end
$var wire 1 !* Cin $end
$var wire 1 !" S $end
$var wire 1 m( Cout $end
$var wire 1 :* xor_AB $end
$var wire 1 ;* xor_ABCin $end
$var wire 1 <* NAND_AB $end
$var wire 1 =* not_NAND_AB $end
$var wire 1 >* NAND_Cin_xor_AB $end
$var wire 1 ?* not_NAND_Cin_xor_AB $end
$var wire 1 @* NOR_2NAND $end
$var wire 1 A* not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 #( in1 $end
$var wire 1 ]( in2 $end
$var wire 1 :* out $end
$upscope $end

$scope module xor2 $end
$var wire 1 :* in1 $end
$var wire 1 !* in2 $end
$var wire 1 ;* out $end
$upscope $end

$scope module nand1 $end
$var wire 1 #( in1 $end
$var wire 1 ]( in2 $end
$var wire 1 <* out $end
$upscope $end

$scope module not1 $end
$var wire 1 <* in1 $end
$var wire 1 =* out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !* in1 $end
$var wire 1 :* in2 $end
$var wire 1 >* out $end
$upscope $end

$scope module not2 $end
$var wire 1 >* in1 $end
$var wire 1 ?* out $end
$upscope $end

$scope module nor1 $end
$var wire 1 =* in1 $end
$var wire 1 ?* in2 $end
$var wire 1 @* out $end
$upscope $end

$scope module not3 $end
$var wire 1 @* in1 $end
$var wire 1 A* out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 _! data_out [15] $end
$var wire 1 `! data_out [14] $end
$var wire 1 a! data_out [13] $end
$var wire 1 b! data_out [12] $end
$var wire 1 c! data_out [11] $end
$var wire 1 d! data_out [10] $end
$var wire 1 e! data_out [9] $end
$var wire 1 f! data_out [8] $end
$var wire 1 g! data_out [7] $end
$var wire 1 h! data_out [6] $end
$var wire 1 i! data_out [5] $end
$var wire 1 j! data_out [4] $end
$var wire 1 k! data_out [3] $end
$var wire 1 l! data_out [2] $end
$var wire 1 m! data_out [1] $end
$var wire 1 n! data_out [0] $end
$var wire 1 B* data_in [15] $end
$var wire 1 C* data_in [14] $end
$var wire 1 D* data_in [13] $end
$var wire 1 E* data_in [12] $end
$var wire 1 F* data_in [11] $end
$var wire 1 G* data_in [10] $end
$var wire 1 H* data_in [9] $end
$var wire 1 I* data_in [8] $end
$var wire 1 J* data_in [7] $end
$var wire 1 K* data_in [6] $end
$var wire 1 L* data_in [5] $end
$var wire 1 M* data_in [4] $end
$var wire 1 N* data_in [3] $end
$var wire 1 O* data_in [2] $end
$var wire 1 P* data_in [1] $end
$var wire 1 Q* data_in [0] $end
$var wire 1 #( addr [15] $end
$var wire 1 $( addr [14] $end
$var wire 1 %( addr [13] $end
$var wire 1 &( addr [12] $end
$var wire 1 '( addr [11] $end
$var wire 1 (( addr [10] $end
$var wire 1 )( addr [9] $end
$var wire 1 *( addr [8] $end
$var wire 1 +( addr [7] $end
$var wire 1 ,( addr [6] $end
$var wire 1 -( addr [5] $end
$var wire 1 .( addr [4] $end
$var wire 1 /( addr [3] $end
$var wire 1 0( addr [2] $end
$var wire 1 1( addr [1] $end
$var wire 1 2( addr [0] $end
$var wire 1 R* enable $end
$var wire 1 S* wr $end
$var wire 1 T* createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[15] $end
$var wire 1 #( q $end
$var wire 1 q' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 $( q $end
$var wire 1 r' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 %( q $end
$var wire 1 s' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 &( q $end
$var wire 1 t' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 '( q $end
$var wire 1 u' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 (( q $end
$var wire 1 v' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 )( q $end
$var wire 1 w' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 *( q $end
$var wire 1 x' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 +( q $end
$var wire 1 y' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 ,( q $end
$var wire 1 z' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 -( q $end
$var wire 1 {' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 .( q $end
$var wire 1 |' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 /( q $end
$var wire 1 }' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 0( q $end
$var wire 1 ~' d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 1( q $end
$var wire 1 !( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 2( q $end
$var wire 1 "( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 !" PC_next_in [15] $end
$var wire 1 "" PC_next_in [14] $end
$var wire 1 #" PC_next_in [13] $end
$var wire 1 $" PC_next_in [12] $end
$var wire 1 %" PC_next_in [11] $end
$var wire 1 &" PC_next_in [10] $end
$var wire 1 '" PC_next_in [9] $end
$var wire 1 (" PC_next_in [8] $end
$var wire 1 )" PC_next_in [7] $end
$var wire 1 *" PC_next_in [6] $end
$var wire 1 +" PC_next_in [5] $end
$var wire 1 ," PC_next_in [4] $end
$var wire 1 -" PC_next_in [3] $end
$var wire 1 ." PC_next_in [2] $end
$var wire 1 /" PC_next_in [1] $end
$var wire 1 0" PC_next_in [0] $end
$var wire 1 D( instruction_in [15] $end
$var wire 1 E( instruction_in [14] $end
$var wire 1 F( instruction_in [13] $end
$var wire 1 G( instruction_in [12] $end
$var wire 1 H( instruction_in [11] $end
$var wire 1 I( instruction_in [10] $end
$var wire 1 J( instruction_in [9] $end
$var wire 1 K( instruction_in [8] $end
$var wire 1 L( instruction_in [7] $end
$var wire 1 M( instruction_in [6] $end
$var wire 1 N( instruction_in [5] $end
$var wire 1 O( instruction_in [4] $end
$var wire 1 P( instruction_in [3] $end
$var wire 1 Q( instruction_in [2] $end
$var wire 1 R( instruction_in [1] $end
$var wire 1 S( instruction_in [0] $end
$var wire 1 #( PC_NO_PLUS_TWO_IN [15] $end
$var wire 1 $( PC_NO_PLUS_TWO_IN [14] $end
$var wire 1 %( PC_NO_PLUS_TWO_IN [13] $end
$var wire 1 &( PC_NO_PLUS_TWO_IN [12] $end
$var wire 1 '( PC_NO_PLUS_TWO_IN [11] $end
$var wire 1 (( PC_NO_PLUS_TWO_IN [10] $end
$var wire 1 )( PC_NO_PLUS_TWO_IN [9] $end
$var wire 1 *( PC_NO_PLUS_TWO_IN [8] $end
$var wire 1 +( PC_NO_PLUS_TWO_IN [7] $end
$var wire 1 ,( PC_NO_PLUS_TWO_IN [6] $end
$var wire 1 -( PC_NO_PLUS_TWO_IN [5] $end
$var wire 1 .( PC_NO_PLUS_TWO_IN [4] $end
$var wire 1 /( PC_NO_PLUS_TWO_IN [3] $end
$var wire 1 0( PC_NO_PLUS_TWO_IN [2] $end
$var wire 1 1( PC_NO_PLUS_TWO_IN [1] $end
$var wire 1 2( PC_NO_PLUS_TWO_IN [0] $end
$var wire 1 3( PC_NO_PLUS_TWO_OUT [15] $end
$var wire 1 4( PC_NO_PLUS_TWO_OUT [14] $end
$var wire 1 5( PC_NO_PLUS_TWO_OUT [13] $end
$var wire 1 6( PC_NO_PLUS_TWO_OUT [12] $end
$var wire 1 7( PC_NO_PLUS_TWO_OUT [11] $end
$var wire 1 8( PC_NO_PLUS_TWO_OUT [10] $end
$var wire 1 9( PC_NO_PLUS_TWO_OUT [9] $end
$var wire 1 :( PC_NO_PLUS_TWO_OUT [8] $end
$var wire 1 ;( PC_NO_PLUS_TWO_OUT [7] $end
$var wire 1 <( PC_NO_PLUS_TWO_OUT [6] $end
$var wire 1 =( PC_NO_PLUS_TWO_OUT [5] $end
$var wire 1 >( PC_NO_PLUS_TWO_OUT [4] $end
$var wire 1 ?( PC_NO_PLUS_TWO_OUT [3] $end
$var wire 1 @( PC_NO_PLUS_TWO_OUT [2] $end
$var wire 1 A( PC_NO_PLUS_TWO_OUT [1] $end
$var wire 1 B( PC_NO_PLUS_TWO_OUT [0] $end
$var wire 1 1" PC_next_in_out [15] $end
$var wire 1 2" PC_next_in_out [14] $end
$var wire 1 3" PC_next_in_out [13] $end
$var wire 1 4" PC_next_in_out [12] $end
$var wire 1 5" PC_next_in_out [11] $end
$var wire 1 6" PC_next_in_out [10] $end
$var wire 1 7" PC_next_in_out [9] $end
$var wire 1 8" PC_next_in_out [8] $end
$var wire 1 9" PC_next_in_out [7] $end
$var wire 1 :" PC_next_in_out [6] $end
$var wire 1 ;" PC_next_in_out [5] $end
$var wire 1 <" PC_next_in_out [4] $end
$var wire 1 =" PC_next_in_out [3] $end
$var wire 1 >" PC_next_in_out [2] $end
$var wire 1 ?" PC_next_in_out [1] $end
$var wire 1 @" PC_next_in_out [0] $end
$var wire 1 o! instruction_out [15] $end
$var wire 1 p! instruction_out [14] $end
$var wire 1 q! instruction_out [13] $end
$var wire 1 r! instruction_out [12] $end
$var wire 1 s! instruction_out [11] $end
$var wire 1 t! instruction_out [10] $end
$var wire 1 u! instruction_out [9] $end
$var wire 1 v! instruction_out [8] $end
$var wire 1 w! instruction_out [7] $end
$var wire 1 x! instruction_out [6] $end
$var wire 1 y! instruction_out [5] $end
$var wire 1 z! instruction_out [4] $end
$var wire 1 {! instruction_out [3] $end
$var wire 1 |! instruction_out [2] $end
$var wire 1 }! instruction_out [1] $end
$var wire 1 ~! instruction_out [0] $end

$scope module instruc $end
$var wire 1 o! q [15] $end
$var wire 1 p! q [14] $end
$var wire 1 q! q [13] $end
$var wire 1 r! q [12] $end
$var wire 1 s! q [11] $end
$var wire 1 t! q [10] $end
$var wire 1 u! q [9] $end
$var wire 1 v! q [8] $end
$var wire 1 w! q [7] $end
$var wire 1 x! q [6] $end
$var wire 1 y! q [5] $end
$var wire 1 z! q [4] $end
$var wire 1 {! q [3] $end
$var wire 1 |! q [2] $end
$var wire 1 }! q [1] $end
$var wire 1 ~! q [0] $end
$var wire 1 D( d [15] $end
$var wire 1 E( d [14] $end
$var wire 1 F( d [13] $end
$var wire 1 G( d [12] $end
$var wire 1 H( d [11] $end
$var wire 1 I( d [10] $end
$var wire 1 J( d [9] $end
$var wire 1 K( d [8] $end
$var wire 1 L( d [7] $end
$var wire 1 M( d [6] $end
$var wire 1 N( d [5] $end
$var wire 1 O( d [4] $end
$var wire 1 P( d [3] $end
$var wire 1 Q( d [2] $end
$var wire 1 R( d [1] $end
$var wire 1 S( d [0] $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[15] $end
$var wire 1 1" q $end
$var wire 1 !" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[14] $end
$var wire 1 2" q $end
$var wire 1 "" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[13] $end
$var wire 1 3" q $end
$var wire 1 #" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[12] $end
$var wire 1 4" q $end
$var wire 1 $" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[11] $end
$var wire 1 5" q $end
$var wire 1 %" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[10] $end
$var wire 1 6" q $end
$var wire 1 &" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[9] $end
$var wire 1 7" q $end
$var wire 1 '" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[8] $end
$var wire 1 8" q $end
$var wire 1 (" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[7] $end
$var wire 1 9" q $end
$var wire 1 )" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[6] $end
$var wire 1 :" q $end
$var wire 1 *" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[5] $end
$var wire 1 ;" q $end
$var wire 1 +" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[4] $end
$var wire 1 <" q $end
$var wire 1 ," d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[3] $end
$var wire 1 =" q $end
$var wire 1 -" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[2] $end
$var wire 1 >" q $end
$var wire 1 ." d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[1] $end
$var wire 1 ?" q $end
$var wire 1 /" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc[0] $end
$var wire 1 @" q $end
$var wire 1 0" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[15] $end
$var wire 1 3( q $end
$var wire 1 #( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[14] $end
$var wire 1 4( q $end
$var wire 1 $( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[13] $end
$var wire 1 5( q $end
$var wire 1 %( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[12] $end
$var wire 1 6( q $end
$var wire 1 &( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[11] $end
$var wire 1 7( q $end
$var wire 1 '( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[10] $end
$var wire 1 8( q $end
$var wire 1 (( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[9] $end
$var wire 1 9( q $end
$var wire 1 )( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[8] $end
$var wire 1 :( q $end
$var wire 1 *( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[7] $end
$var wire 1 ;( q $end
$var wire 1 +( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[6] $end
$var wire 1 <( q $end
$var wire 1 ,( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[5] $end
$var wire 1 =( q $end
$var wire 1 -( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[4] $end
$var wire 1 >( q $end
$var wire 1 .( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[3] $end
$var wire 1 ?( q $end
$var wire 1 /( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[2] $end
$var wire 1 @( q $end
$var wire 1 0( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[1] $end
$var wire 1 A( q $end
$var wire 1 1( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PCNOTWO[0] $end
$var wire 1 B( q $end
$var wire 1 2( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 `' err $end
$var wire 1 o! instruction [15] $end
$var wire 1 p! instruction [14] $end
$var wire 1 q! instruction [13] $end
$var wire 1 r! instruction [12] $end
$var wire 1 s! instruction [11] $end
$var wire 1 t! instruction [10] $end
$var wire 1 u! instruction [9] $end
$var wire 1 v! instruction [8] $end
$var wire 1 w! instruction [7] $end
$var wire 1 x! instruction [6] $end
$var wire 1 y! instruction [5] $end
$var wire 1 z! instruction [4] $end
$var wire 1 {! instruction [3] $end
$var wire 1 |! instruction [2] $end
$var wire 1 }! instruction [1] $end
$var wire 1 ~! instruction [0] $end
$var wire 1 >! data_write [15] $end
$var wire 1 ?! data_write [14] $end
$var wire 1 @! data_write [13] $end
$var wire 1 A! data_write [12] $end
$var wire 1 B! data_write [11] $end
$var wire 1 C! data_write [10] $end
$var wire 1 D! data_write [9] $end
$var wire 1 E! data_write [8] $end
$var wire 1 F! data_write [7] $end
$var wire 1 G! data_write [6] $end
$var wire 1 H! data_write [5] $end
$var wire 1 I! data_write [4] $end
$var wire 1 J! data_write [3] $end
$var wire 1 K! data_write [2] $end
$var wire 1 L! data_write [1] $end
$var wire 1 M! data_write [0] $end
$var wire 1 [" read_data_1 [15] $end
$var wire 1 \" read_data_1 [14] $end
$var wire 1 ]" read_data_1 [13] $end
$var wire 1 ^" read_data_1 [12] $end
$var wire 1 _" read_data_1 [11] $end
$var wire 1 `" read_data_1 [10] $end
$var wire 1 a" read_data_1 [9] $end
$var wire 1 b" read_data_1 [8] $end
$var wire 1 c" read_data_1 [7] $end
$var wire 1 d" read_data_1 [6] $end
$var wire 1 e" read_data_1 [5] $end
$var wire 1 f" read_data_1 [4] $end
$var wire 1 g" read_data_1 [3] $end
$var wire 1 h" read_data_1 [2] $end
$var wire 1 i" read_data_1 [1] $end
$var wire 1 j" read_data_1 [0] $end
$var wire 1 {" read_data_2 [15] $end
$var wire 1 |" read_data_2 [14] $end
$var wire 1 }" read_data_2 [13] $end
$var wire 1 ~" read_data_2 [12] $end
$var wire 1 !# read_data_2 [11] $end
$var wire 1 "# read_data_2 [10] $end
$var wire 1 ## read_data_2 [9] $end
$var wire 1 $# read_data_2 [8] $end
$var wire 1 %# read_data_2 [7] $end
$var wire 1 &# read_data_2 [6] $end
$var wire 1 '# read_data_2 [5] $end
$var wire 1 (# read_data_2 [4] $end
$var wire 1 )# read_data_2 [3] $end
$var wire 1 *# read_data_2 [2] $end
$var wire 1 +# read_data_2 [1] $end
$var wire 1 ,# read_data_2 [0] $end
$var wire 1 ?$ to_shift [15] $end
$var wire 1 @$ to_shift [14] $end
$var wire 1 A$ to_shift [13] $end
$var wire 1 B$ to_shift [12] $end
$var wire 1 C$ to_shift [11] $end
$var wire 1 D$ to_shift [10] $end
$var wire 1 E$ to_shift [9] $end
$var wire 1 F$ to_shift [8] $end
$var wire 1 G$ to_shift [7] $end
$var wire 1 H$ to_shift [6] $end
$var wire 1 I$ to_shift [5] $end
$var wire 1 J$ to_shift [4] $end
$var wire 1 K$ to_shift [3] $end
$var wire 1 L$ to_shift [2] $end
$var wire 1 M$ to_shift [1] $end
$var wire 1 N$ to_shift [0] $end
$var wire 1 =# i_1 [15] $end
$var wire 1 ># i_1 [14] $end
$var wire 1 ?# i_1 [13] $end
$var wire 1 @# i_1 [12] $end
$var wire 1 A# i_1 [11] $end
$var wire 1 B# i_1 [10] $end
$var wire 1 C# i_1 [9] $end
$var wire 1 D# i_1 [8] $end
$var wire 1 E# i_1 [7] $end
$var wire 1 F# i_1 [6] $end
$var wire 1 G# i_1 [5] $end
$var wire 1 H# i_1 [4] $end
$var wire 1 I# i_1 [3] $end
$var wire 1 J# i_1 [2] $end
$var wire 1 K# i_1 [1] $end
$var wire 1 L# i_1 [0] $end
$var wire 1 ]# i_2 [15] $end
$var wire 1 ^# i_2 [14] $end
$var wire 1 _# i_2 [13] $end
$var wire 1 `# i_2 [12] $end
$var wire 1 a# i_2 [11] $end
$var wire 1 b# i_2 [10] $end
$var wire 1 c# i_2 [9] $end
$var wire 1 d# i_2 [8] $end
$var wire 1 e# i_2 [7] $end
$var wire 1 f# i_2 [6] $end
$var wire 1 g# i_2 [5] $end
$var wire 1 h# i_2 [4] $end
$var wire 1 i# i_2 [3] $end
$var wire 1 j# i_2 [2] $end
$var wire 1 k# i_2 [1] $end
$var wire 1 l# i_2 [0] $end
$var wire 1 }# word_align_jump [15] $end
$var wire 1 ~# word_align_jump [14] $end
$var wire 1 !$ word_align_jump [13] $end
$var wire 1 "$ word_align_jump [12] $end
$var wire 1 #$ word_align_jump [11] $end
$var wire 1 $$ word_align_jump [10] $end
$var wire 1 %$ word_align_jump [9] $end
$var wire 1 &$ word_align_jump [8] $end
$var wire 1 '$ word_align_jump [7] $end
$var wire 1 ($ word_align_jump [6] $end
$var wire 1 )$ word_align_jump [5] $end
$var wire 1 *$ word_align_jump [4] $end
$var wire 1 +$ word_align_jump [3] $end
$var wire 1 ,$ word_align_jump [2] $end
$var wire 1 -$ word_align_jump [1] $end
$var wire 1 .$ word_align_jump [0] $end
$var wire 1 ,+ signed_i_1 [15] $end
$var wire 1 -+ signed_i_1 [14] $end
$var wire 1 .+ signed_i_1 [13] $end
$var wire 1 /+ signed_i_1 [12] $end
$var wire 1 0+ signed_i_1 [11] $end
$var wire 1 1+ signed_i_1 [10] $end
$var wire 1 2+ signed_i_1 [9] $end
$var wire 1 3+ signed_i_1 [8] $end
$var wire 1 4+ signed_i_1 [7] $end
$var wire 1 5+ signed_i_1 [6] $end
$var wire 1 6+ signed_i_1 [5] $end
$var wire 1 7+ signed_i_1 [4] $end
$var wire 1 8+ signed_i_1 [3] $end
$var wire 1 9+ signed_i_1 [2] $end
$var wire 1 :+ signed_i_1 [1] $end
$var wire 1 ;+ signed_i_1 [0] $end
$var wire 1 <+ zero_i_1 [15] $end
$var wire 1 =+ zero_i_1 [14] $end
$var wire 1 >+ zero_i_1 [13] $end
$var wire 1 ?+ zero_i_1 [12] $end
$var wire 1 @+ zero_i_1 [11] $end
$var wire 1 A+ zero_i_1 [10] $end
$var wire 1 B+ zero_i_1 [9] $end
$var wire 1 C+ zero_i_1 [8] $end
$var wire 1 D+ zero_i_1 [7] $end
$var wire 1 E+ zero_i_1 [6] $end
$var wire 1 F+ zero_i_1 [5] $end
$var wire 1 G+ zero_i_1 [4] $end
$var wire 1 H+ zero_i_1 [3] $end
$var wire 1 I+ zero_i_1 [2] $end
$var wire 1 J+ zero_i_1 [1] $end
$var wire 1 K+ zero_i_1 [0] $end
$var wire 1 L+ signed_i_2 [15] $end
$var wire 1 M+ signed_i_2 [14] $end
$var wire 1 N+ signed_i_2 [13] $end
$var wire 1 O+ signed_i_2 [12] $end
$var wire 1 P+ signed_i_2 [11] $end
$var wire 1 Q+ signed_i_2 [10] $end
$var wire 1 R+ signed_i_2 [9] $end
$var wire 1 S+ signed_i_2 [8] $end
$var wire 1 T+ signed_i_2 [7] $end
$var wire 1 U+ signed_i_2 [6] $end
$var wire 1 V+ signed_i_2 [5] $end
$var wire 1 W+ signed_i_2 [4] $end
$var wire 1 X+ signed_i_2 [3] $end
$var wire 1 Y+ signed_i_2 [2] $end
$var wire 1 Z+ signed_i_2 [1] $end
$var wire 1 [+ signed_i_2 [0] $end
$var wire 1 \+ zero_i_2 [15] $end
$var wire 1 ]+ zero_i_2 [14] $end
$var wire 1 ^+ zero_i_2 [13] $end
$var wire 1 _+ zero_i_2 [12] $end
$var wire 1 `+ zero_i_2 [11] $end
$var wire 1 a+ zero_i_2 [10] $end
$var wire 1 b+ zero_i_2 [9] $end
$var wire 1 c+ zero_i_2 [8] $end
$var wire 1 d+ zero_i_2 [7] $end
$var wire 1 e+ zero_i_2 [6] $end
$var wire 1 f+ zero_i_2 [5] $end
$var wire 1 g+ zero_i_2 [4] $end
$var wire 1 h+ zero_i_2 [3] $end
$var wire 1 i+ zero_i_2 [2] $end
$var wire 1 j+ zero_i_2 [1] $end
$var wire 1 k+ zero_i_2 [0] $end
$var wire 1 #% write_reg_out [2] $end
$var wire 1 $% write_reg_out [1] $end
$var wire 1 %% write_reg_out [0] $end
$var wire 1 ]' write_reg_from_wb [2] $end
$var wire 1 ^' write_reg_from_wb [1] $end
$var wire 1 _' write_reg_from_wb [0] $end
$var wire 1 L' RegWrt_from_wb $end

$scope module registerfile $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 t! read1RegSel [2] $end
$var wire 1 u! read1RegSel [1] $end
$var wire 1 v! read1RegSel [0] $end
$var wire 1 w! read2RegSel [2] $end
$var wire 1 x! read2RegSel [1] $end
$var wire 1 y! read2RegSel [0] $end
$var wire 1 ]' writeRegSel [2] $end
$var wire 1 ^' writeRegSel [1] $end
$var wire 1 _' writeRegSel [0] $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 L' writeEn $end
$var wire 1 [" read1Data [15] $end
$var wire 1 \" read1Data [14] $end
$var wire 1 ]" read1Data [13] $end
$var wire 1 ^" read1Data [12] $end
$var wire 1 _" read1Data [11] $end
$var wire 1 `" read1Data [10] $end
$var wire 1 a" read1Data [9] $end
$var wire 1 b" read1Data [8] $end
$var wire 1 c" read1Data [7] $end
$var wire 1 d" read1Data [6] $end
$var wire 1 e" read1Data [5] $end
$var wire 1 f" read1Data [4] $end
$var wire 1 g" read1Data [3] $end
$var wire 1 h" read1Data [2] $end
$var wire 1 i" read1Data [1] $end
$var wire 1 j" read1Data [0] $end
$var wire 1 {" read2Data [15] $end
$var wire 1 |" read2Data [14] $end
$var wire 1 }" read2Data [13] $end
$var wire 1 ~" read2Data [12] $end
$var wire 1 !# read2Data [11] $end
$var wire 1 "# read2Data [10] $end
$var wire 1 ## read2Data [9] $end
$var wire 1 $# read2Data [8] $end
$var wire 1 %# read2Data [7] $end
$var wire 1 &# read2Data [6] $end
$var wire 1 '# read2Data [5] $end
$var wire 1 (# read2Data [4] $end
$var wire 1 )# read2Data [3] $end
$var wire 1 *# read2Data [2] $end
$var wire 1 +# read2Data [1] $end
$var wire 1 ,# read2Data [0] $end
$var wire 1 `' err $end
$var wire 1 !, registers [0] $end
$var wire 1 ", registers [1] $end
$var wire 1 #, registers [2] $end
$var wire 1 $, registers [3] $end
$var wire 1 %, registers [4] $end
$var wire 1 &, registers [5] $end
$var wire 1 ', registers [6] $end
$var wire 1 (, registers [7] $end
$var wire 1 ), registers [8] $end
$var wire 1 *, registers [9] $end
$var wire 1 +, registers [10] $end
$var wire 1 ,, registers [11] $end
$var wire 1 -, registers [12] $end
$var wire 1 ., registers [13] $end
$var wire 1 /, registers [14] $end
$var wire 1 0, registers [15] $end
$var wire 1 1, registers [16] $end
$var wire 1 2, registers [17] $end
$var wire 1 3, registers [18] $end
$var wire 1 4, registers [19] $end
$var wire 1 5, registers [20] $end
$var wire 1 6, registers [21] $end
$var wire 1 7, registers [22] $end
$var wire 1 8, registers [23] $end
$var wire 1 9, registers [24] $end
$var wire 1 :, registers [25] $end
$var wire 1 ;, registers [26] $end
$var wire 1 <, registers [27] $end
$var wire 1 =, registers [28] $end
$var wire 1 >, registers [29] $end
$var wire 1 ?, registers [30] $end
$var wire 1 @, registers [31] $end
$var wire 1 A, registers [32] $end
$var wire 1 B, registers [33] $end
$var wire 1 C, registers [34] $end
$var wire 1 D, registers [35] $end
$var wire 1 E, registers [36] $end
$var wire 1 F, registers [37] $end
$var wire 1 G, registers [38] $end
$var wire 1 H, registers [39] $end
$var wire 1 I, registers [40] $end
$var wire 1 J, registers [41] $end
$var wire 1 K, registers [42] $end
$var wire 1 L, registers [43] $end
$var wire 1 M, registers [44] $end
$var wire 1 N, registers [45] $end
$var wire 1 O, registers [46] $end
$var wire 1 P, registers [47] $end
$var wire 1 Q, registers [48] $end
$var wire 1 R, registers [49] $end
$var wire 1 S, registers [50] $end
$var wire 1 T, registers [51] $end
$var wire 1 U, registers [52] $end
$var wire 1 V, registers [53] $end
$var wire 1 W, registers [54] $end
$var wire 1 X, registers [55] $end
$var wire 1 Y, registers [56] $end
$var wire 1 Z, registers [57] $end
$var wire 1 [, registers [58] $end
$var wire 1 \, registers [59] $end
$var wire 1 ], registers [60] $end
$var wire 1 ^, registers [61] $end
$var wire 1 _, registers [62] $end
$var wire 1 `, registers [63] $end
$var wire 1 a, registers [64] $end
$var wire 1 b, registers [65] $end
$var wire 1 c, registers [66] $end
$var wire 1 d, registers [67] $end
$var wire 1 e, registers [68] $end
$var wire 1 f, registers [69] $end
$var wire 1 g, registers [70] $end
$var wire 1 h, registers [71] $end
$var wire 1 i, registers [72] $end
$var wire 1 j, registers [73] $end
$var wire 1 k, registers [74] $end
$var wire 1 l, registers [75] $end
$var wire 1 m, registers [76] $end
$var wire 1 n, registers [77] $end
$var wire 1 o, registers [78] $end
$var wire 1 p, registers [79] $end
$var wire 1 q, registers [80] $end
$var wire 1 r, registers [81] $end
$var wire 1 s, registers [82] $end
$var wire 1 t, registers [83] $end
$var wire 1 u, registers [84] $end
$var wire 1 v, registers [85] $end
$var wire 1 w, registers [86] $end
$var wire 1 x, registers [87] $end
$var wire 1 y, registers [88] $end
$var wire 1 z, registers [89] $end
$var wire 1 {, registers [90] $end
$var wire 1 |, registers [91] $end
$var wire 1 }, registers [92] $end
$var wire 1 ~, registers [93] $end
$var wire 1 !- registers [94] $end
$var wire 1 "- registers [95] $end
$var wire 1 #- registers [96] $end
$var wire 1 $- registers [97] $end
$var wire 1 %- registers [98] $end
$var wire 1 &- registers [99] $end
$var wire 1 '- registers [100] $end
$var wire 1 (- registers [101] $end
$var wire 1 )- registers [102] $end
$var wire 1 *- registers [103] $end
$var wire 1 +- registers [104] $end
$var wire 1 ,- registers [105] $end
$var wire 1 -- registers [106] $end
$var wire 1 .- registers [107] $end
$var wire 1 /- registers [108] $end
$var wire 1 0- registers [109] $end
$var wire 1 1- registers [110] $end
$var wire 1 2- registers [111] $end
$var wire 1 3- registers [112] $end
$var wire 1 4- registers [113] $end
$var wire 1 5- registers [114] $end
$var wire 1 6- registers [115] $end
$var wire 1 7- registers [116] $end
$var wire 1 8- registers [117] $end
$var wire 1 9- registers [118] $end
$var wire 1 :- registers [119] $end
$var wire 1 ;- registers [120] $end
$var wire 1 <- registers [121] $end
$var wire 1 =- registers [122] $end
$var wire 1 >- registers [123] $end
$var wire 1 ?- registers [124] $end
$var wire 1 @- registers [125] $end
$var wire 1 A- registers [126] $end
$var wire 1 B- registers [127] $end
$var wire 1 C- mask_1 [0] $end
$var wire 1 D- mask_1 [1] $end
$var wire 1 E- mask_1 [2] $end
$var wire 1 F- mask_1 [3] $end
$var wire 1 G- mask_1 [4] $end
$var wire 1 H- mask_1 [5] $end
$var wire 1 I- mask_1 [6] $end
$var wire 1 J- mask_1 [7] $end

$scope module ind_reg1 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 J- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 B- read [15] $end
$var wire 1 A- read [14] $end
$var wire 1 @- read [13] $end
$var wire 1 ?- read [12] $end
$var wire 1 >- read [11] $end
$var wire 1 =- read [10] $end
$var wire 1 <- read [9] $end
$var wire 1 ;- read [8] $end
$var wire 1 :- read [7] $end
$var wire 1 9- read [6] $end
$var wire 1 8- read [5] $end
$var wire 1 7- read [4] $end
$var wire 1 6- read [3] $end
$var wire 1 5- read [2] $end
$var wire 1 4- read [1] $end
$var wire 1 3- read [0] $end

$scope module flop[15] $end
$var wire 1 B- q $end
$var wire 1 L- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 A- q $end
$var wire 1 N- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 @- q $end
$var wire 1 P- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ?- q $end
$var wire 1 R- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 >- q $end
$var wire 1 T- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 =- q $end
$var wire 1 V- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 <- q $end
$var wire 1 X- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ;- q $end
$var wire 1 Z- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 :- q $end
$var wire 1 \- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 9- q $end
$var wire 1 ^- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 8- q $end
$var wire 1 `- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 7- q $end
$var wire 1 b- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 6- q $end
$var wire 1 d- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 5- q $end
$var wire 1 f- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 4- q $end
$var wire 1 h- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 3- q $end
$var wire 1 j- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 I- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 2- read [15] $end
$var wire 1 1- read [14] $end
$var wire 1 0- read [13] $end
$var wire 1 /- read [12] $end
$var wire 1 .- read [11] $end
$var wire 1 -- read [10] $end
$var wire 1 ,- read [9] $end
$var wire 1 +- read [8] $end
$var wire 1 *- read [7] $end
$var wire 1 )- read [6] $end
$var wire 1 (- read [5] $end
$var wire 1 '- read [4] $end
$var wire 1 &- read [3] $end
$var wire 1 %- read [2] $end
$var wire 1 $- read [1] $end
$var wire 1 #- read [0] $end

$scope module flop[15] $end
$var wire 1 2- q $end
$var wire 1 m- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 1- q $end
$var wire 1 o- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 0- q $end
$var wire 1 q- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 /- q $end
$var wire 1 s- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 .- q $end
$var wire 1 u- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 -- q $end
$var wire 1 w- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 ,- q $end
$var wire 1 y- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 +- q $end
$var wire 1 {- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 *- q $end
$var wire 1 }- d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 )- q $end
$var wire 1 !. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 (- q $end
$var wire 1 #. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 '- q $end
$var wire 1 %. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 &- q $end
$var wire 1 '. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 %- q $end
$var wire 1 ). d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 $- q $end
$var wire 1 +. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 #- q $end
$var wire 1 -. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 H- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 "- read [15] $end
$var wire 1 !- read [14] $end
$var wire 1 ~, read [13] $end
$var wire 1 }, read [12] $end
$var wire 1 |, read [11] $end
$var wire 1 {, read [10] $end
$var wire 1 z, read [9] $end
$var wire 1 y, read [8] $end
$var wire 1 x, read [7] $end
$var wire 1 w, read [6] $end
$var wire 1 v, read [5] $end
$var wire 1 u, read [4] $end
$var wire 1 t, read [3] $end
$var wire 1 s, read [2] $end
$var wire 1 r, read [1] $end
$var wire 1 q, read [0] $end

$scope module flop[15] $end
$var wire 1 "- q $end
$var wire 1 0. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 !- q $end
$var wire 1 2. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ~, q $end
$var wire 1 4. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 }, q $end
$var wire 1 6. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 |, q $end
$var wire 1 8. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 {, q $end
$var wire 1 :. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 z, q $end
$var wire 1 <. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 y, q $end
$var wire 1 >. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 x, q $end
$var wire 1 @. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 w, q $end
$var wire 1 B. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 v, q $end
$var wire 1 D. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 u, q $end
$var wire 1 F. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 t, q $end
$var wire 1 H. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 s, q $end
$var wire 1 J. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 r, q $end
$var wire 1 L. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 q, q $end
$var wire 1 N. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 G- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 p, read [15] $end
$var wire 1 o, read [14] $end
$var wire 1 n, read [13] $end
$var wire 1 m, read [12] $end
$var wire 1 l, read [11] $end
$var wire 1 k, read [10] $end
$var wire 1 j, read [9] $end
$var wire 1 i, read [8] $end
$var wire 1 h, read [7] $end
$var wire 1 g, read [6] $end
$var wire 1 f, read [5] $end
$var wire 1 e, read [4] $end
$var wire 1 d, read [3] $end
$var wire 1 c, read [2] $end
$var wire 1 b, read [1] $end
$var wire 1 a, read [0] $end

$scope module flop[15] $end
$var wire 1 p, q $end
$var wire 1 Q. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 o, q $end
$var wire 1 S. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 n, q $end
$var wire 1 U. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 m, q $end
$var wire 1 W. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 l, q $end
$var wire 1 Y. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 k, q $end
$var wire 1 [. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 j, q $end
$var wire 1 ]. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 i, q $end
$var wire 1 _. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 h, q $end
$var wire 1 a. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 g, q $end
$var wire 1 c. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 f, q $end
$var wire 1 e. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 e, q $end
$var wire 1 g. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 d, q $end
$var wire 1 i. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 c, q $end
$var wire 1 k. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 b, q $end
$var wire 1 m. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 a, q $end
$var wire 1 o. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg5 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 F- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 `, read [15] $end
$var wire 1 _, read [14] $end
$var wire 1 ^, read [13] $end
$var wire 1 ], read [12] $end
$var wire 1 \, read [11] $end
$var wire 1 [, read [10] $end
$var wire 1 Z, read [9] $end
$var wire 1 Y, read [8] $end
$var wire 1 X, read [7] $end
$var wire 1 W, read [6] $end
$var wire 1 V, read [5] $end
$var wire 1 U, read [4] $end
$var wire 1 T, read [3] $end
$var wire 1 S, read [2] $end
$var wire 1 R, read [1] $end
$var wire 1 Q, read [0] $end

$scope module flop[15] $end
$var wire 1 `, q $end
$var wire 1 r. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 _, q $end
$var wire 1 t. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ^, q $end
$var wire 1 v. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 ], q $end
$var wire 1 x. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 \, q $end
$var wire 1 z. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 [, q $end
$var wire 1 |. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 Z, q $end
$var wire 1 ~. d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 Y, q $end
$var wire 1 "/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 X, q $end
$var wire 1 $/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 W, q $end
$var wire 1 &/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 V, q $end
$var wire 1 (/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 U, q $end
$var wire 1 */ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 T, q $end
$var wire 1 ,/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 S, q $end
$var wire 1 ./ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 R, q $end
$var wire 1 0/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 Q, q $end
$var wire 1 2/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg6 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 E- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 P, read [15] $end
$var wire 1 O, read [14] $end
$var wire 1 N, read [13] $end
$var wire 1 M, read [12] $end
$var wire 1 L, read [11] $end
$var wire 1 K, read [10] $end
$var wire 1 J, read [9] $end
$var wire 1 I, read [8] $end
$var wire 1 H, read [7] $end
$var wire 1 G, read [6] $end
$var wire 1 F, read [5] $end
$var wire 1 E, read [4] $end
$var wire 1 D, read [3] $end
$var wire 1 C, read [2] $end
$var wire 1 B, read [1] $end
$var wire 1 A, read [0] $end

$scope module flop[15] $end
$var wire 1 P, q $end
$var wire 1 5/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 O, q $end
$var wire 1 7/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 N, q $end
$var wire 1 9/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 M, q $end
$var wire 1 ;/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 L, q $end
$var wire 1 =/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 K, q $end
$var wire 1 ?/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 J, q $end
$var wire 1 A/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 I, q $end
$var wire 1 C/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 H, q $end
$var wire 1 E/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 G, q $end
$var wire 1 G/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 F, q $end
$var wire 1 I/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 E, q $end
$var wire 1 K/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 D, q $end
$var wire 1 M/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 C, q $end
$var wire 1 O/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 B, q $end
$var wire 1 Q/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 A, q $end
$var wire 1 S/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg7 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 D- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 @, read [15] $end
$var wire 1 ?, read [14] $end
$var wire 1 >, read [13] $end
$var wire 1 =, read [12] $end
$var wire 1 <, read [11] $end
$var wire 1 ;, read [10] $end
$var wire 1 :, read [9] $end
$var wire 1 9, read [8] $end
$var wire 1 8, read [7] $end
$var wire 1 7, read [6] $end
$var wire 1 6, read [5] $end
$var wire 1 5, read [4] $end
$var wire 1 4, read [3] $end
$var wire 1 3, read [2] $end
$var wire 1 2, read [1] $end
$var wire 1 1, read [0] $end

$scope module flop[15] $end
$var wire 1 @, q $end
$var wire 1 V/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 ?, q $end
$var wire 1 X/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 >, q $end
$var wire 1 Z/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 =, q $end
$var wire 1 \/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 <, q $end
$var wire 1 ^/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 ;, q $end
$var wire 1 `/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 :, q $end
$var wire 1 b/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 9, q $end
$var wire 1 d/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 8, q $end
$var wire 1 f/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 7, q $end
$var wire 1 h/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 6, q $end
$var wire 1 j/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 5, q $end
$var wire 1 l/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 4, q $end
$var wire 1 n/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 3, q $end
$var wire 1 p/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 2, q $end
$var wire 1 r/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 1, q $end
$var wire 1 t/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module ind_reg8 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 C- writeEn $end
$var wire 1 >! writeData [15] $end
$var wire 1 ?! writeData [14] $end
$var wire 1 @! writeData [13] $end
$var wire 1 A! writeData [12] $end
$var wire 1 B! writeData [11] $end
$var wire 1 C! writeData [10] $end
$var wire 1 D! writeData [9] $end
$var wire 1 E! writeData [8] $end
$var wire 1 F! writeData [7] $end
$var wire 1 G! writeData [6] $end
$var wire 1 H! writeData [5] $end
$var wire 1 I! writeData [4] $end
$var wire 1 J! writeData [3] $end
$var wire 1 K! writeData [2] $end
$var wire 1 L! writeData [1] $end
$var wire 1 M! writeData [0] $end
$var wire 1 0, read [15] $end
$var wire 1 /, read [14] $end
$var wire 1 ., read [13] $end
$var wire 1 -, read [12] $end
$var wire 1 ,, read [11] $end
$var wire 1 +, read [10] $end
$var wire 1 *, read [9] $end
$var wire 1 ), read [8] $end
$var wire 1 (, read [7] $end
$var wire 1 ', read [6] $end
$var wire 1 &, read [5] $end
$var wire 1 %, read [4] $end
$var wire 1 $, read [3] $end
$var wire 1 #, read [2] $end
$var wire 1 ", read [1] $end
$var wire 1 !, read [0] $end

$scope module flop[15] $end
$var wire 1 0, q $end
$var wire 1 w/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[14] $end
$var wire 1 /, q $end
$var wire 1 y/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[13] $end
$var wire 1 ., q $end
$var wire 1 {/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[12] $end
$var wire 1 -, q $end
$var wire 1 }/ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[11] $end
$var wire 1 ,, q $end
$var wire 1 !0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[10] $end
$var wire 1 +, q $end
$var wire 1 #0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[9] $end
$var wire 1 *, q $end
$var wire 1 %0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[8] $end
$var wire 1 ), q $end
$var wire 1 '0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[7] $end
$var wire 1 (, q $end
$var wire 1 )0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[6] $end
$var wire 1 ', q $end
$var wire 1 +0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[5] $end
$var wire 1 &, q $end
$var wire 1 -0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[4] $end
$var wire 1 %, q $end
$var wire 1 /0 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[3] $end
$var wire 1 $, q $end
$var wire 1 10 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[2] $end
$var wire 1 #, q $end
$var wire 1 30 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[1] $end
$var wire 1 ", q $end
$var wire 1 50 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module flop[0] $end
$var wire 1 !, q $end
$var wire 1 70 d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module IDUUT $end
$var wire 1 o! inst [15] $end
$var wire 1 p! inst [14] $end
$var wire 1 q! inst [13] $end
$var wire 1 r! inst [12] $end
$var wire 1 s! inst [11] $end
$var wire 1 t! inst [10] $end
$var wire 1 u! inst [9] $end
$var wire 1 v! inst [8] $end
$var wire 1 w! inst [7] $end
$var wire 1 x! inst [6] $end
$var wire 1 y! inst [5] $end
$var wire 1 z! inst [4] $end
$var wire 1 {! inst [3] $end
$var wire 1 |! inst [2] $end
$var wire 1 }! inst [1] $end
$var wire 1 ~! inst [0] $end
$var wire 1 &% execute [2] $end
$var wire 1 '% execute [1] $end
$var wire 1 (% execute [0] $end
$var wire 1 U& memory [2] $end
$var wire 1 V& memory [1] $end
$var wire 1 W& memory [0] $end
$var wire 1 ]' writeback [2] $end
$var wire 1 ^' writeback [1] $end
$var wire 1 _' writeback [0] $end
$var wire 1 S" BSrc [1] $end
$var wire 1 T" BSrc [0] $end
$var wire 1 k$ Branch $end
$var wire 1 l$ BranchEx $end
$var wire 1 V( NOPEx $end
$var wire 1 W( NOPMem $end
$var wire 1 X( NOPWB $end
$var wire 1 C( sendNOP $end
$var wire 1 90 regEqual $end
$var wire 1 :0 RegS [2] $end
$var wire 1 ;0 RegS [1] $end
$var wire 1 <0 RegS [0] $end
$var wire 1 =0 RegT [2] $end
$var wire 1 >0 RegT [1] $end
$var wire 1 ?0 RegT [0] $end
$var wire 1 @0 compEx $end
$var wire 1 A0 compMem $end
$var wire 1 B0 compWB $end
$upscope $end

$scope module latch2 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 S" BSrc_in [1] $end
$var wire 1 T" BSrc_in [0] $end
$var wire 1 U" BSrc_out [1] $end
$var wire 1 V" BSrc_out [0] $end
$var wire 1 W" InvB_in $end
$var wire 1 X" InvB_out $end
$var wire 1 Y" InvA_in $end
$var wire 1 Z" InvA_out $end
$var wire 1 _$ ALUCtrl_in [2] $end
$var wire 1 `$ ALUCtrl_in [1] $end
$var wire 1 a$ ALUCtrl_in [0] $end
$var wire 1 b$ ALUCtrl_out [2] $end
$var wire 1 c$ ALUCtrl_out [1] $end
$var wire 1 d$ ALUCtrl_out [0] $end
$var wire 1 g$ BranchCtrl_in [1] $end
$var wire 1 h$ BranchCtrl_in [0] $end
$var wire 1 i$ BranchCtrl_out [1] $end
$var wire 1 j$ BranchCtrl_out [0] $end
$var wire 1 k$ branch_in $end
$var wire 1 l$ branch_out $end
$var wire 1 m$ SLBI_in $end
$var wire 1 n$ SLBI_out $end
$var wire 1 o$ SetCtrl3_in [2] $end
$var wire 1 p$ SetCtrl3_in [1] $end
$var wire 1 q$ SetCtrl3_in [0] $end
$var wire 1 r$ SetCtrl3_out [2] $end
$var wire 1 s$ SetCtrl3_out [1] $end
$var wire 1 t$ SetCtrl3_out [0] $end
$var wire 1 Q" BTR_in $end
$var wire 1 R" BTR_out $end
$var wire 1 [" ReadData1_in [15] $end
$var wire 1 \" ReadData1_in [14] $end
$var wire 1 ]" ReadData1_in [13] $end
$var wire 1 ^" ReadData1_in [12] $end
$var wire 1 _" ReadData1_in [11] $end
$var wire 1 `" ReadData1_in [10] $end
$var wire 1 a" ReadData1_in [9] $end
$var wire 1 b" ReadData1_in [8] $end
$var wire 1 c" ReadData1_in [7] $end
$var wire 1 d" ReadData1_in [6] $end
$var wire 1 e" ReadData1_in [5] $end
$var wire 1 f" ReadData1_in [4] $end
$var wire 1 g" ReadData1_in [3] $end
$var wire 1 h" ReadData1_in [2] $end
$var wire 1 i" ReadData1_in [1] $end
$var wire 1 j" ReadData1_in [0] $end
$var wire 1 k" ReadData1_out [15] $end
$var wire 1 l" ReadData1_out [14] $end
$var wire 1 m" ReadData1_out [13] $end
$var wire 1 n" ReadData1_out [12] $end
$var wire 1 o" ReadData1_out [11] $end
$var wire 1 p" ReadData1_out [10] $end
$var wire 1 q" ReadData1_out [9] $end
$var wire 1 r" ReadData1_out [8] $end
$var wire 1 s" ReadData1_out [7] $end
$var wire 1 t" ReadData1_out [6] $end
$var wire 1 u" ReadData1_out [5] $end
$var wire 1 v" ReadData1_out [4] $end
$var wire 1 w" ReadData1_out [3] $end
$var wire 1 x" ReadData1_out [2] $end
$var wire 1 y" ReadData1_out [1] $end
$var wire 1 z" ReadData1_out [0] $end
$var wire 1 {" ReadData2_in [15] $end
$var wire 1 |" ReadData2_in [14] $end
$var wire 1 }" ReadData2_in [13] $end
$var wire 1 ~" ReadData2_in [12] $end
$var wire 1 !# ReadData2_in [11] $end
$var wire 1 "# ReadData2_in [10] $end
$var wire 1 ## ReadData2_in [9] $end
$var wire 1 $# ReadData2_in [8] $end
$var wire 1 %# ReadData2_in [7] $end
$var wire 1 &# ReadData2_in [6] $end
$var wire 1 '# ReadData2_in [5] $end
$var wire 1 (# ReadData2_in [4] $end
$var wire 1 )# ReadData2_in [3] $end
$var wire 1 *# ReadData2_in [2] $end
$var wire 1 +# ReadData2_in [1] $end
$var wire 1 ,# ReadData2_in [0] $end
$var wire 1 -# ReadData2_out [15] $end
$var wire 1 .# ReadData2_out [14] $end
$var wire 1 /# ReadData2_out [13] $end
$var wire 1 0# ReadData2_out [12] $end
$var wire 1 1# ReadData2_out [11] $end
$var wire 1 2# ReadData2_out [10] $end
$var wire 1 3# ReadData2_out [9] $end
$var wire 1 4# ReadData2_out [8] $end
$var wire 1 5# ReadData2_out [7] $end
$var wire 1 6# ReadData2_out [6] $end
$var wire 1 7# ReadData2_out [5] $end
$var wire 1 8# ReadData2_out [4] $end
$var wire 1 9# ReadData2_out [3] $end
$var wire 1 :# ReadData2_out [2] $end
$var wire 1 ;# ReadData2_out [1] $end
$var wire 1 <# ReadData2_out [0] $end
$var wire 1 =# fourExtend_in [15] $end
$var wire 1 ># fourExtend_in [14] $end
$var wire 1 ?# fourExtend_in [13] $end
$var wire 1 @# fourExtend_in [12] $end
$var wire 1 A# fourExtend_in [11] $end
$var wire 1 B# fourExtend_in [10] $end
$var wire 1 C# fourExtend_in [9] $end
$var wire 1 D# fourExtend_in [8] $end
$var wire 1 E# fourExtend_in [7] $end
$var wire 1 F# fourExtend_in [6] $end
$var wire 1 G# fourExtend_in [5] $end
$var wire 1 H# fourExtend_in [4] $end
$var wire 1 I# fourExtend_in [3] $end
$var wire 1 J# fourExtend_in [2] $end
$var wire 1 K# fourExtend_in [1] $end
$var wire 1 L# fourExtend_in [0] $end
$var wire 1 M# fourExtend_out [15] $end
$var wire 1 N# fourExtend_out [14] $end
$var wire 1 O# fourExtend_out [13] $end
$var wire 1 P# fourExtend_out [12] $end
$var wire 1 Q# fourExtend_out [11] $end
$var wire 1 R# fourExtend_out [10] $end
$var wire 1 S# fourExtend_out [9] $end
$var wire 1 T# fourExtend_out [8] $end
$var wire 1 U# fourExtend_out [7] $end
$var wire 1 V# fourExtend_out [6] $end
$var wire 1 W# fourExtend_out [5] $end
$var wire 1 X# fourExtend_out [4] $end
$var wire 1 Y# fourExtend_out [3] $end
$var wire 1 Z# fourExtend_out [2] $end
$var wire 1 [# fourExtend_out [1] $end
$var wire 1 \# fourExtend_out [0] $end
$var wire 1 ]# sevenExtend_in [15] $end
$var wire 1 ^# sevenExtend_in [14] $end
$var wire 1 _# sevenExtend_in [13] $end
$var wire 1 `# sevenExtend_in [12] $end
$var wire 1 a# sevenExtend_in [11] $end
$var wire 1 b# sevenExtend_in [10] $end
$var wire 1 c# sevenExtend_in [9] $end
$var wire 1 d# sevenExtend_in [8] $end
$var wire 1 e# sevenExtend_in [7] $end
$var wire 1 f# sevenExtend_in [6] $end
$var wire 1 g# sevenExtend_in [5] $end
$var wire 1 h# sevenExtend_in [4] $end
$var wire 1 i# sevenExtend_in [3] $end
$var wire 1 j# sevenExtend_in [2] $end
$var wire 1 k# sevenExtend_in [1] $end
$var wire 1 l# sevenExtend_in [0] $end
$var wire 1 m# sevenExtend_out [15] $end
$var wire 1 n# sevenExtend_out [14] $end
$var wire 1 o# sevenExtend_out [13] $end
$var wire 1 p# sevenExtend_out [12] $end
$var wire 1 q# sevenExtend_out [11] $end
$var wire 1 r# sevenExtend_out [10] $end
$var wire 1 s# sevenExtend_out [9] $end
$var wire 1 t# sevenExtend_out [8] $end
$var wire 1 u# sevenExtend_out [7] $end
$var wire 1 v# sevenExtend_out [6] $end
$var wire 1 w# sevenExtend_out [5] $end
$var wire 1 x# sevenExtend_out [4] $end
$var wire 1 y# sevenExtend_out [3] $end
$var wire 1 z# sevenExtend_out [2] $end
$var wire 1 {# sevenExtend_out [1] $end
$var wire 1 |# sevenExtend_out [0] $end
$var wire 1 ?$ shifted_in [15] $end
$var wire 1 @$ shifted_in [14] $end
$var wire 1 A$ shifted_in [13] $end
$var wire 1 B$ shifted_in [12] $end
$var wire 1 C$ shifted_in [11] $end
$var wire 1 D$ shifted_in [10] $end
$var wire 1 E$ shifted_in [9] $end
$var wire 1 F$ shifted_in [8] $end
$var wire 1 G$ shifted_in [7] $end
$var wire 1 H$ shifted_in [6] $end
$var wire 1 I$ shifted_in [5] $end
$var wire 1 J$ shifted_in [4] $end
$var wire 1 K$ shifted_in [3] $end
$var wire 1 L$ shifted_in [2] $end
$var wire 1 M$ shifted_in [1] $end
$var wire 1 N$ shifted_in [0] $end
$var wire 1 O$ shifted_out [15] $end
$var wire 1 P$ shifted_out [14] $end
$var wire 1 Q$ shifted_out [13] $end
$var wire 1 R$ shifted_out [12] $end
$var wire 1 S$ shifted_out [11] $end
$var wire 1 T$ shifted_out [10] $end
$var wire 1 U$ shifted_out [9] $end
$var wire 1 V$ shifted_out [8] $end
$var wire 1 W$ shifted_out [7] $end
$var wire 1 X$ shifted_out [6] $end
$var wire 1 Y$ shifted_out [5] $end
$var wire 1 Z$ shifted_out [4] $end
$var wire 1 [$ shifted_out [3] $end
$var wire 1 \$ shifted_out [2] $end
$var wire 1 ]$ shifted_out [1] $end
$var wire 1 ^$ shifted_out [0] $end
$var wire 1 e$ MemWrt_in $end
$var wire 1 f$ MemWrt_out $end
$var wire 1 u$ ALUJMP_in $end
$var wire 1 v$ ALUJMP_out $end
$var wire 1 w$ PC_or_add_in $end
$var wire 1 x$ PC_or_add_out $end
$var wire 1 }$ halt_in $end
$var wire 1 ~$ halt_out $end
$var wire 1 }# word_align_jump_in [15] $end
$var wire 1 ~# word_align_jump_in [14] $end
$var wire 1 !$ word_align_jump_in [13] $end
$var wire 1 "$ word_align_jump_in [12] $end
$var wire 1 #$ word_align_jump_in [11] $end
$var wire 1 $$ word_align_jump_in [10] $end
$var wire 1 %$ word_align_jump_in [9] $end
$var wire 1 &$ word_align_jump_in [8] $end
$var wire 1 '$ word_align_jump_in [7] $end
$var wire 1 ($ word_align_jump_in [6] $end
$var wire 1 )$ word_align_jump_in [5] $end
$var wire 1 *$ word_align_jump_in [4] $end
$var wire 1 +$ word_align_jump_in [3] $end
$var wire 1 ,$ word_align_jump_in [2] $end
$var wire 1 -$ word_align_jump_in [1] $end
$var wire 1 .$ word_align_jump_in [0] $end
$var wire 1 /$ word_align_jump_out [15] $end
$var wire 1 0$ word_align_jump_out [14] $end
$var wire 1 1$ word_align_jump_out [13] $end
$var wire 1 2$ word_align_jump_out [12] $end
$var wire 1 3$ word_align_jump_out [11] $end
$var wire 1 4$ word_align_jump_out [10] $end
$var wire 1 5$ word_align_jump_out [9] $end
$var wire 1 6$ word_align_jump_out [8] $end
$var wire 1 7$ word_align_jump_out [7] $end
$var wire 1 8$ word_align_jump_out [6] $end
$var wire 1 9$ word_align_jump_out [5] $end
$var wire 1 :$ word_align_jump_out [4] $end
$var wire 1 ;$ word_align_jump_out [3] $end
$var wire 1 <$ word_align_jump_out [2] $end
$var wire 1 =$ word_align_jump_out [1] $end
$var wire 1 >$ word_align_jump_out [0] $end
$var wire 1 !% RegWrt_in $end
$var wire 1 "% RegWrt_out $end
$var wire 1 C( SendNOP_In $end
$var wire 1 V( SendNOP_Out $end
$var wire 1 y$ RegSrc_in [1] $end
$var wire 1 z$ RegSrc_in [0] $end
$var wire 1 {$ RegSrc_out [1] $end
$var wire 1 |$ RegSrc_out [0] $end
$var wire 1 1" pc2_in [15] $end
$var wire 1 2" pc2_in [14] $end
$var wire 1 3" pc2_in [13] $end
$var wire 1 4" pc2_in [12] $end
$var wire 1 5" pc2_in [11] $end
$var wire 1 6" pc2_in [10] $end
$var wire 1 7" pc2_in [9] $end
$var wire 1 8" pc2_in [8] $end
$var wire 1 9" pc2_in [7] $end
$var wire 1 :" pc2_in [6] $end
$var wire 1 ;" pc2_in [5] $end
$var wire 1 <" pc2_in [4] $end
$var wire 1 =" pc2_in [3] $end
$var wire 1 >" pc2_in [2] $end
$var wire 1 ?" pc2_in [1] $end
$var wire 1 @" pc2_in [0] $end
$var wire 1 A" pc2_out [15] $end
$var wire 1 B" pc2_out [14] $end
$var wire 1 C" pc2_out [13] $end
$var wire 1 D" pc2_out [12] $end
$var wire 1 E" pc2_out [11] $end
$var wire 1 F" pc2_out [10] $end
$var wire 1 G" pc2_out [9] $end
$var wire 1 H" pc2_out [8] $end
$var wire 1 I" pc2_out [7] $end
$var wire 1 J" pc2_out [6] $end
$var wire 1 K" pc2_out [5] $end
$var wire 1 L" pc2_out [4] $end
$var wire 1 M" pc2_out [3] $end
$var wire 1 N" pc2_out [2] $end
$var wire 1 O" pc2_out [1] $end
$var wire 1 P" pc2_out [0] $end
$var wire 1 #% write_reg_in [2] $end
$var wire 1 $% write_reg_in [1] $end
$var wire 1 %% write_reg_in [0] $end
$var wire 1 &% write_reg_out [2] $end
$var wire 1 '% write_reg_out [1] $end
$var wire 1 (% write_reg_out [0] $end

$scope module InvB $end
$var wire 1 X" q $end
$var wire 1 W" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module InvA $end
$var wire 1 Z" q $end
$var wire 1 Y" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 l$ q $end
$var wire 1 k$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SLBI $end
$var wire 1 n$ q $end
$var wire 1 m$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BTR $end
$var wire 1 R" q $end
$var wire 1 Q" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 f$ q $end
$var wire 1 e$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJMP $end
$var wire 1 v$ q $end
$var wire 1 u$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 x$ q $end
$var wire 1 w$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 ~$ q $end
$var wire 1 }$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 "% q $end
$var wire 1 !% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 V( q $end
$var wire 1 C( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[1] $end
$var wire 1 U" q $end
$var wire 1 S" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BSrc[0] $end
$var wire 1 V" q $end
$var wire 1 T" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[2] $end
$var wire 1 b$ q $end
$var wire 1 _$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[1] $end
$var wire 1 c$ q $end
$var wire 1 `$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUCtrl[0] $end
$var wire 1 d$ q $end
$var wire 1 a$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[1] $end
$var wire 1 i$ q $end
$var wire 1 g$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BranchCtrl[0] $end
$var wire 1 j$ q $end
$var wire 1 h$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[2] $end
$var wire 1 r$ q $end
$var wire 1 o$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[1] $end
$var wire 1 s$ q $end
$var wire 1 p$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SetCtrl3[0] $end
$var wire 1 t$ q $end
$var wire 1 q$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[15] $end
$var wire 1 k" q $end
$var wire 1 [" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[14] $end
$var wire 1 l" q $end
$var wire 1 \" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[13] $end
$var wire 1 m" q $end
$var wire 1 ]" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[12] $end
$var wire 1 n" q $end
$var wire 1 ^" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[11] $end
$var wire 1 o" q $end
$var wire 1 _" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[10] $end
$var wire 1 p" q $end
$var wire 1 `" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[9] $end
$var wire 1 q" q $end
$var wire 1 a" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[8] $end
$var wire 1 r" q $end
$var wire 1 b" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[7] $end
$var wire 1 s" q $end
$var wire 1 c" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[6] $end
$var wire 1 t" q $end
$var wire 1 d" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[5] $end
$var wire 1 u" q $end
$var wire 1 e" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[4] $end
$var wire 1 v" q $end
$var wire 1 f" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[3] $end
$var wire 1 w" q $end
$var wire 1 g" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[2] $end
$var wire 1 x" q $end
$var wire 1 h" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[1] $end
$var wire 1 y" q $end
$var wire 1 i" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData1[0] $end
$var wire 1 z" q $end
$var wire 1 j" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[15] $end
$var wire 1 -# q $end
$var wire 1 {" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[14] $end
$var wire 1 .# q $end
$var wire 1 |" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[13] $end
$var wire 1 /# q $end
$var wire 1 }" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[12] $end
$var wire 1 0# q $end
$var wire 1 ~" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[11] $end
$var wire 1 1# q $end
$var wire 1 !# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[10] $end
$var wire 1 2# q $end
$var wire 1 "# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[9] $end
$var wire 1 3# q $end
$var wire 1 ## d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[8] $end
$var wire 1 4# q $end
$var wire 1 $# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[7] $end
$var wire 1 5# q $end
$var wire 1 %# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[6] $end
$var wire 1 6# q $end
$var wire 1 &# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[5] $end
$var wire 1 7# q $end
$var wire 1 '# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[4] $end
$var wire 1 8# q $end
$var wire 1 (# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[3] $end
$var wire 1 9# q $end
$var wire 1 )# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[2] $end
$var wire 1 :# q $end
$var wire 1 *# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[1] $end
$var wire 1 ;# q $end
$var wire 1 +# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ReadData2[0] $end
$var wire 1 <# q $end
$var wire 1 ,# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[15] $end
$var wire 1 M# q $end
$var wire 1 =# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[14] $end
$var wire 1 N# q $end
$var wire 1 ># d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[13] $end
$var wire 1 O# q $end
$var wire 1 ?# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[12] $end
$var wire 1 P# q $end
$var wire 1 @# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[11] $end
$var wire 1 Q# q $end
$var wire 1 A# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[10] $end
$var wire 1 R# q $end
$var wire 1 B# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[9] $end
$var wire 1 S# q $end
$var wire 1 C# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[8] $end
$var wire 1 T# q $end
$var wire 1 D# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[7] $end
$var wire 1 U# q $end
$var wire 1 E# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[6] $end
$var wire 1 V# q $end
$var wire 1 F# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[5] $end
$var wire 1 W# q $end
$var wire 1 G# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[4] $end
$var wire 1 X# q $end
$var wire 1 H# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[3] $end
$var wire 1 Y# q $end
$var wire 1 I# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[2] $end
$var wire 1 Z# q $end
$var wire 1 J# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[1] $end
$var wire 1 [# q $end
$var wire 1 K# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module fourExtend[0] $end
$var wire 1 \# q $end
$var wire 1 L# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[15] $end
$var wire 1 m# q $end
$var wire 1 ]# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[14] $end
$var wire 1 n# q $end
$var wire 1 ^# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[13] $end
$var wire 1 o# q $end
$var wire 1 _# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[12] $end
$var wire 1 p# q $end
$var wire 1 `# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[11] $end
$var wire 1 q# q $end
$var wire 1 a# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[10] $end
$var wire 1 r# q $end
$var wire 1 b# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[9] $end
$var wire 1 s# q $end
$var wire 1 c# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[8] $end
$var wire 1 t# q $end
$var wire 1 d# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[7] $end
$var wire 1 u# q $end
$var wire 1 e# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[6] $end
$var wire 1 v# q $end
$var wire 1 f# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[5] $end
$var wire 1 w# q $end
$var wire 1 g# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[4] $end
$var wire 1 x# q $end
$var wire 1 h# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[3] $end
$var wire 1 y# q $end
$var wire 1 i# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[2] $end
$var wire 1 z# q $end
$var wire 1 j# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[1] $end
$var wire 1 {# q $end
$var wire 1 k# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenExtend[0] $end
$var wire 1 |# q $end
$var wire 1 l# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[15] $end
$var wire 1 O$ q $end
$var wire 1 ?$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[14] $end
$var wire 1 P$ q $end
$var wire 1 @$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[13] $end
$var wire 1 Q$ q $end
$var wire 1 A$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[12] $end
$var wire 1 R$ q $end
$var wire 1 B$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[11] $end
$var wire 1 S$ q $end
$var wire 1 C$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[10] $end
$var wire 1 T$ q $end
$var wire 1 D$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[9] $end
$var wire 1 U$ q $end
$var wire 1 E$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[8] $end
$var wire 1 V$ q $end
$var wire 1 F$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[7] $end
$var wire 1 W$ q $end
$var wire 1 G$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[6] $end
$var wire 1 X$ q $end
$var wire 1 H$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[5] $end
$var wire 1 Y$ q $end
$var wire 1 I$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[4] $end
$var wire 1 Z$ q $end
$var wire 1 J$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[3] $end
$var wire 1 [$ q $end
$var wire 1 K$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[2] $end
$var wire 1 \$ q $end
$var wire 1 L$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[1] $end
$var wire 1 ]$ q $end
$var wire 1 M$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module shifted[0] $end
$var wire 1 ^$ q $end
$var wire 1 N$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[15] $end
$var wire 1 /$ q $end
$var wire 1 }# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[14] $end
$var wire 1 0$ q $end
$var wire 1 ~# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[13] $end
$var wire 1 1$ q $end
$var wire 1 !$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[12] $end
$var wire 1 2$ q $end
$var wire 1 "$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[11] $end
$var wire 1 3$ q $end
$var wire 1 #$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[10] $end
$var wire 1 4$ q $end
$var wire 1 $$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[9] $end
$var wire 1 5$ q $end
$var wire 1 %$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[8] $end
$var wire 1 6$ q $end
$var wire 1 &$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[7] $end
$var wire 1 7$ q $end
$var wire 1 '$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[6] $end
$var wire 1 8$ q $end
$var wire 1 ($ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[5] $end
$var wire 1 9$ q $end
$var wire 1 )$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[4] $end
$var wire 1 :$ q $end
$var wire 1 *$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[3] $end
$var wire 1 ;$ q $end
$var wire 1 +$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[2] $end
$var wire 1 <$ q $end
$var wire 1 ,$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[1] $end
$var wire 1 =$ q $end
$var wire 1 -$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module word_align_jump[0] $end
$var wire 1 >$ q $end
$var wire 1 .$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 {$ q $end
$var wire 1 y$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 |$ q $end
$var wire 1 z$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 A" q $end
$var wire 1 1" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 B" q $end
$var wire 1 2" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 C" q $end
$var wire 1 3" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 D" q $end
$var wire 1 4" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 E" q $end
$var wire 1 5" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 F" q $end
$var wire 1 6" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 G" q $end
$var wire 1 7" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 H" q $end
$var wire 1 8" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 I" q $end
$var wire 1 9" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 J" q $end
$var wire 1 :" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 K" q $end
$var wire 1 ;" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 L" q $end
$var wire 1 <" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 M" q $end
$var wire 1 =" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 N" q $end
$var wire 1 >" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 O" q $end
$var wire 1 ?" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 P" q $end
$var wire 1 @" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 &% q $end
$var wire 1 #% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 '% q $end
$var wire 1 $% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 (% q $end
$var wire 1 %% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU3 $end
$var wire 1 U" BSrc [1] $end
$var wire 1 V" BSrc [0] $end
$var wire 1 X" InvB $end
$var wire 1 Z" InvA $end
$var wire 1 b$ ALUCtrl [2] $end
$var wire 1 c$ ALUCtrl [1] $end
$var wire 1 d$ ALUCtrl [0] $end
$var wire 1 k" ReadData1 [15] $end
$var wire 1 l" ReadData1 [14] $end
$var wire 1 m" ReadData1 [13] $end
$var wire 1 n" ReadData1 [12] $end
$var wire 1 o" ReadData1 [11] $end
$var wire 1 p" ReadData1 [10] $end
$var wire 1 q" ReadData1 [9] $end
$var wire 1 r" ReadData1 [8] $end
$var wire 1 s" ReadData1 [7] $end
$var wire 1 t" ReadData1 [6] $end
$var wire 1 u" ReadData1 [5] $end
$var wire 1 v" ReadData1 [4] $end
$var wire 1 w" ReadData1 [3] $end
$var wire 1 x" ReadData1 [2] $end
$var wire 1 y" ReadData1 [1] $end
$var wire 1 z" ReadData1 [0] $end
$var wire 1 -# ReadData2 [15] $end
$var wire 1 .# ReadData2 [14] $end
$var wire 1 /# ReadData2 [13] $end
$var wire 1 0# ReadData2 [12] $end
$var wire 1 1# ReadData2 [11] $end
$var wire 1 2# ReadData2 [10] $end
$var wire 1 3# ReadData2 [9] $end
$var wire 1 4# ReadData2 [8] $end
$var wire 1 5# ReadData2 [7] $end
$var wire 1 6# ReadData2 [6] $end
$var wire 1 7# ReadData2 [5] $end
$var wire 1 8# ReadData2 [4] $end
$var wire 1 9# ReadData2 [3] $end
$var wire 1 :# ReadData2 [2] $end
$var wire 1 ;# ReadData2 [1] $end
$var wire 1 <# ReadData2 [0] $end
$var wire 1 M# fourExtend [15] $end
$var wire 1 N# fourExtend [14] $end
$var wire 1 O# fourExtend [13] $end
$var wire 1 P# fourExtend [12] $end
$var wire 1 Q# fourExtend [11] $end
$var wire 1 R# fourExtend [10] $end
$var wire 1 S# fourExtend [9] $end
$var wire 1 T# fourExtend [8] $end
$var wire 1 U# fourExtend [7] $end
$var wire 1 V# fourExtend [6] $end
$var wire 1 W# fourExtend [5] $end
$var wire 1 X# fourExtend [4] $end
$var wire 1 Y# fourExtend [3] $end
$var wire 1 Z# fourExtend [2] $end
$var wire 1 [# fourExtend [1] $end
$var wire 1 \# fourExtend [0] $end
$var wire 1 m# sevenExtend [15] $end
$var wire 1 n# sevenExtend [14] $end
$var wire 1 o# sevenExtend [13] $end
$var wire 1 p# sevenExtend [12] $end
$var wire 1 q# sevenExtend [11] $end
$var wire 1 r# sevenExtend [10] $end
$var wire 1 s# sevenExtend [9] $end
$var wire 1 t# sevenExtend [8] $end
$var wire 1 u# sevenExtend [7] $end
$var wire 1 v# sevenExtend [6] $end
$var wire 1 w# sevenExtend [5] $end
$var wire 1 x# sevenExtend [4] $end
$var wire 1 y# sevenExtend [3] $end
$var wire 1 z# sevenExtend [2] $end
$var wire 1 {# sevenExtend [1] $end
$var wire 1 |# sevenExtend [0] $end
$var wire 1 O$ shifted [15] $end
$var wire 1 P$ shifted [14] $end
$var wire 1 Q$ shifted [13] $end
$var wire 1 R$ shifted [12] $end
$var wire 1 S$ shifted [11] $end
$var wire 1 T$ shifted [10] $end
$var wire 1 U$ shifted [9] $end
$var wire 1 V$ shifted [8] $end
$var wire 1 W$ shifted [7] $end
$var wire 1 X$ shifted [6] $end
$var wire 1 Y$ shifted [5] $end
$var wire 1 Z$ shifted [4] $end
$var wire 1 [$ shifted [3] $end
$var wire 1 \$ shifted [2] $end
$var wire 1 ]$ shifted [1] $end
$var wire 1 ^$ shifted [0] $end
$var wire 1 i$ BranchCtrl [1] $end
$var wire 1 j$ BranchCtrl [0] $end
$var wire 1 l$ branch $end
$var wire 1 n$ SLBI $end
$var wire 1 r$ SetCtrl3 [2] $end
$var wire 1 s$ SetCtrl3 [1] $end
$var wire 1 t$ SetCtrl3 [0] $end
$var wire 1 R" BTR $end
$var wire 1 +% ALU [15] $end
$var wire 1 ,% ALU [14] $end
$var wire 1 -% ALU [13] $end
$var wire 1 .% ALU [12] $end
$var wire 1 /% ALU [11] $end
$var wire 1 0% ALU [10] $end
$var wire 1 1% ALU [9] $end
$var wire 1 2% ALU [8] $end
$var wire 1 3% ALU [7] $end
$var wire 1 4% ALU [6] $end
$var wire 1 5% ALU [5] $end
$var wire 1 6% ALU [4] $end
$var wire 1 7% ALU [3] $end
$var wire 1 8% ALU [2] $end
$var wire 1 9% ALU [1] $end
$var wire 1 :% ALU [0] $end
$var wire 1 K% BInput [15] $end
$var wire 1 L% BInput [14] $end
$var wire 1 M% BInput [13] $end
$var wire 1 N% BInput [12] $end
$var wire 1 O% BInput [11] $end
$var wire 1 P% BInput [10] $end
$var wire 1 Q% BInput [9] $end
$var wire 1 R% BInput [8] $end
$var wire 1 S% BInput [7] $end
$var wire 1 T% BInput [6] $end
$var wire 1 U% BInput [5] $end
$var wire 1 V% BInput [4] $end
$var wire 1 W% BInput [3] $end
$var wire 1 X% BInput [2] $end
$var wire 1 Y% BInput [1] $end
$var wire 1 Z% BInput [0] $end
$var wire 1 )% branchtake $end
$var wire 1 o1 possibleslbi [15] $end
$var wire 1 p1 possibleslbi [14] $end
$var wire 1 q1 possibleslbi [13] $end
$var wire 1 r1 possibleslbi [12] $end
$var wire 1 s1 possibleslbi [11] $end
$var wire 1 t1 possibleslbi [10] $end
$var wire 1 u1 possibleslbi [9] $end
$var wire 1 v1 possibleslbi [8] $end
$var wire 1 w1 possibleslbi [7] $end
$var wire 1 x1 possibleslbi [6] $end
$var wire 1 y1 possibleslbi [5] $end
$var wire 1 z1 possibleslbi [4] $end
$var wire 1 {1 possibleslbi [3] $end
$var wire 1 |1 possibleslbi [2] $end
$var wire 1 }1 possibleslbi [1] $end
$var wire 1 ~1 possibleslbi [0] $end
$var wire 1 !2 shiftedA [15] $end
$var wire 1 "2 shiftedA [14] $end
$var wire 1 #2 shiftedA [13] $end
$var wire 1 $2 shiftedA [12] $end
$var wire 1 %2 shiftedA [11] $end
$var wire 1 &2 shiftedA [10] $end
$var wire 1 '2 shiftedA [9] $end
$var wire 1 (2 shiftedA [8] $end
$var wire 1 )2 shiftedA [7] $end
$var wire 1 *2 shiftedA [6] $end
$var wire 1 +2 shiftedA [5] $end
$var wire 1 ,2 shiftedA [4] $end
$var wire 1 -2 shiftedA [3] $end
$var wire 1 .2 shiftedA [2] $end
$var wire 1 /2 shiftedA [1] $end
$var wire 1 02 shiftedA [0] $end
$var wire 1 12 slbiOper $end
$var wire 1 22 aluout [15] $end
$var wire 1 32 aluout [14] $end
$var wire 1 42 aluout [13] $end
$var wire 1 52 aluout [12] $end
$var wire 1 62 aluout [11] $end
$var wire 1 72 aluout [10] $end
$var wire 1 82 aluout [9] $end
$var wire 1 92 aluout [8] $end
$var wire 1 :2 aluout [7] $end
$var wire 1 ;2 aluout [6] $end
$var wire 1 <2 aluout [5] $end
$var wire 1 =2 aluout [4] $end
$var wire 1 >2 aluout [3] $end
$var wire 1 ?2 aluout [2] $end
$var wire 1 @2 aluout [1] $end
$var wire 1 A2 aluout [0] $end
$var wire 1 B2 conditional $end
$var wire 1 C2 CF $end
$var wire 1 D2 Zero $end
$var wire 1 E2 Overflow $end
$var wire 1 F2 Brchcnd $end
$var wire 1 G2 Oper [1] $end
$var wire 1 H2 Oper [0] $end
$var wire 1 I2 altb $end
$var wire 1 J2 coout [15] $end
$var wire 1 K2 coout [14] $end
$var wire 1 L2 coout [13] $end
$var wire 1 M2 coout [12] $end
$var wire 1 N2 coout [11] $end
$var wire 1 O2 coout [10] $end
$var wire 1 P2 coout [9] $end
$var wire 1 Q2 coout [8] $end
$var wire 1 R2 coout [7] $end
$var wire 1 S2 coout [6] $end
$var wire 1 T2 coout [5] $end
$var wire 1 U2 coout [4] $end
$var wire 1 V2 coout [3] $end
$var wire 1 W2 coout [2] $end
$var wire 1 X2 coout [1] $end
$var wire 1 Y2 coout [0] $end
$var wire 1 Z2 sltoper [1] $end
$var wire 1 [2 sltoper [0] $end
$var wire 1 \2 ltout [15] $end
$var wire 1 ]2 ltout [14] $end
$var wire 1 ^2 ltout [13] $end
$var wire 1 _2 ltout [12] $end
$var wire 1 `2 ltout [11] $end
$var wire 1 a2 ltout [10] $end
$var wire 1 b2 ltout [9] $end
$var wire 1 c2 ltout [8] $end
$var wire 1 d2 ltout [7] $end
$var wire 1 e2 ltout [6] $end
$var wire 1 f2 ltout [5] $end
$var wire 1 g2 ltout [4] $end
$var wire 1 h2 ltout [3] $end
$var wire 1 i2 ltout [2] $end
$var wire 1 j2 ltout [1] $end
$var wire 1 k2 ltout [0] $end
$var wire 1 l2 seqoper [1] $end
$var wire 1 m2 seqoper [0] $end
$var wire 1 n2 aeqb $end
$var wire 1 o2 seqout [15] $end
$var wire 1 p2 seqout [14] $end
$var wire 1 q2 seqout [13] $end
$var wire 1 r2 seqout [12] $end
$var wire 1 s2 seqout [11] $end
$var wire 1 t2 seqout [10] $end
$var wire 1 u2 seqout [9] $end
$var wire 1 v2 seqout [8] $end
$var wire 1 w2 seqout [7] $end
$var wire 1 x2 seqout [6] $end
$var wire 1 y2 seqout [5] $end
$var wire 1 z2 seqout [4] $end
$var wire 1 {2 seqout [3] $end
$var wire 1 |2 seqout [2] $end
$var wire 1 }2 seqout [1] $end
$var wire 1 ~2 seqout [0] $end
$var wire 1 !3 alteb $end
$var wire 1 "3 sleoper [1] $end
$var wire 1 #3 sleoper [0] $end
$var wire 1 $3 sleout [15] $end
$var wire 1 %3 sleout [14] $end
$var wire 1 &3 sleout [13] $end
$var wire 1 '3 sleout [12] $end
$var wire 1 (3 sleout [11] $end
$var wire 1 )3 sleout [10] $end
$var wire 1 *3 sleout [9] $end
$var wire 1 +3 sleout [8] $end
$var wire 1 ,3 sleout [7] $end
$var wire 1 -3 sleout [6] $end
$var wire 1 .3 sleout [5] $end
$var wire 1 /3 sleout [4] $end
$var wire 1 03 sleout [3] $end
$var wire 1 13 sleout [2] $end
$var wire 1 23 sleout [1] $end
$var wire 1 33 sleout [0] $end
$var wire 1 43 SetCtrl [1] $end
$var wire 1 53 SetCtrl [0] $end
$var wire 1 63 carry $end
$var wire 1 73 SLT $end
$var wire 1 83 SEQ $end
$var wire 1 93 SLE $end
$var wire 1 :3 greater $end
$var wire 1 ;3 ReverseOut [15] $end
$var wire 1 <3 ReverseOut [14] $end
$var wire 1 =3 ReverseOut [13] $end
$var wire 1 >3 ReverseOut [12] $end
$var wire 1 ?3 ReverseOut [11] $end
$var wire 1 @3 ReverseOut [10] $end
$var wire 1 A3 ReverseOut [9] $end
$var wire 1 B3 ReverseOut [8] $end
$var wire 1 C3 ReverseOut [7] $end
$var wire 1 D3 ReverseOut [6] $end
$var wire 1 E3 ReverseOut [5] $end
$var wire 1 F3 ReverseOut [4] $end
$var wire 1 G3 ReverseOut [3] $end
$var wire 1 H3 ReverseOut [2] $end
$var wire 1 I3 ReverseOut [1] $end
$var wire 1 J3 ReverseOut [0] $end
$var wire 1 K3 reverse [15] $end
$var wire 1 L3 reverse [14] $end
$var wire 1 M3 reverse [13] $end
$var wire 1 N3 reverse [12] $end
$var wire 1 O3 reverse [11] $end
$var wire 1 P3 reverse [10] $end
$var wire 1 Q3 reverse [9] $end
$var wire 1 R3 reverse [8] $end
$var wire 1 S3 reverse [7] $end
$var wire 1 T3 reverse [6] $end
$var wire 1 U3 reverse [5] $end
$var wire 1 V3 reverse [4] $end
$var wire 1 W3 reverse [3] $end
$var wire 1 X3 reverse [2] $end
$var wire 1 Y3 reverse [1] $end
$var wire 1 Z3 reverse [0] $end

$scope module shift $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 b3 Oper [1] $end
$var wire 1 c3 Oper [0] $end
$var wire 1 !2 Out [15] $end
$var wire 1 "2 Out [14] $end
$var wire 1 #2 Out [13] $end
$var wire 1 $2 Out [12] $end
$var wire 1 %2 Out [11] $end
$var wire 1 &2 Out [10] $end
$var wire 1 '2 Out [9] $end
$var wire 1 (2 Out [8] $end
$var wire 1 )2 Out [7] $end
$var wire 1 *2 Out [6] $end
$var wire 1 +2 Out [5] $end
$var wire 1 ,2 Out [4] $end
$var wire 1 -2 Out [3] $end
$var wire 1 .2 Out [2] $end
$var wire 1 /2 Out [1] $end
$var wire 1 02 Out [0] $end
$var wire 1 d3 shift_left_r [15] $end
$var wire 1 e3 shift_left_r [14] $end
$var wire 1 f3 shift_left_r [13] $end
$var wire 1 g3 shift_left_r [12] $end
$var wire 1 h3 shift_left_r [11] $end
$var wire 1 i3 shift_left_r [10] $end
$var wire 1 j3 shift_left_r [9] $end
$var wire 1 k3 shift_left_r [8] $end
$var wire 1 l3 shift_left_r [7] $end
$var wire 1 m3 shift_left_r [6] $end
$var wire 1 n3 shift_left_r [5] $end
$var wire 1 o3 shift_left_r [4] $end
$var wire 1 p3 shift_left_r [3] $end
$var wire 1 q3 shift_left_r [2] $end
$var wire 1 r3 shift_left_r [1] $end
$var wire 1 s3 shift_left_r [0] $end
$var wire 1 t3 rotate_left_r [15] $end
$var wire 1 u3 rotate_left_r [14] $end
$var wire 1 v3 rotate_left_r [13] $end
$var wire 1 w3 rotate_left_r [12] $end
$var wire 1 x3 rotate_left_r [11] $end
$var wire 1 y3 rotate_left_r [10] $end
$var wire 1 z3 rotate_left_r [9] $end
$var wire 1 {3 rotate_left_r [8] $end
$var wire 1 |3 rotate_left_r [7] $end
$var wire 1 }3 rotate_left_r [6] $end
$var wire 1 ~3 rotate_left_r [5] $end
$var wire 1 !4 rotate_left_r [4] $end
$var wire 1 "4 rotate_left_r [3] $end
$var wire 1 #4 rotate_left_r [2] $end
$var wire 1 $4 rotate_left_r [1] $end
$var wire 1 %4 rotate_left_r [0] $end
$var wire 1 &4 shift_right_l_r [15] $end
$var wire 1 '4 shift_right_l_r [14] $end
$var wire 1 (4 shift_right_l_r [13] $end
$var wire 1 )4 shift_right_l_r [12] $end
$var wire 1 *4 shift_right_l_r [11] $end
$var wire 1 +4 shift_right_l_r [10] $end
$var wire 1 ,4 shift_right_l_r [9] $end
$var wire 1 -4 shift_right_l_r [8] $end
$var wire 1 .4 shift_right_l_r [7] $end
$var wire 1 /4 shift_right_l_r [6] $end
$var wire 1 04 shift_right_l_r [5] $end
$var wire 1 14 shift_right_l_r [4] $end
$var wire 1 24 shift_right_l_r [3] $end
$var wire 1 34 shift_right_l_r [2] $end
$var wire 1 44 shift_right_l_r [1] $end
$var wire 1 54 shift_right_l_r [0] $end
$var wire 1 64 rotate_right_r [15] $end
$var wire 1 74 rotate_right_r [14] $end
$var wire 1 84 rotate_right_r [13] $end
$var wire 1 94 rotate_right_r [12] $end
$var wire 1 :4 rotate_right_r [11] $end
$var wire 1 ;4 rotate_right_r [10] $end
$var wire 1 <4 rotate_right_r [9] $end
$var wire 1 =4 rotate_right_r [8] $end
$var wire 1 >4 rotate_right_r [7] $end
$var wire 1 ?4 rotate_right_r [6] $end
$var wire 1 @4 rotate_right_r [5] $end
$var wire 1 A4 rotate_right_r [4] $end
$var wire 1 B4 rotate_right_r [3] $end
$var wire 1 C4 rotate_right_r [2] $end
$var wire 1 D4 rotate_right_r [1] $end
$var wire 1 E4 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 d3 result [15] $end
$var wire 1 e3 result [14] $end
$var wire 1 f3 result [13] $end
$var wire 1 g3 result [12] $end
$var wire 1 h3 result [11] $end
$var wire 1 i3 result [10] $end
$var wire 1 j3 result [9] $end
$var wire 1 k3 result [8] $end
$var wire 1 l3 result [7] $end
$var wire 1 m3 result [6] $end
$var wire 1 n3 result [5] $end
$var wire 1 o3 result [4] $end
$var wire 1 p3 result [3] $end
$var wire 1 q3 result [2] $end
$var wire 1 r3 result [1] $end
$var wire 1 s3 result [0] $end
$var wire 1 H4 temp1 [15] $end
$var wire 1 I4 temp1 [14] $end
$var wire 1 J4 temp1 [13] $end
$var wire 1 K4 temp1 [12] $end
$var wire 1 L4 temp1 [11] $end
$var wire 1 M4 temp1 [10] $end
$var wire 1 N4 temp1 [9] $end
$var wire 1 O4 temp1 [8] $end
$var wire 1 P4 temp1 [7] $end
$var wire 1 Q4 temp1 [6] $end
$var wire 1 R4 temp1 [5] $end
$var wire 1 S4 temp1 [4] $end
$var wire 1 T4 temp1 [3] $end
$var wire 1 U4 temp1 [2] $end
$var wire 1 V4 temp1 [1] $end
$var wire 1 W4 temp1 [0] $end
$var wire 1 X4 temp2 [15] $end
$var wire 1 Y4 temp2 [14] $end
$var wire 1 Z4 temp2 [13] $end
$var wire 1 [4 temp2 [12] $end
$var wire 1 \4 temp2 [11] $end
$var wire 1 ]4 temp2 [10] $end
$var wire 1 ^4 temp2 [9] $end
$var wire 1 _4 temp2 [8] $end
$var wire 1 `4 temp2 [7] $end
$var wire 1 a4 temp2 [6] $end
$var wire 1 b4 temp2 [5] $end
$var wire 1 c4 temp2 [4] $end
$var wire 1 d4 temp2 [3] $end
$var wire 1 e4 temp2 [2] $end
$var wire 1 f4 temp2 [1] $end
$var wire 1 g4 temp2 [0] $end
$var wire 1 h4 temp3 [15] $end
$var wire 1 i4 temp3 [14] $end
$var wire 1 j4 temp3 [13] $end
$var wire 1 k4 temp3 [12] $end
$var wire 1 l4 temp3 [11] $end
$var wire 1 m4 temp3 [10] $end
$var wire 1 n4 temp3 [9] $end
$var wire 1 o4 temp3 [8] $end
$var wire 1 p4 temp3 [7] $end
$var wire 1 q4 temp3 [6] $end
$var wire 1 r4 temp3 [5] $end
$var wire 1 s4 temp3 [4] $end
$var wire 1 t4 temp3 [3] $end
$var wire 1 u4 temp3 [2] $end
$var wire 1 v4 temp3 [1] $end
$var wire 1 w4 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 t3 result [15] $end
$var wire 1 u3 result [14] $end
$var wire 1 v3 result [13] $end
$var wire 1 w3 result [12] $end
$var wire 1 x3 result [11] $end
$var wire 1 y3 result [10] $end
$var wire 1 z3 result [9] $end
$var wire 1 {3 result [8] $end
$var wire 1 |3 result [7] $end
$var wire 1 }3 result [6] $end
$var wire 1 ~3 result [5] $end
$var wire 1 !4 result [4] $end
$var wire 1 "4 result [3] $end
$var wire 1 #4 result [2] $end
$var wire 1 $4 result [1] $end
$var wire 1 %4 result [0] $end
$var wire 1 z4 temp1 [15] $end
$var wire 1 {4 temp1 [14] $end
$var wire 1 |4 temp1 [13] $end
$var wire 1 }4 temp1 [12] $end
$var wire 1 ~4 temp1 [11] $end
$var wire 1 !5 temp1 [10] $end
$var wire 1 "5 temp1 [9] $end
$var wire 1 #5 temp1 [8] $end
$var wire 1 $5 temp1 [7] $end
$var wire 1 %5 temp1 [6] $end
$var wire 1 &5 temp1 [5] $end
$var wire 1 '5 temp1 [4] $end
$var wire 1 (5 temp1 [3] $end
$var wire 1 )5 temp1 [2] $end
$var wire 1 *5 temp1 [1] $end
$var wire 1 +5 temp1 [0] $end
$var wire 1 ,5 temp2 [15] $end
$var wire 1 -5 temp2 [14] $end
$var wire 1 .5 temp2 [13] $end
$var wire 1 /5 temp2 [12] $end
$var wire 1 05 temp2 [11] $end
$var wire 1 15 temp2 [10] $end
$var wire 1 25 temp2 [9] $end
$var wire 1 35 temp2 [8] $end
$var wire 1 45 temp2 [7] $end
$var wire 1 55 temp2 [6] $end
$var wire 1 65 temp2 [5] $end
$var wire 1 75 temp2 [4] $end
$var wire 1 85 temp2 [3] $end
$var wire 1 95 temp2 [2] $end
$var wire 1 :5 temp2 [1] $end
$var wire 1 ;5 temp2 [0] $end
$var wire 1 <5 temp3 [15] $end
$var wire 1 =5 temp3 [14] $end
$var wire 1 >5 temp3 [13] $end
$var wire 1 ?5 temp3 [12] $end
$var wire 1 @5 temp3 [11] $end
$var wire 1 A5 temp3 [10] $end
$var wire 1 B5 temp3 [9] $end
$var wire 1 C5 temp3 [8] $end
$var wire 1 D5 temp3 [7] $end
$var wire 1 E5 temp3 [6] $end
$var wire 1 F5 temp3 [5] $end
$var wire 1 G5 temp3 [4] $end
$var wire 1 H5 temp3 [3] $end
$var wire 1 I5 temp3 [2] $end
$var wire 1 J5 temp3 [1] $end
$var wire 1 K5 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 &4 result [15] $end
$var wire 1 '4 result [14] $end
$var wire 1 (4 result [13] $end
$var wire 1 )4 result [12] $end
$var wire 1 *4 result [11] $end
$var wire 1 +4 result [10] $end
$var wire 1 ,4 result [9] $end
$var wire 1 -4 result [8] $end
$var wire 1 .4 result [7] $end
$var wire 1 /4 result [6] $end
$var wire 1 04 result [5] $end
$var wire 1 14 result [4] $end
$var wire 1 24 result [3] $end
$var wire 1 34 result [2] $end
$var wire 1 44 result [1] $end
$var wire 1 54 result [0] $end
$var wire 1 N5 temp1 [15] $end
$var wire 1 O5 temp1 [14] $end
$var wire 1 P5 temp1 [13] $end
$var wire 1 Q5 temp1 [12] $end
$var wire 1 R5 temp1 [11] $end
$var wire 1 S5 temp1 [10] $end
$var wire 1 T5 temp1 [9] $end
$var wire 1 U5 temp1 [8] $end
$var wire 1 V5 temp1 [7] $end
$var wire 1 W5 temp1 [6] $end
$var wire 1 X5 temp1 [5] $end
$var wire 1 Y5 temp1 [4] $end
$var wire 1 Z5 temp1 [3] $end
$var wire 1 [5 temp1 [2] $end
$var wire 1 \5 temp1 [1] $end
$var wire 1 ]5 temp1 [0] $end
$var wire 1 ^5 temp2 [15] $end
$var wire 1 _5 temp2 [14] $end
$var wire 1 `5 temp2 [13] $end
$var wire 1 a5 temp2 [12] $end
$var wire 1 b5 temp2 [11] $end
$var wire 1 c5 temp2 [10] $end
$var wire 1 d5 temp2 [9] $end
$var wire 1 e5 temp2 [8] $end
$var wire 1 f5 temp2 [7] $end
$var wire 1 g5 temp2 [6] $end
$var wire 1 h5 temp2 [5] $end
$var wire 1 i5 temp2 [4] $end
$var wire 1 j5 temp2 [3] $end
$var wire 1 k5 temp2 [2] $end
$var wire 1 l5 temp2 [1] $end
$var wire 1 m5 temp2 [0] $end
$var wire 1 n5 temp3 [15] $end
$var wire 1 o5 temp3 [14] $end
$var wire 1 p5 temp3 [13] $end
$var wire 1 q5 temp3 [12] $end
$var wire 1 r5 temp3 [11] $end
$var wire 1 s5 temp3 [10] $end
$var wire 1 t5 temp3 [9] $end
$var wire 1 u5 temp3 [8] $end
$var wire 1 v5 temp3 [7] $end
$var wire 1 w5 temp3 [6] $end
$var wire 1 x5 temp3 [5] $end
$var wire 1 y5 temp3 [4] $end
$var wire 1 z5 temp3 [3] $end
$var wire 1 {5 temp3 [2] $end
$var wire 1 |5 temp3 [1] $end
$var wire 1 }5 temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 k" In [15] $end
$var wire 1 l" In [14] $end
$var wire 1 m" In [13] $end
$var wire 1 n" In [12] $end
$var wire 1 o" In [11] $end
$var wire 1 p" In [10] $end
$var wire 1 q" In [9] $end
$var wire 1 r" In [8] $end
$var wire 1 s" In [7] $end
$var wire 1 t" In [6] $end
$var wire 1 u" In [5] $end
$var wire 1 v" In [4] $end
$var wire 1 w" In [3] $end
$var wire 1 x" In [2] $end
$var wire 1 y" In [1] $end
$var wire 1 z" In [0] $end
$var wire 1 ^3 ShAmt [3] $end
$var wire 1 _3 ShAmt [2] $end
$var wire 1 `3 ShAmt [1] $end
$var wire 1 a3 ShAmt [0] $end
$var wire 1 64 result [15] $end
$var wire 1 74 result [14] $end
$var wire 1 84 result [13] $end
$var wire 1 94 result [12] $end
$var wire 1 :4 result [11] $end
$var wire 1 ;4 result [10] $end
$var wire 1 <4 result [9] $end
$var wire 1 =4 result [8] $end
$var wire 1 >4 result [7] $end
$var wire 1 ?4 result [6] $end
$var wire 1 @4 result [5] $end
$var wire 1 A4 result [4] $end
$var wire 1 B4 result [3] $end
$var wire 1 C4 result [2] $end
$var wire 1 D4 result [1] $end
$var wire 1 E4 result [0] $end
$var wire 1 "6 temp1 [15] $end
$var wire 1 #6 temp1 [14] $end
$var wire 1 $6 temp1 [13] $end
$var wire 1 %6 temp1 [12] $end
$var wire 1 &6 temp1 [11] $end
$var wire 1 '6 temp1 [10] $end
$var wire 1 (6 temp1 [9] $end
$var wire 1 )6 temp1 [8] $end
$var wire 1 *6 temp1 [7] $end
$var wire 1 +6 temp1 [6] $end
$var wire 1 ,6 temp1 [5] $end
$var wire 1 -6 temp1 [4] $end
$var wire 1 .6 temp1 [3] $end
$var wire 1 /6 temp1 [2] $end
$var wire 1 06 temp1 [1] $end
$var wire 1 16 temp1 [0] $end
$var wire 1 26 temp2 [15] $end
$var wire 1 36 temp2 [14] $end
$var wire 1 46 temp2 [13] $end
$var wire 1 56 temp2 [12] $end
$var wire 1 66 temp2 [11] $end
$var wire 1 76 temp2 [10] $end
$var wire 1 86 temp2 [9] $end
$var wire 1 96 temp2 [8] $end
$var wire 1 :6 temp2 [7] $end
$var wire 1 ;6 temp2 [6] $end
$var wire 1 <6 temp2 [5] $end
$var wire 1 =6 temp2 [4] $end
$var wire 1 >6 temp2 [3] $end
$var wire 1 ?6 temp2 [2] $end
$var wire 1 @6 temp2 [1] $end
$var wire 1 A6 temp2 [0] $end
$var wire 1 B6 temp3 [15] $end
$var wire 1 C6 temp3 [14] $end
$var wire 1 D6 temp3 [13] $end
$var wire 1 E6 temp3 [12] $end
$var wire 1 F6 temp3 [11] $end
$var wire 1 G6 temp3 [10] $end
$var wire 1 H6 temp3 [9] $end
$var wire 1 I6 temp3 [8] $end
$var wire 1 J6 temp3 [7] $end
$var wire 1 K6 temp3 [6] $end
$var wire 1 L6 temp3 [5] $end
$var wire 1 M6 temp3 [4] $end
$var wire 1 N6 temp3 [3] $end
$var wire 1 O6 temp3 [2] $end
$var wire 1 P6 temp3 [1] $end
$var wire 1 Q6 temp3 [0] $end
$upscope $end
$upscope $end

$scope module alu1 $end
$var wire 1 o1 InA [15] $end
$var wire 1 p1 InA [14] $end
$var wire 1 q1 InA [13] $end
$var wire 1 r1 InA [12] $end
$var wire 1 s1 InA [11] $end
$var wire 1 t1 InA [10] $end
$var wire 1 u1 InA [9] $end
$var wire 1 v1 InA [8] $end
$var wire 1 w1 InA [7] $end
$var wire 1 x1 InA [6] $end
$var wire 1 y1 InA [5] $end
$var wire 1 z1 InA [4] $end
$var wire 1 {1 InA [3] $end
$var wire 1 |1 InA [2] $end
$var wire 1 }1 InA [1] $end
$var wire 1 ~1 InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 T6 Cin $end
$var wire 1 b$ Oper [2] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 Z" invA $end
$var wire 1 X" invB $end
$var wire 1 U6 sign $end
$var wire 1 22 Out [15] $end
$var wire 1 32 Out [14] $end
$var wire 1 42 Out [13] $end
$var wire 1 52 Out [12] $end
$var wire 1 62 Out [11] $end
$var wire 1 72 Out [10] $end
$var wire 1 82 Out [9] $end
$var wire 1 92 Out [8] $end
$var wire 1 :2 Out [7] $end
$var wire 1 ;2 Out [6] $end
$var wire 1 <2 Out [5] $end
$var wire 1 =2 Out [4] $end
$var wire 1 >2 Out [3] $end
$var wire 1 ?2 Out [2] $end
$var wire 1 @2 Out [1] $end
$var wire 1 A2 Out [0] $end
$var wire 1 B2 signOut $end
$var wire 1 E2 Ofl $end
$var wire 1 D2 Zero $end
$var wire 1 C2 carryFlag $end
$var wire 1 V6 InA_invA [15] $end
$var wire 1 W6 InA_invA [14] $end
$var wire 1 X6 InA_invA [13] $end
$var wire 1 Y6 InA_invA [12] $end
$var wire 1 Z6 InA_invA [11] $end
$var wire 1 [6 InA_invA [10] $end
$var wire 1 \6 InA_invA [9] $end
$var wire 1 ]6 InA_invA [8] $end
$var wire 1 ^6 InA_invA [7] $end
$var wire 1 _6 InA_invA [6] $end
$var wire 1 `6 InA_invA [5] $end
$var wire 1 a6 InA_invA [4] $end
$var wire 1 b6 InA_invA [3] $end
$var wire 1 c6 InA_invA [2] $end
$var wire 1 d6 InA_invA [1] $end
$var wire 1 e6 InA_invA [0] $end
$var wire 1 f6 InB_invB [15] $end
$var wire 1 g6 InB_invB [14] $end
$var wire 1 h6 InB_invB [13] $end
$var wire 1 i6 InB_invB [12] $end
$var wire 1 j6 InB_invB [11] $end
$var wire 1 k6 InB_invB [10] $end
$var wire 1 l6 InB_invB [9] $end
$var wire 1 m6 InB_invB [8] $end
$var wire 1 n6 InB_invB [7] $end
$var wire 1 o6 InB_invB [6] $end
$var wire 1 p6 InB_invB [5] $end
$var wire 1 q6 InB_invB [4] $end
$var wire 1 r6 InB_invB [3] $end
$var wire 1 s6 InB_invB [2] $end
$var wire 1 t6 InB_invB [1] $end
$var wire 1 u6 InB_invB [0] $end
$var wire 1 v6 barrel [15] $end
$var wire 1 w6 barrel [14] $end
$var wire 1 x6 barrel [13] $end
$var wire 1 y6 barrel [12] $end
$var wire 1 z6 barrel [11] $end
$var wire 1 {6 barrel [10] $end
$var wire 1 |6 barrel [9] $end
$var wire 1 }6 barrel [8] $end
$var wire 1 ~6 barrel [7] $end
$var wire 1 !7 barrel [6] $end
$var wire 1 "7 barrel [5] $end
$var wire 1 #7 barrel [4] $end
$var wire 1 $7 barrel [3] $end
$var wire 1 %7 barrel [2] $end
$var wire 1 &7 barrel [1] $end
$var wire 1 '7 barrel [0] $end
$var wire 1 (7 logic_gates_r [15] $end
$var wire 1 )7 logic_gates_r [14] $end
$var wire 1 *7 logic_gates_r [13] $end
$var wire 1 +7 logic_gates_r [12] $end
$var wire 1 ,7 logic_gates_r [11] $end
$var wire 1 -7 logic_gates_r [10] $end
$var wire 1 .7 logic_gates_r [9] $end
$var wire 1 /7 logic_gates_r [8] $end
$var wire 1 07 logic_gates_r [7] $end
$var wire 1 17 logic_gates_r [6] $end
$var wire 1 27 logic_gates_r [5] $end
$var wire 1 37 logic_gates_r [4] $end
$var wire 1 47 logic_gates_r [3] $end
$var wire 1 57 logic_gates_r [2] $end
$var wire 1 67 logic_gates_r [1] $end
$var wire 1 77 logic_gates_r [0] $end
$var wire 1 87 addition [15] $end
$var wire 1 97 addition [14] $end
$var wire 1 :7 addition [13] $end
$var wire 1 ;7 addition [12] $end
$var wire 1 <7 addition [11] $end
$var wire 1 =7 addition [10] $end
$var wire 1 >7 addition [9] $end
$var wire 1 ?7 addition [8] $end
$var wire 1 @7 addition [7] $end
$var wire 1 A7 addition [6] $end
$var wire 1 B7 addition [5] $end
$var wire 1 C7 addition [4] $end
$var wire 1 D7 addition [3] $end
$var wire 1 E7 addition [2] $end
$var wire 1 F7 addition [1] $end
$var wire 1 G7 addition [0] $end
$var wire 1 H7 addition_logic [15] $end
$var wire 1 I7 addition_logic [14] $end
$var wire 1 J7 addition_logic [13] $end
$var wire 1 K7 addition_logic [12] $end
$var wire 1 L7 addition_logic [11] $end
$var wire 1 M7 addition_logic [10] $end
$var wire 1 N7 addition_logic [9] $end
$var wire 1 O7 addition_logic [8] $end
$var wire 1 P7 addition_logic [7] $end
$var wire 1 Q7 addition_logic [6] $end
$var wire 1 R7 addition_logic [5] $end
$var wire 1 S7 addition_logic [4] $end
$var wire 1 T7 addition_logic [3] $end
$var wire 1 U7 addition_logic [2] $end
$var wire 1 V7 addition_logic [1] $end
$var wire 1 W7 addition_logic [0] $end
$var wire 1 X7 carry $end
$var wire 1 Y7 signed_over $end
$var wire 1 Z7 less $end

$scope module shift $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 v6 Out [15] $end
$var wire 1 w6 Out [14] $end
$var wire 1 x6 Out [13] $end
$var wire 1 y6 Out [12] $end
$var wire 1 z6 Out [11] $end
$var wire 1 {6 Out [10] $end
$var wire 1 |6 Out [9] $end
$var wire 1 }6 Out [8] $end
$var wire 1 ~6 Out [7] $end
$var wire 1 !7 Out [6] $end
$var wire 1 "7 Out [5] $end
$var wire 1 #7 Out [4] $end
$var wire 1 $7 Out [3] $end
$var wire 1 %7 Out [2] $end
$var wire 1 &7 Out [1] $end
$var wire 1 '7 Out [0] $end
$var wire 1 ^7 shift_left_r [15] $end
$var wire 1 _7 shift_left_r [14] $end
$var wire 1 `7 shift_left_r [13] $end
$var wire 1 a7 shift_left_r [12] $end
$var wire 1 b7 shift_left_r [11] $end
$var wire 1 c7 shift_left_r [10] $end
$var wire 1 d7 shift_left_r [9] $end
$var wire 1 e7 shift_left_r [8] $end
$var wire 1 f7 shift_left_r [7] $end
$var wire 1 g7 shift_left_r [6] $end
$var wire 1 h7 shift_left_r [5] $end
$var wire 1 i7 shift_left_r [4] $end
$var wire 1 j7 shift_left_r [3] $end
$var wire 1 k7 shift_left_r [2] $end
$var wire 1 l7 shift_left_r [1] $end
$var wire 1 m7 shift_left_r [0] $end
$var wire 1 n7 rotate_left_r [15] $end
$var wire 1 o7 rotate_left_r [14] $end
$var wire 1 p7 rotate_left_r [13] $end
$var wire 1 q7 rotate_left_r [12] $end
$var wire 1 r7 rotate_left_r [11] $end
$var wire 1 s7 rotate_left_r [10] $end
$var wire 1 t7 rotate_left_r [9] $end
$var wire 1 u7 rotate_left_r [8] $end
$var wire 1 v7 rotate_left_r [7] $end
$var wire 1 w7 rotate_left_r [6] $end
$var wire 1 x7 rotate_left_r [5] $end
$var wire 1 y7 rotate_left_r [4] $end
$var wire 1 z7 rotate_left_r [3] $end
$var wire 1 {7 rotate_left_r [2] $end
$var wire 1 |7 rotate_left_r [1] $end
$var wire 1 }7 rotate_left_r [0] $end
$var wire 1 ~7 shift_right_l_r [15] $end
$var wire 1 !8 shift_right_l_r [14] $end
$var wire 1 "8 shift_right_l_r [13] $end
$var wire 1 #8 shift_right_l_r [12] $end
$var wire 1 $8 shift_right_l_r [11] $end
$var wire 1 %8 shift_right_l_r [10] $end
$var wire 1 &8 shift_right_l_r [9] $end
$var wire 1 '8 shift_right_l_r [8] $end
$var wire 1 (8 shift_right_l_r [7] $end
$var wire 1 )8 shift_right_l_r [6] $end
$var wire 1 *8 shift_right_l_r [5] $end
$var wire 1 +8 shift_right_l_r [4] $end
$var wire 1 ,8 shift_right_l_r [3] $end
$var wire 1 -8 shift_right_l_r [2] $end
$var wire 1 .8 shift_right_l_r [1] $end
$var wire 1 /8 shift_right_l_r [0] $end
$var wire 1 08 rotate_right_r [15] $end
$var wire 1 18 rotate_right_r [14] $end
$var wire 1 28 rotate_right_r [13] $end
$var wire 1 38 rotate_right_r [12] $end
$var wire 1 48 rotate_right_r [11] $end
$var wire 1 58 rotate_right_r [10] $end
$var wire 1 68 rotate_right_r [9] $end
$var wire 1 78 rotate_right_r [8] $end
$var wire 1 88 rotate_right_r [7] $end
$var wire 1 98 rotate_right_r [6] $end
$var wire 1 :8 rotate_right_r [5] $end
$var wire 1 ;8 rotate_right_r [4] $end
$var wire 1 <8 rotate_right_r [3] $end
$var wire 1 =8 rotate_right_r [2] $end
$var wire 1 >8 rotate_right_r [1] $end
$var wire 1 ?8 rotate_right_r [0] $end

$scope module sleft $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 ^7 result [15] $end
$var wire 1 _7 result [14] $end
$var wire 1 `7 result [13] $end
$var wire 1 a7 result [12] $end
$var wire 1 b7 result [11] $end
$var wire 1 c7 result [10] $end
$var wire 1 d7 result [9] $end
$var wire 1 e7 result [8] $end
$var wire 1 f7 result [7] $end
$var wire 1 g7 result [6] $end
$var wire 1 h7 result [5] $end
$var wire 1 i7 result [4] $end
$var wire 1 j7 result [3] $end
$var wire 1 k7 result [2] $end
$var wire 1 l7 result [1] $end
$var wire 1 m7 result [0] $end
$var wire 1 B8 temp1 [15] $end
$var wire 1 C8 temp1 [14] $end
$var wire 1 D8 temp1 [13] $end
$var wire 1 E8 temp1 [12] $end
$var wire 1 F8 temp1 [11] $end
$var wire 1 G8 temp1 [10] $end
$var wire 1 H8 temp1 [9] $end
$var wire 1 I8 temp1 [8] $end
$var wire 1 J8 temp1 [7] $end
$var wire 1 K8 temp1 [6] $end
$var wire 1 L8 temp1 [5] $end
$var wire 1 M8 temp1 [4] $end
$var wire 1 N8 temp1 [3] $end
$var wire 1 O8 temp1 [2] $end
$var wire 1 P8 temp1 [1] $end
$var wire 1 Q8 temp1 [0] $end
$var wire 1 R8 temp2 [15] $end
$var wire 1 S8 temp2 [14] $end
$var wire 1 T8 temp2 [13] $end
$var wire 1 U8 temp2 [12] $end
$var wire 1 V8 temp2 [11] $end
$var wire 1 W8 temp2 [10] $end
$var wire 1 X8 temp2 [9] $end
$var wire 1 Y8 temp2 [8] $end
$var wire 1 Z8 temp2 [7] $end
$var wire 1 [8 temp2 [6] $end
$var wire 1 \8 temp2 [5] $end
$var wire 1 ]8 temp2 [4] $end
$var wire 1 ^8 temp2 [3] $end
$var wire 1 _8 temp2 [2] $end
$var wire 1 `8 temp2 [1] $end
$var wire 1 a8 temp2 [0] $end
$var wire 1 b8 temp3 [15] $end
$var wire 1 c8 temp3 [14] $end
$var wire 1 d8 temp3 [13] $end
$var wire 1 e8 temp3 [12] $end
$var wire 1 f8 temp3 [11] $end
$var wire 1 g8 temp3 [10] $end
$var wire 1 h8 temp3 [9] $end
$var wire 1 i8 temp3 [8] $end
$var wire 1 j8 temp3 [7] $end
$var wire 1 k8 temp3 [6] $end
$var wire 1 l8 temp3 [5] $end
$var wire 1 m8 temp3 [4] $end
$var wire 1 n8 temp3 [3] $end
$var wire 1 o8 temp3 [2] $end
$var wire 1 p8 temp3 [1] $end
$var wire 1 q8 temp3 [0] $end
$upscope $end

$scope module rleft $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 n7 result [15] $end
$var wire 1 o7 result [14] $end
$var wire 1 p7 result [13] $end
$var wire 1 q7 result [12] $end
$var wire 1 r7 result [11] $end
$var wire 1 s7 result [10] $end
$var wire 1 t7 result [9] $end
$var wire 1 u7 result [8] $end
$var wire 1 v7 result [7] $end
$var wire 1 w7 result [6] $end
$var wire 1 x7 result [5] $end
$var wire 1 y7 result [4] $end
$var wire 1 z7 result [3] $end
$var wire 1 {7 result [2] $end
$var wire 1 |7 result [1] $end
$var wire 1 }7 result [0] $end
$var wire 1 t8 temp1 [15] $end
$var wire 1 u8 temp1 [14] $end
$var wire 1 v8 temp1 [13] $end
$var wire 1 w8 temp1 [12] $end
$var wire 1 x8 temp1 [11] $end
$var wire 1 y8 temp1 [10] $end
$var wire 1 z8 temp1 [9] $end
$var wire 1 {8 temp1 [8] $end
$var wire 1 |8 temp1 [7] $end
$var wire 1 }8 temp1 [6] $end
$var wire 1 ~8 temp1 [5] $end
$var wire 1 !9 temp1 [4] $end
$var wire 1 "9 temp1 [3] $end
$var wire 1 #9 temp1 [2] $end
$var wire 1 $9 temp1 [1] $end
$var wire 1 %9 temp1 [0] $end
$var wire 1 &9 temp2 [15] $end
$var wire 1 '9 temp2 [14] $end
$var wire 1 (9 temp2 [13] $end
$var wire 1 )9 temp2 [12] $end
$var wire 1 *9 temp2 [11] $end
$var wire 1 +9 temp2 [10] $end
$var wire 1 ,9 temp2 [9] $end
$var wire 1 -9 temp2 [8] $end
$var wire 1 .9 temp2 [7] $end
$var wire 1 /9 temp2 [6] $end
$var wire 1 09 temp2 [5] $end
$var wire 1 19 temp2 [4] $end
$var wire 1 29 temp2 [3] $end
$var wire 1 39 temp2 [2] $end
$var wire 1 49 temp2 [1] $end
$var wire 1 59 temp2 [0] $end
$var wire 1 69 temp3 [15] $end
$var wire 1 79 temp3 [14] $end
$var wire 1 89 temp3 [13] $end
$var wire 1 99 temp3 [12] $end
$var wire 1 :9 temp3 [11] $end
$var wire 1 ;9 temp3 [10] $end
$var wire 1 <9 temp3 [9] $end
$var wire 1 =9 temp3 [8] $end
$var wire 1 >9 temp3 [7] $end
$var wire 1 ?9 temp3 [6] $end
$var wire 1 @9 temp3 [5] $end
$var wire 1 A9 temp3 [4] $end
$var wire 1 B9 temp3 [3] $end
$var wire 1 C9 temp3 [2] $end
$var wire 1 D9 temp3 [1] $end
$var wire 1 E9 temp3 [0] $end
$upscope $end

$scope module srl $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 ~7 result [15] $end
$var wire 1 !8 result [14] $end
$var wire 1 "8 result [13] $end
$var wire 1 #8 result [12] $end
$var wire 1 $8 result [11] $end
$var wire 1 %8 result [10] $end
$var wire 1 &8 result [9] $end
$var wire 1 '8 result [8] $end
$var wire 1 (8 result [7] $end
$var wire 1 )8 result [6] $end
$var wire 1 *8 result [5] $end
$var wire 1 +8 result [4] $end
$var wire 1 ,8 result [3] $end
$var wire 1 -8 result [2] $end
$var wire 1 .8 result [1] $end
$var wire 1 /8 result [0] $end
$var wire 1 H9 temp1 [15] $end
$var wire 1 I9 temp1 [14] $end
$var wire 1 J9 temp1 [13] $end
$var wire 1 K9 temp1 [12] $end
$var wire 1 L9 temp1 [11] $end
$var wire 1 M9 temp1 [10] $end
$var wire 1 N9 temp1 [9] $end
$var wire 1 O9 temp1 [8] $end
$var wire 1 P9 temp1 [7] $end
$var wire 1 Q9 temp1 [6] $end
$var wire 1 R9 temp1 [5] $end
$var wire 1 S9 temp1 [4] $end
$var wire 1 T9 temp1 [3] $end
$var wire 1 U9 temp1 [2] $end
$var wire 1 V9 temp1 [1] $end
$var wire 1 W9 temp1 [0] $end
$var wire 1 X9 temp2 [15] $end
$var wire 1 Y9 temp2 [14] $end
$var wire 1 Z9 temp2 [13] $end
$var wire 1 [9 temp2 [12] $end
$var wire 1 \9 temp2 [11] $end
$var wire 1 ]9 temp2 [10] $end
$var wire 1 ^9 temp2 [9] $end
$var wire 1 _9 temp2 [8] $end
$var wire 1 `9 temp2 [7] $end
$var wire 1 a9 temp2 [6] $end
$var wire 1 b9 temp2 [5] $end
$var wire 1 c9 temp2 [4] $end
$var wire 1 d9 temp2 [3] $end
$var wire 1 e9 temp2 [2] $end
$var wire 1 f9 temp2 [1] $end
$var wire 1 g9 temp2 [0] $end
$var wire 1 h9 temp3 [15] $end
$var wire 1 i9 temp3 [14] $end
$var wire 1 j9 temp3 [13] $end
$var wire 1 k9 temp3 [12] $end
$var wire 1 l9 temp3 [11] $end
$var wire 1 m9 temp3 [10] $end
$var wire 1 n9 temp3 [9] $end
$var wire 1 o9 temp3 [8] $end
$var wire 1 p9 temp3 [7] $end
$var wire 1 q9 temp3 [6] $end
$var wire 1 r9 temp3 [5] $end
$var wire 1 s9 temp3 [4] $end
$var wire 1 t9 temp3 [3] $end
$var wire 1 u9 temp3 [2] $end
$var wire 1 v9 temp3 [1] $end
$var wire 1 w9 temp3 [0] $end
$upscope $end

$scope module rright $end
$var wire 1 V6 In [15] $end
$var wire 1 W6 In [14] $end
$var wire 1 X6 In [13] $end
$var wire 1 Y6 In [12] $end
$var wire 1 Z6 In [11] $end
$var wire 1 [6 In [10] $end
$var wire 1 \6 In [9] $end
$var wire 1 ]6 In [8] $end
$var wire 1 ^6 In [7] $end
$var wire 1 _6 In [6] $end
$var wire 1 `6 In [5] $end
$var wire 1 a6 In [4] $end
$var wire 1 b6 In [3] $end
$var wire 1 c6 In [2] $end
$var wire 1 d6 In [1] $end
$var wire 1 e6 In [0] $end
$var wire 1 r6 ShAmt [3] $end
$var wire 1 s6 ShAmt [2] $end
$var wire 1 t6 ShAmt [1] $end
$var wire 1 u6 ShAmt [0] $end
$var wire 1 08 result [15] $end
$var wire 1 18 result [14] $end
$var wire 1 28 result [13] $end
$var wire 1 38 result [12] $end
$var wire 1 48 result [11] $end
$var wire 1 58 result [10] $end
$var wire 1 68 result [9] $end
$var wire 1 78 result [8] $end
$var wire 1 88 result [7] $end
$var wire 1 98 result [6] $end
$var wire 1 :8 result [5] $end
$var wire 1 ;8 result [4] $end
$var wire 1 <8 result [3] $end
$var wire 1 =8 result [2] $end
$var wire 1 >8 result [1] $end
$var wire 1 ?8 result [0] $end
$var wire 1 z9 temp1 [15] $end
$var wire 1 {9 temp1 [14] $end
$var wire 1 |9 temp1 [13] $end
$var wire 1 }9 temp1 [12] $end
$var wire 1 ~9 temp1 [11] $end
$var wire 1 !: temp1 [10] $end
$var wire 1 ": temp1 [9] $end
$var wire 1 #: temp1 [8] $end
$var wire 1 $: temp1 [7] $end
$var wire 1 %: temp1 [6] $end
$var wire 1 &: temp1 [5] $end
$var wire 1 ': temp1 [4] $end
$var wire 1 (: temp1 [3] $end
$var wire 1 ): temp1 [2] $end
$var wire 1 *: temp1 [1] $end
$var wire 1 +: temp1 [0] $end
$var wire 1 ,: temp2 [15] $end
$var wire 1 -: temp2 [14] $end
$var wire 1 .: temp2 [13] $end
$var wire 1 /: temp2 [12] $end
$var wire 1 0: temp2 [11] $end
$var wire 1 1: temp2 [10] $end
$var wire 1 2: temp2 [9] $end
$var wire 1 3: temp2 [8] $end
$var wire 1 4: temp2 [7] $end
$var wire 1 5: temp2 [6] $end
$var wire 1 6: temp2 [5] $end
$var wire 1 7: temp2 [4] $end
$var wire 1 8: temp2 [3] $end
$var wire 1 9: temp2 [2] $end
$var wire 1 :: temp2 [1] $end
$var wire 1 ;: temp2 [0] $end
$var wire 1 <: temp3 [15] $end
$var wire 1 =: temp3 [14] $end
$var wire 1 >: temp3 [13] $end
$var wire 1 ?: temp3 [12] $end
$var wire 1 @: temp3 [11] $end
$var wire 1 A: temp3 [10] $end
$var wire 1 B: temp3 [9] $end
$var wire 1 C: temp3 [8] $end
$var wire 1 D: temp3 [7] $end
$var wire 1 E: temp3 [6] $end
$var wire 1 F: temp3 [5] $end
$var wire 1 G: temp3 [4] $end
$var wire 1 H: temp3 [3] $end
$var wire 1 I: temp3 [2] $end
$var wire 1 J: temp3 [1] $end
$var wire 1 K: temp3 [0] $end
$upscope $end
$upscope $end

$scope module logic_gates $end
$var wire 1 V6 A [15] $end
$var wire 1 W6 A [14] $end
$var wire 1 X6 A [13] $end
$var wire 1 Y6 A [12] $end
$var wire 1 Z6 A [11] $end
$var wire 1 [6 A [10] $end
$var wire 1 \6 A [9] $end
$var wire 1 ]6 A [8] $end
$var wire 1 ^6 A [7] $end
$var wire 1 _6 A [6] $end
$var wire 1 `6 A [5] $end
$var wire 1 a6 A [4] $end
$var wire 1 b6 A [3] $end
$var wire 1 c6 A [2] $end
$var wire 1 d6 A [1] $end
$var wire 1 e6 A [0] $end
$var wire 1 f6 B [15] $end
$var wire 1 g6 B [14] $end
$var wire 1 h6 B [13] $end
$var wire 1 i6 B [12] $end
$var wire 1 j6 B [11] $end
$var wire 1 k6 B [10] $end
$var wire 1 l6 B [9] $end
$var wire 1 m6 B [8] $end
$var wire 1 n6 B [7] $end
$var wire 1 o6 B [6] $end
$var wire 1 p6 B [5] $end
$var wire 1 q6 B [4] $end
$var wire 1 r6 B [3] $end
$var wire 1 s6 B [2] $end
$var wire 1 t6 B [1] $end
$var wire 1 u6 B [0] $end
$var wire 1 c$ Oper [1] $end
$var wire 1 d$ Oper [0] $end
$var wire 1 (7 Result [15] $end
$var wire 1 )7 Result [14] $end
$var wire 1 *7 Result [13] $end
$var wire 1 +7 Result [12] $end
$var wire 1 ,7 Result [11] $end
$var wire 1 -7 Result [10] $end
$var wire 1 .7 Result [9] $end
$var wire 1 /7 Result [8] $end
$var wire 1 07 Result [7] $end
$var wire 1 17 Result [6] $end
$var wire 1 27 Result [5] $end
$var wire 1 37 Result [4] $end
$var wire 1 47 Result [3] $end
$var wire 1 57 Result [2] $end
$var wire 1 67 Result [1] $end
$var wire 1 77 Result [0] $end
$upscope $end

$scope module adding $end
$var wire 1 87 sum [15] $end
$var wire 1 97 sum [14] $end
$var wire 1 :7 sum [13] $end
$var wire 1 ;7 sum [12] $end
$var wire 1 <7 sum [11] $end
$var wire 1 =7 sum [10] $end
$var wire 1 >7 sum [9] $end
$var wire 1 ?7 sum [8] $end
$var wire 1 @7 sum [7] $end
$var wire 1 A7 sum [6] $end
$var wire 1 B7 sum [5] $end
$var wire 1 C7 sum [4] $end
$var wire 1 D7 sum [3] $end
$var wire 1 E7 sum [2] $end
$var wire 1 F7 sum [1] $end
$var wire 1 G7 sum [0] $end
$var wire 1 X7 c_out $end
$var wire 1 V6 a [15] $end
$var wire 1 W6 a [14] $end
$var wire 1 X6 a [13] $end
$var wire 1 Y6 a [12] $end
$var wire 1 Z6 a [11] $end
$var wire 1 [6 a [10] $end
$var wire 1 \6 a [9] $end
$var wire 1 ]6 a [8] $end
$var wire 1 ^6 a [7] $end
$var wire 1 _6 a [6] $end
$var wire 1 `6 a [5] $end
$var wire 1 a6 a [4] $end
$var wire 1 b6 a [3] $end
$var wire 1 c6 a [2] $end
$var wire 1 d6 a [1] $end
$var wire 1 e6 a [0] $end
$var wire 1 f6 b [15] $end
$var wire 1 g6 b [14] $end
$var wire 1 h6 b [13] $end
$var wire 1 i6 b [12] $end
$var wire 1 j6 b [11] $end
$var wire 1 k6 b [10] $end
$var wire 1 l6 b [9] $end
$var wire 1 m6 b [8] $end
$var wire 1 n6 b [7] $end
$var wire 1 o6 b [6] $end
$var wire 1 p6 b [5] $end
$var wire 1 q6 b [4] $end
$var wire 1 r6 b [3] $end
$var wire 1 s6 b [2] $end
$var wire 1 t6 b [1] $end
$var wire 1 u6 b [0] $end
$var wire 1 T6 c_in $end
$var wire 1 O: gen [15] $end
$var wire 1 P: gen [14] $end
$var wire 1 Q: gen [13] $end
$var wire 1 R: gen [12] $end
$var wire 1 S: gen [11] $end
$var wire 1 T: gen [10] $end
$var wire 1 U: gen [9] $end
$var wire 1 V: gen [8] $end
$var wire 1 W: gen [7] $end
$var wire 1 X: gen [6] $end
$var wire 1 Y: gen [5] $end
$var wire 1 Z: gen [4] $end
$var wire 1 [: gen [3] $end
$var wire 1 \: gen [2] $end
$var wire 1 ]: gen [1] $end
$var wire 1 ^: gen [0] $end
$var wire 1 _: four_gen [3] $end
$var wire 1 `: four_gen [2] $end
$var wire 1 a: four_gen [1] $end
$var wire 1 b: four_gen [0] $end
$var wire 1 c: prop [15] $end
$var wire 1 d: prop [14] $end
$var wire 1 e: prop [13] $end
$var wire 1 f: prop [12] $end
$var wire 1 g: prop [11] $end
$var wire 1 h: prop [10] $end
$var wire 1 i: prop [9] $end
$var wire 1 j: prop [8] $end
$var wire 1 k: prop [7] $end
$var wire 1 l: prop [6] $end
$var wire 1 m: prop [5] $end
$var wire 1 n: prop [4] $end
$var wire 1 o: prop [3] $end
$var wire 1 p: prop [2] $end
$var wire 1 q: prop [1] $end
$var wire 1 r: prop [0] $end
$var wire 1 s: four_prop [3] $end
$var wire 1 t: four_prop [2] $end
$var wire 1 u: four_prop [1] $end
$var wire 1 v: four_prop [0] $end
$var wire 1 w: carry [2] $end
$var wire 1 x: carry [1] $end
$var wire 1 y: carry [0] $end
$var wire 1 z: fa_sum [15] $end
$var wire 1 {: fa_sum [14] $end
$var wire 1 |: fa_sum [13] $end
$var wire 1 }: fa_sum [12] $end
$var wire 1 ~: fa_sum [11] $end
$var wire 1 !; fa_sum [10] $end
$var wire 1 "; fa_sum [9] $end
$var wire 1 #; fa_sum [8] $end
$var wire 1 $; fa_sum [7] $end
$var wire 1 %; fa_sum [6] $end
$var wire 1 &; fa_sum [5] $end
$var wire 1 '; fa_sum [4] $end
$var wire 1 (; fa_sum [3] $end
$var wire 1 ); fa_sum [2] $end
$var wire 1 *; fa_sum [1] $end
$var wire 1 +; fa_sum [0] $end

$scope module cla1 $end
$var wire 1 (; sum [3] $end
$var wire 1 ); sum [2] $end
$var wire 1 *; sum [1] $end
$var wire 1 +; sum [0] $end
$var wire 1 -; c_out $end
$var wire 1 b6 a [3] $end
$var wire 1 c6 a [2] $end
$var wire 1 d6 a [1] $end
$var wire 1 e6 a [0] $end
$var wire 1 r6 b [3] $end
$var wire 1 s6 b [2] $end
$var wire 1 t6 b [1] $end
$var wire 1 u6 b [0] $end
$var wire 1 T6 c_in $end
$var wire 1 .; gen [3] $end
$var wire 1 /; gen [2] $end
$var wire 1 0; gen [1] $end
$var wire 1 1; gen [0] $end
$var wire 1 2; prop [3] $end
$var wire 1 3; prop [2] $end
$var wire 1 4; prop [1] $end
$var wire 1 5; prop [0] $end
$var wire 1 6; carry [2] $end
$var wire 1 7; carry [1] $end
$var wire 1 8; carry [0] $end
$var wire 1 9; fa_sum [3] $end
$var wire 1 :; fa_sum [2] $end
$var wire 1 ;; fa_sum [1] $end
$var wire 1 <; fa_sum [0] $end

$scope module fa1 $end
$var wire 1 <; s $end
$var wire 1 =; c_out $end
$var wire 1 e6 a $end
$var wire 1 u6 b $end
$var wire 1 T6 c_in $end
$var wire 1 >; xor_AB $end
$var wire 1 ?; xor_ABCin $end
$var wire 1 @; NAND_AB $end
$var wire 1 A; not_NAND_AB $end
$var wire 1 B; NAND_Cin_xor_AB $end
$var wire 1 C; not_NAND_Cin_xor_AB $end
$var wire 1 D; NOR_2NAND $end
$var wire 1 E; not_NOR_2NAND $end
$var wire 1 F; Cin $end

$scope module xor1 $end
$var wire 1 e6 in1 $end
$var wire 1 u6 in2 $end
$var wire 1 >; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 >; in1 $end
$var wire 1 T6 in2 $end
$var wire 1 ?; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 e6 in1 $end
$var wire 1 u6 in2 $end
$var wire 1 @; out $end
$upscope $end

$scope module not1 $end
$var wire 1 @; in1 $end
$var wire 1 A; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 F; in1 $end
$var wire 1 >; in2 $end
$var wire 1 B; out $end
$upscope $end

$scope module not2 $end
$var wire 1 B; in1 $end
$var wire 1 C; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 A; in1 $end
$var wire 1 C; in2 $end
$var wire 1 D; out $end
$upscope $end

$scope module not3 $end
$var wire 1 D; in1 $end
$var wire 1 E; out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 ;; s $end
$var wire 1 G; c_out $end
$var wire 1 d6 a $end
$var wire 1 t6 b $end
$var wire 1 8; c_in $end
$var wire 1 H; xor_AB $end
$var wire 1 I; xor_ABCin $end
$var wire 1 J; NAND_AB $end
$var wire 1 K; not_NAND_AB $end
$var wire 1 L; NAND_Cin_xor_AB $end
$var wire 1 M; not_NAND_Cin_xor_AB $end
$var wire 1 N; NOR_2NAND $end
$var wire 1 O; not_NOR_2NAND $end
$var wire 1 P; Cin $end

$scope module xor1 $end
$var wire 1 d6 in1 $end
$var wire 1 t6 in2 $end
$var wire 1 H; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 H; in1 $end
$var wire 1 8; in2 $end
$var wire 1 I; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 d6 in1 $end
$var wire 1 t6 in2 $end
$var wire 1 J; out $end
$upscope $end

$scope module not1 $end
$var wire 1 J; in1 $end
$var wire 1 K; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 P; in1 $end
$var wire 1 H; in2 $end
$var wire 1 L; out $end
$upscope $end

$scope module not2 $end
$var wire 1 L; in1 $end
$var wire 1 M; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 K; in1 $end
$var wire 1 M; in2 $end
$var wire 1 N; out $end
$upscope $end

$scope module not3 $end
$var wire 1 N; in1 $end
$var wire 1 O; out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 :; s $end
$var wire 1 Q; c_out $end
$var wire 1 c6 a $end
$var wire 1 s6 b $end
$var wire 1 7; c_in $end
$var wire 1 R; xor_AB $end
$var wire 1 S; xor_ABCin $end
$var wire 1 T; NAND_AB $end
$var wire 1 U; not_NAND_AB $end
$var wire 1 V; NAND_Cin_xor_AB $end
$var wire 1 W; not_NAND_Cin_xor_AB $end
$var wire 1 X; NOR_2NAND $end
$var wire 1 Y; not_NOR_2NAND $end
$var wire 1 Z; Cin $end

$scope module xor1 $end
$var wire 1 c6 in1 $end
$var wire 1 s6 in2 $end
$var wire 1 R; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 R; in1 $end
$var wire 1 7; in2 $end
$var wire 1 S; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 c6 in1 $end
$var wire 1 s6 in2 $end
$var wire 1 T; out $end
$upscope $end

$scope module not1 $end
$var wire 1 T; in1 $end
$var wire 1 U; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z; in1 $end
$var wire 1 R; in2 $end
$var wire 1 V; out $end
$upscope $end

$scope module not2 $end
$var wire 1 V; in1 $end
$var wire 1 W; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 U; in1 $end
$var wire 1 W; in2 $end
$var wire 1 X; out $end
$upscope $end

$scope module not3 $end
$var wire 1 X; in1 $end
$var wire 1 Y; out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 9; s $end
$var wire 1 [; c_out $end
$var wire 1 b6 a $end
$var wire 1 r6 b $end
$var wire 1 6; c_in $end
$var wire 1 \; xor_AB $end
$var wire 1 ]; xor_ABCin $end
$var wire 1 ^; NAND_AB $end
$var wire 1 _; not_NAND_AB $end
$var wire 1 `; NAND_Cin_xor_AB $end
$var wire 1 a; not_NAND_Cin_xor_AB $end
$var wire 1 b; NOR_2NAND $end
$var wire 1 c; not_NOR_2NAND $end
$var wire 1 d; Cin $end

$scope module xor1 $end
$var wire 1 b6 in1 $end
$var wire 1 r6 in2 $end
$var wire 1 \; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 \; in1 $end
$var wire 1 6; in2 $end
$var wire 1 ]; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 b6 in1 $end
$var wire 1 r6 in2 $end
$var wire 1 ^; out $end
$upscope $end

$scope module not1 $end
$var wire 1 ^; in1 $end
$var wire 1 _; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 d; in1 $end
$var wire 1 \; in2 $end
$var wire 1 `; out $end
$upscope $end

$scope module not2 $end
$var wire 1 `; in1 $end
$var wire 1 a; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 _; in1 $end
$var wire 1 a; in2 $end
$var wire 1 b; out $end
$upscope $end

$scope module not3 $end
$var wire 1 b; in1 $end
$var wire 1 c; out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla2 $end
$var wire 1 $; sum [3] $end
$var wire 1 %; sum [2] $end
$var wire 1 &; sum [1] $end
$var wire 1 '; sum [0] $end
$var wire 1 f; c_out $end
$var wire 1 ^6 a [3] $end
$var wire 1 _6 a [2] $end
$var wire 1 `6 a [1] $end
$var wire 1 a6 a [0] $end
$var wire 1 n6 b [3] $end
$var wire 1 o6 b [2] $end
$var wire 1 p6 b [1] $end
$var wire 1 q6 b [0] $end
$var wire 1 y: c_in $end
$var wire 1 g; gen [3] $end
$var wire 1 h; gen [2] $end
$var wire 1 i; gen [1] $end
$var wire 1 j; gen [0] $end
$var wire 1 k; prop [3] $end
$var wire 1 l; prop [2] $end
$var wire 1 m; prop [1] $end
$var wire 1 n; prop [0] $end
$var wire 1 o; carry [2] $end
$var wire 1 p; carry [1] $end
$var wire 1 q; carry [0] $end
$var wire 1 r; fa_sum [3] $end
$var wire 1 s; fa_sum [2] $end
$var wire 1 t; fa_sum [1] $end
$var wire 1 u; fa_sum [0] $end

$scope module fa1 $end
$var wire 1 u; s $end
$var wire 1 v; c_out $end
$var wire 1 a6 a $end
$var wire 1 q6 b $end
$var wire 1 y: c_in $end
$var wire 1 w; xor_AB $end
$var wire 1 x; xor_ABCin $end
$var wire 1 y; NAND_AB $end
$var wire 1 z; not_NAND_AB $end
$var wire 1 {; NAND_Cin_xor_AB $end
$var wire 1 |; not_NAND_Cin_xor_AB $end
$var wire 1 }; NOR_2NAND $end
$var wire 1 ~; not_NOR_2NAND $end
$var wire 1 !< Cin $end

$scope module xor1 $end
$var wire 1 a6 in1 $end
$var wire 1 q6 in2 $end
$var wire 1 w; out $end
$upscope $end

$scope module xor2 $end
$var wire 1 w; in1 $end
$var wire 1 y: in2 $end
$var wire 1 x; out $end
$upscope $end

$scope module nand1 $end
$var wire 1 a6 in1 $end
$var wire 1 q6 in2 $end
$var wire 1 y; out $end
$upscope $end

$scope module not1 $end
$var wire 1 y; in1 $end
$var wire 1 z; out $end
$upscope $end

$scope module nand2 $end
$var wire 1 !< in1 $end
$var wire 1 w; in2 $end
$var wire 1 {; out $end
$upscope $end

$scope module not2 $end
$var wire 1 {; in1 $end
$var wire 1 |; out $end
$upscope $end

$scope module nor1 $end
$var wire 1 z; in1 $end
$var wire 1 |; in2 $end
$var wire 1 }; out $end
$upscope $end

$scope module not3 $end
$var wire 1 }; in1 $end
$var wire 1 ~; out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 t; s $end
$var wire 1 "< c_out $end
$var wire 1 `6 a $end
$var wire 1 p6 b $end
$var wire 1 q; c_in $end
$var wire 1 #< xor_AB $end
$var wire 1 $< xor_ABCin $end
$var wire 1 %< NAND_AB $end
$var wire 1 &< not_NAND_AB $end
$var wire 1 '< NAND_Cin_xor_AB $end
$var wire 1 (< not_NAND_Cin_xor_AB $end
$var wire 1 )< NOR_2NAND $end
$var wire 1 *< not_NOR_2NAND $end
$var wire 1 +< Cin $end

$scope module xor1 $end
$var wire 1 `6 in1 $end
$var wire 1 p6 in2 $end
$var wire 1 #< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 #< in1 $end
$var wire 1 q; in2 $end
$var wire 1 $< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 `6 in1 $end
$var wire 1 p6 in2 $end
$var wire 1 %< out $end
$upscope $end

$scope module not1 $end
$var wire 1 %< in1 $end
$var wire 1 &< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 +< in1 $end
$var wire 1 #< in2 $end
$var wire 1 '< out $end
$upscope $end

$scope module not2 $end
$var wire 1 '< in1 $end
$var wire 1 (< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 &< in1 $end
$var wire 1 (< in2 $end
$var wire 1 )< out $end
$upscope $end

$scope module not3 $end
$var wire 1 )< in1 $end
$var wire 1 *< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 s; s $end
$var wire 1 ,< c_out $end
$var wire 1 _6 a $end
$var wire 1 o6 b $end
$var wire 1 p; c_in $end
$var wire 1 -< xor_AB $end
$var wire 1 .< xor_ABCin $end
$var wire 1 /< NAND_AB $end
$var wire 1 0< not_NAND_AB $end
$var wire 1 1< NAND_Cin_xor_AB $end
$var wire 1 2< not_NAND_Cin_xor_AB $end
$var wire 1 3< NOR_2NAND $end
$var wire 1 4< not_NOR_2NAND $end
$var wire 1 5< Cin $end

$scope module xor1 $end
$var wire 1 _6 in1 $end
$var wire 1 o6 in2 $end
$var wire 1 -< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -< in1 $end
$var wire 1 p; in2 $end
$var wire 1 .< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 _6 in1 $end
$var wire 1 o6 in2 $end
$var wire 1 /< out $end
$upscope $end

$scope module not1 $end
$var wire 1 /< in1 $end
$var wire 1 0< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5< in1 $end
$var wire 1 -< in2 $end
$var wire 1 1< out $end
$upscope $end

$scope module not2 $end
$var wire 1 1< in1 $end
$var wire 1 2< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0< in1 $end
$var wire 1 2< in2 $end
$var wire 1 3< out $end
$upscope $end

$scope module not3 $end
$var wire 1 3< in1 $end
$var wire 1 4< out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 r; s $end
$var wire 1 6< c_out $end
$var wire 1 ^6 a $end
$var wire 1 n6 b $end
$var wire 1 o; c_in $end
$var wire 1 7< xor_AB $end
$var wire 1 8< xor_ABCin $end
$var wire 1 9< NAND_AB $end
$var wire 1 :< not_NAND_AB $end
$var wire 1 ;< NAND_Cin_xor_AB $end
$var wire 1 << not_NAND_Cin_xor_AB $end
$var wire 1 =< NOR_2NAND $end
$var wire 1 >< not_NOR_2NAND $end
$var wire 1 ?< Cin $end

$scope module xor1 $end
$var wire 1 ^6 in1 $end
$var wire 1 n6 in2 $end
$var wire 1 7< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 7< in1 $end
$var wire 1 o; in2 $end
$var wire 1 8< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ^6 in1 $end
$var wire 1 n6 in2 $end
$var wire 1 9< out $end
$upscope $end

$scope module not1 $end
$var wire 1 9< in1 $end
$var wire 1 :< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?< in1 $end
$var wire 1 7< in2 $end
$var wire 1 ;< out $end
$upscope $end

$scope module not2 $end
$var wire 1 ;< in1 $end
$var wire 1 << out $end
$upscope $end

$scope module nor1 $end
$var wire 1 :< in1 $end
$var wire 1 << in2 $end
$var wire 1 =< out $end
$upscope $end

$scope module not3 $end
$var wire 1 =< in1 $end
$var wire 1 >< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla3 $end
$var wire 1 ~: sum [3] $end
$var wire 1 !; sum [2] $end
$var wire 1 "; sum [1] $end
$var wire 1 #; sum [0] $end
$var wire 1 A< c_out $end
$var wire 1 Z6 a [3] $end
$var wire 1 [6 a [2] $end
$var wire 1 \6 a [1] $end
$var wire 1 ]6 a [0] $end
$var wire 1 j6 b [3] $end
$var wire 1 k6 b [2] $end
$var wire 1 l6 b [1] $end
$var wire 1 m6 b [0] $end
$var wire 1 x: c_in $end
$var wire 1 B< gen [3] $end
$var wire 1 C< gen [2] $end
$var wire 1 D< gen [1] $end
$var wire 1 E< gen [0] $end
$var wire 1 F< prop [3] $end
$var wire 1 G< prop [2] $end
$var wire 1 H< prop [1] $end
$var wire 1 I< prop [0] $end
$var wire 1 J< carry [2] $end
$var wire 1 K< carry [1] $end
$var wire 1 L< carry [0] $end
$var wire 1 M< fa_sum [3] $end
$var wire 1 N< fa_sum [2] $end
$var wire 1 O< fa_sum [1] $end
$var wire 1 P< fa_sum [0] $end

$scope module fa1 $end
$var wire 1 P< s $end
$var wire 1 Q< c_out $end
$var wire 1 ]6 a $end
$var wire 1 m6 b $end
$var wire 1 x: c_in $end
$var wire 1 R< xor_AB $end
$var wire 1 S< xor_ABCin $end
$var wire 1 T< NAND_AB $end
$var wire 1 U< not_NAND_AB $end
$var wire 1 V< NAND_Cin_xor_AB $end
$var wire 1 W< not_NAND_Cin_xor_AB $end
$var wire 1 X< NOR_2NAND $end
$var wire 1 Y< not_NOR_2NAND $end
$var wire 1 Z< Cin $end

$scope module xor1 $end
$var wire 1 ]6 in1 $end
$var wire 1 m6 in2 $end
$var wire 1 R< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 R< in1 $end
$var wire 1 x: in2 $end
$var wire 1 S< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ]6 in1 $end
$var wire 1 m6 in2 $end
$var wire 1 T< out $end
$upscope $end

$scope module not1 $end
$var wire 1 T< in1 $end
$var wire 1 U< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z< in1 $end
$var wire 1 R< in2 $end
$var wire 1 V< out $end
$upscope $end

$scope module not2 $end
$var wire 1 V< in1 $end
$var wire 1 W< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 U< in1 $end
$var wire 1 W< in2 $end
$var wire 1 X< out $end
$upscope $end

$scope module not3 $end
$var wire 1 X< in1 $end
$var wire 1 Y< out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 O< s $end
$var wire 1 [< c_out $end
$var wire 1 \6 a $end
$var wire 1 l6 b $end
$var wire 1 L< c_in $end
$var wire 1 \< xor_AB $end
$var wire 1 ]< xor_ABCin $end
$var wire 1 ^< NAND_AB $end
$var wire 1 _< not_NAND_AB $end
$var wire 1 `< NAND_Cin_xor_AB $end
$var wire 1 a< not_NAND_Cin_xor_AB $end
$var wire 1 b< NOR_2NAND $end
$var wire 1 c< not_NOR_2NAND $end
$var wire 1 d< Cin $end

$scope module xor1 $end
$var wire 1 \6 in1 $end
$var wire 1 l6 in2 $end
$var wire 1 \< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 \< in1 $end
$var wire 1 L< in2 $end
$var wire 1 ]< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 \6 in1 $end
$var wire 1 l6 in2 $end
$var wire 1 ^< out $end
$upscope $end

$scope module not1 $end
$var wire 1 ^< in1 $end
$var wire 1 _< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 d< in1 $end
$var wire 1 \< in2 $end
$var wire 1 `< out $end
$upscope $end

$scope module not2 $end
$var wire 1 `< in1 $end
$var wire 1 a< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 _< in1 $end
$var wire 1 a< in2 $end
$var wire 1 b< out $end
$upscope $end

$scope module not3 $end
$var wire 1 b< in1 $end
$var wire 1 c< out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 N< s $end
$var wire 1 e< c_out $end
$var wire 1 [6 a $end
$var wire 1 k6 b $end
$var wire 1 K< c_in $end
$var wire 1 f< xor_AB $end
$var wire 1 g< xor_ABCin $end
$var wire 1 h< NAND_AB $end
$var wire 1 i< not_NAND_AB $end
$var wire 1 j< NAND_Cin_xor_AB $end
$var wire 1 k< not_NAND_Cin_xor_AB $end
$var wire 1 l< NOR_2NAND $end
$var wire 1 m< not_NOR_2NAND $end
$var wire 1 n< Cin $end

$scope module xor1 $end
$var wire 1 [6 in1 $end
$var wire 1 k6 in2 $end
$var wire 1 f< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 f< in1 $end
$var wire 1 K< in2 $end
$var wire 1 g< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 [6 in1 $end
$var wire 1 k6 in2 $end
$var wire 1 h< out $end
$upscope $end

$scope module not1 $end
$var wire 1 h< in1 $end
$var wire 1 i< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 n< in1 $end
$var wire 1 f< in2 $end
$var wire 1 j< out $end
$upscope $end

$scope module not2 $end
$var wire 1 j< in1 $end
$var wire 1 k< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 i< in1 $end
$var wire 1 k< in2 $end
$var wire 1 l< out $end
$upscope $end

$scope module not3 $end
$var wire 1 l< in1 $end
$var wire 1 m< out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 M< s $end
$var wire 1 o< c_out $end
$var wire 1 Z6 a $end
$var wire 1 j6 b $end
$var wire 1 J< c_in $end
$var wire 1 p< xor_AB $end
$var wire 1 q< xor_ABCin $end
$var wire 1 r< NAND_AB $end
$var wire 1 s< not_NAND_AB $end
$var wire 1 t< NAND_Cin_xor_AB $end
$var wire 1 u< not_NAND_Cin_xor_AB $end
$var wire 1 v< NOR_2NAND $end
$var wire 1 w< not_NOR_2NAND $end
$var wire 1 x< Cin $end

$scope module xor1 $end
$var wire 1 Z6 in1 $end
$var wire 1 j6 in2 $end
$var wire 1 p< out $end
$upscope $end

$scope module xor2 $end
$var wire 1 p< in1 $end
$var wire 1 J< in2 $end
$var wire 1 q< out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Z6 in1 $end
$var wire 1 j6 in2 $end
$var wire 1 r< out $end
$upscope $end

$scope module not1 $end
$var wire 1 r< in1 $end
$var wire 1 s< out $end
$upscope $end

$scope module nand2 $end
$var wire 1 x< in1 $end
$var wire 1 p< in2 $end
$var wire 1 t< out $end
$upscope $end

$scope module not2 $end
$var wire 1 t< in1 $end
$var wire 1 u< out $end
$upscope $end

$scope module nor1 $end
$var wire 1 s< in1 $end
$var wire 1 u< in2 $end
$var wire 1 v< out $end
$upscope $end

$scope module not3 $end
$var wire 1 v< in1 $end
$var wire 1 w< out $end
$upscope $end
$upscope $end
$upscope $end

$scope module cla4 $end
$var wire 1 z: sum [3] $end
$var wire 1 {: sum [2] $end
$var wire 1 |: sum [1] $end
$var wire 1 }: sum [0] $end
$var wire 1 z< c_out $end
$var wire 1 V6 a [3] $end
$var wire 1 W6 a [2] $end
$var wire 1 X6 a [1] $end
$var wire 1 Y6 a [0] $end
$var wire 1 f6 b [3] $end
$var wire 1 g6 b [2] $end
$var wire 1 h6 b [1] $end
$var wire 1 i6 b [0] $end
$var wire 1 w: c_in $end
$var wire 1 {< gen [3] $end
$var wire 1 |< gen [2] $end
$var wire 1 }< gen [1] $end
$var wire 1 ~< gen [0] $end
$var wire 1 != prop [3] $end
$var wire 1 "= prop [2] $end
$var wire 1 #= prop [1] $end
$var wire 1 $= prop [0] $end
$var wire 1 %= carry [2] $end
$var wire 1 &= carry [1] $end
$var wire 1 '= carry [0] $end
$var wire 1 (= fa_sum [3] $end
$var wire 1 )= fa_sum [2] $end
$var wire 1 *= fa_sum [1] $end
$var wire 1 += fa_sum [0] $end

$scope module fa1 $end
$var wire 1 += s $end
$var wire 1 ,= c_out $end
$var wire 1 Y6 a $end
$var wire 1 i6 b $end
$var wire 1 w: c_in $end
$var wire 1 -= xor_AB $end
$var wire 1 .= xor_ABCin $end
$var wire 1 /= NAND_AB $end
$var wire 1 0= not_NAND_AB $end
$var wire 1 1= NAND_Cin_xor_AB $end
$var wire 1 2= not_NAND_Cin_xor_AB $end
$var wire 1 3= NOR_2NAND $end
$var wire 1 4= not_NOR_2NAND $end
$var wire 1 5= Cin $end

$scope module xor1 $end
$var wire 1 Y6 in1 $end
$var wire 1 i6 in2 $end
$var wire 1 -= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -= in1 $end
$var wire 1 w: in2 $end
$var wire 1 .= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 Y6 in1 $end
$var wire 1 i6 in2 $end
$var wire 1 /= out $end
$upscope $end

$scope module not1 $end
$var wire 1 /= in1 $end
$var wire 1 0= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5= in1 $end
$var wire 1 -= in2 $end
$var wire 1 1= out $end
$upscope $end

$scope module not2 $end
$var wire 1 1= in1 $end
$var wire 1 2= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0= in1 $end
$var wire 1 2= in2 $end
$var wire 1 3= out $end
$upscope $end

$scope module not3 $end
$var wire 1 3= in1 $end
$var wire 1 4= out $end
$upscope $end
$upscope $end

$scope module fa2 $end
$var wire 1 *= s $end
$var wire 1 6= c_out $end
$var wire 1 X6 a $end
$var wire 1 h6 b $end
$var wire 1 '= c_in $end
$var wire 1 7= xor_AB $end
$var wire 1 8= xor_ABCin $end
$var wire 1 9= NAND_AB $end
$var wire 1 := not_NAND_AB $end
$var wire 1 ;= NAND_Cin_xor_AB $end
$var wire 1 <= not_NAND_Cin_xor_AB $end
$var wire 1 == NOR_2NAND $end
$var wire 1 >= not_NOR_2NAND $end
$var wire 1 ?= Cin $end

$scope module xor1 $end
$var wire 1 X6 in1 $end
$var wire 1 h6 in2 $end
$var wire 1 7= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 7= in1 $end
$var wire 1 '= in2 $end
$var wire 1 8= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 X6 in1 $end
$var wire 1 h6 in2 $end
$var wire 1 9= out $end
$upscope $end

$scope module not1 $end
$var wire 1 9= in1 $end
$var wire 1 := out $end
$upscope $end

$scope module nand2 $end
$var wire 1 ?= in1 $end
$var wire 1 7= in2 $end
$var wire 1 ;= out $end
$upscope $end

$scope module not2 $end
$var wire 1 ;= in1 $end
$var wire 1 <= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 := in1 $end
$var wire 1 <= in2 $end
$var wire 1 == out $end
$upscope $end

$scope module not3 $end
$var wire 1 == in1 $end
$var wire 1 >= out $end
$upscope $end
$upscope $end

$scope module fa3 $end
$var wire 1 )= s $end
$var wire 1 @= c_out $end
$var wire 1 W6 a $end
$var wire 1 g6 b $end
$var wire 1 &= c_in $end
$var wire 1 A= xor_AB $end
$var wire 1 B= xor_ABCin $end
$var wire 1 C= NAND_AB $end
$var wire 1 D= not_NAND_AB $end
$var wire 1 E= NAND_Cin_xor_AB $end
$var wire 1 F= not_NAND_Cin_xor_AB $end
$var wire 1 G= NOR_2NAND $end
$var wire 1 H= not_NOR_2NAND $end
$var wire 1 I= Cin $end

$scope module xor1 $end
$var wire 1 W6 in1 $end
$var wire 1 g6 in2 $end
$var wire 1 A= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 A= in1 $end
$var wire 1 &= in2 $end
$var wire 1 B= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 W6 in1 $end
$var wire 1 g6 in2 $end
$var wire 1 C= out $end
$upscope $end

$scope module not1 $end
$var wire 1 C= in1 $end
$var wire 1 D= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 I= in1 $end
$var wire 1 A= in2 $end
$var wire 1 E= out $end
$upscope $end

$scope module not2 $end
$var wire 1 E= in1 $end
$var wire 1 F= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 D= in1 $end
$var wire 1 F= in2 $end
$var wire 1 G= out $end
$upscope $end

$scope module not3 $end
$var wire 1 G= in1 $end
$var wire 1 H= out $end
$upscope $end
$upscope $end

$scope module fa4 $end
$var wire 1 (= s $end
$var wire 1 J= c_out $end
$var wire 1 V6 a $end
$var wire 1 f6 b $end
$var wire 1 %= c_in $end
$var wire 1 K= xor_AB $end
$var wire 1 L= xor_ABCin $end
$var wire 1 M= NAND_AB $end
$var wire 1 N= not_NAND_AB $end
$var wire 1 O= NAND_Cin_xor_AB $end
$var wire 1 P= not_NAND_Cin_xor_AB $end
$var wire 1 Q= NOR_2NAND $end
$var wire 1 R= not_NOR_2NAND $end
$var wire 1 S= Cin $end

$scope module xor1 $end
$var wire 1 V6 in1 $end
$var wire 1 f6 in2 $end
$var wire 1 K= out $end
$upscope $end

$scope module xor2 $end
$var wire 1 K= in1 $end
$var wire 1 %= in2 $end
$var wire 1 L= out $end
$upscope $end

$scope module nand1 $end
$var wire 1 V6 in1 $end
$var wire 1 f6 in2 $end
$var wire 1 M= out $end
$upscope $end

$scope module not1 $end
$var wire 1 M= in1 $end
$var wire 1 N= out $end
$upscope $end

$scope module nand2 $end
$var wire 1 S= in1 $end
$var wire 1 K= in2 $end
$var wire 1 O= out $end
$upscope $end

$scope module not2 $end
$var wire 1 O= in1 $end
$var wire 1 P= out $end
$upscope $end

$scope module nor1 $end
$var wire 1 N= in1 $end
$var wire 1 P= in2 $end
$var wire 1 Q= out $end
$upscope $end

$scope module not3 $end
$var wire 1 Q= in1 $end
$var wire 1 R= out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 o1 InA [15] $end
$var wire 1 p1 InA [14] $end
$var wire 1 q1 InA [13] $end
$var wire 1 r1 InA [12] $end
$var wire 1 s1 InA [11] $end
$var wire 1 t1 InA [10] $end
$var wire 1 u1 InA [9] $end
$var wire 1 v1 InA [8] $end
$var wire 1 w1 InA [7] $end
$var wire 1 x1 InA [6] $end
$var wire 1 y1 InA [5] $end
$var wire 1 z1 InA [4] $end
$var wire 1 {1 InA [3] $end
$var wire 1 |1 InA [2] $end
$var wire 1 }1 InA [1] $end
$var wire 1 ~1 InA [0] $end
$var wire 1 T= InB [15] $end
$var wire 1 U= InB [14] $end
$var wire 1 V= InB [13] $end
$var wire 1 W= InB [12] $end
$var wire 1 X= InB [11] $end
$var wire 1 Y= InB [10] $end
$var wire 1 Z= InB [9] $end
$var wire 1 [= InB [8] $end
$var wire 1 \= InB [7] $end
$var wire 1 ]= InB [6] $end
$var wire 1 ^= InB [5] $end
$var wire 1 _= InB [4] $end
$var wire 1 `= InB [3] $end
$var wire 1 a= InB [2] $end
$var wire 1 b= InB [1] $end
$var wire 1 c= InB [0] $end
$var wire 1 Z7 Out $end
$var wire 1 d= difference $end
$upscope $end
$upscope $end

$scope module lt1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 I2 Out $end
$var wire 1 e= difference $end
$upscope $end

$scope module lte1 $end
$var wire 1 k" InA [15] $end
$var wire 1 l" InA [14] $end
$var wire 1 m" InA [13] $end
$var wire 1 n" InA [12] $end
$var wire 1 o" InA [11] $end
$var wire 1 p" InA [10] $end
$var wire 1 q" InA [9] $end
$var wire 1 r" InA [8] $end
$var wire 1 s" InA [7] $end
$var wire 1 t" InA [6] $end
$var wire 1 u" InA [5] $end
$var wire 1 v" InA [4] $end
$var wire 1 w" InA [3] $end
$var wire 1 x" InA [2] $end
$var wire 1 y" InA [1] $end
$var wire 1 z" InA [0] $end
$var wire 1 K% InB [15] $end
$var wire 1 L% InB [14] $end
$var wire 1 M% InB [13] $end
$var wire 1 N% InB [12] $end
$var wire 1 O% InB [11] $end
$var wire 1 P% InB [10] $end
$var wire 1 Q% InB [9] $end
$var wire 1 R% InB [8] $end
$var wire 1 S% InB [7] $end
$var wire 1 T% InB [6] $end
$var wire 1 U% InB [5] $end
$var wire 1 V% InB [4] $end
$var wire 1 W% InB [3] $end
$var wire 1 X% InB [2] $end
$var wire 1 Y% InB [1] $end
$var wire 1 Z% InB [0] $end
$var wire 1 :3 Out $end
$var wire 1 f= difference $end
$upscope $end
$upscope $end

$scope module latch3 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 +% ALU_in [15] $end
$var wire 1 ,% ALU_in [14] $end
$var wire 1 -% ALU_in [13] $end
$var wire 1 .% ALU_in [12] $end
$var wire 1 /% ALU_in [11] $end
$var wire 1 0% ALU_in [10] $end
$var wire 1 1% ALU_in [9] $end
$var wire 1 2% ALU_in [8] $end
$var wire 1 3% ALU_in [7] $end
$var wire 1 4% ALU_in [6] $end
$var wire 1 5% ALU_in [5] $end
$var wire 1 6% ALU_in [4] $end
$var wire 1 7% ALU_in [3] $end
$var wire 1 8% ALU_in [2] $end
$var wire 1 9% ALU_in [1] $end
$var wire 1 :% ALU_in [0] $end
$var wire 1 ;% ALU_out [15] $end
$var wire 1 <% ALU_out [14] $end
$var wire 1 =% ALU_out [13] $end
$var wire 1 >% ALU_out [12] $end
$var wire 1 ?% ALU_out [11] $end
$var wire 1 @% ALU_out [10] $end
$var wire 1 A% ALU_out [9] $end
$var wire 1 B% ALU_out [8] $end
$var wire 1 C% ALU_out [7] $end
$var wire 1 D% ALU_out [6] $end
$var wire 1 E% ALU_out [5] $end
$var wire 1 F% ALU_out [4] $end
$var wire 1 G% ALU_out [3] $end
$var wire 1 H% ALU_out [2] $end
$var wire 1 I% ALU_out [1] $end
$var wire 1 J% ALU_out [0] $end
$var wire 1 K% BInput_in [15] $end
$var wire 1 L% BInput_in [14] $end
$var wire 1 M% BInput_in [13] $end
$var wire 1 N% BInput_in [12] $end
$var wire 1 O% BInput_in [11] $end
$var wire 1 P% BInput_in [10] $end
$var wire 1 Q% BInput_in [9] $end
$var wire 1 R% BInput_in [8] $end
$var wire 1 S% BInput_in [7] $end
$var wire 1 T% BInput_in [6] $end
$var wire 1 U% BInput_in [5] $end
$var wire 1 V% BInput_in [4] $end
$var wire 1 W% BInput_in [3] $end
$var wire 1 X% BInput_in [2] $end
$var wire 1 Y% BInput_in [1] $end
$var wire 1 Z% BInput_in [0] $end
$var wire 1 [% BInput_out [15] $end
$var wire 1 \% BInput_out [14] $end
$var wire 1 ]% BInput_out [13] $end
$var wire 1 ^% BInput_out [12] $end
$var wire 1 _% BInput_out [11] $end
$var wire 1 `% BInput_out [10] $end
$var wire 1 a% BInput_out [9] $end
$var wire 1 b% BInput_out [8] $end
$var wire 1 c% BInput_out [7] $end
$var wire 1 d% BInput_out [6] $end
$var wire 1 e% BInput_out [5] $end
$var wire 1 f% BInput_out [4] $end
$var wire 1 g% BInput_out [3] $end
$var wire 1 h% BInput_out [2] $end
$var wire 1 i% BInput_out [1] $end
$var wire 1 j% BInput_out [0] $end
$var wire 1 )% branchtake_in $end
$var wire 1 *% branchtake_out $end
$var wire 1 k% branch_out $end
$var wire 1 l$ branch_in $end
$var wire 1 x$ PC_or_add_in $end
$var wire 1 l% PC_or_add_out $end
$var wire 1 v$ ALUJmp_in $end
$var wire 1 m% ALUJmp_out $end
$var wire 1 f$ MemWrt_in $end
$var wire 1 n% MemWrt_out $end
$var wire 1 ~$ halt_in $end
$var wire 1 o% halt_out $end
$var wire 1 /$ SgnExt_in [15] $end
$var wire 1 0$ SgnExt_in [14] $end
$var wire 1 1$ SgnExt_in [13] $end
$var wire 1 2$ SgnExt_in [12] $end
$var wire 1 3$ SgnExt_in [11] $end
$var wire 1 4$ SgnExt_in [10] $end
$var wire 1 5$ SgnExt_in [9] $end
$var wire 1 6$ SgnExt_in [8] $end
$var wire 1 7$ SgnExt_in [7] $end
$var wire 1 8$ SgnExt_in [6] $end
$var wire 1 9$ SgnExt_in [5] $end
$var wire 1 :$ SgnExt_in [4] $end
$var wire 1 ;$ SgnExt_in [3] $end
$var wire 1 <$ SgnExt_in [2] $end
$var wire 1 =$ SgnExt_in [1] $end
$var wire 1 >$ SgnExt_in [0] $end
$var wire 1 p% SgnExt_out [15] $end
$var wire 1 q% SgnExt_out [14] $end
$var wire 1 r% SgnExt_out [13] $end
$var wire 1 s% SgnExt_out [12] $end
$var wire 1 t% SgnExt_out [11] $end
$var wire 1 u% SgnExt_out [10] $end
$var wire 1 v% SgnExt_out [9] $end
$var wire 1 w% SgnExt_out [8] $end
$var wire 1 x% SgnExt_out [7] $end
$var wire 1 y% SgnExt_out [6] $end
$var wire 1 z% SgnExt_out [5] $end
$var wire 1 {% SgnExt_out [4] $end
$var wire 1 |% SgnExt_out [3] $end
$var wire 1 }% SgnExt_out [2] $end
$var wire 1 ~% SgnExt_out [1] $end
$var wire 1 !& SgnExt_out [0] $end
$var wire 1 -# readData2_in [15] $end
$var wire 1 .# readData2_in [14] $end
$var wire 1 /# readData2_in [13] $end
$var wire 1 0# readData2_in [12] $end
$var wire 1 1# readData2_in [11] $end
$var wire 1 2# readData2_in [10] $end
$var wire 1 3# readData2_in [9] $end
$var wire 1 4# readData2_in [8] $end
$var wire 1 5# readData2_in [7] $end
$var wire 1 6# readData2_in [6] $end
$var wire 1 7# readData2_in [5] $end
$var wire 1 8# readData2_in [4] $end
$var wire 1 9# readData2_in [3] $end
$var wire 1 :# readData2_in [2] $end
$var wire 1 ;# readData2_in [1] $end
$var wire 1 <# readData2_in [0] $end
$var wire 1 "& readData2_out [15] $end
$var wire 1 #& readData2_out [14] $end
$var wire 1 $& readData2_out [13] $end
$var wire 1 %& readData2_out [12] $end
$var wire 1 && readData2_out [11] $end
$var wire 1 '& readData2_out [10] $end
$var wire 1 (& readData2_out [9] $end
$var wire 1 )& readData2_out [8] $end
$var wire 1 *& readData2_out [7] $end
$var wire 1 +& readData2_out [6] $end
$var wire 1 ,& readData2_out [5] $end
$var wire 1 -& readData2_out [4] $end
$var wire 1 .& readData2_out [3] $end
$var wire 1 /& readData2_out [2] $end
$var wire 1 0& readData2_out [1] $end
$var wire 1 1& readData2_out [0] $end
$var wire 1 A" pc2_in [15] $end
$var wire 1 B" pc2_in [14] $end
$var wire 1 C" pc2_in [13] $end
$var wire 1 D" pc2_in [12] $end
$var wire 1 E" pc2_in [11] $end
$var wire 1 F" pc2_in [10] $end
$var wire 1 G" pc2_in [9] $end
$var wire 1 H" pc2_in [8] $end
$var wire 1 I" pc2_in [7] $end
$var wire 1 J" pc2_in [6] $end
$var wire 1 K" pc2_in [5] $end
$var wire 1 L" pc2_in [4] $end
$var wire 1 M" pc2_in [3] $end
$var wire 1 N" pc2_in [2] $end
$var wire 1 O" pc2_in [1] $end
$var wire 1 P" pc2_in [0] $end
$var wire 1 2& pc2_out [15] $end
$var wire 1 3& pc2_out [14] $end
$var wire 1 4& pc2_out [13] $end
$var wire 1 5& pc2_out [12] $end
$var wire 1 6& pc2_out [11] $end
$var wire 1 7& pc2_out [10] $end
$var wire 1 8& pc2_out [9] $end
$var wire 1 9& pc2_out [8] $end
$var wire 1 :& pc2_out [7] $end
$var wire 1 ;& pc2_out [6] $end
$var wire 1 <& pc2_out [5] $end
$var wire 1 =& pc2_out [4] $end
$var wire 1 >& pc2_out [3] $end
$var wire 1 ?& pc2_out [2] $end
$var wire 1 @& pc2_out [1] $end
$var wire 1 A& pc2_out [0] $end
$var wire 1 m# sevenext_in [15] $end
$var wire 1 n# sevenext_in [14] $end
$var wire 1 o# sevenext_in [13] $end
$var wire 1 p# sevenext_in [12] $end
$var wire 1 q# sevenext_in [11] $end
$var wire 1 r# sevenext_in [10] $end
$var wire 1 s# sevenext_in [9] $end
$var wire 1 t# sevenext_in [8] $end
$var wire 1 u# sevenext_in [7] $end
$var wire 1 v# sevenext_in [6] $end
$var wire 1 w# sevenext_in [5] $end
$var wire 1 x# sevenext_in [4] $end
$var wire 1 y# sevenext_in [3] $end
$var wire 1 z# sevenext_in [2] $end
$var wire 1 {# sevenext_in [1] $end
$var wire 1 |# sevenext_in [0] $end
$var wire 1 B& sevenext_out [15] $end
$var wire 1 C& sevenext_out [14] $end
$var wire 1 D& sevenext_out [13] $end
$var wire 1 E& sevenext_out [12] $end
$var wire 1 F& sevenext_out [11] $end
$var wire 1 G& sevenext_out [10] $end
$var wire 1 H& sevenext_out [9] $end
$var wire 1 I& sevenext_out [8] $end
$var wire 1 J& sevenext_out [7] $end
$var wire 1 K& sevenext_out [6] $end
$var wire 1 L& sevenext_out [5] $end
$var wire 1 M& sevenext_out [4] $end
$var wire 1 N& sevenext_out [3] $end
$var wire 1 O& sevenext_out [2] $end
$var wire 1 P& sevenext_out [1] $end
$var wire 1 Q& sevenext_out [0] $end
$var wire 1 "% RegWrt_in $end
$var wire 1 R& RegWrt_out $end
$var wire 1 V( SendNOP_In $end
$var wire 1 W( SendNOP_Out $end
$var wire 1 {$ RegSrc_in [1] $end
$var wire 1 |$ RegSrc_in [0] $end
$var wire 1 S& RegSrc_out [1] $end
$var wire 1 T& RegSrc_out [0] $end
$var wire 1 &% write_reg_in [2] $end
$var wire 1 '% write_reg_in [1] $end
$var wire 1 (% write_reg_in [0] $end
$var wire 1 U& write_reg_out [2] $end
$var wire 1 V& write_reg_out [1] $end
$var wire 1 W& write_reg_out [0] $end

$scope module branchtake $end
$var wire 1 *% q $end
$var wire 1 )% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module branch $end
$var wire 1 k% q $end
$var wire 1 l$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module PC_or_add $end
$var wire 1 l% q $end
$var wire 1 x$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALUJmp $end
$var wire 1 m% q $end
$var wire 1 v$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemWrt $end
$var wire 1 n% q $end
$var wire 1 f$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module halt $end
$var wire 1 o% q $end
$var wire 1 ~$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegWrt $end
$var wire 1 R& q $end
$var wire 1 "% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 W( q $end
$var wire 1 V( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[15] $end
$var wire 1 ;% q $end
$var wire 1 +% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[14] $end
$var wire 1 <% q $end
$var wire 1 ,% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[13] $end
$var wire 1 =% q $end
$var wire 1 -% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[12] $end
$var wire 1 >% q $end
$var wire 1 .% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[11] $end
$var wire 1 ?% q $end
$var wire 1 /% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[10] $end
$var wire 1 @% q $end
$var wire 1 0% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[9] $end
$var wire 1 A% q $end
$var wire 1 1% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[8] $end
$var wire 1 B% q $end
$var wire 1 2% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[7] $end
$var wire 1 C% q $end
$var wire 1 3% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[6] $end
$var wire 1 D% q $end
$var wire 1 4% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[5] $end
$var wire 1 E% q $end
$var wire 1 5% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[4] $end
$var wire 1 F% q $end
$var wire 1 6% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[3] $end
$var wire 1 G% q $end
$var wire 1 7% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[2] $end
$var wire 1 H% q $end
$var wire 1 8% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[1] $end
$var wire 1 I% q $end
$var wire 1 9% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module ALU[0] $end
$var wire 1 J% q $end
$var wire 1 :% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[15] $end
$var wire 1 [% q $end
$var wire 1 K% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[14] $end
$var wire 1 \% q $end
$var wire 1 L% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[13] $end
$var wire 1 ]% q $end
$var wire 1 M% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[12] $end
$var wire 1 ^% q $end
$var wire 1 N% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[11] $end
$var wire 1 _% q $end
$var wire 1 O% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[10] $end
$var wire 1 `% q $end
$var wire 1 P% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[9] $end
$var wire 1 a% q $end
$var wire 1 Q% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[8] $end
$var wire 1 b% q $end
$var wire 1 R% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[7] $end
$var wire 1 c% q $end
$var wire 1 S% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[6] $end
$var wire 1 d% q $end
$var wire 1 T% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[5] $end
$var wire 1 e% q $end
$var wire 1 U% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[4] $end
$var wire 1 f% q $end
$var wire 1 V% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[3] $end
$var wire 1 g% q $end
$var wire 1 W% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[2] $end
$var wire 1 h% q $end
$var wire 1 X% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[1] $end
$var wire 1 i% q $end
$var wire 1 Y% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module BInput[0] $end
$var wire 1 j% q $end
$var wire 1 Z% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[15] $end
$var wire 1 p% q $end
$var wire 1 /$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[14] $end
$var wire 1 q% q $end
$var wire 1 0$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[13] $end
$var wire 1 r% q $end
$var wire 1 1$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[12] $end
$var wire 1 s% q $end
$var wire 1 2$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[11] $end
$var wire 1 t% q $end
$var wire 1 3$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[10] $end
$var wire 1 u% q $end
$var wire 1 4$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[9] $end
$var wire 1 v% q $end
$var wire 1 5$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[8] $end
$var wire 1 w% q $end
$var wire 1 6$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[7] $end
$var wire 1 x% q $end
$var wire 1 7$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[6] $end
$var wire 1 y% q $end
$var wire 1 8$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[5] $end
$var wire 1 z% q $end
$var wire 1 9$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[4] $end
$var wire 1 {% q $end
$var wire 1 :$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[3] $end
$var wire 1 |% q $end
$var wire 1 ;$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[2] $end
$var wire 1 }% q $end
$var wire 1 <$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[1] $end
$var wire 1 ~% q $end
$var wire 1 =$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SgnExt[0] $end
$var wire 1 !& q $end
$var wire 1 >$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[15] $end
$var wire 1 "& q $end
$var wire 1 -# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[14] $end
$var wire 1 #& q $end
$var wire 1 .# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[13] $end
$var wire 1 $& q $end
$var wire 1 /# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[12] $end
$var wire 1 %& q $end
$var wire 1 0# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[11] $end
$var wire 1 && q $end
$var wire 1 1# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[10] $end
$var wire 1 '& q $end
$var wire 1 2# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[9] $end
$var wire 1 (& q $end
$var wire 1 3# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[8] $end
$var wire 1 )& q $end
$var wire 1 4# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[7] $end
$var wire 1 *& q $end
$var wire 1 5# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[6] $end
$var wire 1 +& q $end
$var wire 1 6# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[5] $end
$var wire 1 ,& q $end
$var wire 1 7# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[4] $end
$var wire 1 -& q $end
$var wire 1 8# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[3] $end
$var wire 1 .& q $end
$var wire 1 9# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[2] $end
$var wire 1 /& q $end
$var wire 1 :# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[1] $end
$var wire 1 0& q $end
$var wire 1 ;# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module readData2[0] $end
$var wire 1 1& q $end
$var wire 1 <# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[15] $end
$var wire 1 2& q $end
$var wire 1 A" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[14] $end
$var wire 1 3& q $end
$var wire 1 B" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[13] $end
$var wire 1 4& q $end
$var wire 1 C" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[12] $end
$var wire 1 5& q $end
$var wire 1 D" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[11] $end
$var wire 1 6& q $end
$var wire 1 E" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[10] $end
$var wire 1 7& q $end
$var wire 1 F" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[9] $end
$var wire 1 8& q $end
$var wire 1 G" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[8] $end
$var wire 1 9& q $end
$var wire 1 H" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[7] $end
$var wire 1 :& q $end
$var wire 1 I" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[6] $end
$var wire 1 ;& q $end
$var wire 1 J" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[5] $end
$var wire 1 <& q $end
$var wire 1 K" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[4] $end
$var wire 1 =& q $end
$var wire 1 L" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[3] $end
$var wire 1 >& q $end
$var wire 1 M" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[2] $end
$var wire 1 ?& q $end
$var wire 1 N" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[1] $end
$var wire 1 @& q $end
$var wire 1 O" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc2[0] $end
$var wire 1 A& q $end
$var wire 1 P" d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[15] $end
$var wire 1 B& q $end
$var wire 1 m# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[14] $end
$var wire 1 C& q $end
$var wire 1 n# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[13] $end
$var wire 1 D& q $end
$var wire 1 o# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[12] $end
$var wire 1 E& q $end
$var wire 1 p# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[11] $end
$var wire 1 F& q $end
$var wire 1 q# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[10] $end
$var wire 1 G& q $end
$var wire 1 r# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[9] $end
$var wire 1 H& q $end
$var wire 1 s# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[8] $end
$var wire 1 I& q $end
$var wire 1 t# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[7] $end
$var wire 1 J& q $end
$var wire 1 u# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[6] $end
$var wire 1 K& q $end
$var wire 1 v# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[5] $end
$var wire 1 L& q $end
$var wire 1 w# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[4] $end
$var wire 1 M& q $end
$var wire 1 x# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[3] $end
$var wire 1 N& q $end
$var wire 1 y# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[2] $end
$var wire 1 O& q $end
$var wire 1 z# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[1] $end
$var wire 1 P& q $end
$var wire 1 {# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module sevenext[0] $end
$var wire 1 Q& q $end
$var wire 1 |# d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 S& q $end
$var wire 1 {$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 T& q $end
$var wire 1 |$ d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 U& q $end
$var wire 1 &% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 V& q $end
$var wire 1 '% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 W& q $end
$var wire 1 (% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU4 $end
$var wire 1 *% branch $end
$var wire 1 l% PC_or_add $end
$var wire 1 ;% alu [15] $end
$var wire 1 <% alu [14] $end
$var wire 1 =% alu [13] $end
$var wire 1 >% alu [12] $end
$var wire 1 ?% alu [11] $end
$var wire 1 @% alu [10] $end
$var wire 1 A% alu [9] $end
$var wire 1 B% alu [8] $end
$var wire 1 C% alu [7] $end
$var wire 1 D% alu [6] $end
$var wire 1 E% alu [5] $end
$var wire 1 F% alu [4] $end
$var wire 1 G% alu [3] $end
$var wire 1 H% alu [2] $end
$var wire 1 I% alu [1] $end
$var wire 1 J% alu [0] $end
$var wire 1 /$ SgnExt [15] $end
$var wire 1 0$ SgnExt [14] $end
$var wire 1 1$ SgnExt [13] $end
$var wire 1 2$ SgnExt [12] $end
$var wire 1 3$ SgnExt [11] $end
$var wire 1 4$ SgnExt [10] $end
$var wire 1 5$ SgnExt [9] $end
$var wire 1 6$ SgnExt [8] $end
$var wire 1 7$ SgnExt [7] $end
$var wire 1 8$ SgnExt [6] $end
$var wire 1 9$ SgnExt [5] $end
$var wire 1 :$ SgnExt [4] $end
$var wire 1 ;$ SgnExt [3] $end
$var wire 1 <$ SgnExt [2] $end
$var wire 1 =$ SgnExt [1] $end
$var wire 1 >$ SgnExt [0] $end
$var wire 1 "& readData2 [15] $end
$var wire 1 #& readData2 [14] $end
$var wire 1 $& readData2 [13] $end
$var wire 1 %& readData2 [12] $end
$var wire 1 && readData2 [11] $end
$var wire 1 '& readData2 [10] $end
$var wire 1 (& readData2 [9] $end
$var wire 1 )& readData2 [8] $end
$var wire 1 *& readData2 [7] $end
$var wire 1 +& readData2 [6] $end
$var wire 1 ,& readData2 [5] $end
$var wire 1 -& readData2 [4] $end
$var wire 1 .& readData2 [3] $end
$var wire 1 /& readData2 [2] $end
$var wire 1 0& readData2 [1] $end
$var wire 1 1& readData2 [0] $end
$var wire 1 2& pc2 [15] $end
$var wire 1 3& pc2 [14] $end
$var wire 1 4& pc2 [13] $end
$var wire 1 5& pc2 [12] $end
$var wire 1 6& pc2 [11] $end
$var wire 1 7& pc2 [10] $end
$var wire 1 8& pc2 [9] $end
$var wire 1 9& pc2 [8] $end
$var wire 1 :& pc2 [7] $end
$var wire 1 ;& pc2 [6] $end
$var wire 1 <& pc2 [5] $end
$var wire 1 =& pc2 [4] $end
$var wire 1 >& pc2 [3] $end
$var wire 1 ?& pc2 [2] $end
$var wire 1 @& pc2 [1] $end
$var wire 1 A& pc2 [0] $end
$var wire 1 B& sevenext [15] $end
$var wire 1 C& sevenext [14] $end
$var wire 1 D& sevenext [13] $end
$var wire 1 E& sevenext [12] $end
$var wire 1 F& sevenext [11] $end
$var wire 1 G& sevenext [10] $end
$var wire 1 H& sevenext [9] $end
$var wire 1 I& sevenext [8] $end
$var wire 1 J& sevenext [7] $end
$var wire 1 K& sevenext [6] $end
$var wire 1 L& sevenext [5] $end
$var wire 1 M& sevenext [4] $end
$var wire 1 N& sevenext [3] $end
$var wire 1 O& sevenext [2] $end
$var wire 1 P& sevenext [1] $end
$var wire 1 Q& sevenext [0] $end
$var wire 1 m% ALUJmp $end
$var wire 1 n% MemWrt $end
$var wire 1 o% halt $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 x& newPC [15] $end
$var wire 1 y& newPC [14] $end
$var wire 1 z& newPC [13] $end
$var wire 1 {& newPC [12] $end
$var wire 1 |& newPC [11] $end
$var wire 1 }& newPC [10] $end
$var wire 1 ~& newPC [9] $end
$var wire 1 !' newPC [8] $end
$var wire 1 "' newPC [7] $end
$var wire 1 #' newPC [6] $end
$var wire 1 $' newPC [5] $end
$var wire 1 %' newPC [4] $end
$var wire 1 &' newPC [3] $end
$var wire 1 '' newPC [2] $end
$var wire 1 (' newPC [1] $end
$var wire 1 )' newPC [0] $end
$var wire 1 X& MemRead [15] $end
$var wire 1 Y& MemRead [14] $end
$var wire 1 Z& MemRead [13] $end
$var wire 1 [& MemRead [12] $end
$var wire 1 \& MemRead [11] $end
$var wire 1 ]& MemRead [10] $end
$var wire 1 ^& MemRead [9] $end
$var wire 1 _& MemRead [8] $end
$var wire 1 `& MemRead [7] $end
$var wire 1 a& MemRead [6] $end
$var wire 1 b& MemRead [5] $end
$var wire 1 c& MemRead [4] $end
$var wire 1 d& MemRead [3] $end
$var wire 1 e& MemRead [2] $end
$var wire 1 f& MemRead [1] $end
$var wire 1 g& MemRead [0] $end
$var wire 1 v> MuxImmSrc [15] $end
$var wire 1 w> MuxImmSrc [14] $end
$var wire 1 x> MuxImmSrc [13] $end
$var wire 1 y> MuxImmSrc [12] $end
$var wire 1 z> MuxImmSrc [11] $end
$var wire 1 {> MuxImmSrc [10] $end
$var wire 1 |> MuxImmSrc [9] $end
$var wire 1 }> MuxImmSrc [8] $end
$var wire 1 ~> MuxImmSrc [7] $end
$var wire 1 !? MuxImmSrc [6] $end
$var wire 1 "? MuxImmSrc [5] $end
$var wire 1 #? MuxImmSrc [4] $end
$var wire 1 $? MuxImmSrc [3] $end
$var wire 1 %? MuxImmSrc [2] $end
$var wire 1 &? MuxImmSrc [1] $end
$var wire 1 '? MuxImmSrc [0] $end
$var wire 1 (? adderOut [15] $end
$var wire 1 )? adderOut [14] $end
$var wire 1 *? adderOut [13] $end
$var wire 1 +? adderOut [12] $end
$var wire 1 ,? adderOut [11] $end
$var wire 1 -? adderOut [10] $end
$var wire 1 .? adderOut [9] $end
$var wire 1 /? adderOut [8] $end
$var wire 1 0? adderOut [7] $end
$var wire 1 1? adderOut [6] $end
$var wire 1 2? adderOut [5] $end
$var wire 1 3? adderOut [4] $end
$var wire 1 4? adderOut [3] $end
$var wire 1 5? adderOut [2] $end
$var wire 1 6? adderOut [1] $end
$var wire 1 7? adderOut [0] $end
$var wire 1 8? MuxBranchSrc [15] $end
$var wire 1 9? MuxBranchSrc [14] $end
$var wire 1 :? MuxBranchSrc [13] $end
$var wire 1 ;? MuxBranchSrc [12] $end
$var wire 1 <? MuxBranchSrc [11] $end
$var wire 1 =? MuxBranchSrc [10] $end
$var wire 1 >? MuxBranchSrc [9] $end
$var wire 1 ?? MuxBranchSrc [8] $end
$var wire 1 @? MuxBranchSrc [7] $end
$var wire 1 A? MuxBranchSrc [6] $end
$var wire 1 B? MuxBranchSrc [5] $end
$var wire 1 C? MuxBranchSrc [4] $end
$var wire 1 D? MuxBranchSrc [3] $end
$var wire 1 E? MuxBranchSrc [2] $end
$var wire 1 F? MuxBranchSrc [1] $end
$var wire 1 G? MuxBranchSrc [0] $end

$scope module fa $end
$var wire 1 2& A [15] $end
$var wire 1 3& A [14] $end
$var wire 1 4& A [13] $end
$var wire 1 5& A [12] $end
$var wire 1 6& A [11] $end
$var wire 1 7& A [10] $end
$var wire 1 8& A [9] $end
$var wire 1 9& A [8] $end
$var wire 1 :& A [7] $end
$var wire 1 ;& A [6] $end
$var wire 1 <& A [5] $end
$var wire 1 =& A [4] $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 v> B [15] $end
$var wire 1 w> B [14] $end
$var wire 1 x> B [13] $end
$var wire 1 y> B [12] $end
$var wire 1 z> B [11] $end
$var wire 1 {> B [10] $end
$var wire 1 |> B [9] $end
$var wire 1 }> B [8] $end
$var wire 1 ~> B [7] $end
$var wire 1 !? B [6] $end
$var wire 1 "? B [5] $end
$var wire 1 #? B [4] $end
$var wire 1 $? B [3] $end
$var wire 1 %? B [2] $end
$var wire 1 &? B [1] $end
$var wire 1 '? B [0] $end
$var wire 1 (? S [15] $end
$var wire 1 )? S [14] $end
$var wire 1 *? S [13] $end
$var wire 1 +? S [12] $end
$var wire 1 ,? S [11] $end
$var wire 1 -? S [10] $end
$var wire 1 .? S [9] $end
$var wire 1 /? S [8] $end
$var wire 1 0? S [7] $end
$var wire 1 1? S [6] $end
$var wire 1 2? S [5] $end
$var wire 1 3? S [4] $end
$var wire 1 4? S [3] $end
$var wire 1 5? S [2] $end
$var wire 1 6? S [1] $end
$var wire 1 7? S [0] $end
$var wire 1 H? Cout $end
$var wire 1 I? Cout0 $end
$var wire 1 J? Cout1 $end
$var wire 1 K? Cout2 $end
$var wire 1 L? Cin $end

$scope module f1 $end
$var wire 1 >& A [3] $end
$var wire 1 ?& A [2] $end
$var wire 1 @& A [1] $end
$var wire 1 A& A [0] $end
$var wire 1 $? B [3] $end
$var wire 1 %? B [2] $end
$var wire 1 &? B [1] $end
$var wire 1 '? B [0] $end
$var wire 1 L? Cin $end
$var wire 1 4? S [3] $end
$var wire 1 5? S [2] $end
$var wire 1 6? S [1] $end
$var wire 1 7? S [0] $end
$var wire 1 I? Cout $end
$var wire 1 M? Cout0 $end
$var wire 1 N? Cout1 $end
$var wire 1 O? Cout2 $end

$scope module f1 $end
$var wire 1 A& A $end
$var wire 1 '? B $end
$var wire 1 L? Cin $end
$var wire 1 7? S $end
$var wire 1 M? Cout $end
$var wire 1 P? xor_AB $end
$var wire 1 Q? xor_ABCin $end
$var wire 1 R? NAND_AB $end
$var wire 1 S? not_NAND_AB $end
$var wire 1 T? NAND_Cin_xor_AB $end
$var wire 1 U? not_NAND_Cin_xor_AB $end
$var wire 1 V? NOR_2NAND $end
$var wire 1 W? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 A& in1 $end
$var wire 1 '? in2 $end
$var wire 1 P? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P? in1 $end
$var wire 1 L? in2 $end
$var wire 1 Q? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 A& in1 $end
$var wire 1 '? in2 $end
$var wire 1 R? out $end
$upscope $end

$scope module not1 $end
$var wire 1 R? in1 $end
$var wire 1 S? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 L? in1 $end
$var wire 1 P? in2 $end
$var wire 1 T? out $end
$upscope $end

$scope module not2 $end
$var wire 1 T? in1 $end
$var wire 1 U? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S? in1 $end
$var wire 1 U? in2 $end
$var wire 1 V? out $end
$upscope $end

$scope module not3 $end
$var wire 1 V? in1 $end
$var wire 1 W? out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 @& A $end
$var wire 1 &? B $end
$var wire 1 M? Cin $end
$var wire 1 6? S $end
$var wire 1 N? Cout $end
$var wire 1 X? xor_AB $end
$var wire 1 Y? xor_ABCin $end
$var wire 1 Z? NAND_AB $end
$var wire 1 [? not_NAND_AB $end
$var wire 1 \? NAND_Cin_xor_AB $end
$var wire 1 ]? not_NAND_Cin_xor_AB $end
$var wire 1 ^? NOR_2NAND $end
$var wire 1 _? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 @& in1 $end
$var wire 1 &? in2 $end
$var wire 1 X? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 X? in1 $end
$var wire 1 M? in2 $end
$var wire 1 Y? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 @& in1 $end
$var wire 1 &? in2 $end
$var wire 1 Z? out $end
$upscope $end

$scope module not1 $end
$var wire 1 Z? in1 $end
$var wire 1 [? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 M? in1 $end
$var wire 1 X? in2 $end
$var wire 1 \? out $end
$upscope $end

$scope module not2 $end
$var wire 1 \? in1 $end
$var wire 1 ]? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 [? in1 $end
$var wire 1 ]? in2 $end
$var wire 1 ^? out $end
$upscope $end

$scope module not3 $end
$var wire 1 ^? in1 $end
$var wire 1 _? out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ?& A $end
$var wire 1 %? B $end
$var wire 1 N? Cin $end
$var wire 1 5? S $end
$var wire 1 O? Cout $end
$var wire 1 `? xor_AB $end
$var wire 1 a? xor_ABCin $end
$var wire 1 b? NAND_AB $end
$var wire 1 c? not_NAND_AB $end
$var wire 1 d? NAND_Cin_xor_AB $end
$var wire 1 e? not_NAND_Cin_xor_AB $end
$var wire 1 f? NOR_2NAND $end
$var wire 1 g? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ?& in1 $end
$var wire 1 %? in2 $end
$var wire 1 `? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 `? in1 $end
$var wire 1 N? in2 $end
$var wire 1 a? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ?& in1 $end
$var wire 1 %? in2 $end
$var wire 1 b? out $end
$upscope $end

$scope module not1 $end
$var wire 1 b? in1 $end
$var wire 1 c? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 N? in1 $end
$var wire 1 `? in2 $end
$var wire 1 d? out $end
$upscope $end

$scope module not2 $end
$var wire 1 d? in1 $end
$var wire 1 e? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 c? in1 $end
$var wire 1 e? in2 $end
$var wire 1 f? out $end
$upscope $end

$scope module not3 $end
$var wire 1 f? in1 $end
$var wire 1 g? out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 >& A $end
$var wire 1 $? B $end
$var wire 1 O? Cin $end
$var wire 1 4? S $end
$var wire 1 I? Cout $end
$var wire 1 h? xor_AB $end
$var wire 1 i? xor_ABCin $end
$var wire 1 j? NAND_AB $end
$var wire 1 k? not_NAND_AB $end
$var wire 1 l? NAND_Cin_xor_AB $end
$var wire 1 m? not_NAND_Cin_xor_AB $end
$var wire 1 n? NOR_2NAND $end
$var wire 1 o? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 >& in1 $end
$var wire 1 $? in2 $end
$var wire 1 h? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 h? in1 $end
$var wire 1 O? in2 $end
$var wire 1 i? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 >& in1 $end
$var wire 1 $? in2 $end
$var wire 1 j? out $end
$upscope $end

$scope module not1 $end
$var wire 1 j? in1 $end
$var wire 1 k? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 O? in1 $end
$var wire 1 h? in2 $end
$var wire 1 l? out $end
$upscope $end

$scope module not2 $end
$var wire 1 l? in1 $end
$var wire 1 m? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 k? in1 $end
$var wire 1 m? in2 $end
$var wire 1 n? out $end
$upscope $end

$scope module not3 $end
$var wire 1 n? in1 $end
$var wire 1 o? out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 :& A [3] $end
$var wire 1 ;& A [2] $end
$var wire 1 <& A [1] $end
$var wire 1 =& A [0] $end
$var wire 1 ~> B [3] $end
$var wire 1 !? B [2] $end
$var wire 1 "? B [1] $end
$var wire 1 #? B [0] $end
$var wire 1 I? Cin $end
$var wire 1 0? S [3] $end
$var wire 1 1? S [2] $end
$var wire 1 2? S [1] $end
$var wire 1 3? S [0] $end
$var wire 1 J? Cout $end
$var wire 1 p? Cout0 $end
$var wire 1 q? Cout1 $end
$var wire 1 r? Cout2 $end

$scope module f1 $end
$var wire 1 =& A $end
$var wire 1 #? B $end
$var wire 1 I? Cin $end
$var wire 1 3? S $end
$var wire 1 p? Cout $end
$var wire 1 s? xor_AB $end
$var wire 1 t? xor_ABCin $end
$var wire 1 u? NAND_AB $end
$var wire 1 v? not_NAND_AB $end
$var wire 1 w? NAND_Cin_xor_AB $end
$var wire 1 x? not_NAND_Cin_xor_AB $end
$var wire 1 y? NOR_2NAND $end
$var wire 1 z? not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 =& in1 $end
$var wire 1 #? in2 $end
$var wire 1 s? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s? in1 $end
$var wire 1 I? in2 $end
$var wire 1 t? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 =& in1 $end
$var wire 1 #? in2 $end
$var wire 1 u? out $end
$upscope $end

$scope module not1 $end
$var wire 1 u? in1 $end
$var wire 1 v? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 I? in1 $end
$var wire 1 s? in2 $end
$var wire 1 w? out $end
$upscope $end

$scope module not2 $end
$var wire 1 w? in1 $end
$var wire 1 x? out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v? in1 $end
$var wire 1 x? in2 $end
$var wire 1 y? out $end
$upscope $end

$scope module not3 $end
$var wire 1 y? in1 $end
$var wire 1 z? out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 <& A $end
$var wire 1 "? B $end
$var wire 1 p? Cin $end
$var wire 1 2? S $end
$var wire 1 q? Cout $end
$var wire 1 {? xor_AB $end
$var wire 1 |? xor_ABCin $end
$var wire 1 }? NAND_AB $end
$var wire 1 ~? not_NAND_AB $end
$var wire 1 !@ NAND_Cin_xor_AB $end
$var wire 1 "@ not_NAND_Cin_xor_AB $end
$var wire 1 #@ NOR_2NAND $end
$var wire 1 $@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 <& in1 $end
$var wire 1 "? in2 $end
$var wire 1 {? out $end
$upscope $end

$scope module xor2 $end
$var wire 1 {? in1 $end
$var wire 1 p? in2 $end
$var wire 1 |? out $end
$upscope $end

$scope module nand1 $end
$var wire 1 <& in1 $end
$var wire 1 "? in2 $end
$var wire 1 }? out $end
$upscope $end

$scope module not1 $end
$var wire 1 }? in1 $end
$var wire 1 ~? out $end
$upscope $end

$scope module nand2 $end
$var wire 1 p? in1 $end
$var wire 1 {? in2 $end
$var wire 1 !@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 !@ in1 $end
$var wire 1 "@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ~? in1 $end
$var wire 1 "@ in2 $end
$var wire 1 #@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 #@ in1 $end
$var wire 1 $@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 ;& A $end
$var wire 1 !? B $end
$var wire 1 q? Cin $end
$var wire 1 1? S $end
$var wire 1 r? Cout $end
$var wire 1 %@ xor_AB $end
$var wire 1 &@ xor_ABCin $end
$var wire 1 '@ NAND_AB $end
$var wire 1 (@ not_NAND_AB $end
$var wire 1 )@ NAND_Cin_xor_AB $end
$var wire 1 *@ not_NAND_Cin_xor_AB $end
$var wire 1 +@ NOR_2NAND $end
$var wire 1 ,@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 ;& in1 $end
$var wire 1 !? in2 $end
$var wire 1 %@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 %@ in1 $end
$var wire 1 q? in2 $end
$var wire 1 &@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 ;& in1 $end
$var wire 1 !? in2 $end
$var wire 1 '@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 '@ in1 $end
$var wire 1 (@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 q? in1 $end
$var wire 1 %@ in2 $end
$var wire 1 )@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 )@ in1 $end
$var wire 1 *@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 (@ in1 $end
$var wire 1 *@ in2 $end
$var wire 1 +@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 +@ in1 $end
$var wire 1 ,@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 :& A $end
$var wire 1 ~> B $end
$var wire 1 r? Cin $end
$var wire 1 0? S $end
$var wire 1 J? Cout $end
$var wire 1 -@ xor_AB $end
$var wire 1 .@ xor_ABCin $end
$var wire 1 /@ NAND_AB $end
$var wire 1 0@ not_NAND_AB $end
$var wire 1 1@ NAND_Cin_xor_AB $end
$var wire 1 2@ not_NAND_Cin_xor_AB $end
$var wire 1 3@ NOR_2NAND $end
$var wire 1 4@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 :& in1 $end
$var wire 1 ~> in2 $end
$var wire 1 -@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 -@ in1 $end
$var wire 1 r? in2 $end
$var wire 1 .@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 :& in1 $end
$var wire 1 ~> in2 $end
$var wire 1 /@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 /@ in1 $end
$var wire 1 0@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 r? in1 $end
$var wire 1 -@ in2 $end
$var wire 1 1@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 1@ in1 $end
$var wire 1 2@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 0@ in1 $end
$var wire 1 2@ in2 $end
$var wire 1 3@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 3@ in1 $end
$var wire 1 4@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 6& A [3] $end
$var wire 1 7& A [2] $end
$var wire 1 8& A [1] $end
$var wire 1 9& A [0] $end
$var wire 1 z> B [3] $end
$var wire 1 {> B [2] $end
$var wire 1 |> B [1] $end
$var wire 1 }> B [0] $end
$var wire 1 J? Cin $end
$var wire 1 ,? S [3] $end
$var wire 1 -? S [2] $end
$var wire 1 .? S [1] $end
$var wire 1 /? S [0] $end
$var wire 1 K? Cout $end
$var wire 1 5@ Cout0 $end
$var wire 1 6@ Cout1 $end
$var wire 1 7@ Cout2 $end

$scope module f1 $end
$var wire 1 9& A $end
$var wire 1 }> B $end
$var wire 1 J? Cin $end
$var wire 1 /? S $end
$var wire 1 5@ Cout $end
$var wire 1 8@ xor_AB $end
$var wire 1 9@ xor_ABCin $end
$var wire 1 :@ NAND_AB $end
$var wire 1 ;@ not_NAND_AB $end
$var wire 1 <@ NAND_Cin_xor_AB $end
$var wire 1 =@ not_NAND_Cin_xor_AB $end
$var wire 1 >@ NOR_2NAND $end
$var wire 1 ?@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 9& in1 $end
$var wire 1 }> in2 $end
$var wire 1 8@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 8@ in1 $end
$var wire 1 J? in2 $end
$var wire 1 9@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 9& in1 $end
$var wire 1 }> in2 $end
$var wire 1 :@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 :@ in1 $end
$var wire 1 ;@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 J? in1 $end
$var wire 1 8@ in2 $end
$var wire 1 <@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 <@ in1 $end
$var wire 1 =@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ;@ in1 $end
$var wire 1 =@ in2 $end
$var wire 1 >@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 >@ in1 $end
$var wire 1 ?@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 8& A $end
$var wire 1 |> B $end
$var wire 1 5@ Cin $end
$var wire 1 .? S $end
$var wire 1 6@ Cout $end
$var wire 1 @@ xor_AB $end
$var wire 1 A@ xor_ABCin $end
$var wire 1 B@ NAND_AB $end
$var wire 1 C@ not_NAND_AB $end
$var wire 1 D@ NAND_Cin_xor_AB $end
$var wire 1 E@ not_NAND_Cin_xor_AB $end
$var wire 1 F@ NOR_2NAND $end
$var wire 1 G@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 8& in1 $end
$var wire 1 |> in2 $end
$var wire 1 @@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 @@ in1 $end
$var wire 1 5@ in2 $end
$var wire 1 A@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 8& in1 $end
$var wire 1 |> in2 $end
$var wire 1 B@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 B@ in1 $end
$var wire 1 C@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 5@ in1 $end
$var wire 1 @@ in2 $end
$var wire 1 D@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 D@ in1 $end
$var wire 1 E@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 C@ in1 $end
$var wire 1 E@ in2 $end
$var wire 1 F@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 F@ in1 $end
$var wire 1 G@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 7& A $end
$var wire 1 {> B $end
$var wire 1 6@ Cin $end
$var wire 1 -? S $end
$var wire 1 7@ Cout $end
$var wire 1 H@ xor_AB $end
$var wire 1 I@ xor_ABCin $end
$var wire 1 J@ NAND_AB $end
$var wire 1 K@ not_NAND_AB $end
$var wire 1 L@ NAND_Cin_xor_AB $end
$var wire 1 M@ not_NAND_Cin_xor_AB $end
$var wire 1 N@ NOR_2NAND $end
$var wire 1 O@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 7& in1 $end
$var wire 1 {> in2 $end
$var wire 1 H@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 H@ in1 $end
$var wire 1 6@ in2 $end
$var wire 1 I@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 7& in1 $end
$var wire 1 {> in2 $end
$var wire 1 J@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 J@ in1 $end
$var wire 1 K@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 6@ in1 $end
$var wire 1 H@ in2 $end
$var wire 1 L@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 L@ in1 $end
$var wire 1 M@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 K@ in1 $end
$var wire 1 M@ in2 $end
$var wire 1 N@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 N@ in1 $end
$var wire 1 O@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 6& A $end
$var wire 1 z> B $end
$var wire 1 7@ Cin $end
$var wire 1 ,? S $end
$var wire 1 K? Cout $end
$var wire 1 P@ xor_AB $end
$var wire 1 Q@ xor_ABCin $end
$var wire 1 R@ NAND_AB $end
$var wire 1 S@ not_NAND_AB $end
$var wire 1 T@ NAND_Cin_xor_AB $end
$var wire 1 U@ not_NAND_Cin_xor_AB $end
$var wire 1 V@ NOR_2NAND $end
$var wire 1 W@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 6& in1 $end
$var wire 1 z> in2 $end
$var wire 1 P@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 P@ in1 $end
$var wire 1 7@ in2 $end
$var wire 1 Q@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 6& in1 $end
$var wire 1 z> in2 $end
$var wire 1 R@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 R@ in1 $end
$var wire 1 S@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 7@ in1 $end
$var wire 1 P@ in2 $end
$var wire 1 T@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 T@ in1 $end
$var wire 1 U@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 S@ in1 $end
$var wire 1 U@ in2 $end
$var wire 1 V@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 V@ in1 $end
$var wire 1 W@ out $end
$upscope $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A [3] $end
$var wire 1 3& A [2] $end
$var wire 1 4& A [1] $end
$var wire 1 5& A [0] $end
$var wire 1 v> B [3] $end
$var wire 1 w> B [2] $end
$var wire 1 x> B [1] $end
$var wire 1 y> B [0] $end
$var wire 1 K? Cin $end
$var wire 1 (? S [3] $end
$var wire 1 )? S [2] $end
$var wire 1 *? S [1] $end
$var wire 1 +? S [0] $end
$var wire 1 H? Cout $end
$var wire 1 X@ Cout0 $end
$var wire 1 Y@ Cout1 $end
$var wire 1 Z@ Cout2 $end

$scope module f1 $end
$var wire 1 5& A $end
$var wire 1 y> B $end
$var wire 1 K? Cin $end
$var wire 1 +? S $end
$var wire 1 X@ Cout $end
$var wire 1 [@ xor_AB $end
$var wire 1 \@ xor_ABCin $end
$var wire 1 ]@ NAND_AB $end
$var wire 1 ^@ not_NAND_AB $end
$var wire 1 _@ NAND_Cin_xor_AB $end
$var wire 1 `@ not_NAND_Cin_xor_AB $end
$var wire 1 a@ NOR_2NAND $end
$var wire 1 b@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 5& in1 $end
$var wire 1 y> in2 $end
$var wire 1 [@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 [@ in1 $end
$var wire 1 K? in2 $end
$var wire 1 \@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 5& in1 $end
$var wire 1 y> in2 $end
$var wire 1 ]@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 ]@ in1 $end
$var wire 1 ^@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 K? in1 $end
$var wire 1 [@ in2 $end
$var wire 1 _@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 _@ in1 $end
$var wire 1 `@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 ^@ in1 $end
$var wire 1 `@ in2 $end
$var wire 1 a@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 a@ in1 $end
$var wire 1 b@ out $end
$upscope $end
$upscope $end

$scope module f2 $end
$var wire 1 4& A $end
$var wire 1 x> B $end
$var wire 1 X@ Cin $end
$var wire 1 *? S $end
$var wire 1 Y@ Cout $end
$var wire 1 c@ xor_AB $end
$var wire 1 d@ xor_ABCin $end
$var wire 1 e@ NAND_AB $end
$var wire 1 f@ not_NAND_AB $end
$var wire 1 g@ NAND_Cin_xor_AB $end
$var wire 1 h@ not_NAND_Cin_xor_AB $end
$var wire 1 i@ NOR_2NAND $end
$var wire 1 j@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 4& in1 $end
$var wire 1 x> in2 $end
$var wire 1 c@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 c@ in1 $end
$var wire 1 X@ in2 $end
$var wire 1 d@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 4& in1 $end
$var wire 1 x> in2 $end
$var wire 1 e@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 e@ in1 $end
$var wire 1 f@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 X@ in1 $end
$var wire 1 c@ in2 $end
$var wire 1 g@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 g@ in1 $end
$var wire 1 h@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 f@ in1 $end
$var wire 1 h@ in2 $end
$var wire 1 i@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 i@ in1 $end
$var wire 1 j@ out $end
$upscope $end
$upscope $end

$scope module f3 $end
$var wire 1 3& A $end
$var wire 1 w> B $end
$var wire 1 Y@ Cin $end
$var wire 1 )? S $end
$var wire 1 Z@ Cout $end
$var wire 1 k@ xor_AB $end
$var wire 1 l@ xor_ABCin $end
$var wire 1 m@ NAND_AB $end
$var wire 1 n@ not_NAND_AB $end
$var wire 1 o@ NAND_Cin_xor_AB $end
$var wire 1 p@ not_NAND_Cin_xor_AB $end
$var wire 1 q@ NOR_2NAND $end
$var wire 1 r@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 3& in1 $end
$var wire 1 w> in2 $end
$var wire 1 k@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 k@ in1 $end
$var wire 1 Y@ in2 $end
$var wire 1 l@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 3& in1 $end
$var wire 1 w> in2 $end
$var wire 1 m@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 m@ in1 $end
$var wire 1 n@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Y@ in1 $end
$var wire 1 k@ in2 $end
$var wire 1 o@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 o@ in1 $end
$var wire 1 p@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 n@ in1 $end
$var wire 1 p@ in2 $end
$var wire 1 q@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 q@ in1 $end
$var wire 1 r@ out $end
$upscope $end
$upscope $end

$scope module f4 $end
$var wire 1 2& A $end
$var wire 1 v> B $end
$var wire 1 Z@ Cin $end
$var wire 1 (? S $end
$var wire 1 H? Cout $end
$var wire 1 s@ xor_AB $end
$var wire 1 t@ xor_ABCin $end
$var wire 1 u@ NAND_AB $end
$var wire 1 v@ not_NAND_AB $end
$var wire 1 w@ NAND_Cin_xor_AB $end
$var wire 1 x@ not_NAND_Cin_xor_AB $end
$var wire 1 y@ NOR_2NAND $end
$var wire 1 z@ not_NOR_2NAND $end

$scope module xor1 $end
$var wire 1 2& in1 $end
$var wire 1 v> in2 $end
$var wire 1 s@ out $end
$upscope $end

$scope module xor2 $end
$var wire 1 s@ in1 $end
$var wire 1 Z@ in2 $end
$var wire 1 t@ out $end
$upscope $end

$scope module nand1 $end
$var wire 1 2& in1 $end
$var wire 1 v> in2 $end
$var wire 1 u@ out $end
$upscope $end

$scope module not1 $end
$var wire 1 u@ in1 $end
$var wire 1 v@ out $end
$upscope $end

$scope module nand2 $end
$var wire 1 Z@ in1 $end
$var wire 1 s@ in2 $end
$var wire 1 w@ out $end
$upscope $end

$scope module not2 $end
$var wire 1 w@ in1 $end
$var wire 1 x@ out $end
$upscope $end

$scope module nor1 $end
$var wire 1 v@ in1 $end
$var wire 1 x@ in2 $end
$var wire 1 y@ out $end
$upscope $end

$scope module not3 $end
$var wire 1 y@ in1 $end
$var wire 1 z@ out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end

$scope module instruction_mem $end
$var wire 1 X& data_out [15] $end
$var wire 1 Y& data_out [14] $end
$var wire 1 Z& data_out [13] $end
$var wire 1 [& data_out [12] $end
$var wire 1 \& data_out [11] $end
$var wire 1 ]& data_out [10] $end
$var wire 1 ^& data_out [9] $end
$var wire 1 _& data_out [8] $end
$var wire 1 `& data_out [7] $end
$var wire 1 a& data_out [6] $end
$var wire 1 b& data_out [5] $end
$var wire 1 c& data_out [4] $end
$var wire 1 d& data_out [3] $end
$var wire 1 e& data_out [2] $end
$var wire 1 f& data_out [1] $end
$var wire 1 g& data_out [0] $end
$var wire 1 "& data_in [15] $end
$var wire 1 #& data_in [14] $end
$var wire 1 $& data_in [13] $end
$var wire 1 %& data_in [12] $end
$var wire 1 && data_in [11] $end
$var wire 1 '& data_in [10] $end
$var wire 1 (& data_in [9] $end
$var wire 1 )& data_in [8] $end
$var wire 1 *& data_in [7] $end
$var wire 1 +& data_in [6] $end
$var wire 1 ,& data_in [5] $end
$var wire 1 -& data_in [4] $end
$var wire 1 .& data_in [3] $end
$var wire 1 /& data_in [2] $end
$var wire 1 0& data_in [1] $end
$var wire 1 1& data_in [0] $end
$var wire 1 ;% addr [15] $end
$var wire 1 <% addr [14] $end
$var wire 1 =% addr [13] $end
$var wire 1 >% addr [12] $end
$var wire 1 ?% addr [11] $end
$var wire 1 @% addr [10] $end
$var wire 1 A% addr [9] $end
$var wire 1 B% addr [8] $end
$var wire 1 C% addr [7] $end
$var wire 1 D% addr [6] $end
$var wire 1 E% addr [5] $end
$var wire 1 F% addr [4] $end
$var wire 1 G% addr [3] $end
$var wire 1 H% addr [2] $end
$var wire 1 I% addr [1] $end
$var wire 1 J% addr [0] $end
$var wire 1 {@ enable $end
$var wire 1 n% wr $end
$var wire 1 o% createdump $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module latch4 $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$var wire 1 X& MemRead_in [15] $end
$var wire 1 Y& MemRead_in [14] $end
$var wire 1 Z& MemRead_in [13] $end
$var wire 1 [& MemRead_in [12] $end
$var wire 1 \& MemRead_in [11] $end
$var wire 1 ]& MemRead_in [10] $end
$var wire 1 ^& MemRead_in [9] $end
$var wire 1 _& MemRead_in [8] $end
$var wire 1 `& MemRead_in [7] $end
$var wire 1 a& MemRead_in [6] $end
$var wire 1 b& MemRead_in [5] $end
$var wire 1 c& MemRead_in [4] $end
$var wire 1 d& MemRead_in [3] $end
$var wire 1 e& MemRead_in [2] $end
$var wire 1 f& MemRead_in [1] $end
$var wire 1 g& MemRead_in [0] $end
$var wire 1 h& mem_data_out [15] $end
$var wire 1 i& mem_data_out [14] $end
$var wire 1 j& mem_data_out [13] $end
$var wire 1 k& mem_data_out [12] $end
$var wire 1 l& mem_data_out [11] $end
$var wire 1 m& mem_data_out [10] $end
$var wire 1 n& mem_data_out [9] $end
$var wire 1 o& mem_data_out [8] $end
$var wire 1 p& mem_data_out [7] $end
$var wire 1 q& mem_data_out [6] $end
$var wire 1 r& mem_data_out [5] $end
$var wire 1 s& mem_data_out [4] $end
$var wire 1 t& mem_data_out [3] $end
$var wire 1 u& mem_data_out [2] $end
$var wire 1 v& mem_data_out [1] $end
$var wire 1 w& mem_data_out [0] $end
$var wire 1 S& RegSrc_in [1] $end
$var wire 1 T& RegSrc_in [0] $end
$var wire 1 :' RegSrc_out [1] $end
$var wire 1 ;' RegSrc_out [0] $end
$var wire 1 ;% alu_data_in [15] $end
$var wire 1 <% alu_data_in [14] $end
$var wire 1 =% alu_data_in [13] $end
$var wire 1 >% alu_data_in [12] $end
$var wire 1 ?% alu_data_in [11] $end
$var wire 1 @% alu_data_in [10] $end
$var wire 1 A% alu_data_in [9] $end
$var wire 1 B% alu_data_in [8] $end
$var wire 1 C% alu_data_in [7] $end
$var wire 1 D% alu_data_in [6] $end
$var wire 1 E% alu_data_in [5] $end
$var wire 1 F% alu_data_in [4] $end
$var wire 1 G% alu_data_in [3] $end
$var wire 1 H% alu_data_in [2] $end
$var wire 1 I% alu_data_in [1] $end
$var wire 1 J% alu_data_in [0] $end
$var wire 1 2& pc_data_in [15] $end
$var wire 1 3& pc_data_in [14] $end
$var wire 1 4& pc_data_in [13] $end
$var wire 1 5& pc_data_in [12] $end
$var wire 1 6& pc_data_in [11] $end
$var wire 1 7& pc_data_in [10] $end
$var wire 1 8& pc_data_in [9] $end
$var wire 1 9& pc_data_in [8] $end
$var wire 1 :& pc_data_in [7] $end
$var wire 1 ;& pc_data_in [6] $end
$var wire 1 <& pc_data_in [5] $end
$var wire 1 =& pc_data_in [4] $end
$var wire 1 >& pc_data_in [3] $end
$var wire 1 ?& pc_data_in [2] $end
$var wire 1 @& pc_data_in [1] $end
$var wire 1 A& pc_data_in [0] $end
$var wire 1 [% Binput_in [15] $end
$var wire 1 \% Binput_in [14] $end
$var wire 1 ]% Binput_in [13] $end
$var wire 1 ^% Binput_in [12] $end
$var wire 1 _% Binput_in [11] $end
$var wire 1 `% Binput_in [10] $end
$var wire 1 a% Binput_in [9] $end
$var wire 1 b% Binput_in [8] $end
$var wire 1 c% Binput_in [7] $end
$var wire 1 d% Binput_in [6] $end
$var wire 1 e% Binput_in [5] $end
$var wire 1 f% Binput_in [4] $end
$var wire 1 g% Binput_in [3] $end
$var wire 1 h% Binput_in [2] $end
$var wire 1 i% Binput_in [1] $end
$var wire 1 j% Binput_in [0] $end
$var wire 1 M' alu_data_out [15] $end
$var wire 1 N' alu_data_out [14] $end
$var wire 1 O' alu_data_out [13] $end
$var wire 1 P' alu_data_out [12] $end
$var wire 1 Q' alu_data_out [11] $end
$var wire 1 R' alu_data_out [10] $end
$var wire 1 S' alu_data_out [9] $end
$var wire 1 T' alu_data_out [8] $end
$var wire 1 U' alu_data_out [7] $end
$var wire 1 V' alu_data_out [6] $end
$var wire 1 W' alu_data_out [5] $end
$var wire 1 X' alu_data_out [4] $end
$var wire 1 Y' alu_data_out [3] $end
$var wire 1 Z' alu_data_out [2] $end
$var wire 1 [' alu_data_out [1] $end
$var wire 1 \' alu_data_out [0] $end
$var wire 1 *' pc_data_out [15] $end
$var wire 1 +' pc_data_out [14] $end
$var wire 1 ,' pc_data_out [13] $end
$var wire 1 -' pc_data_out [12] $end
$var wire 1 .' pc_data_out [11] $end
$var wire 1 /' pc_data_out [10] $end
$var wire 1 0' pc_data_out [9] $end
$var wire 1 1' pc_data_out [8] $end
$var wire 1 2' pc_data_out [7] $end
$var wire 1 3' pc_data_out [6] $end
$var wire 1 4' pc_data_out [5] $end
$var wire 1 5' pc_data_out [4] $end
$var wire 1 6' pc_data_out [3] $end
$var wire 1 7' pc_data_out [2] $end
$var wire 1 8' pc_data_out [1] $end
$var wire 1 9' pc_data_out [0] $end
$var wire 1 <' Binput_out [15] $end
$var wire 1 =' Binput_out [14] $end
$var wire 1 >' Binput_out [13] $end
$var wire 1 ?' Binput_out [12] $end
$var wire 1 @' Binput_out [11] $end
$var wire 1 A' Binput_out [10] $end
$var wire 1 B' Binput_out [9] $end
$var wire 1 C' Binput_out [8] $end
$var wire 1 D' Binput_out [7] $end
$var wire 1 E' Binput_out [6] $end
$var wire 1 F' Binput_out [5] $end
$var wire 1 G' Binput_out [4] $end
$var wire 1 H' Binput_out [3] $end
$var wire 1 I' Binput_out [2] $end
$var wire 1 J' Binput_out [1] $end
$var wire 1 K' Binput_out [0] $end
$var wire 1 R& RegWrt_in $end
$var wire 1 L' RegWrt_out $end
$var wire 1 W( SendNOP_In $end
$var wire 1 X( SendNOP_Out $end
$var wire 1 U& write_reg_in [2] $end
$var wire 1 V& write_reg_in [1] $end
$var wire 1 W& write_reg_in [0] $end
$var wire 1 ]' write_reg_out [2] $end
$var wire 1 ^' write_reg_out [1] $end
$var wire 1 _' write_reg_out [0] $end

$scope module RegWrt $end
$var wire 1 L' q $end
$var wire 1 R& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module SendNOP $end
$var wire 1 X( q $end
$var wire 1 W( d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[1] $end
$var wire 1 :' q $end
$var wire 1 S& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module RegSrc[0] $end
$var wire 1 ;' q $end
$var wire 1 T& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[15] $end
$var wire 1 h& q $end
$var wire 1 X& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[14] $end
$var wire 1 i& q $end
$var wire 1 Y& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[13] $end
$var wire 1 j& q $end
$var wire 1 Z& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[12] $end
$var wire 1 k& q $end
$var wire 1 [& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[11] $end
$var wire 1 l& q $end
$var wire 1 \& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[10] $end
$var wire 1 m& q $end
$var wire 1 ]& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[9] $end
$var wire 1 n& q $end
$var wire 1 ^& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[8] $end
$var wire 1 o& q $end
$var wire 1 _& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[7] $end
$var wire 1 p& q $end
$var wire 1 `& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[6] $end
$var wire 1 q& q $end
$var wire 1 a& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[5] $end
$var wire 1 r& q $end
$var wire 1 b& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[4] $end
$var wire 1 s& q $end
$var wire 1 c& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[3] $end
$var wire 1 t& q $end
$var wire 1 d& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[2] $end
$var wire 1 u& q $end
$var wire 1 e& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[1] $end
$var wire 1 v& q $end
$var wire 1 f& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module MemRead[0] $end
$var wire 1 w& q $end
$var wire 1 g& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[15] $end
$var wire 1 M' q $end
$var wire 1 ;% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[14] $end
$var wire 1 N' q $end
$var wire 1 <% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[13] $end
$var wire 1 O' q $end
$var wire 1 =% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[12] $end
$var wire 1 P' q $end
$var wire 1 >% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[11] $end
$var wire 1 Q' q $end
$var wire 1 ?% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[10] $end
$var wire 1 R' q $end
$var wire 1 @% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[9] $end
$var wire 1 S' q $end
$var wire 1 A% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[8] $end
$var wire 1 T' q $end
$var wire 1 B% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[7] $end
$var wire 1 U' q $end
$var wire 1 C% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[6] $end
$var wire 1 V' q $end
$var wire 1 D% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[5] $end
$var wire 1 W' q $end
$var wire 1 E% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[4] $end
$var wire 1 X' q $end
$var wire 1 F% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[3] $end
$var wire 1 Y' q $end
$var wire 1 G% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[2] $end
$var wire 1 Z' q $end
$var wire 1 H% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[1] $end
$var wire 1 [' q $end
$var wire 1 I% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module alu_data[0] $end
$var wire 1 \' q $end
$var wire 1 J% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[15] $end
$var wire 1 *' q $end
$var wire 1 2& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[14] $end
$var wire 1 +' q $end
$var wire 1 3& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[13] $end
$var wire 1 ,' q $end
$var wire 1 4& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[12] $end
$var wire 1 -' q $end
$var wire 1 5& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[11] $end
$var wire 1 .' q $end
$var wire 1 6& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[10] $end
$var wire 1 /' q $end
$var wire 1 7& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[9] $end
$var wire 1 0' q $end
$var wire 1 8& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[8] $end
$var wire 1 1' q $end
$var wire 1 9& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[7] $end
$var wire 1 2' q $end
$var wire 1 :& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[6] $end
$var wire 1 3' q $end
$var wire 1 ;& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[5] $end
$var wire 1 4' q $end
$var wire 1 <& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[4] $end
$var wire 1 5' q $end
$var wire 1 =& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[3] $end
$var wire 1 6' q $end
$var wire 1 >& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[2] $end
$var wire 1 7' q $end
$var wire 1 ?& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[1] $end
$var wire 1 8' q $end
$var wire 1 @& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module pc_data[0] $end
$var wire 1 9' q $end
$var wire 1 A& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[15] $end
$var wire 1 <' q $end
$var wire 1 [% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[14] $end
$var wire 1 =' q $end
$var wire 1 \% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[13] $end
$var wire 1 >' q $end
$var wire 1 ]% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[12] $end
$var wire 1 ?' q $end
$var wire 1 ^% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[11] $end
$var wire 1 @' q $end
$var wire 1 _% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[10] $end
$var wire 1 A' q $end
$var wire 1 `% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[9] $end
$var wire 1 B' q $end
$var wire 1 a% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[8] $end
$var wire 1 C' q $end
$var wire 1 b% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[7] $end
$var wire 1 D' q $end
$var wire 1 c% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[6] $end
$var wire 1 E' q $end
$var wire 1 d% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[5] $end
$var wire 1 F' q $end
$var wire 1 e% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[4] $end
$var wire 1 G' q $end
$var wire 1 f% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[3] $end
$var wire 1 H' q $end
$var wire 1 g% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[2] $end
$var wire 1 I' q $end
$var wire 1 h% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[1] $end
$var wire 1 J' q $end
$var wire 1 i% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module Binput[0] $end
$var wire 1 K' q $end
$var wire 1 j% d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[2] $end
$var wire 1 ]' q $end
$var wire 1 U& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[1] $end
$var wire 1 ^' q $end
$var wire 1 V& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end

$scope module write_reg[0] $end
$var wire 1 _' q $end
$var wire 1 W& d $end
$var wire 1 7! clk $end
$var wire 1 9! rst $end
$upscope $end
$upscope $end

$scope module iDUU5 $end
$var wire 1 :' RegSrc [1] $end
$var wire 1 ;' RegSrc [0] $end
$var wire 1 h& mem_data [15] $end
$var wire 1 i& mem_data [14] $end
$var wire 1 j& mem_data [13] $end
$var wire 1 k& mem_data [12] $end
$var wire 1 l& mem_data [11] $end
$var wire 1 m& mem_data [10] $end
$var wire 1 n& mem_data [9] $end
$var wire 1 o& mem_data [8] $end
$var wire 1 p& mem_data [7] $end
$var wire 1 q& mem_data [6] $end
$var wire 1 r& mem_data [5] $end
$var wire 1 s& mem_data [4] $end
$var wire 1 t& mem_data [3] $end
$var wire 1 u& mem_data [2] $end
$var wire 1 v& mem_data [1] $end
$var wire 1 w& mem_data [0] $end
$var wire 1 M' alu_data [15] $end
$var wire 1 N' alu_data [14] $end
$var wire 1 O' alu_data [13] $end
$var wire 1 P' alu_data [12] $end
$var wire 1 Q' alu_data [11] $end
$var wire 1 R' alu_data [10] $end
$var wire 1 S' alu_data [9] $end
$var wire 1 T' alu_data [8] $end
$var wire 1 U' alu_data [7] $end
$var wire 1 V' alu_data [6] $end
$var wire 1 W' alu_data [5] $end
$var wire 1 X' alu_data [4] $end
$var wire 1 Y' alu_data [3] $end
$var wire 1 Z' alu_data [2] $end
$var wire 1 [' alu_data [1] $end
$var wire 1 \' alu_data [0] $end
$var wire 1 *' pc_data [15] $end
$var wire 1 +' pc_data [14] $end
$var wire 1 ,' pc_data [13] $end
$var wire 1 -' pc_data [12] $end
$var wire 1 .' pc_data [11] $end
$var wire 1 /' pc_data [10] $end
$var wire 1 0' pc_data [9] $end
$var wire 1 1' pc_data [8] $end
$var wire 1 2' pc_data [7] $end
$var wire 1 3' pc_data [6] $end
$var wire 1 4' pc_data [5] $end
$var wire 1 5' pc_data [4] $end
$var wire 1 6' pc_data [3] $end
$var wire 1 7' pc_data [2] $end
$var wire 1 8' pc_data [1] $end
$var wire 1 9' pc_data [0] $end
$var wire 1 <' Binput [15] $end
$var wire 1 =' Binput [14] $end
$var wire 1 >' Binput [13] $end
$var wire 1 ?' Binput [12] $end
$var wire 1 @' Binput [11] $end
$var wire 1 A' Binput [10] $end
$var wire 1 B' Binput [9] $end
$var wire 1 C' Binput [8] $end
$var wire 1 D' Binput [7] $end
$var wire 1 E' Binput [6] $end
$var wire 1 F' Binput [5] $end
$var wire 1 G' Binput [4] $end
$var wire 1 H' Binput [3] $end
$var wire 1 I' Binput [2] $end
$var wire 1 J' Binput [1] $end
$var wire 1 K' Binput [0] $end
$var wire 1 >! data_to_write [15] $end
$var wire 1 ?! data_to_write [14] $end
$var wire 1 @! data_to_write [13] $end
$var wire 1 A! data_to_write [12] $end
$var wire 1 B! data_to_write [11] $end
$var wire 1 C! data_to_write [10] $end
$var wire 1 D! data_to_write [9] $end
$var wire 1 E! data_to_write [8] $end
$var wire 1 F! data_to_write [7] $end
$var wire 1 G! data_to_write [6] $end
$var wire 1 H! data_to_write [5] $end
$var wire 1 I! data_to_write [4] $end
$var wire 1 J! data_to_write [3] $end
$var wire 1 K! data_to_write [2] $end
$var wire 1 L! data_to_write [1] $end
$var wire 1 M! data_to_write [0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1:!
1;!
x=!
1Y(
1Z(
0h*
0g*
0f*
0e*
0d*
0c*
0b*
0a*
0`*
0_*
0^*
0]*
0\*
0[*
0Z*
0Y*
1U*
b0 V*
0y*
0x*
0w*
0v*
0u*
0t*
0s*
0r*
0q*
0p*
0o*
0n*
0m*
0l*
0k*
0j*
b100000000000 i*
0++
0*+
0)+
0(+
0'+
0&+
0%+
0$+
0#+
0"+
0!+
0~*
0}*
0|*
0{*
0z*
xl+
xm+
bx n+
xo+
xp+
bx q+
bx r+
xs+
xt+
xu+
xv+
xw+
xx+
bx y+
xz+
x{+
bx |+
bx }+
0k-
0i-
0g-
0e-
0c-
0a-
0_-
0]-
0[-
0Y-
0W-
0U-
0S-
0Q-
0O-
0M-
0..
0,.
0*.
0(.
0&.
0$.
0".
0~-
0|-
0z-
0x-
0v-
0t-
0r-
0p-
0n-
0O.
0M.
0K.
0I.
0G.
0E.
0C.
0A.
0?.
0=.
0;.
09.
07.
05.
03.
01.
0p.
0n.
0l.
0j.
0h.
0f.
0d.
0b.
0`.
0^.
0\.
0Z.
0X.
0V.
0T.
0R.
03/
01/
0//
0-/
0+/
0)/
0'/
0%/
0#/
0!/
0}.
0{.
0y.
0w.
0u.
0s.
0T/
0R/
0P/
0N/
0L/
0J/
0H/
0F/
0D/
0B/
0@/
0>/
0</
0:/
08/
06/
0u/
0s/
0q/
0o/
0m/
0k/
0i/
0g/
0e/
0c/
0a/
0_/
0]/
0[/
0Y/
0W/
080
060
040
020
000
0.0
0,0
0*0
0(0
0&0
0$0
0"0
0~/
0|/
0z/
0x/
0O0
0N0
0C0
0D0
0R0
0Q0
0P0
0T0
0S0
0E0
0F0
0W0
0V0
0U0
0G0
0g0
0f0
0e0
0d0
0c0
0b0
0a0
0`0
0_0
0^0
0]0
0\0
0[0
0Z0
0Y0
0X0
0w0
0v0
0u0
0t0
0s0
0r0
0q0
0p0
0o0
0n0
0m0
0l0
0k0
0j0
0i0
0h0
0)1
0(1
0'1
0&1
0%1
0$1
0#1
0"1
0!1
0~0
0}0
0|0
0{0
0z0
0y0
0x0
091
081
071
061
051
041
031
021
011
001
0/1
0.1
0-1
0,1
0+1
0*1
0I1
0H1
0G1
0F1
0E1
0D1
0C1
0B1
0A1
0@1
0?1
0>1
0=1
0<1
0;1
0:1
0H0
0I0
0J0
0K0
0Y1
0X1
0W1
0V1
0U1
0T1
0S1
0R1
0Q1
0P1
0O1
0N1
0M1
0L1
0K1
0J1
0L0
0M0
0[1
0Z1
0k1
0j1
0i1
0h1
0g1
0f1
0e1
0d1
0c1
0b1
0a1
0`1
0_1
0^1
0]1
0\1
0n1
0m1
0l1
0~=
0}=
0|=
0{=
0z=
0y=
0x=
0w=
0v=
0u=
0t=
0s=
0r=
0q=
0p=
0o=
00>
0/>
0.>
0->
0,>
0+>
0*>
0)>
0(>
0'>
0&>
0%>
0$>
0#>
0">
0!>
0g=
0h=
0i=
0j=
0k=
0l=
0@>
0?>
0>>
0=>
0<>
0;>
0:>
09>
08>
07>
06>
05>
04>
03>
02>
01>
0P>
0O>
0N>
0M>
0L>
0K>
0J>
0I>
0H>
0G>
0F>
0E>
0D>
0C>
0B>
0A>
0`>
0_>
0^>
0]>
0\>
0[>
0Z>
0Y>
0X>
0W>
0V>
0U>
0T>
0S>
0R>
0Q>
0p>
0o>
0n>
0m>
0l>
0k>
0j>
0i>
0h>
0g>
0f>
0e>
0d>
0c>
0b>
0a>
0m=
0n=
0r>
0q>
0u>
0t>
0s>
1|@
b0 }@
0%A
0$A
05A
04A
03A
02A
01A
00A
0/A
0.A
0-A
0,A
0+A
0*A
0)A
0(A
0'A
0&A
0EA
0DA
0CA
0BA
0AA
0@A
0?A
0>A
0=A
0<A
0;A
0:A
09A
08A
07A
06A
0UA
0TA
0SA
0RA
0QA
0PA
0OA
0NA
0MA
0LA
0KA
0JA
0IA
0HA
0GA
0FA
0eA
0dA
0cA
0bA
0aA
0`A
0_A
0^A
0]A
0\A
0[A
0ZA
0YA
0XA
0WA
0VA
0"A
0#A
0hA
0gA
0fA
b10000 ~+
b10000 K-
b10000 l-
b10000 /.
b10000 P.
b10000 q.
b10000 4/
b10000 U/
b10000 v/
b10000 [3
b100 \3
b10 ]3
b10000 F4
b100 G4
b10000 x4
b100 y4
b10000 L5
b100 M5
b10000 ~5
b100 !6
b10000 R6
b11 S6
b10000 [7
b100 \7
b10 ]7
b10000 @8
b100 A8
b10000 r8
b100 s8
b10000 F9
b100 G9
b10000 x9
b100 y9
b10000 L:
b10 M:
b10000 N:
b100 ,;
b100 e;
b100 @<
b100 y<
b0 .!
b10 /!
b100 0!
b0 1!
b0 2!
b0 3!
b0 4!
b1 <!
b1 \(
bx W*
b10000000000000000 X*
bx ~@
b10000000000000000 !A
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
x"
x!
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
xA
xD
xC
xB
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xU
xV
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
x(!
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
x)!
x*!
x+!
x,!
x-!
17!
x8!
19!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
xN!
z^!
z]!
z\!
z[!
zZ!
zY!
zX!
zW!
zV!
zU!
zT!
zS!
zR!
zQ!
zP!
zO!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
xQ"
xR"
xT"
xS"
xV"
xU"
xW"
xX"
xY"
xZ"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
0F$
0E$
0D$
0C$
0B$
0A$
0@$
0?$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xa$
x`$
x_$
xd$
xc$
xb$
xe$
xf$
xh$
xg$
xj$
xi$
xk$
xl$
xm$
xn$
xq$
xp$
xo$
xt$
xs$
xr$
xu$
xv$
xw$
xx$
xz$
xy$
x|$
x{$
x}$
x~$
x!%
x"%
x%%
x$%
x#%
x(%
x'%
x&%
x)%
x*%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xk%
xl%
xm%
xn%
xo%
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
xQ&
xP&
xO&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xR&
xT&
xS&
xW&
xV&
xU&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x;'
x:'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
xL'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xP'
xO'
xN'
xM'
x_'
x^'
x]'
1`'
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
xB(
xA(
x@(
x?(
x>(
x=(
x<(
x;(
x:(
x9(
x8(
x7(
x6(
x5(
x4(
x3(
xC(
xS(
xR(
xQ(
xP(
xO(
xN(
xM(
xL(
xK(
xJ(
xI(
xH(
xG(
xF(
xE(
xD(
xn(
xo(
xp(
0q(
0r(
xs(
xt(
xu(
xv(
1w(
0x(
1y(
0z(
1{(
0|(
x}(
x~(
x!)
x")
1#)
0$)
x%)
x&)
x')
x()
1))
0*)
x+)
x,)
x-)
x.)
x/)
x0)
11)
02)
x3)
x4)
x5)
x6)
x7)
x8)
x9)
x:)
x;)
1<)
0=)
x>)
x?)
x@)
xA)
xB)
xC)
1D)
0E)
xF)
xG)
xH)
xI)
xJ)
xK)
1L)
0M)
xN)
xO)
xP)
xQ)
xR)
xS)
1T)
0U)
xV)
xW)
xX)
xY)
xZ)
x[)
x\)
x])
x^)
1_)
0`)
xa)
xb)
xc)
xd)
xe)
xf)
1g)
0h)
xi)
xj)
xk)
xl)
xm)
xn)
1o)
0p)
xq)
xr)
xs)
xt)
xu)
xv)
1w)
0x)
xy)
xz)
x{)
x|)
x})
x~)
x!*
x"*
x#*
1$*
0%*
x&*
x'*
x(*
x)*
x**
x+*
1,*
0-*
x.*
x/*
x0*
x1*
x2*
x3*
14*
05*
x6*
x7*
x8*
x9*
x:*
x;*
1<*
0=*
x>*
x?*
x@*
xA*
xT(
xU(
xV(
xW(
xX(
x;+
x:+
x9+
x8+
x7+
x6+
x5+
x4+
x3+
x2+
x1+
x0+
x/+
x.+
x-+
x,+
xK+
xJ+
xI+
xH+
xG+
0F+
0E+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
0=+
0<+
x[+
xZ+
xY+
xX+
xW+
xV+
xU+
xT+
xS+
xR+
xQ+
xP+
xO+
xN+
xM+
xL+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
0c+
0b+
0a+
0`+
0_+
0^+
0]+
0\+
x!,
x",
x#,
x$,
x%,
x&,
x',
x(,
x),
x*,
x+,
x,,
x-,
x.,
x/,
x0,
x1,
x2,
x3,
x4,
x5,
x6,
x7,
x8,
x9,
x:,
x;,
x<,
x=,
x>,
x?,
x@,
xA,
xB,
xC,
xD,
xE,
xF,
xG,
xH,
xI,
xJ,
xK,
xL,
xM,
xN,
xO,
xP,
xQ,
xR,
xS,
xT,
xU,
xV,
xW,
xX,
xY,
xZ,
x[,
x\,
x],
x^,
x_,
x`,
xa,
xb,
xc,
xd,
xe,
xf,
xg,
xh,
xi,
xj,
xk,
xl,
xm,
xn,
xo,
xp,
xq,
xr,
xs,
xt,
xu,
xv,
xw,
xx,
xy,
xz,
x{,
x|,
x},
x~,
x!-
x"-
x#-
x$-
x%-
x&-
x'-
x(-
x)-
x*-
x+-
x,-
x--
x.-
x/-
x0-
x1-
x2-
x3-
x4-
x5-
x6-
x7-
x8-
x9-
x:-
x;-
x<-
x=-
x>-
x?-
x@-
xA-
xB-
xC-
xD-
xE-
xF-
xG-
xH-
xI-
xJ-
x90
x<0
x;0
x:0
x?0
x>0
x=0
x@0
xA0
xB0
x~1
x}1
x|1
x{1
xz1
xy1
xx1
xw1
xv1
xu1
xt1
xs1
xr1
xq1
xp1
xo1
002
0/2
0.2
0-2
0,2
0+2
0*2
0)2
x(2
x'2
x&2
x%2
x$2
x#2
x"2
x!2
x12
0s3
0r3
0q3
0p3
0o3
0n3
0m3
0l3
xk3
xj3
xi3
xh3
xg3
xf3
xe3
xd3
x%4
x$4
x#4
x"4
x!4
x~3
x}3
x|3
x{3
xz3
xy3
xx3
xw3
xv3
xu3
xt3
x54
x44
x34
x24
x14
x04
x/4
x.4
0-4
0,4
0+4
0*4
0)4
0(4
0'4
0&4
xE4
xD4
xC4
xB4
xA4
x@4
x?4
x>4
x=4
x<4
x;4
x:4
x94
x84
x74
x64
xW4
xV4
xU4
xT4
xS4
xR4
xQ4
xP4
xO4
xN4
xM4
xL4
xK4
xJ4
xI4
xH4
xg4
xf4
xe4
xd4
xc4
xb4
xa4
x`4
x_4
x^4
x]4
x\4
x[4
xZ4
xY4
xX4
xw4
xv4
xu4
xt4
xs4
xr4
xq4
xp4
xo4
xn4
xm4
xl4
xk4
xj4
xi4
xh4
x+5
x*5
x)5
x(5
x'5
x&5
x%5
x$5
x#5
x"5
x!5
x~4
x}4
x|4
x{4
xz4
x;5
x:5
x95
x85
x75
x65
x55
x45
x35
x25
x15
x05
x/5
x.5
x-5
x,5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xB5
xA5
x@5
x?5
x>5
x=5
x<5
x]5
x\5
x[5
xZ5
xY5
xX5
xW5
xV5
xU5
xT5
xS5
xR5
xQ5
xP5
xO5
xN5
xm5
xl5
xk5
xj5
xi5
xh5
xg5
xf5
xe5
xd5
xc5
xb5
xa5
x`5
x_5
x^5
x}5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
xr5
xq5
xp5
xo5
xn5
x16
x06
x/6
x.6
x-6
x,6
x+6
x*6
x)6
x(6
x'6
x&6
x%6
x$6
x#6
x"6
xA6
x@6
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
x56
x46
x36
x26
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
xE6
xD6
xC6
xB6
xA2
x@2
x?2
x>2
x=2
x<2
x;2
x:2
x92
x82
x72
x62
x52
x42
x32
x22
xB2
xC2
xD2
xE2
xe6
xd6
xc6
xb6
xa6
x`6
x_6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xu6
xt6
xs6
xr6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
x'7
x&7
x%7
x$7
x#7
x"7
x!7
x~6
x}6
x|6
x{6
xz6
xy6
xx6
xw6
xv6
x77
x67
x57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
x*7
x)7
x(7
xG7
xF7
xE7
xD7
xC7
xB7
xA7
x@7
x?7
x>7
x=7
x<7
x;7
x:7
x97
x87
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
xO7
xN7
xM7
xL7
xK7
xJ7
xI7
xH7
xm7
xl7
xk7
xj7
xi7
xh7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x}7
x|7
x{7
xz7
xy7
xx7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
x/8
x.8
x-8
x,8
x+8
x*8
x)8
x(8
x'8
x&8
x%8
x$8
x#8
x"8
x!8
x~7
x?8
x>8
x=8
x<8
x;8
x:8
x98
x88
x78
x68
x58
x48
x38
x28
x18
x08
xQ8
xP8
xO8
xN8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xa8
x`8
x_8
x^8
x]8
x\8
x[8
xZ8
xY8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xq8
xp8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
x%9
x$9
x#9
x"9
x!9
x~8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
xt8
x59
x49
x39
x29
x19
x09
x/9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
x&9
xE9
xD9
xC9
xB9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
x89
x79
x69
xW9
xV9
xU9
xT9
xS9
xR9
xQ9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
xI9
xH9
xg9
xf9
xe9
xd9
xc9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
xY9
xX9
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
xj9
xi9
xh9
x+:
x*:
x):
x(:
x':
x&:
x%:
x$:
x#:
x":
x!:
x~9
x}9
x|9
x{9
xz9
x;:
x::
x9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
x/:
x.:
x-:
x,:
xK:
xJ:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
x?:
x>:
x=:
x<:
xX7
xY7
x^:
x]:
x\:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
xS:
xR:
xQ:
xP:
xO:
xb:
xa:
x`:
x_:
xr:
xq:
xp:
xo:
xn:
xm:
xl:
xk:
xj:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xv:
xu:
xt:
xs:
xy:
xx:
xw:
x+;
x*;
x);
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x~:
x}:
x|:
x{:
xz:
x1;
x0;
x/;
x.;
x5;
x4;
x3;
x2;
x8;
x7;
x6;
x<;
x;;
x:;
x9;
x>;
x?;
x@;
xA;
xB;
xC;
xD;
xE;
zF;
xH;
xI;
xJ;
xK;
xL;
xM;
xN;
xO;
zP;
xR;
xS;
xT;
xU;
xV;
xW;
xX;
xY;
zZ;
x\;
x];
x^;
x_;
x`;
xa;
xb;
xc;
zd;
xj;
xi;
xh;
xg;
xn;
xm;
xl;
xk;
xq;
xp;
xo;
xu;
xt;
xs;
xr;
xw;
xx;
xy;
xz;
x{;
x|;
x};
x~;
z!<
x#<
x$<
x%<
x&<
x'<
x(<
x)<
x*<
z+<
x-<
x.<
x/<
x0<
x1<
x2<
x3<
x4<
z5<
x7<
x8<
x9<
x:<
x;<
x<<
x=<
x><
z?<
xE<
xD<
xC<
xB<
xI<
xH<
xG<
xF<
xL<
xK<
xJ<
xP<
xO<
xN<
xM<
xR<
xS<
xT<
xU<
xV<
xW<
xX<
xY<
zZ<
x\<
x]<
x^<
x_<
x`<
xa<
xb<
xc<
zd<
xf<
xg<
xh<
xi<
xj<
xk<
xl<
xm<
zn<
xp<
xq<
xr<
xs<
xt<
xu<
xv<
xw<
zx<
x~<
x}<
x|<
x{<
x$=
x#=
x"=
x!=
x'=
x&=
x%=
x+=
x*=
x)=
x(=
x-=
x.=
x/=
x0=
x1=
x2=
x3=
x4=
z5=
x7=
x8=
x9=
x:=
x;=
x<=
x==
x>=
z?=
xA=
xB=
xC=
xD=
xE=
xF=
xG=
xH=
zI=
xK=
xL=
xM=
xN=
xO=
xP=
xQ=
xR=
zS=
xZ7
xd=
xF2
xH2
xG2
xI2
xY2
0X2
0W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
0O2
0N2
0M2
0L2
0K2
0J2
x[2
xZ2
xk2
0j2
0i2
0h2
0g2
0f2
0e2
0d2
0c2
0b2
0a2
0`2
0_2
0^2
0]2
0\2
xm2
xl2
xn2
x~2
0}2
0|2
0{2
0z2
0y2
0x2
0w2
0v2
0u2
0t2
0s2
0r2
0q2
0p2
0o2
x!3
x#3
x"3
x33
023
013
003
0/3
0.3
0-3
0,3
0+3
0*3
0)3
0(3
0'3
0&3
0%3
0$3
x53
x43
x63
x73
x83
x93
xe=
x:3
xf=
xJ3
xI3
xH3
xG3
xF3
xE3
xD3
xC3
xB3
xA3
x@3
x?3
x>3
x=3
x<3
x;3
xZ3
xY3
xX3
xW3
xV3
xU3
xT3
xS3
xR3
xQ3
xP3
xO3
xN3
xM3
xL3
xK3
x'?
x&?
x%?
x$?
x#?
x"?
x!?
x~>
x}>
x|>
x{>
xz>
xy>
xx>
xw>
xv>
x7?
x6?
x5?
x4?
x3?
x2?
x1?
x0?
x/?
x.?
x-?
x,?
x+?
x*?
x)?
x(?
xI?
xJ?
xK?
0L?
xM?
xN?
xO?
xP?
xQ?
xR?
xS?
1T?
0U?
xV?
xW?
xX?
xY?
xZ?
x[?
x\?
x]?
x^?
x_?
x`?
xa?
xb?
xc?
xd?
xe?
xf?
xg?
xh?
xi?
xj?
xk?
xl?
xm?
xn?
xo?
xp?
xq?
xr?
xs?
xt?
xu?
xv?
xw?
xx?
xy?
xz?
x{?
x|?
x}?
x~?
x!@
x"@
x#@
x$@
x%@
x&@
x'@
x(@
x)@
x*@
x+@
x,@
x-@
x.@
x/@
x0@
x1@
x2@
x3@
x4@
x5@
x6@
x7@
x8@
x9@
x:@
x;@
x<@
x=@
x>@
x?@
x@@
xA@
xB@
xC@
xD@
xE@
xF@
xG@
xH@
xI@
xJ@
xK@
xL@
xM@
xN@
xO@
xP@
xQ@
xR@
xS@
xT@
xU@
xV@
xW@
xX@
xY@
xZ@
x[@
x\@
x]@
x^@
x_@
x`@
xa@
xb@
xc@
xd@
xe@
xf@
xg@
xh@
xi@
xj@
xk@
xl@
xm@
xn@
xo@
xp@
xq@
xr@
xs@
xt@
xu@
xv@
xw@
xx@
xy@
xz@
xG?
xF?
xE?
xD?
xC?
xB?
xA?
x@?
x??
x>?
x=?
x<?
x;?
x:?
x9?
x8?
x6!
x5!
x[(
0T*
0S*
1R*
0Q*
0P*
0O*
0N*
0M*
0L*
0K*
0J*
0I*
0H*
0G*
0F*
0E*
0D*
0C*
0B*
0l(
1k(
0j(
0i(
0h(
0g(
0f(
0e(
0d(
0c(
0b(
0a(
0`(
0_(
0^(
0](
xm(
xj-
xh-
xf-
xd-
xb-
x`-
x^-
x\-
xZ-
xX-
xV-
xT-
xR-
xP-
xN-
xL-
x-.
x+.
x).
x'.
x%.
x#.
x!.
x}-
x{-
xy-
xw-
xu-
xs-
xq-
xo-
xm-
xN.
xL.
xJ.
xH.
xF.
xD.
xB.
x@.
x>.
x<.
x:.
x8.
x6.
x4.
x2.
x0.
xo.
xm.
xk.
xi.
xg.
xe.
xc.
xa.
x_.
x].
x[.
xY.
xW.
xU.
xS.
xQ.
x2/
x0/
x./
x,/
x*/
x(/
x&/
x$/
x"/
x~.
x|.
xz.
xx.
xv.
xt.
xr.
xS/
xQ/
xO/
xM/
xK/
xI/
xG/
xE/
xC/
xA/
x?/
x=/
x;/
x9/
x7/
x5/
xt/
xr/
xp/
xn/
xl/
xj/
xh/
xf/
xd/
xb/
x`/
x^/
x\/
xZ/
xX/
xV/
x70
x50
x30
x10
x/0
x-0
x+0
x)0
x'0
x%0
x#0
x!0
x}/
x{/
xy/
xw/
xU6
xT6
1c3
0b3
0a3
0`3
0_3
1^3
0c=
0b=
0a=
0`=
0_=
0^=
0]=
0\=
0[=
0Z=
0Y=
0X=
0W=
0V=
0U=
0T=
x-;
x=;
xG;
xQ;
x[;
xf;
xv;
x"<
x,<
x6<
xA<
xQ<
x[<
xe<
xo<
xz<
x,=
x6=
x@=
xJ=
1{@
xH?
$end
#1
0]'
0^'
0_'
0X(
0L'
0<'
0='
0>'
0?'
0@'
0A'
0B'
0C'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
0K'
0*'
0+'
0,'
0-'
0.'
0/'
00'
01'
02'
03'
04'
05'
06'
07'
08'
09'
0M'
0N'
0O'
0P'
0Q'
0R'
0S'
0T'
0U'
0V'
0W'
0X'
0Y'
0Z'
0['
0\'
0h&
0i&
0j&
0k&
0l&
0m&
0n&
0o&
0p&
0q&
0r&
0s&
0t&
0u&
0v&
0w&
0:'
0;'
0U&
0V&
0W&
0S&
0T&
0W(
0R&
0B&
0C&
0D&
0E&
0F&
0G&
0H&
0I&
0J&
0K&
0L&
0M&
0N&
0O&
0P&
0Q&
02&
03&
04&
05&
06&
07&
08&
09&
0:&
0;&
0<&
0=&
0>&
0?&
0@&
0A&
0"&
0#&
0$&
0%&
0&&
0'&
0(&
0)&
0*&
0+&
0,&
0-&
0.&
0/&
00&
01&
0p%
0q%
0r%
0s%
0t%
0u%
0v%
0w%
0x%
0y%
0z%
0{%
0|%
0}%
0~%
0!&
0o%
0n%
0m%
0l%
0k%
0*%
0[%
0\%
0]%
0^%
0_%
0`%
0a%
0b%
0c%
0d%
0e%
0f%
0g%
0h%
0i%
0j%
0;%
0<%
0=%
0>%
0?%
0@%
0A%
0B%
0C%
0D%
0E%
0F%
0G%
0H%
0I%
0J%
0&%
0'%
0(%
0A"
0B"
0C"
0D"
0E"
0F"
0G"
0H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0{$
0|$
0V(
0"%
0/$
00$
01$
02$
03$
04$
05$
06$
07$
08$
09$
0:$
0;$
0<$
0=$
0>$
0~$
0x$
0v$
0f$
0O$
0P$
0Q$
0R$
0S$
0T$
0U$
0V$
0W$
0X$
0Y$
0Z$
0[$
0\$
0]$
0^$
0m#
0n#
0o#
0p#
0q#
0r#
0s#
0t#
0u#
0v#
0w#
0x#
0y#
0z#
0{#
0|#
0M#
0N#
0O#
0P#
0Q#
0R#
0S#
0T#
0U#
0V#
0W#
0X#
0Y#
0Z#
0[#
0\#
0-#
0.#
0/#
00#
01#
02#
03#
04#
05#
06#
07#
08#
09#
0:#
0;#
0<#
0k"
0l"
0m"
0n"
0o"
0p"
0q"
0r"
0s"
0t"
0u"
0v"
0w"
0x"
0y"
0z"
0R"
0r$
0s$
0t$
0n$
0l$
0i$
0j$
0b$
0c$
0d$
0Z"
0X"
0U"
0V"
00,
0/,
0.,
0-,
0,,
0+,
0*,
0),
0(,
0',
0&,
0%,
0$,
0#,
0",
0!,
0@,
0?,
0>,
0=,
0<,
0;,
0:,
09,
08,
07,
06,
05,
04,
03,
02,
01,
0P,
0O,
0N,
0M,
0L,
0K,
0J,
0I,
0H,
0G,
0F,
0E,
0D,
0C,
0B,
0A,
0`,
0_,
0^,
0],
0\,
0[,
0Z,
0Y,
0X,
0W,
0V,
0U,
0T,
0S,
0R,
0Q,
0p,
0o,
0n,
0m,
0l,
0k,
0j,
0i,
0h,
0g,
0f,
0e,
0d,
0c,
0b,
0a,
0"-
0!-
0~,
0},
0|,
0{,
0z,
0y,
0x,
0w,
0v,
0u,
0t,
0s,
0r,
0q,
02-
01-
00-
0/-
0.-
0--
0,-
0+-
0*-
0)-
0(-
0'-
0&-
0%-
0$-
0#-
0B-
0A-
0@-
0?-
0>-
0=-
0<-
0;-
0:-
09-
08-
07-
06-
05-
04-
03-
03(
04(
05(
06(
07(
08(
09(
0:(
0;(
0<(
0=(
0>(
0?(
0@(
0A(
0B(
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
0;"
0<"
0="
0>"
0?"
0@"
0#(
0$(
0%(
0&(
0'(
0((
0)(
0*(
0+(
0,(
0-(
0.(
0/(
00(
01(
02(
0u(
1}(
1!)
0')
0/)
0:)
0B)
0J)
0R)
0])
0e)
0m)
0u)
0"*
0**
02*
0:*
0o!
0p!
0q!
0r!
1s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
0U6
0T6
012
0)%
1R?
1Z?
1b?
1j?
1u?
1}?
1'@
1/@
1:@
1B@
1J@
1R@
1]@
1e@
1m@
1u@
0v@
0n@
0f@
0^@
0S@
0K@
0C@
0;@
00@
0(@
0~?
0v?
0k?
0c?
0[?
0S?
1>*
16*
1.*
1&*
1y)
1q)
1i)
1a)
1V)
1N)
1F)
1>)
13)
1+)
0")
1~(
0v(
00"
1/"
1%)
0,)
04)
0?)
0G)
0O)
0W)
0b)
0j)
0r)
0z)
0'*
0/*
07*
0?*
1V?
0W?
1@*
18*
10*
1(*
1{)
1s)
1k)
1c)
1X)
1P)
1H)
1@)
15)
1-)
0&)
0s(
0.)
06)
0A)
0I)
0Q)
0Y)
0d)
0l)
0t)
0|)
0)*
01*
09*
0A*
0M?
1\?
0m(
0!*
0~)
0})
0p(
0\)
0[)
0Z)
0o(
09)
08)
07)
0n(
0t(
0()
0."
00)
0;)
0C)
0K)
0S)
0^)
0f)
0n)
0v)
0#*
0+*
03*
0;*
0]?
1^?
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0_?
0N?
1d?
0e?
1f?
0g?
0O?
1l?
0m?
1n?
0o?
0I?
1w?
0x?
1y?
0z?
0p?
1!@
0"@
1#@
0$@
0q?
1)@
0*@
1+@
0,@
0r?
11@
02@
13@
04@
0J?
1<@
0=@
1>@
0?@
05@
1D@
0E@
1F@
0G@
06@
1L@
0M@
1N@
0O@
07@
1T@
0U@
1V@
0W@
0K?
1_@
0`@
1a@
0b@
0X@
1g@
0h@
1i@
0j@
0Y@
1o@
0p@
1q@
0r@
0Z@
1w@
0x@
1y@
0z@
0H?
0`'
0C-
0D-
0E-
0F-
0G-
0H-
0I-
0J-
0A
0-!
0U
0C(
0K+
0J+
0I+
0H+
0G+
0;+
0:+
09+
08+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
0k+
0j+
0i+
0h+
0g+
0f+
0e+
0d+
0[+
0Z+
0Y+
0X+
0W+
0V+
0U+
0T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
0N$
0M$
0L$
0K$
0J$
0I$
0H$
0G$
0?0
0>0
0=0
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
0!$
0~#
0}#
0<0
0;0
0:0
0n!
1m!
1l!
0k!
1j!
0i!
0h!
1g!
1f!
0e!
0d!
0c!
1b!
0a!
0`!
1_!
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0"
0!
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
077
067
057
047
037
027
017
007
0/7
0.7
0-7
0,7
0+7
0*7
0)7
0(7
053
043
0W4
0V4
0U4
0T4
0S4
0R4
0Q4
0P4
0O4
0N4
0M4
0L4
0K4
0J4
0I4
0H4
0+5
0*5
0)5
0(5
0'5
0&5
0%5
0$5
0#5
0"5
0!5
0~4
0}4
0|4
0{4
0z4
0]5
0\5
0[5
0Z5
0Y5
0X5
0W5
0V5
0U5
0T5
0S5
0R5
0Q5
0P5
0O5
0N5
016
006
0/6
0.6
0-6
0,6
0+6
0*6
0)6
0(6
0'6
0&6
0%6
0$6
0#6
0"6
0~1
0}1
0|1
0{1
0z1
0y1
0x1
0w1
0v1
0u1
0t1
0s1
0r1
0q1
0p1
0o1
0Z3
0Y3
0X3
0W3
0V3
0U3
0T3
0S3
0R3
0Q3
0P3
0O3
0N3
0M3
0L3
0K3
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0p'
1o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0g&
1f&
1e&
0d&
1c&
0b&
0a&
1`&
1_&
0^&
0]&
0\&
1[&
0Z&
0Y&
1X&
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0G?
0F?
0E?
0D?
0C?
0B?
0A?
0@?
0??
0>?
0=?
0<?
0;?
0:?
09?
08?
0'?
0&?
0%?
0$?
0#?
0"?
0!?
0~>
0}>
0|>
0{>
0z>
0y>
0x>
0w>
0v>
06!
05!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0D
0C
0B
0s@
0k@
0c@
0[@
0P@
0H@
0@@
08@
0-@
0%@
0{?
0s?
0h?
0`?
0X?
0P?
0e$
0!%
0Q?
0Y?
0a?
0i?
0t?
0|?
0&@
0.@
09@
0A@
0I@
0Q@
0\@
0d@
0l@
0t@
0(?
0)?
0*?
0+?
0,?
0-?
0.?
0/?
00?
01?
02?
03?
04?
05?
06?
07?
1B0
1A0
1@0
093
183
073
063
0Z7
0d=
1D2
0:3
0f=
1n2
0I2
0e=
0)!
0+!
0*!
0,!
0V
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0)'
0('
0''
0&'
0%'
0$'
0#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0(!
1'!
1&!
0%!
1$!
0#!
0"!
1!!
1~
0}
0|
0{
1z
0y
0x
1w
0u6
0t6
0s6
0r6
0q6
0p6
0o6
0n6
0m6
0l6
0k6
0j6
0i6
0h6
0g6
0f6
0e6
0d6
0c6
0b6
0a6
0`6
0_6
0^6
0]6
0\6
0[6
0Z6
0Y6
0X6
0W6
0V6
0A6
0@6
0?6
0>6
0=6
0<6
0;6
0:6
096
086
076
066
056
046
036
026
0m5
0l5
0k5
0j5
0i5
0h5
0g5
0f5
0e5
0d5
0c5
0b5
0a5
0`5
0_5
0^5
0;5
0:5
095
085
075
065
055
045
035
025
015
005
0/5
0.5
0-5
0,5
0g4
0f4
0e4
0d4
0c4
0b4
0a4
0`4
0_4
0^4
0]4
0\4
0[4
0Z4
0Y4
0X4
0@
1?
1>
0=
1<
0;
0:
19
18
07
06
05
14
03
02
11
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0"(
1!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0S(
1R(
1Q(
0P(
1O(
0N(
0M(
1L(
1K(
0J(
0I(
0H(
1G(
0F(
0E(
1D(
0j-
0h-
0f-
0d-
0b-
0`-
0^-
0\-
0Z-
0X-
0V-
0T-
0R-
0P-
0N-
0L-
0-.
0+.
0).
0'.
0%.
0#.
0!.
0}-
0{-
0y-
0w-
0u-
0s-
0q-
0o-
0m-
0N.
0L.
0J.
0H.
0F.
0D.
0B.
0@.
0>.
0<.
0:.
08.
06.
04.
02.
00.
0o.
0m.
0k.
0i.
0g.
0e.
0c.
0a.
0_.
0].
0[.
0Y.
0W.
0U.
0S.
0Q.
02/
00/
0./
0,/
0*/
0(/
0&/
0$/
0"/
0~.
0|.
0z.
0x.
0v.
0t.
0r.
0S/
0Q/
0O/
0M/
0K/
0I/
0G/
0E/
0C/
0A/
0?/
0=/
0;/
09/
07/
05/
0t/
0r/
0p/
0n/
0l/
0j/
0h/
0f/
0d/
0b/
0`/
0^/
0\/
0Z/
0X/
0V/
070
050
030
010
0/0
0-0
0+0
0)0
0'0
0%0
0#0
0!0
0}/
0{/
0y/
0w/
0K=
0c:
0A=
0d:
07=
0e:
0-=
0f:
0p<
0g:
0f<
0h:
0\<
0i:
0R<
0j:
07<
0k:
0-<
0l:
0#<
0m:
0w;
0n:
0\;
0o:
0R;
0p:
0H;
0q:
0>;
0r:
1M=
0O:
1C=
0P:
19=
0Q:
1/=
0R:
1r<
0S:
1h<
0T:
1^<
0U:
1T<
0V:
19<
0W:
1/<
0X:
1%<
0Y:
1y;
0Z:
1^;
0[:
1T;
0\:
1J;
0]:
1@;
0^:
1!3
1B2
0A;
0K;
0U;
0b:
0_;
0z;
0&<
00<
0a:
0:<
0U<
0_<
0i<
0`:
0s<
00=
0:=
0D=
0_:
0N=
0?;
1B;
1L;
1V;
0v:
1`;
1{;
1'<
11<
0u:
1;<
1V<
1`<
1j<
0t:
1t<
11=
1;=
1E=
0s:
1O=
0P=
0X7
0F=
0<=
02=
0u<
0w:
0k<
0a<
0W<
0<<
0x:
02<
0(<
0|;
0a;
0W;
0M;
0C;
0<;
0y:
0x;
1D;
1N;
1X;
1b;
1};
1)<
13<
0S<
1=<
1X<
1b<
1l<
0.=
1v<
13=
1==
1G=
0E2
0C2
1Q=
0R=
0H=
0>=
04=
0w<
0+=
0m<
0c<
0Y<
0><
0P<
04<
0*<
0~;
0c;
0Y;
0O;
0E;
0u;
0=;
0G;
0Q;
0[;
0v;
0"<
0,<
06<
0Q<
0[<
0e<
0o<
0,=
06=
0@=
0J=
1F2
0';
0#;
0}:
0+;
0w4
0v4
0u4
0t4
0s4
0r4
0q4
0p4
0o4
0n4
0m4
0l4
0k4
0j4
0i4
0h4
0K5
0J5
0I5
0H5
0G5
0F5
0E5
0D5
0C5
0B5
0A5
0@5
0?5
0>5
0=5
0<5
0}5
0|5
0{5
0z5
0y5
0x5
0w5
0v5
0u5
0t5
0s5
0r5
0q5
0p5
0o5
0n5
0Q6
0P6
0O6
0N6
0M6
0L6
0K6
0J6
0I6
0H6
0G6
0F6
0E6
0D6
0C6
0B6
0~<
0}<
0|<
0{<
0$=
0#=
0"=
0!=
0E<
0D<
0C<
0B<
0I<
0H<
0G<
0F<
0j;
0i;
0h;
0g;
0n;
0m;
0l;
0k;
0Q8
0P8
0O8
0N8
0M8
0L8
0K8
0J8
0I8
0H8
0G8
0F8
0E8
0D8
0C8
0B8
0%9
0$9
0#9
0"9
0!9
0~8
0}8
0|8
0{8
0z8
0y8
0x8
0w8
0v8
0u8
0t8
0W9
0V9
0U9
0T9
0S9
0R9
0Q9
0P9
0O9
0N9
0M9
0L9
0K9
0J9
0I9
0H9
0+:
0*:
0):
0(:
0':
0&:
0%:
0$:
0#:
0":
0!:
0~9
0}9
0|9
0{9
0z9
01;
00;
0/;
0.;
05;
04;
03;
02;
0H2
0G2
0[2
0Z2
1m2
1l2
1#3
0"3
0-;
06;
07;
08;
0f;
0o;
0p;
0q;
0A<
0J<
0K<
0L<
0z<
0%=
0&=
0'=
08=
0B=
0L=
0]<
0g<
0q<
0$<
0.<
08<
0I;
0S;
0];
09;
0:;
0;;
0r;
0s;
0t;
0M<
0N<
0O<
0(=
0)=
0*=
0|:
0{:
0z:
0";
0!;
0~:
0&;
0%;
0$;
0*;
0);
0(;
1~2
0Y2
0;:
0::
09:
08:
07:
06:
05:
04:
03:
02:
01:
00:
0/:
0.:
0-:
0,:
0g9
0f9
0e9
0d9
0c9
0b9
0a9
0`9
0_9
0^9
0]9
0\9
0[9
0Z9
0Y9
0X9
059
049
039
029
019
009
0/9
0.9
0-9
0,9
0+9
0*9
0)9
0(9
0'9
0&9
0a8
0`8
0_8
0^8
0]8
0\8
0[8
0Z8
0Y8
0X8
0W8
0V8
0U8
0T8
0S8
0R8
0E4
0D4
0C4
0B4
0A4
0@4
0?4
0>4
0=4
0<4
0;4
0:4
094
084
074
064
054
044
034
024
014
004
0/4
0.4
0%4
0$4
0#4
0"4
0!4
0~3
0}3
0|3
0{3
0z3
0y3
0x3
0w3
0v3
0u3
0t3
0k3
0j3
0i3
0h3
0g3
0f3
0e3
0d3
0G7
0C7
0?7
0;7
0W7
0S7
0O7
0K7
0(2
0'2
0&2
0%2
0$2
0#2
0"2
0!2
0q8
0p8
0o8
0n8
0m8
0l8
0k8
0j8
0i8
0h8
0g8
0f8
0e8
0d8
0c8
0b8
0E9
0D9
0C9
0B9
0A9
0@9
0?9
0>9
0=9
0<9
0;9
0:9
099
089
079
069
0w9
0v9
0u9
0t9
0s9
0r9
0q9
0p9
0o9
0n9
0m9
0l9
0k9
0j9
0i9
0h9
0K:
0J:
0I:
0H:
0G:
0F:
0E:
0D:
0C:
0B:
0A:
0@:
0?:
0>:
0=:
0<:
0k2
133
0F7
0E7
0D7
0B7
0A7
0@7
0>7
0=7
0<7
0:7
097
087
0Y7
0V7
0U7
0T7
0R7
0Q7
0P7
0N7
0M7
0L7
0J7
0I7
0H7
0?8
0>8
0=8
0<8
0;8
0:8
098
088
078
068
058
048
038
028
018
008
0/8
0.8
0-8
0,8
0+8
0*8
0)8
0(8
0'8
0&8
0%8
0$8
0#8
0"8
0!8
0~7
0}7
0|7
0{7
0z7
0y7
0x7
0w7
0v7
0u7
0t7
0s7
0r7
0q7
0p7
0o7
0n7
0m7
0l7
0k7
0j7
0i7
0h7
0g7
0f7
0e7
0d7
0c7
0b7
0a7
0`7
0_7
0^7
0'7
0&7
0%7
0$7
0#7
0"7
0!7
0~6
0}6
0|6
0{6
0z6
0y6
0x6
0w6
0v6
0A2
0@2
0?2
0>2
0=2
0<2
0;2
0:2
092
082
072
062
052
042
032
022
0J3
0I3
0H3
0G3
0F3
0E3
0D3
0C3
0B3
0A3
0@3
0?3
0>3
0=3
0<3
0;3
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0l+
0m+
b0 n+
0{+
b0 |+
0z+
b0 q+
b0 r+
0s+
0t+
0u+
0v+
0w+
0x+
b0 y+
0p+
b0 }+
0o+
0U(
0k$
0m$
0W"
0Y"
0N!
0T(
0u$
0w$
0Q"
0q$
0p$
0o$
0z$
0y$
0T"
0S"
0a$
0`$
0_$
0h$
0g$
0%%
0$%
0#%
0}$
090
#50
0:!
0Y(
07!
#100
1:!
1Y(
17!
b10 \(
b10 <!
#150
0:!
0Y(
07!
#200
1:!
1Y(
17!
b11 \(
b11 <!
#201
0;!
0Z(
09!
#250
0:!
0Y(
07!
#300
1:!
1Y(
17!
1g*
1x*
b1001000110010110 i*
14A
13A
11A
1.A
1-A
1)A
1&A
b100 \(
b100 <!
#301
1h&
1k&
1o&
1p&
1s&
1u&
1v&
1?"
11(
0}(
0!)
1o!
1r!
0s!
1v!
1w!
1z!
1|!
1}!
1")
0~(
0/"
0%)
1&)
1s(
1()
1."
1C(
0o'
1n'
1J+
1I+
1G+
1:+
19+
17+
16+
15+
14+
13+
12+
11+
10+
1/+
1.+
1-+
1,+
1j+
1i+
1g+
1d+
1Z+
1Y+
1W+
1T+
1S+
1R+
1Q+
1P+
1O+
1N+
1M+
1L+
1M$
1L$
1J$
1G$
1=0
1#%
1-$
1,$
1*$
1'$
1&$
1<0
1n!
0m!
0l!
1k!
0j!
1i!
1h!
0g!
1/
0B0
0A0
0@0
1@
0?
0>
1=
0<
1;
1:
09
1k#
1j#
1h#
1e#
1d#
1c#
1b#
1a#
1`#
1_#
1^#
1]#
1K#
1J#
1H#
1G#
1F#
1E#
1D#
1C#
1B#
1A#
1@#
1?#
1>#
1=#
0!(
1~'
1S(
0R(
0Q(
1P(
0O(
1N(
1M(
0L(
1z+
b110 q+
b10 r+
b1 n+
1l+
b10 y+
1m+
1m$
1y$
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
1%%
0#%
1S"
1`$
1_$
1U(
1!%
#350
0:!
0Y(
07!
#400
1:!
1Y(
17!
0g*
1f*
0x*
1w*
b1001000101101001 i*
1*+
1N0
1Q0
1P0
1F0
1(1
1'1
1%1
181
171
151
121
1H1
1G1
1E1
1B1
1X1
1W1
1U1
1R1
1Q1
1L0
1M0
1Z1
1j1
1n1
b101 \(
b101 <!
#401
1(%
1O"
1{$
1V(
1"%
16$
17$
1:$
1<$
1=$
1W$
1Z$
1\$
1]$
1u#
1x#
1z#
1{#
1X#
1Z#
1[#
1n$
1b$
1c$
1U"
1A(
1>"
0?"
10(
01(
1}(
1!)
1')
0w!
1x!
1y!
0z!
1{!
0|!
0}!
1~!
0()
0+)
0")
1~(
1/"
1%)
1,)
0."
0-)
0&)
0s(
1.)
1t(
1()
1+)
0,)
1."
10)
1-"
1-)
0.)
0t(
00)
0-"
1@0
1o'
1K+
0J+
0I+
1H+
0G+
1;+
0:+
09+
18+
07+
06+
05+
04+
03+
02+
01+
00+
0/+
0.+
0-+
0,+
1k+
0j+
0i+
1h+
0g+
1f+
1e+
0d+
1[+
0Z+
0Y+
1X+
0W+
1V+
1U+
0T+
0S+
0R+
0Q+
0P+
0O+
0N+
0M+
0L+
1N$
0M$
0L$
1K$
0J$
1I$
1H$
0G$
1.$
0-$
0,$
1+$
0*$
1)$
1($
0'$
1?0
1>0
0=0
0n!
1l!
0k!
0i!
0h!
1c!
0b!
1`!
0/
1.
1Y%
1X%
1V%
1S%
1&?
1%?
1#?
1~>
1}>
18@
1-@
1s?
1`?
1X?
190
1Y?
1a?
1t?
1.@
19@
1/?
10?
13?
15?
16?
0n2
1e=
1t6
1s6
1q6
1n6
0S(
1Q(
0P(
0N(
0M(
1H(
0G(
1E(
0@
1>
0=
0;
0:
15
04
12
1l#
0k#
0j#
1i#
0h#
1g#
1f#
0e#
1L#
0K#
0J#
1I#
0H#
1!(
0C(
0!%
17<
1k:
1w;
1n:
1R;
1p:
1H;
1q:
1I;
xL;
1S;
xV;
1x;
x{;
18<
x;<
x<<
1r;
x|;
1u;
xW;
1:;
xM;
1;;
xN;
xX;
x};
x=<
x><
x~;
xY;
xO;
xG;
xQ;
xv;
x6<
1I2
1*;
1);
1';
1$;
0!(
1S(
0Q(
1P(
1N(
1M(
0H(
1G(
0E(
1n;
1k;
167
157
137
107
14;
13;
0m2
0~2
1V7
1U7
1S7
1P7
1F7
1E7
1C7
1@7
1[2
1@2
1?2
1=2
1:2
033
1I3
1H3
1F3
1C3
19%
18%
16%
13%
0l+
0m+
b0 n+
0z+
b0 q+
b0 r+
b0 y+
1z+
b110 q+
b10 r+
b1 n+
1l+
b10 y+
1m+
#450
0:!
0Y(
07!
#500
1:!
1Y(
17!
1x*
0*+
1)+
1)1
0(1
0'1
1&1
0%1
191
081
071
161
051
141
131
021
1I1
0H1
0G1
1F1
0E1
1D1
1C1
0B1
1Y1
0X1
0W1
1V1
0U1
1T1
1S1
0R1
0L0
0M0
0j1
1i1
1}=
1|=
1z=
1w=
1/>
1.>
1,>
1)>
1?>
1>>
1<>
19>
18>
1_>
1o>
1n>
1l>
1i>
1m=
1n=
1q>
1u>
b110 \(
b110 <!
#501
1W&
1S&
1W(
1R&
1J&
1M&
1O&
1P&
1@&
1w%
1x%
1{%
1}%
1~%
1c%
1f%
1h%
1i%
1C%
1F%
1H%
1I%
1N"
0O"
0V(
0"%
07$
18$
19$
0:$
1;$
0<$
0=$
1>$
0W$
1X$
1Y$
0Z$
1[$
0\$
0]$
1^$
0u#
1v#
1w#
0x#
1y#
0z#
0{#
1|#
0X#
1Y#
0Z#
0[#
1\#
1@(
0A(
1?"
090
0X?
0Z?
1[?
0Y?
06?
0^?
1_?
1N?
0a?
0d?
1e?
05?
0f?
1g?
1O?
1i?
14?
1A0
1Z%
0Y%
0X%
1W%
0V%
1U%
1T%
0S%
0f&
0e&
0c&
0`&
0_&
0[&
0X&
1e
1d
1b
1_
1F?
1'?
0&?
0%?
1$?
0#?
1"?
1!?
0~>
1C(
1!%
0-@
1%@
1{?
0s?
1h?
0`?
1X?
1Z?
1P?
190
1Q?
0[?
1Y?
1a?
1d?
0i?
0l?
0t?
1|?
1&@
0.@
00?
11?
12?
03?
1m?
04?
0e?
15?
16?
1^?
17?
0_?
1f?
0n?
1o?
0g?
0N?
0a?
0O?
1I?
1t?
1i?
1l?
05?
0m?
14?
13?
1n?
0o?
0I?
0t?
03?
1!(
0S(
1Q(
0P(
0N(
0M(
1H(
0G(
1E(
1('
0'!
0&!
0$!
0!!
0~
0z
0w
1u6
0t6
0s6
1r6
0q6
1p6
1o6
0n6
0C(
0!%
07<
0k:
1-<
1l:
1#<
1m:
0w;
0n:
1\;
1o:
0R;
0p:
0H;
0q:
1>;
1r:
1?;
xB;
0I;
1L;
0S;
1V;
1];
x`;
0x;
1{;
1$<
x'<
1.<
x1<
08<
1;<
0<<
0r;
x2<
1s;
x(<
1t;
0|;
0u;
xa;
19;
0W;
0:;
0M;
0;;
xC;
1<;
xD;
1N;
1X;
xb;
1};
x)<
x3<
1=<
0><
x4<
x*<
0~;
xc;
0Y;
0O;
xE;
x=;
0G;
0Q;
x[;
0v;
x"<
x,<
06<
1+;
0*;
0);
1(;
0';
1&;
1%;
0$;
0!(
1S(
0Q(
1P(
1N(
1M(
0H(
1G(
0E(
0n;
1m;
1l;
0k;
177
067
057
147
037
127
117
007
15;
04;
03;
12;
1W7
0V7
0U7
1T7
0S7
1R7
1Q7
0P7
1G7
0F7
0E7
1D7
0C7
1B7
1A7
0@7
1A2
0@2
0?2
1>2
0=2
1<2
1;2
0:2
1J3
0I3
0H3
1G3
0F3
1E3
1D3
0C3
1:%
09%
08%
17%
06%
15%
14%
03%
#550
0:!
0Y(
07!
#600
1:!
1Y(
17!
1j1
1~=
0}=
0|=
1{=
0z=
1y=
1x=
0w=
10>
0/>
0.>
1->
0,>
1+>
1*>
0)>
1@>
0?>
0>>
1=>
0<>
1;>
1:>
09>
0_>
1^>
1p>
0o>
0n>
1m>
0l>
1k>
1j>
0i>
0m=
0n=
1$A
04A
03A
01A
0.A
0-A
0)A
0&A
1DA
1CA
1AA
1>A
1TA
1dA
1cA
1aA
1^A
1"A
1#A
1hA
b111 \(
b111 <!
#601
1_'
1X(
1L'
1D'
1G'
1I'
1J'
18'
1U'
1X'
1Z'
1['
0h&
0k&
0o&
0p&
0s&
0u&
0v&
1:'
0W(
0R&
0J&
1K&
1L&
0M&
1N&
0O&
0P&
1Q&
1?&
0@&
0x%
1y%
1z%
0{%
1|%
0}%
0~%
1!&
0c%
1d%
1e%
0f%
1g%
0h%
0i%
1j%
0C%
1D%
1E%
0F%
1G%
0H%
0I%
1J%
1O"
0X?
1`?
090
1a?
0Y?
06?
15?
1B0
1I-
1A
1f
0e
0d
1c
0b
1a
1`
0_
0F?
1E?
15!
1L!
1K!
1I!
1F!
1D
1C(
1!%
190
1!(
0S(
1Q(
0P(
0N(
0M(
1H(
0G(
1E(
1S
1R
1P
1M
0('
1''
1+.
1).
1%.
1}-
0C(
0!%
0!(
1S(
0Q(
1P(
1N(
1M(
0H(
1G(
0E(
#650
0:!
0Y(
07!
#700
1:!
1Y(
17!
1,.
1*.
1&.
1~-
1_>
1EA
0DA
0CA
1BA
0AA
1@A
1?A
0>A
0TA
1SA
1eA
0dA
0cA
1bA
0aA
1`A
1_A
0^A
0"A
0#A
b1000 \(
b1000 <!
b1 .!
#701
0X(
0L'
0D'
1E'
1F'
0G'
1H'
0I'
0J'
1K'
17'
08'
0U'
1V'
1W'
0X'
1Y'
0Z'
0['
1\'
1@&
1*-
1'-
1%-
1$-
1X?
090
1Y?
16?
0A
0I-
1i"
1h"
1f"
1c"
1F?
1M!
0L!
0K!
1J!
0I!
1H!
1G!
0F!
1C(
1!%
1!(
0S(
1Q(
0P(
0N(
0M(
1H(
0G(
1E(
1T
0S
0R
1Q
0P
1O
1N
0M
1('
#750
0:!
0Y(
07!
#800
1:!
1Y(
17!
1g*
b1100100100000100 i*
1f0
1e0
1c0
1`0
1L0
1M0
1TA
b1001 \(
b1001 <!
#801
18'
1V(
1"%
1s"
1v"
1x"
1y"
11(
0}(
0!)
1p!
0r!
1s!
0x!
0y!
0{!
1|!
0~!
190
1")
0~(
0/"
0%)
1&)
1s(
0()
0+)
1,)
0."
0-)
1.)
1t(
10)
1-"
1f=
0e=
0C(
0o'
0n'
1m'
0K+
1I+
0H+
0;+
19+
08+
0k+
1i+
0h+
0f+
0e+
0[+
1Y+
0X+
0V+
0U+
0N$
1L$
0K$
0I$
0H$
0.$
1,$
0+$
0)$
0($
0?0
0>0
0l!
0f!
0c!
0`!
0_!
1/
1V4
1U4
1S4
1P4
1*5
1)5
1'5
1$5
1\5
1[5
1Y5
1V5
106
1/6
1-6
1*6
1R3
1O3
1M3
1L3
0!%
1:3
0I2
1@6
1?6
1=6
1:6
1l5
1k5
1i5
1f5
1:5
195
175
145
1f4
1e4
1c4
1`4
0>
08
05
02
01
0l#
1j#
0i#
0g#
0f#
0L#
1J#
0I#
0!3
0#3
1v4
1u4
1s4
1p4
1J5
1I5
1G5
1D5
1|5
1{5
1y5
1v5
1P6
1O6
1M6
1J6
0[2
1<4
1;4
194
164
1z3
1y3
1w3
1t3
1j3
1i3
1g3
1d3
1'2
1&2
1$2
1!2
1u1
1t1
1r1
1o1
1d=
0D2
1\6
1[6
1Y6
1V6
1K=
1c:
1-=
1f:
1f<
1h:
1\<
1i:
1]<
x`<
1g<
xj<
1.=
x1=
1L=
xO=
xP=
1(=
x2=
1+=
xk<
1N<
xa<
1O<
xb<
xl<
x3=
xQ=
xR=
x4=
xm<
xc<
x[<
xe<
x,=
xJ=
1Z7
0F2
1";
1!;
1}:
1z:
1$=
1!=
1G8
1F8
1D8
1%9
1y8
1x8
1v8
1O9
1N9
1L9
1I9
1#:
1":
1~9
1{9
1.7
1-7
1+7
1(7
1H<
1G<
0B2
1N7
1M7
1K7
1H7
13:
12:
10:
1-:
1_9
1^9
1\9
1Y9
159
1+9
1*9
1(9
1W8
1V8
1T8
1>7
1=7
1;7
187
1g8
1f8
1d8
1E9
1;9
1:9
189
1o9
1n9
1l9
1i9
1C:
1B:
1@:
1=:
182
172
152
122
1A3
1@3
1>3
1;3
1?8
1>8
1<8
198
1/8
1.8
1,8
1)8
1{7
1z7
1x7
1u7
1'7
1&7
1$7
1!7
11%
10%
1.%
1+%
0l+
0m+
b0 n+
0z+
b0 q+
b0 r+
b0 y+
b10 n+
1m+
b10 y+
1p+
0m$
0S"
0`$
0_$
1Q"
#850
0:!
0Y(
07!
#900
1:!
1Y(
17!
0x*
0w*
1v*
1*+
0N0
0Q0
0P0
0F0
1G0
0)1
1'1
0&1
091
171
061
041
031
0I1
1G1
0F1
0D1
0C1
0Y1
1W1
0V1
0T1
0S1
0L0
0M0
1u=
1t=
1r=
1o=
1m=
1n=
b1010 \(
b1010 <!
#901
1W(
1R&
1;%
1>%
1@%
1A%
0V(
0"%
08$
09$
0;$
1<$
0>$
0X$
0Y$
0[$
1\$
0^$
0v#
0w#
0y#
1z#
0|#
0Y#
1Z#
0\#
1R"
0n$
0b$
0c$
0U"
1A(
1="
0>"
0?"
0'7
0&7
1%7
1"7
0!7
1}6
077
047
027
017
0.7
0-7
0+7
0(7
1@2
0<2
082
072
052
022
1}1
1|1
1z1
1w1
0u1
0t1
0r1
0o1
0J3
0G3
0E3
0D3
1B3
0A3
0@3
1?3
0>3
1=3
1<3
0;3
0Z%
0W%
0U%
0T%
0'?
1%?
0$?
0"?
0!?
1]
1\
1Z
1W
0%@
0{?
0h?
0`?
0b?
0P?
0Q?
1c?
0a?
0i?
0|?
0&@
01?
02?
04?
05?
0f?
07?
1g?
1O?
1i?
14?
0d=
0u6
0r6
0p6
0o6
0:%
07%
05%
04%
12%
01%
00%
1/%
0.%
1-%
1,%
0+%
1d6
1c6
1a6
1^6
0\6
0[6
0Y6
0V6
0A2
0@2
1?2
1<2
0;2
192
0K=
0c:
1Y7
0-=
0f:
0f<
0h:
0\<
0i:
17<
1k:
1w;
1n:
1R;
1p:
1H;
1q:
0-<
0l:
0#<
0m:
0\;
0o:
0>;
0r:
0?;
1B;
0];
1`;
0$<
1'<
0.<
11<
1I;
xL;
1S;
xV;
1x;
x{;
18<
x;<
0]<
1`<
0g<
1j<
0.=
11=
0L=
1O=
0P=
0(=
02=
0+=
0k<
0N<
0a<
0O<
x<<
1r;
x|;
1u;
xW;
1:;
xM;
1;;
02<
0s;
0(<
0t;
0a;
09;
0C;
0<;
1D;
1b;
1)<
13<
xN;
xX;
x};
x=<
1b<
1l<
13=
1Q=
0R=
04=
0m<
0c<
x><
x~;
xY;
xO;
04<
0*<
0c;
0E;
0=;
0[;
0"<
0,<
xG;
xQ;
xv;
x6<
0[<
0e<
0,=
0J=
0Z7
0+;
1*;
1);
0(;
1';
0&;
0%;
1$;
0";
0!;
0}:
0z:
0$=
0!=
0H<
0G<
1n;
0m;
0l;
1k;
1c7
1b7
1`7
1}7
0{7
0z7
0x7
0u7
1s7
1r7
1p7
0/8
0.8
0,8
0)8
1'8
1&8
1$8
1!8
0?8
0>8
0<8
098
178
168
148
118
1P8
1O8
1M8
1J8
0G8
0F8
0D8
0%9
1$9
1#9
1!9
1|8
0y8
0x8
0v8
1V9
1U9
1S9
1P9
0O9
0N9
0L9
0I9
1*:
1):
1':
1$:
0#:
0":
0~9
0{9
05;
14;
13;
02;
1B2
1::
19:
17:
14:
03:
02:
00:
0-:
1f9
1e9
1c9
1`9
0_9
0^9
0\9
0Y9
059
149
139
119
1.9
0+9
0*9
0(9
1`8
1_8
1]8
1Z8
0W8
0V8
0T8
1'7
0%7
0$7
0"7
0}6
1{6
1z6
1x6
0G7
1F7
1E7
0D7
1C7
0B7
0A7
1@7
0>7
0=7
0;7
087
0Y7
0W7
1V7
1U7
0T7
1S7
0R7
0Q7
1P7
0N7
0M7
0K7
0H7
1A2
0?2
0>2
0<2
092
172
162
142
1p8
1o8
1m8
1j8
0g8
0f8
0d8
0E9
1D9
1C9
1A9
1>9
0;9
0:9
089
1v9
1u9
1s9
1p9
0o9
0n9
0l9
0i9
1J:
1I:
1G:
1D:
0C:
0B:
0@:
0=:
1>8
1=8
1;8
188
078
068
048
018
1.8
1-8
1+8
1(8
0'8
0&8
0$8
0!8
0}7
1|7
1{7
1y7
1v7
0s7
0r7
0p7
1l7
1k7
1i7
1f7
0c7
0b7
0`7
0'7
1&7
1%7
1#7
1~6
0{6
0z6
0x6
0A2
1@2
1?2
1=2
1:2
072
062
042
#950
0:!
0Y(
07!
#1000
1:!
1Y(
17!
0j1
0i1
1h1
0~=
0{=
0y=
0x=
1v=
0u=
0t=
1s=
0r=
1q=
1p=
0o=
00>
0->
0+>
0*>
0@>
1>>
0=>
0;>
0:>
0p>
1n>
0m>
0k>
0j>
0m=
0n=
1<A
1;A
19A
16A
1"A
1#A
b1011 \(
b1011 <!
#1001
1X(
1L'
1M'
1P'
1R'
1S'
0W(
0R&
0K&
0L&
0N&
1O&
0Q&
0y%
0z%
0|%
1}%
0!&
0d%
0e%
0g%
0j%
0;%
1<%
1=%
0>%
1?%
0@%
0A%
1B%
0D%
0E%
0G%
0J%
1M"
0N"
0O"
1A
1I-
0f
0c
0a
0`
1^
0]
0\
1[
0Z
1Y
1X
0W
1D!
1C!
1A!
1>!
1K
1J
1H
1E
1-.
0+.
0).
1'.
0%.
1#.
1!.
0}-
1y-
1w-
1s-
1m-
#1050
0:!
0Y(
07!
#1100
1:!
1Y(
17!
1..
0,.
0*.
1(.
0&.
1$.
1".
0~-
1z-
1x-
1t-
1n-
0_>
0^>
1]>
0EA
0BA
0@A
0?A
1=A
0<A
0;A
1:A
09A
18A
17A
06A
0eA
0bA
0`A
0_A
0"A
0#A
b1100 \(
b1100 <!
b10 .!
#1101
0X(
0L'
0E'
0F'
0H'
0K'
0M'
1N'
1O'
0P'
1Q'
0R'
0S'
1T'
0V'
0W'
0Y'
0\'
1>&
0?&
0@&
12-
1/-
1--
1,-
0*-
1)-
1(-
0'-
1&-
0%-
0$-
1#-
0X?
1`?
1b?
1h?
090
0i?
0l?
0c?
1a?
0Y?
06?
15?
1f?
1m?
04?
0n?
0g?
0O?
1o?
1I?
1i?
1l?
0m?
14?
1t?
13?
1n?
0o?
0I?
0t?
03?
0A
0I-
1j"
0i"
0h"
1g"
0f"
1e"
1d"
0c"
1a"
1`"
1^"
1["
0F?
0E?
1D?
0M!
0J!
0H!
0G!
1E!
0D!
0C!
1B!
0A!
1@!
1?!
0>!
1C(
1!%
0!(
0~'
1}'
0Q(
0K(
0H(
0E(
0D(
0T
0Q
0O
0N
1L
0K
0J
1I
0H
1G
1F
0E
0('
0''
1&'
#1150
0:!
0Y(
07!
#1200
1:!
1Y(
17!
0g*
0f*
1e*
b0 i*
1g0
0f0
0e0
1d0
0c0
1b0
1a0
0`0
1^0
1]0
1[0
1X0
1L0
1M0
0TA
0SA
1RA
b1101 \(
b1101 <!
#1201
16'
07'
08'
1V(
1"%
1k"
1n"
1p"
1q"
0s"
1t"
1u"
0v"
1w"
0x"
0y"
1z"
1/(
00(
01(
1}(
1!)
0')
1/)
0o!
0p!
0s!
0v!
0|!
190
00)
03)
1()
1+)
0")
1~(
1/"
1%)
0,)
1."
14)
0-"
05)
1-)
0&)
0s(
0.)
16)
1n(
0t(
0()
0."
10)
13)
1;)
1,"
04)
1-"
15)
06)
0n(
0;)
0,"
0f=
1e=
0C(
1o'
0I+
09+
0i+
0Y+
0L$
0j"
0g"
0e"
0d"
0a"
0`"
0^"
0["
0%%
0,$
0&$
0<0
0/
0.
1-
1W4
0V4
0U4
1T4
0S4
1R4
1Q4
0P4
1N4
1M4
1K4
1H4
1+5
0*5
0)5
1(5
0'5
1&5
1%5
0$5
1"5
1!5
1}4
1z4
1]5
0\5
0[5
1Z5
0Y5
1X5
1W5
0V5
1T5
1S5
1Q5
1N5
116
006
0/6
1.6
0-6
1,6
1+6
0*6
1(6
1'6
1%6
1"6
1~1
0}1
0|1
1{1
0z1
1y1
1x1
0w1
1u1
1t1
1r1
1o1
1Z3
1W3
1U3
1T3
0R3
1Q3
1P3
0O3
1N3
0M3
0L3
1K3
0!%
0:3
1I2
0B0
0A0
0@0
1d=
1J3
1G3
1E3
1D3
0B3
1A3
1@3
0?3
1>3
0=3
0<3
1;3
1e6
0d6
0c6
1b6
0a6
1`6
1_6
0^6
1\6
1[6
1Y6
1V6
1A6
0@6
0?6
1>6
0=6
1<6
1;6
0:6
186
176
156
126
1m5
0l5
0k5
1j5
0i5
1h5
1g5
0f5
1d5
1c5
1a5
1^5
1;5
0:5
095
185
075
165
155
045
125
115
1/5
1,5
1g4
0f4
0e4
1d4
0c4
1b4
1a4
0`4
1^4
1]4
1[4
1X4
0j#
0J#
1K=
1c:
1-=
1f:
1f<
1h:
1\<
1i:
07<
0k:
1-<
1l:
1#<
1m:
0w;
0n:
1\;
1o:
0R;
0p:
0H;
0q:
1>;
1r:
090
1!3
1?;
xB;
0I;
1L;
0S;
1V;
1];
x`;
0x;
1{;
1$<
x'<
1.<
x1<
08<
1;<
1]<
x`<
1g<
xj<
1.=
x1=
1L=
xO=
xP=
1(=
x2=
1+=
xk<
1N<
xa<
1O<
0<<
0r;
x2<
1s;
x(<
1t;
0|;
0u;
xa;
19;
0W;
0:;
0M;
0;;
xC;
1<;
xD;
1N;
1X;
xb;
1};
x)<
x3<
1=<
xb<
xl<
x3=
xQ=
xR=
x4=
xm<
xc<
0><
x4<
x*<
0~;
xc;
0Y;
0O;
xE;
x=;
0G;
0Q;
x[;
0v;
x"<
x,<
06<
x[<
xe<
x,=
xJ=
1Z7
1C(
1+;
0*;
0);
1(;
0';
1&;
1%;
0$;
1";
1!;
1}:
1z:
1#3
1w4
0v4
0u4
1t4
0s4
1r4
1q4
0p4
1n4
1m4
1k4
1h4
1K5
0J5
0I5
1H5
0G5
1F5
1E5
0D5
1B5
1A5
1?5
1<5
1}5
0|5
0{5
1z5
0y5
1x5
1w5
0v5
1t5
1s5
1q5
1n5
1Q6
0P6
0O6
1N6
0M6
1L6
1K6
0J6
1H6
1G6
1E6
1B6
1$=
1!=
1H<
1G<
0n;
1m;
1l;
0k;
1Q8
0P8
0O8
1N8
0M8
1L8
1K8
0J8
1H8
1G8
1E8
1B8
1%9
0$9
0#9
1"9
0!9
1~8
1}8
0|8
1z8
1y8
1w8
1t8
1W9
0V9
0U9
1T9
0S9
1R9
1Q9
0P9
1N9
1M9
1K9
1H9
1+:
0*:
0):
1(:
0':
1&:
1%:
0$:
1":
1!:
1}9
1z9
15;
04;
03;
12;
1:%
17%
15%
14%
02%
11%
10%
0/%
1.%
0-%
0,%
1+%
1[2
1!%
0B2
1;:
0::
09:
18:
07:
16:
15:
04:
12:
11:
1/:
1,:
1g9
0f9
0e9
1d9
0c9
1b9
1a9
0`9
1^9
1]9
1[9
1X9
159
049
039
129
019
109
1/9
0.9
1,9
1+9
1)9
1&9
1a8
0`8
0_8
1^8
0]8
1\8
1[8
0Z8
1X8
1W8
1U8
1R8
1D4
1C4
1A4
1>4
1=4
0<4
0;4
1:4
094
184
174
064
144
134
114
1.4
1$4
1#4
1!4
1|3
1{3
0z3
0y3
1x3
0w3
1v3
1u3
0t3
1k3
0j3
0i3
1h3
0g3
1f3
1e3
0d3
1G7
0F7
0E7
1D7
0C7
1B7
1A7
0@7
1>7
1=7
1;7
187
1!(
1W7
0V7
0U7
1T7
0S7
1R7
1Q7
0P7
1N7
1M7
1K7
1H7
1(2
0'2
0&2
1%2
0$2
1#2
1"2
0!2
1q8
0p8
0o8
1n8
0m8
1l8
1k8
0j8
1h8
1g8
1e8
1b8
1E9
0D9
0C9
1B9
0A9
1@9
1?9
0>9
1<9
1;9
199
169
1w9
0v9
0u9
1t9
0s9
1r9
1q9
0p9
1n9
1m9
1k9
1h9
1K:
0J:
0I:
1H:
0G:
1F:
1E:
0D:
1B:
1A:
1?:
1<:
1?8
0>8
0=8
1<8
0;8
1:8
198
088
168
158
138
108
1/8
0.8
0-8
1,8
0+8
1*8
1)8
0(8
1&8
1%8
1#8
1~7
1}7
0|7
0{7
1z7
0y7
1x7
1w7
0v7
1t7
1s7
1q7
1n7
1m7
0l7
0k7
1j7
0i7
1h7
1g7
0f7
1d7
1c7
1a7
1^7
1'7
0&7
0%7
1$7
0#7
1"7
1!7
0~6
1|6
1{6
1y6
1v6
1A2
0@2
0?2
1>2
0=2
1<2
1;2
0:2
182
172
152
122
0m+
b0 n+
b0 y+
0p+
1o+
0U(
0y$
0Q"
1}$
0!%
#1250
0:!
0Y(
07!
#1300
1:!
1Y(
17!
1g*
1x*
0*+
0)+
1(+
0G0
0g0
0d0
0b0
0a0
0^0
0]0
0[0
0X0
0'1
071
0G1
1K0
0W1
0Q1
0L0
0Z1
0n1
1~=
1{=
1y=
1x=
0v=
1u=
1t=
0s=
1r=
0q=
0p=
1o=
1m=
1n=
b1110 \(
b1110 <!
#1301
1W(
1R&
1;%
0<%
0=%
1>%
0?%
1@%
1A%
0B%
1D%
1E%
1G%
1J%
0(%
0{$
0"%
06$
0<$
1~$
0\$
0z#
0Z#
0k"
0n"
0p"
0q"
0t"
0u"
0w"
0z"
0R"
1?(
0@(
0A(
1?"
11(
0}(
0!)
1")
0~(
0/"
0%)
1&)
1s(
1()
1."
1@0
1n2
0I2
0e=
0o'
1n'
1/
0W4
0T4
0R4
0Q4
0N4
0M4
0K4
0H4
0+5
0(5
0&5
0%5
0"5
0!5
0}4
0z4
0]5
0Z5
0X5
0W5
0T5
0S5
0Q5
0N5
016
0.6
0,6
0+6
0(6
0'6
0%6
0"6
0~1
0{1
0y1
0x1
0u1
0t1
0r1
0o1
0Z3
0W3
0U3
0T3
0Q3
0P3
0N3
0K3
0%?
0}>
1f
1c
1a
1`
0^
1]
1\
0[
1Z
0Y
0X
1W
08@
0`?
190
0a?
09@
0/?
05?
0Z7
0d=
1D2
0e6
0b6
0`6
0_6
0\6
0[6
0Y6
0V6
0A6
0>6
0<6
0;6
086
076
056
026
0m5
0j5
0h5
0g5
0d5
0c5
0a5
0^5
0;5
085
065
055
025
015
0/5
0,5
0g4
0d4
0b4
0a4
0^4
0]4
0[4
0X4
0!(
1~'
0[2
1m2
0C(
0K=
0c:
1Y7
0-=
0f:
0f<
0h:
0\<
0i:
0-<
0l:
0#<
0m:
0\;
0o:
0>;
0r:
1B2
0?;
1B;
0];
1`;
0$<
1'<
0.<
11<
0]<
1`<
0g<
1j<
0.=
11=
0L=
1O=
0P=
0(=
02=
0+=
0k<
0N<
0a<
0O<
02<
0s;
0(<
0t;
0a;
09;
0C;
0<;
1D;
1b;
1)<
13<
1b<
1l<
13=
1Q=
0R=
04=
0m<
0c<
04<
0*<
0c;
0E;
0=;
0[;
0"<
0,<
0[<
0e<
0,=
0J=
1F2
0+;
0(;
0&;
0%;
0";
0!;
0}:
0z:
1!(
0~'
1~2
0w4
0t4
0r4
0q4
0n4
0m4
0k4
0h4
0K5
0H5
0F5
0E5
0B5
0A5
0?5
0<5
0}5
0z5
0x5
0w5
0t5
0s5
0q5
0n5
0Q6
0N6
0L6
0K6
0H6
0G6
0E6
0B6
0$=
0!=
0H<
0G<
0m;
0l;
0Q8
0N8
0L8
0K8
0H8
0G8
0E8
0B8
0%9
0"9
0~8
0}8
0z8
0y8
0w8
0t8
0W9
0T9
0R9
0Q9
0N9
0M9
0K9
0H9
0+:
0(:
0&:
0%:
0":
0!:
0}9
0z9
05;
02;
0;:
08:
06:
05:
02:
01:
0/:
0,:
0g9
0d9
0b9
0a9
0^9
0]9
0[9
0X9
059
029
009
0/9
0,9
0+9
0)9
0&9
0a8
0^8
0\8
0[8
0X8
0W8
0U8
0R8
0D4
0C4
0A4
0>4
0=4
0:4
084
074
044
034
014
0.4
0$4
0#4
0!4
0|3
0{3
0x3
0v3
0u3
0k3
0h3
0f3
0e3
133
0G7
0D7
0B7
0A7
0>7
0=7
0;7
087
0Y7
0W7
0T7
0R7
0Q7
0N7
0M7
0K7
0H7
0(2
0%2
0#2
0"2
0q8
0n8
0l8
0k8
0h8
0g8
0e8
0b8
0E9
0B9
0@9
0?9
0<9
0;9
099
069
0w9
0t9
0r9
0q9
0n9
0m9
0k9
0h9
0K:
0H:
0F:
0E:
0B:
0A:
0?:
0<:
0?8
0<8
0:8
098
068
058
038
008
0/8
0,8
0*8
0)8
0&8
0%8
0#8
0~7
0}7
0z7
0x7
0w7
0t7
0s7
0q7
0n7
0m7
0j7
0h7
0g7
0d7
0c7
0a7
0^7
0'7
0$7
0"7
0!7
0|6
0{6
0y6
0v6
0A2
0>2
0<2
0;2
082
072
052
022
0J3
0G3
0E3
0D3
0A3
0@3
0>3
0;3
0:%
07%
05%
04%
01%
00%
0.%
0+%
#1350
0:!
0Y(
07!
#1400
1:!
1Y(
17!
0x*
1w*
1*+
0M0
1j1
0~=
0{=
0y=
0x=
0u=
0t=
0r=
0o=
1l=
0>>
08>
0n>
0m=
0q>
0u>
1EA
1BA
1@A
1?A
0=A
1<A
1;A
0:A
19A
08A
07A
16A
1"A
1#A
b1111 \(
b1111 <!
#1401
1X(
1L'
1M'
0N'
0O'
1P'
0Q'
1R'
1S'
0T'
1V'
1W'
1Y'
1\'
0W&
0S&
0R&
0O&
0w%
0}%
1o%
0;%
0>%
0@%
0A%
0D%
0E%
0G%
0J%
1O"
0V(
1A(
1>"
0?"
090
1A
1I-
1A0
1-!
1f&
1e&
1c&
1`&
1_&
1[&
1X&
0f
0c
0a
0`
0]
0\
0Z
0W
1M!
1J!
1H!
1G!
0E!
1D!
1C!
0B!
1A!
0@!
0?!
1>!
1C(
190
0!(
1~'
1T
1Q
1O
1N
0L
1K
1J
0I
1H
0G
0F
1E
1'!
1&!
1$!
1!!
1~
1z
1w
0C(
1!(
0~'
#1450
0:!
0Y(
07!
#1500
1:!
1Y(
17!
0j1
1i1
1_>
0n=
b10000000000000000000000000000011 ~@
b0 !A
b1 !A
b10 !A
0$A
14A
13A
11A
1.A
1-A
1)A
1&A
0EA
0BA
0@A
0?A
0<A
0;A
09A
06A
0"A
0hA
b10000 \(
b10000 <!
b11 .!
#1501
0_'
0L'
0M'
0P'
0R'
0S'
0V'
0W'
0Y'
0\'
1h&
1k&
1o&
1p&
1s&
1u&
1v&
0:'
0W(
1@&
1N"
0O"
1X?
090
1Y?
16?
1B0
0I-
0A
1F?
05!
0M!
0H!
0G!
0D!
0C!
0A!
0>!
0D
1C(
190
0!(
1~'
0T
0O
0N
0K
0J
0H
0E
1('
0C(
1!(
0~'
